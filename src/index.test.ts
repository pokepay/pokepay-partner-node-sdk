// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfers, PaginatedTransaction, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, Check, Bill, AccountBalance, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfers, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateCpmTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, CreateTransaction, ListTransactions, GetCpmToken, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      expires_at_to: "2021-06-22T17:24:54.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      expires_at_from: "2015-12-20T18:53:01.000000+09:00",
      expires_at_to: "2021-11-29T11:03:12.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      per_page: 3222,
      expires_at_from: "2019-12-04T23:42:38.000000+09:00",
      expires_at_to: "2021-05-19T16:07:19.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      page: 1556,
      per_page: 5374,
      expires_at_from: "2019-08-29T14:43:17.000000+09:00",
      expires_at_to: "2018-03-01T10:04:37.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1",
      expires_at_to: "2022-06-09T18:09:43.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1",
      expires_at_from: "2016-05-06T19:55:01.000000+09:00",
      expires_at_to: "2018-10-15T15:18:48.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1",
      per_page: 9269,
      expires_at_from: "2018-02-15T06:17:39.000000+09:00",
      expires_at_to: "2023-09-08T12:01:14.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "246858c1-4e68-42a4-b936-16286fdad5d1",
      page: 454,
      per_page: 9557,
      expires_at_from: "2024-05-08T18:48:53.000000+09:00",
      expires_at_to: "2025-01-11T13:02:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      email: "o1YXyGaN9e@ZjSI.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      tel: "02-33-6419",
      email: "9Lt83IRfp6@apsZ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      external_id: "zwHUgb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxI",
      tel: "06041022",
      email: "j9hQa29Ltq@bzIU.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      is_suspended: false,
      external_id: "CtrgI5GH6w",
      tel: "026-64143069",
      email: "tYgKzfXu0N@7ZPQ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      created_at_to: "2018-08-02T06:27:30.000000+09:00",
      is_suspended: true,
      external_id: "u3BU56A0DovC2AWlgsj8A",
      tel: "02129-801",
      email: "ZwH1tkpyND@cuWx.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      created_at_from: "2023-03-02T16:53:14.000000+09:00",
      created_at_to: "2023-06-11T02:57:46.000000+09:00",
      is_suspended: true,
      external_id: "KRRC5UPfddKJfLPJmxAhDpkltxfpGBgKzL",
      tel: "0703-968-0478",
      email: "PCbHnT3R8f@Cd81.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      per_page: 8242,
      created_at_from: "2023-11-13T11:16:49.000000+09:00",
      created_at_to: "2018-10-02T00:10:08.000000+09:00",
      is_suspended: true,
      external_id: "zfSNwUPij0JCeKaErwIngTct5VctC8ahSG5",
      tel: "069502006",
      email: "7hNuqsd2aO@Eu5u.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "83d89830-77e8-4042-b7b4-f6ced0ed0b8a",
      page: 5312,
      per_page: 1048,
      created_at_from: "2016-05-10T16:03:58.000000+09:00",
      created_at_to: "2019-08-26T20:20:27.000000+09:00",
      is_suspended: true,
      external_id: "cKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSS",
      tel: "09730-0288",
      email: "7IImkvl5vC@AHh7.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "e7b824d1-e744-4fb9-b52b-e4f5e981839f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "e7b824d1-e744-4fb9-b52b-e4f5e981839f",
      external_id: "YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlnsa7zuy1tusdwe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "e7b824d1-e744-4fb9-b52b-e4f5e981839f",
      account_name: "n7Z",
      external_id: "wrrgdxWfKkMLwrBpORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "e7b824d1-e744-4fb9-b52b-e4f5e981839f",
      user_name: "l34SSSOxW72gqSjd8QPzbjt0rt7UmerReZGbvGgvAZbyLJ1Lea6an4P1AnQALadFsAzgfKjbtuXgZDedIJqTHGgnOhGiwZBj5AvHdO2AtfcLabY2vDzXzQx3sP8V6IT9VFC5bo0KXfPASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exAarzlUllrgsQZQAnUYeKIbZQuPYAKNLvT",
      account_name: "yMcIYlLoYSz5jRHNPv9LO3MtPyt1wTnktL8AYkBvD7caRgncONv8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e",
      external_id: "0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7",
      created_at_to: "2023-04-21T11:43:15.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7",
      created_at_from: "2018-03-16T16:55:25.000000+09:00",
      created_at_to: "2022-12-18T16:32:43.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7",
      per_page: 8419,
      created_at_from: "2020-07-02T19:31:29.000000+09:00",
      created_at_to: "2025-04-20T04:58:45.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "674b320f-ef75-4c8d-851c-61c8420234f7",
      page: 160,
      per_page: 4631,
      created_at_from: "2024-10-04T19:10:57.000000+09:00",
      created_at_to: "2022-08-31T16:15:46.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 5401,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 5544,
      upper_limit_amount: 137,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "0bd335ac-db35-43e1-822e-6fb7b8c4d288",
      lower_limit_amount: 7405,
      upper_limit_amount: 5031,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "xn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26Bic",
      shop_id: "b777ab07-9247-40e7-bdc3-a230d39aac9b",
      lower_limit_amount: 1799,
      upper_limit_amount: 4870,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2018-01-31T23:55:15.000000+09:00",
      shop_name: "onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73G",
      shop_id: "b7cbf943-88c0-4e1a-9a93-6fea790adc59",
      lower_limit_amount: 2022,
      upper_limit_amount: 7961,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2020-07-18T00:02:45.000000+09:00",
      created_to: "2023-01-27T21:59:55.000000+09:00",
      shop_name: "jOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdW",
      shop_id: "674bddf8-4648-4a18-aade-71cb3b56b1f9",
      lower_limit_amount: 2616,
      upper_limit_amount: 1823,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "2N74",
      created_from: "2024-02-02T03:01:44.000000+09:00",
      created_to: "2015-12-03T14:00:59.000000+09:00",
      shop_name: "UcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKv",
      shop_id: "099c3da7-3c28-4aae-a3a2-57499078b040",
      lower_limit_amount: 3978,
      upper_limit_amount: 2604,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "-DAj--LQ5ub3zTBCFB-6-z-h1-",
      description: "Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acl",
      created_from: "2023-03-09T20:53:50.000000+09:00",
      created_to: "2025-01-18T23:49:15.000000+09:00",
      shop_name: "cldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYu",
      shop_id: "298ad608-3a25-4ba7-bc77-50cdc97422a7",
      lower_limit_amount: 1162,
      upper_limit_amount: 2731,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "a1206432-6e63-4bac-b6fb-cfd9924d4348",
      organization_code: "01--e-o8-s44",
      description: "cwCrCw",
      created_from: "2022-07-06T09:57:50.000000+09:00",
      created_to: "2016-04-25T00:54:21.000000+09:00",
      shop_name: "41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN1",
      shop_id: "ef60015d-c3a9-4ae0-be34-c7249d4a272e",
      lower_limit_amount: 9247,
      upper_limit_amount: 7468,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "Nbs9HzTM",
      private_money_id: "ffb25218-ed17-4efa-a79a-560f2f74c5a8",
      organization_code: "8w7Wi9",
      description: "ukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQt",
      created_from: "2022-05-13T06:48:01.000000+09:00",
      created_to: "2023-03-26T06:13:03.000000+09:00",
      shop_name: "xVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS",
      shop_id: "7dc830b7-4d80-430b-83d3-c22712e2a70b",
      lower_limit_amount: 4753,
      upper_limit_amount: 5392,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 2734,
      bill_id: "reJUtTC5W",
      private_money_id: "42bc5e36-0d78-4d1f-9bf4-08e425e6814e",
      organization_code: "",
      description: "g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN59s59xI",
      created_from: "2018-11-17T18:23:02.000000+09:00",
      created_to: "2021-09-20T17:22:51.000000+09:00",
      shop_name: "TxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrc",
      shop_id: "7f2e3f2d-8b4b-46aa-a08b-5caf24104e23",
      lower_limit_amount: 3773,
      upper_limit_amount: 2750,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 4589,
      per_page: 9159,
      bill_id: "d3Ur1M",
      private_money_id: "e02f96c3-2f4d-422c-8989-c222766fa555",
      organization_code: "5-AtO6Y4-8V-J044C-",
      description: "04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87",
      created_from: "2020-08-19T09:39:10.000000+09:00",
      created_to: "2025-05-05T07:39:59.000000+09:00",
      shop_name: "01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccT",
      shop_id: "721f3a4d-21d5-414f-a12e-6146dc166a95",
      lower_limit_amount: 7765,
      upper_limit_amount: 8493,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "ce4b6a83-c3b9-4846-82ed-29e51111bd92",
      shop_id: "039c41b9-ecf7-4993-acc5-48c58a9a305c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "ce4b6a83-c3b9-4846-82ed-29e51111bd92",
      shop_id: "039c41b9-ecf7-4993-acc5-48c58a9a305c",
      description: "j2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "ce4b6a83-c3b9-4846-82ed-29e51111bd92",
      shop_id: "039c41b9-ecf7-4993-acc5-48c58a9a305c",
      amount: 461,
      description: "gjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "476a92fc-38a5-485a-8c4f-55184c297eeb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "476a92fc-38a5-485a-8c4f-55184c297eeb",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "476a92fc-38a5-485a-8c4f-55184c297eeb",
      description: "n6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOeAy8x",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "476a92fc-38a5-485a-8c4f-55184c297eeb",
      amount: 4246,
      description: "gmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtA",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 7608
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 4429,
      description: "N1MIRbysguh0xXqdkQK8VGfHRzulBqoP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 4673,
      is_onetime: false,
      description: "VuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 8188,
      usage_limit: 1884,
      is_onetime: true,
      description: "cuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8G"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 6905,
      expires_at: "2017-03-11T22:17:49.000000+09:00",
      usage_limit: 3882,
      is_onetime: true,
      description: "qo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 200,
      point_expires_at: "2023-08-05T18:40:57.000000+09:00",
      expires_at: "2018-12-31T12:22:09.000000+09:00",
      usage_limit: 7590,
      is_onetime: true,
      description: "AOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3W"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 7883,
      point_expires_in_days: 9288,
      point_expires_at: "2024-11-22T10:09:12.000000+09:00",
      expires_at: "2017-09-28T21:38:18.000000+09:00",
      usage_limit: 6693,
      is_onetime: false,
      description: "HXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 7635,
      bear_point_account: "958e9624-540d-4c57-8723-a0a9d519117a",
      point_expires_in_days: 9754,
      point_expires_at: "2016-11-27T03:16:26.000000+09:00",
      expires_at: "2016-07-06T15:22:09.000000+09:00",
      usage_limit: 7355,
      is_onetime: true,
      description: "vZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 4329,
      point_amount: 9908
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 1543,
      point_amount: 1497,
      description: "ZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 2007,
      point_amount: 5825,
      is_onetime: false,
      description: "7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 9899,
      point_amount: 9349,
      usage_limit: 8408,
      is_onetime: false,
      description: "6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 9908,
      point_amount: 8704,
      expires_at: "2019-04-26T10:28:52.000000+09:00",
      usage_limit: 8888,
      is_onetime: true,
      description: "hKD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 2375,
      point_amount: 1634,
      point_expires_at: "2019-01-28T23:19:44.000000+09:00",
      expires_at: "2017-04-01T10:05:47.000000+09:00",
      usage_limit: 8306,
      is_onetime: true,
      description: "6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 59,
      point_amount: 6448,
      point_expires_in_days: 3901,
      point_expires_at: "2019-05-31T03:19:07.000000+09:00",
      expires_at: "2023-03-07T18:36:03.000000+09:00",
      usage_limit: 3273,
      is_onetime: true,
      description: "gud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0Fc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      money_amount: 5589,
      point_amount: 4338,
      bear_point_account: "a334af1a-2e28-4ac2-9f0d-d5c86ad58a8e",
      point_expires_in_days: 1744,
      point_expires_at: "2024-08-25T06:38:19.000000+09:00",
      expires_at: "2023-11-25T04:31:05.000000+09:00",
      usage_limit: 9411,
      is_onetime: false,
      description: "s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9AR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 653
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 5893,
      description: "ntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71k"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 9193,
      is_onetime: true,
      description: "HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 6236,
      usage_limit: 1020,
      is_onetime: false,
      description: "qv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 6692,
      expires_at: "2024-02-12T12:16:30.000000+09:00",
      usage_limit: 7484,
      is_onetime: false,
      description: "pGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 9270,
      point_expires_at: "2018-07-24T11:01:23.000000+09:00",
      expires_at: "2017-09-13T10:22:26.000000+09:00",
      usage_limit: 4324,
      is_onetime: true,
      description: "6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 8165,
      point_expires_in_days: 3911,
      point_expires_at: "2017-07-19T23:16:18.000000+09:00",
      expires_at: "2023-11-29T12:55:51.000000+09:00",
      usage_limit: 109,
      is_onetime: false,
      description: "6KgKFTgUMIqeaKPydQtxKkP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "a45f5119-66c1-4d83-8943-e90665536ea2",
      point_amount: 320,
      bear_point_account: "4533aa8a-86c5-4415-bea8-1969ccba28df",
      point_expires_in_days: 3002,
      point_expires_at: "2021-06-16T18:57:59.000000+09:00",
      expires_at: "2025-02-10T15:11:10.000000+09:00",
      usage_limit: 1661,
      is_onetime: false,
      description: "2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "VBGp3Ank6BTTvgxHzzgdLI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "gPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["payment"],
      description: "HR9DfMzD3LCA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: [],
      description: "e9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "d2a78b36-0a9a-44bb-8449-4e4f7c72f599",
      is_modified: true,
      types: ["payment", "exchange_outflow", "topup"],
      description: "ZCa8lZmMT5mAFAIeN7EOzXnRC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "5-k--zO-",
      private_money_id: "d27dcd50-e64e-47a8-ab5d-6f01fcd83d44",
      is_modified: true,
      types: ["payment", "exchange_inflow", "topup", "exchange_outflow"],
      description: "ihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "c1f42715-00c7-4918-8a96-14d93a1c53e8",
      organization_code: "--4e83m-6eBI05-UhcMNDiMWNs",
      private_money_id: "1275a20d-f575-4f03-8b73-89067899d8cf",
      is_modified: true,
      types: ["payment", "topup"],
      description: "8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "c293229f-3c41-4568-bb21-42921b24baeb",
      transaction_id: "f04cfadd-8634-4b89-917b-e7ab1a3fe4ff",
      organization_code: "-O-jZqVz52G0z9ZsU---1lAFH-",
      private_money_id: "509032d7-4f0c-46b1-b6b6-29a82c0482cf",
      is_modified: true,
      types: [],
      description: "JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "r8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus5",
      terminal_id: "37546f1b-c37c-44a9-bc5e-2186a2a24b06",
      transaction_id: "4e0412b2-9ef0-46a0-8e4c-8a1506c51bcc",
      organization_code: "c--de",
      private_money_id: "60619926-9cde-4290-868e-f5f656d14862",
      is_modified: true,
      types: ["payment"],
      description: "G4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6Dpp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "911ca7d0-f5d9-4827-b775-e95a512d4aa5",
      customer_name: "s5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI",
      terminal_id: "9fbbc035-2a8b-4889-b6b8-e88efed435fb",
      transaction_id: "225e1a79-fdee-4501-9c7d-9db3906e6815",
      organization_code: "-lFMJhuzMj52041tG6VVKm",
      private_money_id: "c0c16d74-98b1-4649-9d03-5a8a09cbd77f",
      is_modified: false,
      types: ["payment", "topup", "exchange_inflow"],
      description: "50xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8M"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "ae334511-0765-486f-9c0d-edcf3e8b0e3e",
      customer_id: "b3b2b662-de6a-4280-910a-dbc23ff12be2",
      customer_name: "D5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdz",
      terminal_id: "181cba89-bcc8-4914-ae2e-94d3f896a5bb",
      transaction_id: "e7ee55b5-4981-44cb-abc9-c338061b0497",
      organization_code: "160SXNVg5HI0E--M3of8uvT3y-R",
      private_money_id: "70558694-cc11-440e-8740-148cb4fceabf",
      is_modified: true,
      types: ["payment"],
      description: "Xt2RyxOmHZB8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 2010,
      shop_id: "a034f464-edb9-4506-a6aa-69d4fe189182",
      customer_id: "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
      customer_name: "kCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1K",
      terminal_id: "bba6b527-08bf-4eab-bd96-5c50680aeffa",
      transaction_id: "8f5d660d-a12f-4f23-84b6-d976cfb4ff0b",
      organization_code: "5",
      private_money_id: "c9ccfaad-80bb-4890-b551-549fbd5e547c",
      is_modified: false,
      types: ["topup", "payment", "exchange_inflow"],
      description: "dUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 4642,
      per_page: 1461,
      shop_id: "93b3a66d-9268-4e8c-96c6-7394210a8a97",
      customer_id: "afbc5977-0b35-45a6-bb28-05b657a1079e",
      customer_name: "KDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UC",
      terminal_id: "bd1c44e0-6e42-4b95-88eb-adfb7c49e831",
      transaction_id: "7fa37eed-4d43-4f3c-b2b6-b411425247b0",
      organization_code: "x8B-7-9r6-0pOHLHkiIc4-QJ-7-W",
      private_money_id: "8a62e599-618c-4eea-929f-82ccb41a7319",
      is_modified: false,
      types: ["exchange_outflow", "payment"],
      description: "26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2016-05-07T18:29:57.000000+09:00",
      page: 2166,
      per_page: 9015,
      shop_id: "9b1905b8-6806-47f5-a51a-8a2cffb62ee9",
      customer_id: "0e260079-0ae0-4332-921a-f0180b856949",
      customer_name: "BQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ",
      terminal_id: "1bff689c-8cfb-475b-a32a-95326e526f27",
      transaction_id: "6420361e-5c1c-46c5-88dc-0bb32c278a0d",
      organization_code: "3L2s-s-K-dlK-ZVQ2Ha6p--ZP-dt--F",
      private_money_id: "430728ed-f65a-4efe-ae25-13a668e4d098",
      is_modified: false,
      types: [],
      description: "Uc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3Po"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2022-06-09T09:40:04.000000+09:00",
      to: "2024-01-21T10:13:05.000000+09:00",
      page: 7796,
      per_page: 2661,
      shop_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      customer_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      customer_name: "kQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotV",
      terminal_id: "9a784064-d673-47ae-88c4-6c21bce9089c",
      transaction_id: "42a65923-5789-4806-99b1-ce48e372a261",
      organization_code: "0AAIaQ-xN",
      private_money_id: "b56f45d2-992b-479d-88ca-1f4cea2e61d0",
      is_modified: true,
      types: ["payment"],
      description: "CA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "c45b89a7-750c-4523-8b1f-13292a3ee1b4",
      customer_id: "7e61f5b1-804d-4ecb-b24a-be1dfbc5e738",
      private_money_id: "04b41e75-b733-404a-a3f4-e200f3ac4d0b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "c45b89a7-750c-4523-8b1f-13292a3ee1b4",
      customer_id: "7e61f5b1-804d-4ecb-b24a-be1dfbc5e738",
      private_money_id: "04b41e75-b733-404a-a3f4-e200f3ac4d0b",
      description: "JHw13BJL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "c45b89a7-750c-4523-8b1f-13292a3ee1b4",
      customer_id: "7e61f5b1-804d-4ecb-b24a-be1dfbc5e738",
      private_money_id: "04b41e75-b733-404a-a3f4-e200f3ac4d0b",
      point_expires_at: "2019-08-26T18:52:09.000000+09:00",
      description: "URa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "c45b89a7-750c-4523-8b1f-13292a3ee1b4",
      customer_id: "7e61f5b1-804d-4ecb-b24a-be1dfbc5e738",
      private_money_id: "04b41e75-b733-404a-a3f4-e200f3ac4d0b",
      point_amount: 6855,
      point_expires_at: "2024-07-12T19:51:22.000000+09:00",
      description: "7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "c45b89a7-750c-4523-8b1f-13292a3ee1b4",
      customer_id: "7e61f5b1-804d-4ecb-b24a-be1dfbc5e738",
      private_money_id: "04b41e75-b733-404a-a3f4-e200f3ac4d0b",
      money_amount: 4800,
      point_amount: 4170,
      point_expires_at: "2021-12-18T11:08:45.000000+09:00",
      description: "9qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      request_id: "7e92d714-9b93-4e24-9027-37a49a1a8f28"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      metadata: "{\"key\":\"value\"}",
      request_id: "6d30e716-a7db-43e2-b8f6-cf43cc039371"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      description: "W8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmY",
      metadata: "{\"key\":\"value\"}",
      request_id: "01e307c7-1624-4f95-8556-0e7eb29580f2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      point_expires_at: "2017-01-19T10:34:21.000000+09:00",
      description: "dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFP",
      metadata: "{\"key\":\"value\"}",
      request_id: "736cb322-e746-48cb-9965-f5e7c254147c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      point_amount: 6273,
      point_expires_at: "2018-11-16T23:16:03.000000+09:00",
      description: "ESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn",
      metadata: "{\"key\":\"value\"}",
      request_id: "50ebae31-2c49-4182-aeaf-302ea04a3be9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      money_amount: 8831,
      point_amount: 1166,
      point_expires_at: "2018-09-19T06:27:32.000000+09:00",
      description: "yBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QR",
      metadata: "{\"key\":\"value\"}",
      request_id: "c9dc24c1-9759-49d0-9ff9-6511838bb3fe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "9003ad38-2664-44e5-854c-4b0e322a8392",
      customer_id: "58f0b2dc-d98a-4abe-8cbc-940333e29998",
      private_money_id: "55a9a23d-a4ef-4f97-9578-e83a17738214",
      bear_point_shop_id: "38901c6d-68e5-4f52-8297-8466b413512e",
      money_amount: 4038,
      point_amount: 1153,
      point_expires_at: "2019-10-31T03:17:20.000000+09:00",
      description: "PVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4",
      metadata: "{\"key\":\"value\"}",
      request_id: "6addf326-cea8-4164-bc47-33c9cc71a840"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      customer_id: "eb1967a2-bdb0-4b67-9db8-6a5229c0e2af",
      private_money_id: "148c38e0-46d8-4c39-8777-46bce8c82354",
      amount: 561
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      customer_id: "eb1967a2-bdb0-4b67-9db8-6a5229c0e2af",
      private_money_id: "148c38e0-46d8-4c39-8777-46bce8c82354",
      amount: 561,
      request_id: "60266045-f1e1-4e40-a5c4-5986b9e3a280"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      customer_id: "eb1967a2-bdb0-4b67-9db8-6a5229c0e2af",
      private_money_id: "148c38e0-46d8-4c39-8777-46bce8c82354",
      amount: 561,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "d280fb09-24b0-45fc-90f2-61de4e0b7097"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      customer_id: "eb1967a2-bdb0-4b67-9db8-6a5229c0e2af",
      private_money_id: "148c38e0-46d8-4c39-8777-46bce8c82354",
      amount: 561,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "c7a5ad75-d3ee-4069-b3bc-8baee0d2cd9f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      customer_id: "eb1967a2-bdb0-4b67-9db8-6a5229c0e2af",
      private_money_id: "148c38e0-46d8-4c39-8777-46bce8c82354",
      amount: 561,
      description: "A8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qz",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "c3752305-b407-48a6-8aca-0703a4b065c0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "VaYua2WPHw1UTjf1quigD2",
      shop_id: "c4e5c16c-75aa-40b2-8bca-b36e19d8e328",
      amount: 5671
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "VaYua2WPHw1UTjf1quigD2",
      shop_id: "c4e5c16c-75aa-40b2-8bca-b36e19d8e328",
      amount: 5671,
      request_id: "0a2efe16-712a-41a6-9b59-26b29a2abc89"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "VaYua2WPHw1UTjf1quigD2",
      shop_id: "c4e5c16c-75aa-40b2-8bca-b36e19d8e328",
      amount: 5671,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "99e6b7d0-20bb-4a95-8b6b-186d38213e1e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "VaYua2WPHw1UTjf1quigD2",
      shop_id: "c4e5c16c-75aa-40b2-8bca-b36e19d8e328",
      amount: 5671,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "e2891802-fe5f-48e7-a425-05ea0857ef95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "VaYua2WPHw1UTjf1quigD2",
      shop_id: "c4e5c16c-75aa-40b2-8bca-b36e19d8e328",
      amount: 5671,
      description: "1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOf",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "5562b4f0-18e9-4dd3-9ebb-effd439394c4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5b68793b-e3b0-43ac-8abb-5a5f63d4d475",
      receiver_id: "13a621fc-8c7b-4fe1-82ec-36a4709f1555",
      private_money_id: "a3d7f113-2bfb-4a26-8d72-a53171a06dfd",
      amount: 6952
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5b68793b-e3b0-43ac-8abb-5a5f63d4d475",
      receiver_id: "13a621fc-8c7b-4fe1-82ec-36a4709f1555",
      private_money_id: "a3d7f113-2bfb-4a26-8d72-a53171a06dfd",
      amount: 6952,
      request_id: "a2da0194-941a-470a-a561-043a9606233f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5b68793b-e3b0-43ac-8abb-5a5f63d4d475",
      receiver_id: "13a621fc-8c7b-4fe1-82ec-36a4709f1555",
      private_money_id: "a3d7f113-2bfb-4a26-8d72-a53171a06dfd",
      amount: 6952,
      description: "XbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98",
      request_id: "31d1d493-f1a9-4ffd-9223-693eb3bf5973"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5b68793b-e3b0-43ac-8abb-5a5f63d4d475",
      receiver_id: "13a621fc-8c7b-4fe1-82ec-36a4709f1555",
      private_money_id: "a3d7f113-2bfb-4a26-8d72-a53171a06dfd",
      amount: 6952,
      metadata: "{\"key\":\"value\"}",
      description: "DBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r",
      request_id: "f449ad93-fe89-47de-b928-0d5c7ac111a6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "7b3940f9-a529-4cfd-a9a7-7b386aca2d98",
      sender_private_money_id: "100077cb-a0df-4ebd-b6ac-a332b3ba35ad",
      receiver_private_money_id: "8269141d-4718-4df6-9a64-ce609d49a197",
      amount: 8592
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "7b3940f9-a529-4cfd-a9a7-7b386aca2d98",
      sender_private_money_id: "100077cb-a0df-4ebd-b6ac-a332b3ba35ad",
      receiver_private_money_id: "8269141d-4718-4df6-9a64-ce609d49a197",
      amount: 8592,
      request_id: "1e0eed0b-d089-4663-803d-701e6626897a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "7b3940f9-a529-4cfd-a9a7-7b386aca2d98",
      sender_private_money_id: "100077cb-a0df-4ebd-b6ac-a332b3ba35ad",
      receiver_private_money_id: "8269141d-4718-4df6-9a64-ce609d49a197",
      amount: 8592,
      description: "zKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJ",
      request_id: "998a8a85-4288-45cd-87ea-1e7ee335d38b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "6rf4CluMJ3q8UHdGY9c6av2ino",
      content: "Qmoszz",
      request_id: "zj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "6rf4CluMJ3q8UHdGY9c6av2ino",
      content: "Qmoszz",
      request_id: "zj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfE",
      description: "e2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new GetTransaction({
      transaction_id: "f62c2e14-2fb8-4458-a67b-bee6ada018b3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "6481f61a-2228-4de5-90c4-47010df61e71"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "6481f61a-2228-4de5-90c4-47010df61e71",
      description: "YA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["topup"],
      description: "etup"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["payment", "topup"],
      transfer_types: ["exchange", "coupon", "topup", "transfer"],
      description: "08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: true,
      transaction_types: ["payment"],
      transfer_types: ["campaign", "exchange", "topup"],
      description: "wG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0r"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "33f8bfce-3433-4791-861d-0fc56b8e915b",
      is_modified: true,
      transaction_types: ["payment", "transfer", "topup", "exchange"],
      transfer_types: ["payment", "coupon"],
      description: "tjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "c2f815c8-a360-4714-b381-99fb500650fc",
      private_money_id: "9d771807-484f-415f-acd4-adad18e1e1af",
      is_modified: false,
      transaction_types: [],
      transfer_types: [],
      description: "mhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "IISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGR",
      transaction_id: "a55f8af7-212f-451d-881b-f0bdd8555db1",
      private_money_id: "e4819ce7-f3aa-442e-80ac-eca6b39c6f05",
      is_modified: false,
      transaction_types: ["topup", "exchange", "payment", "transfer"],
      transfer_types: ["campaign"],
      description: "crIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "c624f552-688a-4949-97cd-5dddc9461ad9",
      customer_name: "7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvz",
      transaction_id: "e699e054-04e4-43df-86e6-fe3d5be039b0",
      private_money_id: "00bd405e-6e59-4b8a-b19b-45caac102b16",
      is_modified: false,
      transaction_types: ["payment", "topup", "transfer", "exchange"],
      transfer_types: ["exchange", "payment"],
      description: "s7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "T7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C6",
      customer_id: "0022abb8-512f-4267-ba01-cb4c7bddf736",
      customer_name: "nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKko",
      transaction_id: "eb7e297a-0580-4234-a4f5-eab45d209ef6",
      private_money_id: "edfbf171-464e-47a1-8d1e-0c74cf42826b",
      is_modified: false,
      transaction_types: [],
      transfer_types: [],
      description: "yJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "8470ffd6-c67e-4748-90ba-3e95d2bd4e13",
      shop_name: "FLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3",
      customer_id: "ab504349-7dd1-464b-9151-b9010663148b",
      customer_name: "b6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG",
      transaction_id: "3b92770b-6b3c-457f-bb09-158719436b14",
      private_money_id: "ef847494-d531-4dae-b9b8-d90ebeae6aef",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["payment"],
      description: "Cptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 1791,
      shop_id: "85aee32a-dc2d-4797-ab0e-7cdd97da4c2e",
      shop_name: "2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANG",
      customer_id: "bd1a73fa-4353-4697-9ae5-6234f9368c39",
      customer_name: "qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4",
      transaction_id: "490510c3-6eb2-48df-82a0-1187aa9eba9a",
      private_money_id: "38fdaf06-2238-4c89-bba8-d640a31802d7",
      is_modified: false,
      transaction_types: ["payment"],
      transfer_types: ["transfer", "topup", "coupon", "payment"],
      description: "leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 4827,
      per_page: 6776,
      shop_id: "af4d7e4a-0031-4775-a48c-64a95566c41c",
      shop_name: "EIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhD",
      customer_id: "fc2b04a1-e8ea-4e8a-9072-bdf4e0f8fc21",
      customer_name: "CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZm",
      transaction_id: "964ca051-3f7b-4798-acfe-dd22dd81ca18",
      private_money_id: "8f8dc594-6e55-4d87-9111-9ae75053261c",
      is_modified: false,
      transaction_types: ["transfer", "topup", "payment"],
      transfer_types: ["payment", "topup", "campaign", "transfer"],
      description: "VSstoEtPVo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2016-12-08T06:45:35.000000+09:00",
      page: 7779,
      per_page: 2498,
      shop_id: "bc96f8bf-6b04-4a2d-8281-583634d1989d",
      shop_name: "l7WDayqQLA",
      customer_id: "dcd236bb-8e87-4e0c-8b3e-9111d79fa2d8",
      customer_name: "yhWYdlIHfSBB",
      transaction_id: "24bdcc4b-0349-4331-8b90-36d1579fa76c",
      private_money_id: "e7ddd28d-0fb4-4863-8ba9-2b9d8a165536",
      is_modified: false,
      transaction_types: ["topup", "payment", "transfer"],
      transfer_types: ["transfer", "coupon", "payment", "exchange", "campaign", "topup"],
      description: "xjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2020-01-24T04:22:27.000000+09:00",
      to: "2016-01-07T00:33:13.000000+09:00",
      page: 7265,
      per_page: 9948,
      shop_id: "8c1a58f8-9693-44e4-bfd7-4ddbd4cabafb",
      shop_name: "d35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqs",
      customer_id: "a88e3080-5271-4f59-b302-a1a50908f1a5",
      customer_name: "PQB7j",
      transaction_id: "ac26cd11-e0b8-4e53-bbb1-299e2ca4374c",
      private_money_id: "be0f0ee3-58ca-4e9e-8db9-30bbb2564edd",
      is_modified: false,
      transaction_types: ["topup", "exchange"],
      transfer_types: ["topup", "campaign", "transfer", "exchange", "coupon", "payment"],
      description: "TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      contact_name: "9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_account_holder_name: "(",
      contact_name: "z14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_account: "3948232",
      bank_account_holder_name: " ",
      contact_name: "YI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmph"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_account_type: "current",
      bank_account: "1117604",
      bank_account_holder_name: "｢",
      contact_name: "sLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "9",
      bank_account_holder_name: "ｦ",
      contact_name: "O9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_branch_name: "xqMpLrB8ZQmhXHGSVgVcs3",
      bank_branch_code: "148",
      bank_account_type: "current",
      bank_account: "16",
      bank_account_holder_name: "\\",
      contact_name: "qOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_code: "9596",
      bank_branch_name: "ApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfA",
      bank_branch_code: "859",
      bank_account_type: "current",
      bank_account: "7402959",
      bank_account_holder_name: "I",
      contact_name: "6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Zyg3cEPs",
      name: "bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP",
      private_money_ids: ["afd055fe-3d9e-4760-a2b1-f677145e9fe3", "d9bc234a-f14c-41ca-87eb-dd49d8b577f6", "6f221fd4-639b-44da-aed2-93ce7791aba0", "ac602f0e-8cc1-4cf6-b73f-af84d234129e", "d3706aef-d1ad-4fe5-916a-8f554bc7c565", "f0ba8cbe-5a18-4796-8621-79faf8831bdf", "9ef13631-e0c7-4330-a297-3e1e846ce781", "82d82c5e-ea83-4477-8300-ac600d1e5046"],
      issuer_admin_user_email: "urxmaLHHuX@DOcu.com",
      member_admin_user_email: "ycPW2WYY40@yWZt.com",
      bank_name: "PKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uL",
      bank_code: "",
      bank_branch_name: "ppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa",
      bank_branch_code: "824",
      bank_account_type: "other",
      bank_account: "1",
      bank_account_holder_name: "\\",
      contact_name: "MWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 1688
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 6025,
      per_page: 966
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "UQrpqVtFI20RqU84wWVej7KjR",
      page: 5644,
      per_page: 2750
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "79YOuc2btz@I2Hv.com",
      external_id: "KaIy1dRKuz",
      page: 3197,
      per_page: 3181
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "018409-482",
      email: "SZr220xtZp@ZdQ9.com",
      external_id: "ssluYJHAlyl",
      page: 7249,
      per_page: 3057
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153p",
      tel: "094-867805",
      email: "hv7NIoqmlJ@pzKO.com",
      external_id: "YIsRtFF9xx8GHcZXN3Xa70o7nFXURkj",
      page: 8292,
      per_page: 8546
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "737-8052",
      address: "DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7Xmp",
      tel: "0192-4768",
      email: "sLJiqbQ3MQ@R9Cl.com",
      external_id: "lG6ahNcft22PrlsKWxGtQj4Oh",
      page: 8151,
      per_page: 8996
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "QAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEW",
      postal_code: "913-5254",
      address: "RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8Snp",
      tel: "0379-87648822",
      email: "UhCIHkbLQ7@KL6y.com",
      external_id: "doxdn1tpYM1z5XMrmRY7",
      page: 8163,
      per_page: 466
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "8de239c0-efc3-4557-b909-482cda900760",
      name: "s",
      postal_code: "097-9491",
      address: "PAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50",
      tel: "00331540125",
      email: "n0qZzCUWIZ@lu3n.com",
      external_id: "CPUHg3HpQOkzK7LlGZ5l2cQ",
      page: 9530,
      per_page: 4656
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "U--R---1g-D8c----QG6-2-T",
      private_money_id: "22a803d3-a2a0-4fb2-b74f-43b81651d6a3",
      name: "US6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aD",
      postal_code: "7403637",
      address: "mE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy",
      tel: "0289530797",
      email: "xNaz33MDlM@m45c.com",
      external_id: "417ClVPZa",
      page: 9386,
      per_page: 6662
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      organization_code: "g-gLJF001dZY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      shop_external_id: "tKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5",
      organization_code: "6l"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      shop_email: "bfNhFwjSSU@kqou.com",
      shop_external_id: "V2ULftf3",
      organization_code: "c-0D1a9w-7-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      shop_tel: "02793-516",
      shop_email: "8N8XvRYyNj@j6Lz.com",
      shop_external_id: "PNoFY0NPc7gW3tdaerbfAUj6MG",
      organization_code: "--1g3fH-4z-8--833-43"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      shop_address: "DSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4",
      shop_tel: "0921-67-8372",
      shop_email: "9NLriuIsMT@YyCU.com",
      shop_external_id: "OEa9YZaU",
      organization_code: "7-CD9g--u592--"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Cz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8Zx",
      shop_postal_code: "1683196",
      shop_address: "bOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwj",
      shop_tel: "0178516",
      shop_email: "qe5BUa3mrt@Cxkk.com",
      shop_external_id: "bdZ0Ff5nebRZC0",
      organization_code: "--6U"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      can_topup_private_money_ids: ["340c5363-6de5-4c22-8160-e751587fe2f8", "8a0966e8-6b3e-4975-9562-c9d96900d233", "93c967fe-beea-4cd6-a81c-20d9c70557e8", "531da6e2-5ce8-4834-928d-5aac1691dc00", "0b29450c-6fd7-46a4-b453-5c6a17dd840a", "0cb35793-9e8d-481c-a350-b5fb248ddc3a", "74498c11-e902-45c8-8075-0eb2fdfa62e7", "958fa3ab-2349-4470-b70f-4c481a57c890", "3c4d1684-bc90-436c-9392-e39fa9eb2943"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      private_money_ids: ["6f8d97f8-80bc-4ed9-ac96-534677f6809a", "30b6a25a-251a-4a7a-8224-0575c3f217a4", "e21fa2c8-e21e-48da-8938-c6f44f4a5a1e", "5e3dc17e-b0ea-4cba-b368-d600067d273e", "e0e69d36-f938-4dd3-a3dd-a3fcc73526da", "94d65f84-63aa-4bba-a733-277fb46ba861", "9b1485ac-9d14-4509-819c-51cd50f0b9a0", "8f18e71b-b2c5-4872-90df-95ad6b1523e3"],
      can_topup_private_money_ids: ["df69343b-a0d6-4d1b-91aa-b9b9d118fb26", "4a5afa6f-5030-4754-8082-198502cd7763", "6e4fd8c7-07a7-484a-a460-45261f704607", "2c485deb-99c9-464a-a704-27035d837452", "cff630cd-7913-44e1-a10b-782770f635e8", "1b61e4a4-b013-4a07-94ea-e0d97fb620aa", "e00ccf34-2442-4a38-a1b3-284bfc573843", "cc6bc4e2-a473-4573-a46e-d863edce7e69", "0e862142-184b-4932-98f9-d98fa6a46ccb", "6bf948d5-da82-41a4-b9fd-97c2de2a9870"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      organization_code: "-s-djZ4-D-Sh",
      private_money_ids: ["6bb267e9-25da-4ae8-808d-f8d59276c349", "83673a77-0ad5-443d-b273-5b517775a689", "953bf0e0-b40e-4a9b-bb9d-26b8fc8ecf55", "d7d5c222-84e9-4c6a-9f05-390f483a3693", "c4fe4126-295e-4f6f-b58f-b12137b9c735", "b745fd91-9b3a-432e-a4f9-d5284d9b993b", "ae8c5709-9a3e-4469-a08a-53c2cdbe40f8", "34d08a58-f6e2-4a4b-9759-9e0da227ea06", "af78f8fd-d33a-4f68-acf1-c7c9d521ccd1", "e8f35163-9841-4644-a641-912ee649e923"],
      can_topup_private_money_ids: ["abff721a-a93c-40e8-97c6-5b7c3b9d9ff7", "1eae83a3-a13b-4341-86d3-0baaacd7da5b", "82165317-cd6c-4a6c-b268-18acbf8312fe", "bfa17847-bceb-4bbb-85fa-a31615a0beba", "cd06e73f-a7ea-4cde-a131-fea9d8050b0d", "c0efe1ff-7c4e-4fa9-bda1-a7853e30bb00", "e819296d-f851-4c85-a7c8-cc2e10fe717c", "5f79c8c3-037b-4ad5-81d4-d1c7e56cdcc7", "59fb1bfc-747a-4a7b-ac91-eb35f80476b9", "16adceb0-6164-439c-b4c2-8a245d38423f"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      external_id: "Z4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xm",
      organization_code: "AQ9-VCU-4tNP-",
      private_money_ids: ["6f79b020-731d-4ebb-a56f-ce6c99045c4e", "e7181749-4d5f-43cc-9e4e-05bdef84dea3", "b56d54e2-dba1-4480-8856-2b2fae2bdd2f", "4e01d3bb-ecdf-458c-a391-4c7b1ffbd5f0", "2fd049db-f0de-47c6-8d00-89c7b256e5f6", "15fec9ba-715a-45b3-ad4e-a0b4bf53c8f8", "b567b033-f2f5-45f6-a1cc-a5ddff188a04", "5646d295-726e-41c0-a2f7-c9b11351b580", "6f1b9c1a-c1b2-4d20-981f-d07b7a056bae", "69e42085-040c-4749-a907-ab343884bfc3"],
      can_topup_private_money_ids: ["8f44e007-62b2-4a53-ba4a-ab4a6eac787c", "18c74147-695f-4118-b46c-e0cfd0d31b7f", "4d1c88a9-9816-488e-848b-0e02b4af2e8a", "6779574e-60fe-4318-bb53-0632dc549b49", "80a007db-f29e-4eea-a600-dc211d9cc9ab", "da361a37-0e9c-47a4-9535-16e281712b9f", "86735c37-fab2-4855-9457-82e2101c6fa1", "d2bc5316-e56a-4ca8-89d8-4fc7e7cdd866"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      email: "zCmZ2vkYmr@CrWw.com",
      external_id: "7I",
      organization_code: "VF--Y--P-PqIs-Vv-v0e-8e--2OO",
      private_money_ids: ["3e883094-8676-41d5-831e-2b30b2c9b362"],
      can_topup_private_money_ids: ["2cc24409-c000-4f8f-b331-a6681c15e996"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      tel: "06-4950-984",
      email: "evbrAQGpnY@omE2.com",
      external_id: "pD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2o",
      organization_code: "T-Z1cPz",
      private_money_ids: ["f1bfb13c-3e32-4c85-809e-4f5512f523bd", "5612e092-13ad-41cc-adfb-84b9813818cb"],
      can_topup_private_money_ids: ["1141ee9e-28f8-4cbc-b06a-9d9162808ad9", "89bc2e6b-89b7-425e-b37e-ea2a69b7085a", "fb1ff552-8f28-4ee9-907b-cce3f8e7451f", "c2d15dcf-2bbe-4dd4-bbbd-6500366cbe67", "937f615f-22b2-4c88-b327-1f133ca6d181", "c7944617-cae6-4da4-b547-c37d4c90873d", "bf7b5cd8-c617-4489-b2af-ea9619355d5e", "de34d7d8-b694-40b6-800c-42fc32c3419f", "d98c0394-2a6f-485d-94e0-b6fa6acdf240"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      address: "Tzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWp",
      tel: "0084-22626661",
      email: "iF0Y7dBxe8@hiTz.com",
      external_id: "wkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRG",
      organization_code: "",
      private_money_ids: ["1fdae598-363b-4db7-82d1-57362175865f", "66598604-ba41-4683-826d-d8735e82685d", "9cda0877-3f1a-4364-8041-0ecd0157d928", "07a4e41c-611f-4e33-894a-72f2cd4056af", "066b1677-70d6-42e2-b3b9-c37060e3bccd", "d97bd8f8-9ce6-4501-8dc3-2574229322bf", "3b3dea68-1c8c-4169-bdf6-74bbfcf5bbb1"],
      can_topup_private_money_ids: ["d91c78e1-e332-4745-9645-f1c86504cb46", "9e4cd36d-0aae-429b-9dd1-a677220fb134", "5a296e4f-a9ed-444a-b39c-d258364876dc", "df310baf-9886-4e72-a141-095eae98cda7"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "gAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XL",
      postal_code: "7789225",
      address: "BPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6S",
      tel: "0673-8936-7251",
      email: "2GvSwQUcru@YP4H.com",
      external_id: "5cCw5ExNqh4",
      organization_code: "-M--bd9KVRUY5Oz",
      private_money_ids: ["2086393c-7701-4666-b4f3-359d3c1c4342", "6ab704d4-39ab-44eb-a67f-b15b9463d893", "4f00b65a-6544-4dcb-836e-9fdec0148551", "76478c69-b2df-4667-89c2-3a6349bff5e7", "f32a0ef9-a065-44c8-8513-ed2d30bae1b0"],
      can_topup_private_money_ids: ["4b38b47e-26e5-42e3-92f2-a9aa32915e59", "fe8a6142-3c67-4c1f-98a7-c011d0c5f288", "a8993fef-6f2a-4b59-8a4e-552c746118e1", "c33eb352-e716-48c4-8889-1b33cd354978"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "861a16e1-db35-435d-9dda-c794c6b505d8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      can_topup_private_money_ids: ["3399b518-05de-426b-ad44-233fad6454e9", "a7fd1551-42dd-4daf-9aa2-465f0d6e9589", "cc668ad6-366d-4f00-8ee6-d29e45ff041d", "16969c17-b1a7-4202-a4be-b243507308d6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      private_money_ids: ["5b8a38a6-2477-4fc7-8a7b-ef5591b714af", "0fb9d8d2-c31c-42ae-9e4f-a7fdf97130e7", "7a6893a2-49f0-4a80-bdb1-b3854b5f8622", "52be44d6-96d4-4fce-8cf3-232a5a259174", "4b842f1f-33a4-454b-9d3e-00731143705e", "7995378f-94e2-4c6b-b2f7-c376a8f5468c", "e8bed33d-8cda-4f63-9e7c-647d3f55ef5a", "0271936d-b225-4aca-9c8c-ad87dd43f008", "cd2af7bc-3506-41de-a9c3-8a80b8d56f5a"],
      can_topup_private_money_ids: ["a2ee5575-f61c-4f7d-a465-a85c1a0e8de5", "54e2328a-b134-4477-831c-7e3923d182d2", "01d1086b-2027-4919-aef6-dbe1dfaed88e", "5203f467-f539-4080-83ad-1b93be8e6bb1", "8f3a2939-45f8-4052-ac31-a7c9f00b906c", "8749c7ca-8926-41bc-9d70-9147d73e80d8", "1d54ebad-550e-45f1-acae-6c5b9cf50c68"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      external_id: "d5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9I",
      private_money_ids: [],
      can_topup_private_money_ids: ["d2d2c8c4-6b90-4d93-9534-e0c6986a0d1a", "9f2dfd3c-77cc-445b-9d55-4f2526479cb5", "6b9e77b3-de48-438b-9ba9-ae14b47f9a34", "ce4f63a2-a763-4e54-8425-62c3458bbd61"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      email: "fuN856J50S@diAD.com",
      external_id: "G37",
      private_money_ids: ["ba01a3f9-228e-4fe4-8187-1447a382da45", "f4915d13-7bac-411c-8ecd-ddd0613e9f75", "c1359cd3-5ad5-4ca2-bd47-1f407f30ffc3", "98531b50-bebf-43ce-9f15-e45cd718d7c8", "0ef2a7e9-665d-4a9d-8604-4170ac388c30"],
      can_topup_private_money_ids: ["c45b428a-702b-46b3-9f64-ab14aef1e85e", "9c134ac2-3457-4aab-8705-1be3e1599cce", "340fb9e4-5591-4cd8-97a2-d1df43b79012", "80d9ab65-35b1-41f3-9d1f-a8492a68b26a", "64dfcd4c-9780-427f-9356-ecfaf463f6f4", "09984328-fcae-4e12-82a1-57c30f1ddbf3", "cce674f0-8f89-40e4-9308-3ff01ff7a6cb", "34092b84-562e-43e3-bc1f-2ba0fbc9fa08", "291e01bd-0afb-44c4-87d5-6bb8f9ca1516"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      tel: "0537514-123",
      email: "dQG1XtK0Uf@X1fz.com",
      external_id: "KZw4jAX5",
      private_money_ids: ["eb8bdfe4-a7d6-464d-9ac0-dbc1fbc4f623", "c7ace93e-52bb-41b3-8673-e6a7811a5ba1", "1c031d42-5d17-45fb-9797-d2fdff50af23", "5b378848-5854-4a61-922b-55dda9ff0598"],
      can_topup_private_money_ids: ["a5602371-f8aa-4c00-b8fc-7e8dd8c09ce9", "5678f5a5-92c8-4a8c-afae-3714eb615300", "cccb617c-27f6-46e2-94d7-9c1751e7336f", "65cb4350-414e-4662-8355-6c588eeecab3", "dbf302ba-f757-439c-ad8f-fc76c6ecbc7d", "dd7b3455-e630-42ec-ae0a-3b93e699fabd", "82af7659-2c25-4f7f-9737-7cdbf9b62bcd"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      address: "ulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQ",
      tel: "089-48488396",
      email: "iuzE1L2wv3@6YuE.com",
      external_id: "wp0IiR44I5KLiOrR",
      private_money_ids: ["47e17e0e-8023-4e4b-ac71-50336cbfb571", "b19e519c-faaa-4481-acdf-2cf821aabac0", "97441110-94f4-4dab-bc20-f1d40af40847", "78e0f3e9-2366-4821-8eb6-273fc955e1cb", "261c9a2c-a272-4e72-a1c4-76b5986060f5", "ebdeb5a4-a55f-4e9a-af13-83ea1317849c"],
      can_topup_private_money_ids: ["b765919f-e2f7-4d44-80a8-6ded30ff4651", "1b6043e4-d74c-4b4e-8fcb-89ad5f38b55c", "96ad063e-eeab-4a9f-bdc8-0f1e046f3bc9", "8af349ec-16c4-4784-a9e1-0ea4d29672a3", "bbccafa9-74bc-424f-a8ad-91bea5d22487", "8c43c7b7-4dc0-4723-b8de-875ccfe704d1", "8430285c-12e6-4c8c-80e8-84ce6bb5afbd", "7d06f885-0598-4162-80da-d6dfacb1e5bc", "747b4e04-b69d-4d0b-b32f-dad91de9d2e6", "589e2706-a947-47fb-a62e-039d483c9226"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      postal_code: "6883231",
      address: "OElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBN",
      tel: "04-218199",
      email: "tJmVTcXWtK@UzkN.com",
      external_id: "d35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblm",
      private_money_ids: ["bc2f016d-e9a5-4484-bd41-eb48f08aa952", "51deff53-ebaf-48d9-8356-1fb0309d701c"],
      can_topup_private_money_ids: ["6daed5c4-32ad-473b-9f99-12877f7f9da8", "2c2590f7-4bae-4e16-b1b0-bdd33fa35a04", "caa7ed9b-ddd9-40b4-bd38-c2da7e10bbef", "b94555c1-2220-4c01-b83a-9a6f528d7540", "714bb76a-8a19-4d39-a10a-696cd0f0b6f2"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "25a30e8d-4d20-4e84-ac33-444c12bf47b9",
      name: "EKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPI",
      postal_code: "9216677",
      address: "ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7",
      tel: "02657269",
      email: "CJBxTKH0YU@W8iw.com",
      external_id: "JuJPCjlazti",
      private_money_ids: ["9a0f194e-7421-49b3-b693-f965c8947662", "e2986bea-eca2-4454-b81f-d32241acc51a", "285e2336-b011-4a39-926a-e5bfa0739b59", "650e5fd2-c450-43c3-b11d-479b65470076", "e5e2346e-f2be-4dda-b1d9-25877c954c7a", "e81f2264-fa21-401f-93f2-6368c162839b", "b5c39e5f-1047-401e-a948-10b776573a0f", "dced38a9-b258-48cb-837e-99ce3f42ae17", "d2bf176f-a52e-4fc7-be44-01ac806d367c", "e2625f7b-ca70-49f1-b118-b3eacf8860d9"],
      can_topup_private_money_ids: ["2db57b55-7ce1-4b34-b2ce-0592fd74bd20", "2e02a13b-05ce-4598-b71f-cbea8095cee0", "131ab33f-2710-48d7-ab94-9617600ecfe2", "a0636dd4-438c-455b-81aa-51dbbb05d5b8", "3e66baf3-6385-4c28-8dd4-77b958b9028c", "829133c3-48dc-45ea-a259-285dfae18b03", "39771ce4-f89b-47e8-99f9-07d29a588d2c", "080bf4b9-5c5a-4d74-8757-c1e85f12dd14", "7a6abe3d-13bc-41cd-81cb-b4a8eba9e053", "870c175a-ec48-4851-a211-701590428f32"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 2272
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 5385,
      per_page: 8725
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "Zc--HqP-iMbc2-869Mjr",
      page: 216,
      per_page: 9400
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e",
      page: 5016
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e",
      per_page: 95,
      page: 3643
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e",
      from: "2023-01-15T18:21:28.000000+09:00",
      to: "2025-05-11T12:00:32.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e",
      from: "2023-12-12T13:12:30.000000+09:00",
      to: "2016-05-02T13:24:36.000000+09:00",
      page: 4850
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "0f08c3fb-dfca-481a-921e-b9b4b448974e",
      from: "2017-04-22T04:25:46.000000+09:00",
      to: "2023-07-03T04:17:46.000000+09:00",
      per_page: 8840,
      page: 3127
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      per_page: 421
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      page: 5697,
      per_page: 7401
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      to: "2018-11-30T01:56:49.000000+09:00",
      page: 845,
      per_page: 8542
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      from: "2018-05-14T15:25:58.000000+09:00",
      to: "2015-11-13T02:54:25.000000+09:00",
      page: 9188,
      per_page: 7181
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      is_modified: false,
      from: "2024-08-26T13:18:23.000000+09:00",
      to: "2025-07-03T23:07:19.000000+09:00",
      page: 428,
      per_page: 6270
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      type: "4",
      is_modified: true,
      from: "2024-12-14T07:53:16.000000+09:00",
      to: "2024-08-27T12:18:01.000000+09:00",
      page: 16,
      per_page: 5426
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      receiver_customer_id: "57c5ff4c-51a5-4902-a254-5988b7eb2e79",
      type: "IgVP7fI",
      is_modified: true,
      from: "2019-10-17T17:31:10.000000+09:00",
      to: "2018-10-30T05:11:44.000000+09:00",
      page: 5734,
      per_page: 9515
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "a656a3a0-fce8-4622-b36e-7b945eb14241",
      sender_customer_id: "9e0abf92-ae85-41f8-b93f-38505e6bcca4",
      receiver_customer_id: "37203993-0329-4ebe-871d-c9aef50ed983",
      type: "7HPwLX5lw",
      is_modified: true,
      from: "2023-04-07T12:49:41.000000+09:00",
      to: "2016-05-07T03:51:10.000000+09:00",
      page: 6774,
      per_page: 8024
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "af90bb57-3a66-40b4-a4ee-3d353d293a3b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "037ddef7-3c4e-4200-90f1-70b2fef91b72",
      shop_id: "a56342ea-bece-43ab-9c32-b2a23fca16b8",
      amount: 680
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "037ddef7-3c4e-4200-90f1-70b2fef91b72",
      shop_id: "a56342ea-bece-43ab-9c32-b2a23fca16b8",
      amount: 680,
      expires_in: 9985
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "037ddef7-3c4e-4200-90f1-70b2fef91b72",
      shop_id: "a56342ea-bece-43ab-9c32-b2a23fca16b8",
      amount: 680,
      description: "fQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtre",
      expires_in: 9418
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "6a7b0917-ff6d-44ff-a755-e80790762692"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "8d97b201-3ece-4d84-ad81-614c0b498c21"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "de5ac891-ca65-458d-9396-0aaad9126b4b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "de5ac891-ca65-458d-9396-0aaad9126b4b",
      expires_in: 8006
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "de5ac891-ca65-458d-9396-0aaad9126b4b",
      description: "XUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAd",
      expires_in: 9872
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "de5ac891-ca65-458d-9396-0aaad9126b4b",
      amount: 1035,
      description: "cz57ZOWsDr0Djt9M12BOno1AcjM96oftC7m",
      expires_in: 7958
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

