// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfers, PaginatedTransaction, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, Check, Bill, AccountBalance, ShopAccount, AccountDetail, AccountWithUser, Account, AccountStatus, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfers, RefundExternalTransaction, CreateExternalTransaction, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateCpmTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, CreateTransaction, ListTransactions, GetCpmToken, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      status: "pre-closed",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      is_suspended: false,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      expires_at_to: "2021-11-29T11:03:12.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      expires_at_from: "2016-01-14T04:41:23.000000+09:00",
      expires_at_to: "2019-12-04T23:42:38.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      per_page: 3431,
      expires_at_from: "2015-12-09T22:08:59.000000+09:00",
      expires_at_to: "2017-04-23T17:04:11.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      page: 284,
      per_page: 9044,
      expires_at_from: "2015-11-13T07:54:24.000000+09:00",
      expires_at_to: "2023-12-17T09:40:00.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e",
      expires_at_to: "2016-05-06T19:55:01.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e",
      expires_at_from: "2017-02-06T05:36:01.000000+09:00",
      expires_at_to: "2018-02-15T06:17:39.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e",
      per_page: 6531,
      expires_at_from: "2016-12-05T14:11:55.000000+09:00",
      expires_at_to: "2024-05-08T18:48:53.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "7904f936-1628-45d1-b660-c3df8183ef4e",
      page: 139,
      per_page: 8815,
      expires_at_from: "2021-02-05T14:03:31.000000+09:00",
      expires_at_to: "2019-01-16T17:00:54.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
      external_id: "XyGaN9eZjSIQORsTn19Lt83IRf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
      account_name: "6apsZzwHUgb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfddKJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCbHnT3R8fCd8115VzfSNwUPij0JCeK",
      external_id: "ErwIngTct5VctC8ahSG576Yk267hNuqsd2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
      status: "suspended",
      account_name: "Eu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl5vCAHh7QD95u0YIcm0Sp",
      external_id: "2RluFOAxJTKKlkJp5ENq52"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      email: "OLTcJlnsa7@zuy1.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      tel: "05-752-717",
      email: "rrgdxWfKkM@LwrB.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      external_id: "ORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36l34SSSOxW72gqSj",
      tel: "08-42-0402",
      email: "t7UmerReZG@bvGg.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      status: "pre-closed",
      external_id: "Zb",
      tel: "011-911045",
      email: "P1AnQALadF@sAzg.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      is_suspended: true,
      status: "pre-closed",
      external_id: "jbtuXgZDedIJ",
      tel: "000778729",
      email: "wZBj5AvHdO@2Atf.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      created_at_to: "2015-12-30T22:16:08.000000+09:00",
      is_suspended: false,
      status: "pre-closed",
      external_id: "LabY2vDzXzQx3sP8V6IT9VFC5bo0KX",
      tel: "0013145010",
      email: "0hMJ4nPgNJ@OUuV.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      created_at_from: "2019-12-05T13:57:19.000000+09:00",
      created_at_to: "2022-02-22T18:14:24.000000+09:00",
      is_suspended: false,
      status: "suspended",
      external_id: "SOX0vTgyFK1FOp7pl9MWii2exA",
      tel: "017580-734",
      email: "QZQAnUYeKI@bZQu.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      per_page: 4748,
      created_at_from: "2023-12-18T01:39:45.000000+09:00",
      created_at_to: "2020-07-26T04:04:23.000000+09:00",
      is_suspended: false,
      status: "pre-closed",
      external_id: "LvTyMcIYlLoYSz5",
      tel: "0284-00934",
      email: "Pyt1wTnktL@8AYk.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "76ed671d-bd16-408a-9d0c-cda580df7f8f",
      page: 5473,
      per_page: 3523,
      created_at_from: "2022-05-20T14:09:12.000000+09:00",
      created_at_to: "2023-11-02T02:20:46.000000+09:00",
      is_suspended: false,
      status: "active",
      external_id: "7caRgncONv8Kje2pU",
      tel: "01-45-879",
      email: "AkJDB6ZsUU@sk6u.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
      external_id: "ysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0p"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
      account_name: "47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2H",
      external_id: "jQnZoVWhOdLDSpe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
      user_name: "9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS",
      account_name: "m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3Mioe",
      external_id: "O7gkONNAjBCYm4KWE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
      created_at_to: "2018-07-26T01:51:22.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
      created_at_from: "2018-01-29T16:49:46.000000+09:00",
      created_at_to: "2020-10-29T13:55:31.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
      per_page: 5995,
      created_at_from: "2019-06-15T15:13:17.000000+09:00",
      created_at_to: "2025-07-20T23:08:45.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
      page: 6078,
      per_page: 727,
      created_at_from: "2020-09-08T05:35:06.000000+09:00",
      created_at_to: "2023-01-05T01:29:12.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 1104,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 5938,
      upper_limit_amount: 2114,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "85273399-f1d9-47d3-811f-1e55e8761be6",
      lower_limit_amount: 4711,
      upper_limit_amount: 9822,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "tCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMU",
      shop_id: "34fb4cd1-274e-4718-aa21-c61886c9f18a",
      lower_limit_amount: 5532,
      upper_limit_amount: 3526,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2023-03-11T08:18:04.000000+09:00",
      shop_name: "AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy",
      shop_id: "7ca44a38-471f-4904-8332-b98592954ace",
      lower_limit_amount: 3255,
      upper_limit_amount: 2990,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2021-11-23T07:22:36.000000+09:00",
      created_to: "2019-01-01T10:31:16.000000+09:00",
      shop_name: "DUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAu",
      shop_id: "114060c5-2995-4de1-b70a-8ed63f189c03",
      lower_limit_amount: 9032,
      upper_limit_amount: 9337,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn",
      created_from: "2017-04-08T06:45:11.000000+09:00",
      created_to: "2015-10-20T02:23:52.000000+09:00",
      shop_name: "m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOu",
      shop_id: "c78d25bf-0441-4f0b-a1eb-70a81b51d239",
      lower_limit_amount: 5252,
      upper_limit_amount: 6159,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "-3w-IvvhNr--o6-nbWsiw7-3301--",
      description: "DNNhHR4jcwCrCwplp",
      created_from: "2016-04-25T00:54:21.000000+09:00",
      created_to: "2023-09-16T11:09:07.000000+09:00",
      shop_name: "1muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u",
      shop_id: "cbd78f88-c62f-4afc-b0a9-6ded7735a6dd",
      lower_limit_amount: 7338,
      upper_limit_amount: 5323,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "c8ffb708-8ef2-4b28-ae97-4c9735b34e53",
      organization_code: "uoMXo82-QI94Y-786-b8BG-P",
      description: "GgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZ",
      created_from: "2016-03-07T05:25:00.000000+09:00",
      created_to: "2018-05-07T00:50:25.000000+09:00",
      shop_name: "kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YW",
      shop_id: "cdc0a53e-fa12-443d-a6d1-a1f4e3238b99",
      lower_limit_amount: 4226,
      upper_limit_amount: 2624,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "Vhq9RVZQG",
      private_money_id: "8eaabba6-4636-47a9-a289-b5dc6b658323",
      organization_code: "U",
      description: "soXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CS",
      created_from: "2016-05-30T21:32:17.000000+09:00",
      created_to: "2023-10-24T08:53:45.000000+09:00",
      shop_name: "reJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovf",
      shop_id: "f5a8f42b-565d-4f96-9058-7e887a00cc51",
      lower_limit_amount: 7248,
      upper_limit_amount: 8776,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 5780,
      bill_id: "jHLVEtSIa",
      private_money_id: "21f309fb-e6f8-40dd-af5a-baa9d6460b00",
      organization_code: "1b22A-0--0Xd1r1",
      description: "OzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTu",
      created_from: "2017-01-19T20:24:08.000000+09:00",
      created_to: "2025-02-19T13:15:58.000000+09:00",
      shop_name: "3fmfJoVUvvyWz4",
      shop_id: "41557e18-4ee1-493a-a596-6e2073cf0994",
      lower_limit_amount: 2244,
      upper_limit_amount: 6668,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 6106,
      per_page: 9627,
      bill_id: "59s",
      private_money_id: "21d1a897-68b5-4439-a9f8-1707c1b8f78a",
      organization_code: "zkwPP1QjI",
      description: "UvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1Gs",
      created_from: "2021-01-27T11:46:49.000000+09:00",
      created_to: "2022-01-19T03:44:54.000000+09:00",
      shop_name: "XjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ",
      shop_id: "29980f0e-a527-4ee0-bc39-c8067b4ddf26",
      lower_limit_amount: 3893,
      upper_limit_amount: 724,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
      shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
      shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b",
      description: "G4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
      shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b",
      amount: 1947,
      description: "GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
      description: "T5bk20dIuBp2e25agSXyEGickpeze5",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
      amount: 4023,
      description: "yzhltNB5ed",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 2816
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 6850,
      description: "8n6abEccT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 8661,
      is_onetime: false,
      description: "FUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 4296,
      usage_limit: 5837,
      is_onetime: true,
      description: "x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPug"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 4581,
      expires_at: "2018-11-09T21:43:48.000000+09:00",
      usage_limit: 3848,
      is_onetime: false,
      description: "JLdESdgB4DMlPhuAgx6J23S5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 2145,
      point_expires_at: "2019-03-24T07:16:36.000000+09:00",
      expires_at: "2020-12-25T04:51:28.000000+09:00",
      usage_limit: 4385,
      is_onetime: true,
      description: "XOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 6140,
      point_expires_in_days: 6303,
      point_expires_at: "2022-04-04T06:20:22.000000+09:00",
      expires_at: "2019-12-08T18:06:25.000000+09:00",
      usage_limit: 3701,
      is_onetime: true,
      description: "0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 6910,
      bear_point_account: "1cfecc92-c98c-4978-bc82-b1e4453b2968",
      point_expires_in_days: 2261,
      point_expires_at: "2019-03-17T05:12:51.000000+09:00",
      expires_at: "2019-04-14T16:51:46.000000+09:00",
      usage_limit: 5345,
      is_onetime: true,
      description: "VM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 6705,
      point_amount: 3704
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 4896,
      point_amount: 1767,
      description: "8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 9393,
      point_amount: 1004,
      is_onetime: true,
      description: "yARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 1690,
      point_amount: 7929,
      usage_limit: 840,
      is_onetime: true,
      description: "bteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 9188,
      point_amount: 6210,
      expires_at: "2021-10-13T03:24:11.000000+09:00",
      usage_limit: 5133,
      is_onetime: false,
      description: "zD3agMTA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 7386,
      point_amount: 7924,
      point_expires_at: "2022-08-04T16:28:11.000000+09:00",
      expires_at: "2016-02-26T14:19:06.000000+09:00",
      usage_limit: 5613,
      is_onetime: true,
      description: "viHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 4329,
      point_amount: 9908,
      point_expires_in_days: 1544,
      point_expires_at: "2017-06-24T09:15:27.000000+09:00",
      expires_at: "2024-06-02T21:18:13.000000+09:00",
      usage_limit: 760,
      is_onetime: false,
      description: "8N4p4uCNZaugRp11iMcrfILoN8ZP7287J"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      money_amount: 8362,
      point_amount: 9185,
      bear_point_account: "d6ff851a-8bef-4e59-9f1f-e49ad55e179d",
      point_expires_in_days: 5825,
      point_expires_at: "2023-06-11T04:54:02.000000+09:00",
      expires_at: "2017-03-08T05:13:35.000000+09:00",
      usage_limit: 8458,
      is_onetime: true,
      description: "1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0ns"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 4178
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 7999,
      description: "0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2k"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 4323,
      is_onetime: false,
      description: "hNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 3566,
      usage_limit: 8522,
      is_onetime: false,
      description: "R6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 5898,
      expires_at: "2022-02-05T14:38:26.000000+09:00",
      usage_limit: 8700,
      is_onetime: false,
      description: "EIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 1324,
      point_expires_at: "2017-09-19T12:32:25.000000+09:00",
      expires_at: "2022-08-07T04:05:45.000000+09:00",
      usage_limit: 2037,
      is_onetime: false,
      description: "NAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLix"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 5777,
      point_expires_in_days: 5743,
      point_expires_at: "2019-12-31T10:32:39.000000+09:00",
      expires_at: "2022-10-23T16:55:46.000000+09:00",
      usage_limit: 7857,
      is_onetime: false,
      description: "Wqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
      point_amount: 5256,
      bear_point_account: "1c1e7409-12c4-4775-8287-f6ad37e0a041",
      point_expires_in_days: 1467,
      point_expires_at: "2023-03-23T06:40:54.000000+09:00",
      expires_at: "2016-05-08T05:59:07.000000+09:00",
      usage_limit: 2621,
      is_onetime: true,
      description: "u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "6PUopGrOCijX4VQZjHwhb9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "V9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["exchange_outflow", "payment", "exchange_inflow"],
      description: "mm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "V4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "49c5a8cd-d65e-4c40-a425-aa4692b90b1e",
      is_modified: false,
      types: ["topup", "payment"],
      description: "KuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "z-p-g--9W-l---QRTs---lt858-8ZqO",
      private_money_id: "2c724c4d-7e84-4d3f-b074-3b73c1d4f0f0",
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "BqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "cce34fb6-1f3a-49da-9c22-b6ce8f3bfe33",
      organization_code: "06aNr--TRJ9t-4e8",
      private_money_id: "83e1bc1e-add3-4ef8-8ce3-8aca983c79a6",
      is_modified: true,
      types: ["exchange_inflow"],
      description: "0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "40d00e31-27d4-4421-9d54-b7faf772fb47",
      transaction_id: "ecb9ada3-b794-4e40-a7a7-80d53d9a9730",
      organization_code: "AyiDf-0j9A4---eRn-MA-D",
      private_money_id: "1fd3990f-613e-4ce7-afa1-569daff50ac0",
      is_modified: true,
      types: ["exchange_inflow", "payment"],
      description: "UAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "t9CEIs7P52Qn8Ps6rGg4gxhQEP",
      terminal_id: "539ace40-fe82-4d48-a65d-b9ec2e843b44",
      transaction_id: "5ff9d6cd-fbe7-4104-ba29-1fef202e75b7",
      organization_code: "-6LEf9i1IKk8-70--o",
      private_money_id: "e00563f5-ff8a-450b-83b4-e24b0230f239",
      is_modified: true,
      types: [],
      description: "0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "7845d84f-c977-4ef1-90ee-1724e705f1fe",
      customer_name: "kaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMg",
      terminal_id: "ac255a21-4c61-49b8-885e-2c3b5040773d",
      transaction_id: "3e67751f-f5bd-4e50-9548-42cc8147b866",
      organization_code: "J3--X--9E-G-E2P-",
      private_money_id: "3aab0920-bff4-4ee0-8c17-b9e4e70ece32",
      is_modified: false,
      types: ["topup"],
      description: "koJp4sttlPyu0h"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "46674018-9d0f-42de-a0df-89047e73560a",
      customer_id: "e166434c-5654-4266-9b0a-8a16ecb6443f",
      customer_name: "3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3",
      terminal_id: "906e6815-2896-4921-bc8d-dd76b3a15941",
      transaction_id: "cfcf5b64-2d67-46b2-972c-d97afde65e18",
      organization_code: "A-uzM",
      private_money_id: "8420b140-eae9-4fa6-a556-2bc201996546",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "VEu5jHLt1IIKsQ450x"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 6719,
      shop_id: "34ee27d5-efcd-4db6-a05b-440d3f7b85bb",
      customer_id: "ea48d2cf-e40a-4f35-9968-c6df6f61b707",
      customer_name: "I4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsryn",
      terminal_id: "ba8a3ac6-c090-4b7b-bbfa-2b6c40b625e5",
      transaction_id: "b02690a4-2aaa-41f1-96fa-a5da320c20bf",
      organization_code: "-3y-Rr7m-r991-u-",
      private_money_id: "d08b1b32-f994-47a8-9296-ec8fdb08c33e",
      is_modified: false,
      types: [],
      description: "OmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 4323,
      per_page: 7523,
      shop_id: "a92b9a11-f203-4a4f-8bf2-1e5bd6425b71",
      customer_id: "97e01aa5-f6df-42c5-8076-2f74c0716dc8",
      customer_name: "mLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9l",
      terminal_id: "2ba3e5a5-59d2-4656-a89c-c1a75a1bd74d",
      transaction_id: "98fb7a28-fd05-4c28-8310-301358ba6fc1",
      organization_code: "gi-9w--1s",
      private_money_id: "9d9961da-04a8-4d28-827d-4e90d891f6b0",
      is_modified: false,
      types: ["exchange_inflow", "payment", "topup", "exchange_outflow"],
      description: "o7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2021-05-01T10:27:25.000000+09:00",
      page: 8663,
      per_page: 6013,
      shop_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      customer_id: "a337952c-6a6c-4cb8-a981-1cdf06d87aa2",
      customer_name: "3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMea",
      terminal_id: "253c57e9-d5a5-4593-94bf-87c5d4e411e4",
      transaction_id: "b6b76023-a152-4aec-a760-13d0a61e0e8f",
      organization_code: "-R--VY6Id6z7n97wgz",
      private_money_id: "3058b758-399e-4705-be3a-125bd40a2d0d",
      is_modified: false,
      types: ["exchange_inflow", "payment", "exchange_outflow"],
      description: "2DjUex8F"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2020-10-27T23:12:40.000000+09:00",
      to: "2016-05-07T18:29:57.000000+09:00",
      page: 2166,
      per_page: 9015,
      shop_id: "9b1905b8-6806-47f5-a51a-8a2cffb62ee9",
      customer_id: "0e260079-0ae0-4332-921a-f0180b856949",
      customer_name: "BQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ",
      terminal_id: "1bff689c-8cfb-475b-a32a-95326e526f27",
      transaction_id: "6420361e-5c1c-46c5-88dc-0bb32c278a0d",
      organization_code: "3L2s-s-K-dlK-ZVQ2Ha6p--ZP-dt--F",
      private_money_id: "430728ed-f65a-4efe-ae25-13a668e4d098",
      is_modified: false,
      types: [],
      description: "Uc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3Po"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "63474c6c-907e-4aa9-be73-322520264a64",
      customer_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      private_money_id: "1b984778-0255-4354-a2fe-f113e9606a70"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "63474c6c-907e-4aa9-be73-322520264a64",
      customer_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      private_money_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      description: "kQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "63474c6c-907e-4aa9-be73-322520264a64",
      customer_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      private_money_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      point_expires_at: "2021-06-06T22:19:39.000000+09:00",
      description: "1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "63474c6c-907e-4aa9-be73-322520264a64",
      customer_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      private_money_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      point_amount: 1179,
      point_expires_at: "2023-02-03T13:27:12.000000+09:00",
      description: "j4qDxwlIsjYdDsgNzWfMVYN8tFOR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "63474c6c-907e-4aa9-be73-322520264a64",
      customer_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      private_money_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      money_amount: 9065,
      point_amount: 8097,
      point_expires_at: "2024-08-26T02:07:07.000000+09:00",
      description: "N1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      request_id: "c49303f4-ae0e-43c3-8fbd-5f00972e2635"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      metadata: "{\"key\":\"value\"}",
      request_id: "3841e406-3b8e-4ca8-a079-da5e1837b570"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      description: "TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIS",
      metadata: "{\"key\":\"value\"}",
      request_id: "bc37860c-a363-4ae6-b1b8-ccca4c465e88"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      point_expires_at: "2021-01-03T04:16:06.000000+09:00",
      description: "bwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrr",
      metadata: "{\"key\":\"value\"}",
      request_id: "7eaf27c7-d8eb-4220-ad08-edaffa658fc7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      point_amount: 6870,
      point_expires_at: "2016-12-25T03:11:53.000000+09:00",
      description: "z7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBz",
      metadata: "{\"key\":\"value\"}",
      request_id: "0a9b34d3-2b8f-433b-8fef-db01f2c54019"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      money_amount: 372,
      point_amount: 4276,
      point_expires_at: "2023-01-02T14:18:11.000000+09:00",
      description: "9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn",
      metadata: "{\"key\":\"value\"}",
      request_id: "1417e536-7921-4c5a-a239-539d82972cfe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "96499986-3c2b-4313-965f-e28d00dccdb9",
      customer_id: "7ca49b5d-13fc-43f1-ba69-e70e8f40d8b8",
      private_money_id: "1f6e3fbc-1ec8-4ac6-baab-38f8167dacda",
      bear_point_shop_id: "3c47f02f-b0d8-4198-9b03-db70e8598630",
      money_amount: 8164,
      point_amount: 9739,
      point_expires_at: "2020-07-14T19:10:39.000000+09:00",
      description: "KPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqY",
      metadata: "{\"key\":\"value\"}",
      request_id: "56c98a9c-df50-469c-a90c-49fe2d004511"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "e0f8f56e-2d5c-4211-bc2d-9eada256e0b4",
      customer_id: "6addf326-cea8-4164-bc47-33c9cc71a840"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb",
      private_money_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      amount: 3165
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb",
      private_money_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      amount: 3165,
      request_id: "535f40b8-6a52-42af-a0d8-ac39e593f147"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb",
      private_money_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      amount: 3165,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "168946bc-2354-46ed-b145-f1e17b934e40"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb",
      private_money_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      amount: 3165,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "e0bfc0c4-5986-4280-ad48-fb0966d724b0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "19ec9c26-0cf8-4a43-84a6-c941ba22f956",
      customer_id: "391b6c5e-b8d8-4775-90b8-5977ea6e00bb",
      private_money_id: "8cb8e650-d31b-4d46-a4cd-adc998bdff2b",
      amount: 3165,
      description: "runisLVA8D7RtvLwR",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "9b897b81-dca8-4582-916d-fd17910bc112"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "XijHIyMGxrgTxrmP2c2b7A",
      shop_id: "87d69bf1-dee4-4740-a13e-b9f1346792fe",
      amount: 8830
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "XijHIyMGxrgTxrmP2c2b7A",
      shop_id: "87d69bf1-dee4-4740-a13e-b9f1346792fe",
      amount: 8830,
      request_id: "98764ff2-d829-4e19-99d2-a0bc4399c61b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "XijHIyMGxrgTxrmP2c2b7A",
      shop_id: "87d69bf1-dee4-4740-a13e-b9f1346792fe",
      amount: 8830,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "9486b2e1-d355-4a21-b474-13f30de0e74e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "XijHIyMGxrgTxrmP2c2b7A",
      shop_id: "87d69bf1-dee4-4740-a13e-b9f1346792fe",
      amount: 8830,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "e72f260f-4171-4180-994f-ab11e386d6a2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateCpmTransaction({
      cpm_token: "XijHIyMGxrgTxrmP2c2b7A",
      shop_id: "87d69bf1-dee4-4740-a13e-b9f1346792fe",
      amount: 8830,
      description: "thYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGA",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "79b3254b-5214-4fa4-a421-056b56a3282e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "615492f7-b900-4944-8fda-e32ae829b745",
      receiver_id: "b058a667-0078-43fb-b505-b07719966407",
      private_money_id: "0047582e-78c5-491b-99dc-61aad3aa7392",
      amount: 4021
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "615492f7-b900-4944-8fda-e32ae829b745",
      receiver_id: "b058a667-0078-43fb-b505-b07719966407",
      private_money_id: "0047582e-78c5-491b-99dc-61aad3aa7392",
      amount: 4021,
      request_id: "516d64cf-5ba9-4b12-84f6-c5bf6d9d138e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "615492f7-b900-4944-8fda-e32ae829b745",
      receiver_id: "b058a667-0078-43fb-b505-b07719966407",
      private_money_id: "0047582e-78c5-491b-99dc-61aad3aa7392",
      amount: 4021,
      description: "QdZof",
      request_id: "998d9552-3955-444f-953f-bc2f3d0d9f14"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "615492f7-b900-4944-8fda-e32ae829b745",
      receiver_id: "b058a667-0078-43fb-b505-b07719966407",
      private_money_id: "0047582e-78c5-491b-99dc-61aad3aa7392",
      amount: 4021,
      metadata: "{\"key\":\"value\"}",
      description: "AciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV",
      request_id: "e0b4d38a-1dfd-475c-bf34-b9a3568b4dcb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "32aef0ff-68fb-4644-b824-3e08796d7e18",
      sender_private_money_id: "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
      receiver_private_money_id: "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
      amount: 9000
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "32aef0ff-68fb-4644-b824-3e08796d7e18",
      sender_private_money_id: "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
      receiver_private_money_id: "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
      amount: 9000,
      request_id: "0587471e-13fb-4f11-a928-1eab8b91bab1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "32aef0ff-68fb-4644-b824-3e08796d7e18",
      sender_private_money_id: "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
      receiver_private_money_id: "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
      amount: 9000,
      description: "vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8Km",
      request_id: "e93949cf-e08a-46ce-bbd9-55031442dcd8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "Cce6NgXmM6SU8mT9N7YdoyhvI",
      content: "K96oQgvpt3",
      request_id: "OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "Cce6NgXmM6SU8mT9N7YdoyhvI",
      content: "K96oQgvpt3",
      request_id: "OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGR",
      description: "kAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new GetTransaction({
      transaction_id: "ee80b3b8-4384-47d5-88e4-2aa7a7ffcf27"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "063f9dfd-e947-4cbd-9939-9c63774f3336"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "063f9dfd-e947-4cbd-9939-9c63774f3336",
      description: "av2inoQmoszzzj7gjncZRjG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "efdcc334-e0b9-45da-b904-e2c54f506bbd",
      customer_id: "2b2cab39-2fe4-47bc-afc0-19c233433dfd",
      private_money_id: "995d82b8-ea40-4a66-839a-40ba0a811a2f",
      amount: 642
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "efdcc334-e0b9-45da-b904-e2c54f506bbd",
      customer_id: "2b2cab39-2fe4-47bc-afc0-19c233433dfd",
      private_money_id: "995d82b8-ea40-4a66-839a-40ba0a811a2f",
      amount: 642,
      request_id: "4b382693-7747-4faa-a6dd-a7546ebb5c3c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "efdcc334-e0b9-45da-b904-e2c54f506bbd",
      customer_id: "2b2cab39-2fe4-47bc-afc0-19c233433dfd",
      private_money_id: "995d82b8-ea40-4a66-839a-40ba0a811a2f",
      amount: 642,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "2346511d-b54f-430f-8cf9-dfefde24362a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "efdcc334-e0b9-45da-b904-e2c54f506bbd",
      customer_id: "2b2cab39-2fe4-47bc-afc0-19c233433dfd",
      private_money_id: "995d82b8-ea40-4a66-839a-40ba0a811a2f",
      amount: 642,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "f34ffa5d-356c-476a-b425-15ebd30519e6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "efdcc334-e0b9-45da-b904-e2c54f506bbd",
      customer_id: "2b2cab39-2fe4-47bc-afc0-19c233433dfd",
      private_money_id: "995d82b8-ea40-4a66-839a-40ba0a811a2f",
      amount: 642,
      description: "E",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "dacc7a32-d575-4ef6-a107-e48a63cc2b4d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new RefundExternalTransaction({
      event_id: "8c31dda2-5ffd-4cf4-baa0-3ce93d50fe00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new RefundExternalTransaction({
      event_id: "8c31dda2-5ffd-4cf4-baa0-3ce93d50fe00",
      description: "Kx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "ivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: [],
      description: "QvPCR5IiYZhX71qxxCDFjWtGs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["exchange", "topup", "transfer", "payment"],
      transfer_types: [],
      description: "fo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: true,
      transaction_types: ["exchange"],
      transfer_types: ["coupon", "exchange", "payment", "transfer"],
      description: "5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "70263f44-992f-4e37-838e-a694a82442f0",
      is_modified: true,
      transaction_types: ["topup", "exchange"],
      transfer_types: ["campaign", "payment", "topup", "coupon", "transfer", "exchange"],
      description: "alhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98V"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "6f1d2801-a9f0-4a4f-a7a3-19bbabd215ed",
      private_money_id: "09834d88-c58f-4999-a396-700856b5cb38",
      is_modified: true,
      transaction_types: ["topup", "exchange", "payment"],
      transfer_types: ["campaign", "transfer", "payment", "topup"],
      description: "uB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "oLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdi",
      transaction_id: "0db6b3ee-d800-4d54-8a69-782471ce5a73",
      private_money_id: "77272d55-2baf-4e23-b78c-5398900f57ca",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["topup", "transfer", "campaign", "payment", "exchange", "coupon"],
      description: "5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "1e012cde-c398-43fa-9686-d03ceb1a2f3f",
      customer_name: "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQB",
      transaction_id: "21d34d68-77c8-41a4-af7a-922b65cc355c",
      private_money_id: "3c171465-99d9-464a-919c-f3a314e96b6a",
      is_modified: false,
      transaction_types: ["transfer", "payment", "topup"],
      transfer_types: ["exchange"],
      description: "0GWowMI3ASCsApxBJptaJJRDQ6YTYkiFE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "IISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY",
      customer_id: "acdcc534-b39c-4922-b1ed-8b9551ef6d59",
      customer_name: "CDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAV",
      transaction_id: "98f0d413-c765-464b-9358-2b0dc09068d6",
      private_money_id: "2c4907fb-cad4-4a79-8ed2-14fb5ee007f5",
      is_modified: true,
      transaction_types: [],
      transfer_types: ["campaign", "payment", "coupon", "transfer", "topup", "exchange"],
      description: "jdawfubjQ03"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "c15988ec-ffc4-4752-8e75-542e8496382f",
      shop_name: "1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUn",
      customer_id: "057e9d65-306d-4194-badc-065233dcdf96",
      customer_name: "ROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxg",
      transaction_id: "ea4b60a7-4066-4c30-a765-8da14be92f41",
      private_money_id: "a1287d06-abd0-4b80-843e-2110109d39ea",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["topup", "transfer"],
      description: "LghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 7962,
      shop_id: "da81846f-4c3e-4cff-8e7e-a297af4cb1b4",
      shop_name: "JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi",
      customer_id: "4cf36e35-14ce-4827-899b-5ff39db57a62",
      customer_name: "UeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGke",
      transaction_id: "0f908dbc-1c9f-4ad2-b95a-92c3bf3e3878",
      private_money_id: "fe0d8744-6ff7-4e6e-b98a-1175b56b6891",
      is_modified: true,
      transaction_types: ["topup", "payment"],
      transfer_types: ["payment", "campaign", "exchange", "topup"],
      description: "6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 9647,
      per_page: 5361,
      shop_id: "f88bd397-0d00-4a14-9392-c1ce23272b4a",
      shop_name: "KDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04",
      customer_id: "58a827e1-e82c-49de-9025-572d2835fda9",
      customer_name: "Ls4hmy4C28WnCRfz2leovb1R",
      transaction_id: "ed1f2fbf-fcb7-4ecf-b69d-f6ab3af9f151",
      private_money_id: "bcfe0d4f-f6e7-4e5f-a29e-e398c28ba1dc",
      is_modified: false,
      transaction_types: ["exchange", "topup"],
      transfer_types: ["topup", "coupon", "exchange", "payment", "transfer"],
      description: "xa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2020-12-28T21:55:07.000000+09:00",
      page: 4004,
      per_page: 1854,
      shop_id: "0b630ec8-8345-4b35-b7b4-483c3a769fe5",
      shop_name: "eX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSs",
      customer_id: "bbd0f0f4-faef-42c5-b47b-28d03521db56",
      customer_name: "ykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0",
      transaction_id: "d5fc16f9-b1f9-401d-b673-d372da75eb1f",
      private_money_id: "540fbc52-223c-4015-bb97-e05aae16d2ce",
      is_modified: false,
      transaction_types: ["payment", "topup", "transfer", "exchange"],
      transfer_types: ["payment", "campaign"],
      description: "FWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2019-07-09T07:31:25.000000+09:00",
      to: "2021-09-02T16:30:57.000000+09:00",
      page: 4064,
      per_page: 8347,
      shop_id: "dac6d856-d617-4d36-a8b5-9cc4a77996d1",
      shop_name: "TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdj",
      customer_id: "cc647fdf-b0ee-4732-9f26-0c4a0e1903db",
      customer_name: "lMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwC",
      transaction_id: "da2a3500-ac60-4046-9c75-3df254882a78",
      private_money_id: "388aa46d-d905-42e1-bfaf-8f230ea3914c",
      is_modified: true,
      transaction_types: [],
      transfer_types: ["topup", "payment", "campaign", "coupon", "transfer"],
      description: "ycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      contact_name: "1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_account_holder_name: "0",
      contact_name: "Ykti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_account: "151281",
      bank_account_holder_name: "T",
      contact_name: "rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_account_type: "current",
      bank_account: "44798",
      bank_account_holder_name: "ﾓ",
      contact_name: "uiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1U"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "",
      bank_account_holder_name: "｢",
      contact_name: "Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_branch_name: "8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY3",
      bank_branch_code: "983",
      bank_account_type: "current",
      bank_account: "621151",
      bank_account_holder_name: "ｼ",
      contact_name: "hxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_code: "",
      bank_branch_name: "pZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI",
      bank_branch_code: "",
      bank_account_type: "saving",
      bank_account: "5493090",
      bank_account_holder_name: "ﾙ",
      contact_name: "BLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "Su06FE8juzeN",
      name: "NZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdg",
      private_money_ids: ["b565b672-b514-4cf3-820e-903c13690a37", "2634458e-85bb-446e-a604-45b3d926b280", "52dfbcfa-58b7-40a7-badd-9a376d3725b6", "ea44fecf-1e59-4271-8c2a-58dad1f57c29"],
      issuer_admin_user_email: "hd2VmnwZ1Y@QAtf.com",
      member_admin_user_email: "2GPfHYeeJW@iJLn.com",
      bank_name: "9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nT",
      bank_code: "7399",
      bank_branch_name: "3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "",
      bank_account_holder_name: "W",
      contact_name: "MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 9670
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 4846,
      per_page: 2676
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "KrOq6L",
      page: 5230,
      per_page: 8112
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "EP7tafjyhK@gvwh.com",
      external_id: "UJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs",
      page: 2949,
      per_page: 3203
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "06-2953-961",
      email: "1vYlz4sIXf@B3ep.com",
      external_id: "nNy54z9YZ",
      page: 4715,
      per_page: 9460
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "WtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iK",
      tel: "023-1189-043",
      email: "sJPwGPZVdf@eHb6.com",
      external_id: "60qrR",
      page: 2124,
      per_page: 3307
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "394-7416",
      address: "kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1V",
      tel: "051684010",
      email: "qcHqLIsXtL@Izc5.com",
      external_id: "p3WnRoU2x23XKfAMBSh",
      page: 9046,
      per_page: 2871
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG",
      postal_code: "0566225",
      address: "S2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7",
      tel: "050397-086",
      email: "O1QSAIUcA7@AjSS.com",
      external_id: "LuHYzu2Ra1BMEr62gevnEo",
      page: 9850,
      per_page: 255
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "5e178827-58e6-4916-b041-e45cd0fd6b20",
      name: "Nnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu",
      postal_code: "954-0867",
      address: "SDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh",
      tel: "02-62026",
      email: "CmpqdlLHNN@lbdn.com",
      external_id: "1ooZFRDSiyltrhPzNi7jenj4",
      page: 6233,
      per_page: 8244
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "Q1-x-9-28QB-Tm7-HoC--SE-nZn",
      private_money_id: "1ad1023f-33e0-4e34-a0b5-87dfb1c5ece3",
      name: "417ClVPZa",
      postal_code: "4953332",
      address: "1oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexH",
      tel: "0490-324286",
      email: "cFEKebPAHi@atKR.com",
      external_id: "7K8IMJIBW1vB1",
      page: 9121,
      per_page: 9918
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      organization_code: "w--28"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      shop_external_id: "FgkUTJYHHOr63hjnglJCcSZd",
      organization_code: "5Bu2ze7-m94Q-fjF2l"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      shop_email: "lncfGkEwHB@WOqO.com",
      shop_external_id: "QjCJIqduyEzfF4ihE",
      organization_code: "97d-9-32r-gNW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      shop_tel: "05-20-072",
      shop_email: "lrPa8fbLwd@jVaS.com",
      shop_external_id: "9JydpHqXjqW7D3uCGCdE",
      organization_code: "8--29-0sV-At-49z-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      shop_address: "oOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rv",
      shop_tel: "061-514-3323",
      shop_email: "tCxkktMbdZ@0Ff5.com",
      shop_external_id: "nebRZC0vDYNEWMfxXSVHRY4YZdsEs",
      organization_code: "65-zc-n9--u4-o"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhcti",
      shop_postal_code: "4966560",
      shop_address: "IXA6lNw66",
      shop_tel: "0136-62090454",
      shop_email: "X0H5SsjBGi@2vt3.com",
      shop_external_id: "VLujfoeXIy",
      organization_code: "-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      can_topup_private_money_ids: ["9e38166d-dfe6-4e4d-bc30-50df1ab71f58", "d63838cc-6c9c-41ab-9963-6de5580f0c22", "5cb7e001-fc60-4751-b8e8-6b3edbcd1975", "9fbb3c95-6b62-49d9-b3fe-beea672d3cd6", "64a0b0a8-5d1c-40d9-a8e2-5ce8d2e01834", "16a08f52-da8d-4aac-800c-6fd7a610f6a4", "247d36b4-6253-4c6a-8a93-9e8d1f5d381c", "ecc14663-4550-45fb-ba11-e902cb2525c8", "c8d9e640-ba75-4eb2-a7ab-2349b7c11470"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      private_money_ids: ["f92ffa0f-4c48-4890-8490-636cb33c8493", "e8565392-e39f-4943-a7f8-80bcda9efed9", "ecd8ee6c-9196-4346-9a5a-251a00f8aa7a", "52f0a0c2-ca24-4575-a4c8-e21e57cf88da", "672f7509-2838-46f4-9e7e-b0eacdd5fcba", "29722373-da68-4600-be36-f93881d5edd3", "de2f5663-aadd-43fc-9a84-63aaaa05ebba", "d93a84e7-0533-477f-a1ac-9d1460a91509"],
      can_topup_private_money_ids: ["b8ae539c-51cd-49a0-9bc5-f872d988f1d0"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      organization_code: "-e--kKcb---3-o-C-8P-CzCm4-Sw7-6",
      private_money_ids: ["627187ae-eb4c-4e7b-b9d0-62683691a03d", "398581ef-d243-47f1-aabf-1957e7b8f193", "5c791657-eaf2-44fa-9de9-0912f0e284eb", "b99e73c8-dbb0-4fbf-84f2-9ea7d33a6b54", "091a21a3-bbe8-4e9f-bcc9-0fa14d759039", "900709ee-b664-4a8b-89c3-61ff365cc841", "f9a9a9d2-0158-4a87-b9e9-25da7afd2ae8", "3e2e1a80-e58d-48d5-8977-0ad503c6943d", "7454ba72-7973-4b51-89e0-b40e64351a9b"],
      can_topup_private_money_ids: ["fc8ecf55-c222-44e9-aa1f-7c0560e5390f", "483a3693-4126-495e-afb5-2d8f21d5b121", "37b9c735-fd91-4b3a-aee4-ddf97342d528", "4d9b993b-5709-4a3e-a9a0-3a8adc6a53c2", "cdbe40f8-8a58-46e2-8bd7-4859defd9e0d", "a227ea06-f8fd-433a-a8ac-e2f115b0c7c9", "d521ccd1-5163-4841-8426-de416244912e", "e649e923-9aca-421a-bce8-95d72ef834c6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      external_id: "ASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e",
      organization_code: "00Ru-ZyN5V-Af-9sh8-W17qaMN-s-8",
      private_money_ids: ["a737fba0-5d19-4570-b2d9-77079ac7231d", "0d446b35-2859-46c2-a15d-619b4a1d4e7e", "e0c5c914-46cf-4402-9a64-d6944cdaa553", "8db6d6b1-e2ad-4f05-8ff3-d72e60a72899", "6f79b020-731d-4ebb-a56f-ce6c99045c4e", "e7181749-4d5f-43cc-9e4e-05bdef84dea3"],
      can_topup_private_money_ids: ["9eefdba1-3480-4f08-962f-dd2f4e01d3bb", "8d3eecdf-258c-4d23-917b-d5f02fd049db"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      email: "FGvZ3N4x3u@vaLn.com",
      external_id: "b",
      organization_code: "",
      private_money_ids: ["f5df1400-dc21-49ab-b79c-c7a4779c1a55", "d5c61f35-16e2-4b9f-b7b2-78553cb3d7d4", "c8060e57-82e2-4fa1-966a-2ca8a315f509", "b8e908d8-4fc7-4866-ba25-d643a0a2e7ed", "c23bb880-5c5a-497d-b23f-971cfefb9d0b", "9683191e-a176-4ceb-992b-736d3d3b5286", "d4b6b925-2b72-4543-b29b-ded71bb9987f"],
      can_topup_private_money_ids: ["b0eff541-03b7-47c9-a2eb-e55c4be2b644", "fcbc166d-0cdf-40eb-bf27-5517899fa02d", "591f66b9-bf87-4ce1-9bbb-d2638e9443f2", "38929b0f-5afd-46fd-b874-20fdde07b2d8", "e08ed103-cb39-42fb-8a51-e614fa5782d3", "8325ccc8-e2f9-4169-862b-4f22fde3c66f", "bdcf9ef3-8ebd-42dc-8765-dea5d682c415"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      tel: "08959-5873",
      email: "IOW0PGU45u@zPdd.com",
      external_id: "0dJeNNvUC0bqs1hvmd5",
      organization_code: "",
      private_money_ids: ["dec36999-d21d-44c4-9e1d-bf03ba6c4610", "66e25ab4-b7e3-4854-a824-2f6bb6b81712", "9780fdc9-d24f-4bae-8fb2-beccf37c9297", "03001c29-8b60-4186-be7f-5c3bed89d6d7", "116a3e30-bebb-402b-a594-99b32b33217c", "148b9706-b6c7-4688-b1f3-e21fb9ab8686", "ac0a1d9a-24d4-4f6d-bbba-6b2685cd9a8c", "76ad8229-316a-476a-8840-d563cbd49b1d", "d4345e4e-a98f-42b5-b787-fbda362280e2"],
      can_topup_private_money_ids: ["75942592-5969-4b99-a0dc-f96bc07df94a"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      address: "opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowq",
      tel: "0025-4180-516",
      email: "4zON6lsKCX@Akk0.com",
      external_id: "Q9YuV27x2ZZwJNPJ0",
      organization_code: "PP6o-lPNwq9iIMv7-Wn-3e--",
      private_money_ids: ["47de42cc-460e-4851-a3a2-e52ba2afd376", "04ba247d-a80e-4306-b3ca-a929cbc68b51"],
      can_topup_private_money_ids: ["efd6a51c-6852-433e-a99c-affc417c67f5", "4108295f-47f6-4ed7-9d1b-f87058ca8cd2", "3ac33395-ad6b-4370-9be8-a5faae16c26e", "fe132474-6d71-4e62-94f2-b132555a6e76", "6c078882-c0c8-428f-9686-66c64ad77a31", "c1e20eba-4469-458a-a788-b85f94862346", "2dcbd922-4601-4eab-9b2a-98a3e8ef3b1d", "dc783d0f-901d-4a30-99b7-2d2afefce164", "5a89adc2-fe78-4fbb-a01e-5c6592c460b8"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "ZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUt",
      postal_code: "8942974",
      address: "BfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocik",
      tel: "0278-36-6719",
      email: "0WeOGlWmme@gc1K.com",
      external_id: "Ghe3TxnuKac7CS1DK4Gnrr3oBL",
      organization_code: "8-5-V--",
      private_money_ids: ["e6d608c4-1017-470e-a429-d5191a1f9b33", "5cf1160f-89d8-477d-b843-b554018632b0", "d1dd035a-88db-45ed-8e75-f0b674235975", "6eb0a40d-c937-44f4-820e-b0cf3a0c4440"],
      can_topup_private_money_ids: ["f984a05b-6d71-41dd-be75-4cee34216f81", "161abbde-6265-4cdc-9dce-5f6195861a74", "c0942e47-98a8-42de-bf06-267c6ab5cb6f", "4d6fcb6c-3343-45e6-b6a4-168d8d671953", "122ba0ea-cd65-48c6-b73d-e7d35e07aa65", "83f4900a-447e-4a2e-bada-6958250203f9", "4e04154d-42ba-4553-b6fd-e029cf919e57", "6aafa67f-776b-46de-be2c-c692eb31ffbe"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "1ad2a5ce-0d15-47ca-813c-c1864374ea2a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      can_topup_private_money_ids: ["5bab6090-7c12-4205-8c87-d53e21fffed1", "154bba7e-2007-4055-a33b-08f2c5133cba", "f35659f5-5fd9-4ebd-9034-544842ae7a0a", "cb39b695-4cb5-4e63-9fc3-ba1ae0bb5177", "a1739735-59c5-4b78-98ce-cfa633c8b1f1", "af932368-0b34-47b1-bfcf-bed8e64dedd8"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      private_money_ids: ["775f42f7-4f7d-4628-9610-3aeda3b917e1", "c7556848-0c06-4059-9d95-7d1c17b3873f", "10613a77-deb6-46af-8020-c30d1549ba6f", "28d83745-3883-465f-ad7f-f68561b7f19a", "35d6c5c6-b862-4d4b-b8ae-8671ac537045", "0fb8d0d2-defb-425e-bea7-c7b10d45f7cc"],
      can_topup_private_money_ids: ["3405f240-8da3-4c0a-aac9-83e9c7fb400a"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      external_id: "TqeIN9jftsBTkZDKCnQigIBcgy",
      private_money_ids: ["beef34c8-e045-4e13-adb0-473dbf176374", "4b38b47e-26e5-42e3-92f2-a9aa32915e59", "fe8a6142-3c67-4c1f-98a7-c011d0c5f288", "a8993fef-6f2a-4b59-8a4e-552c746118e1", "c33eb352-e716-48c4-8889-1b33cd354978"],
      can_topup_private_money_ids: ["c362db35-935d-475d-9a94-05d825a30e8d"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      email: "l3L94kmDiQ@ZVmf.com",
      external_id: "dCV9wGJUROgp1VTNstKsbk2wvZcZmJC",
      private_money_ids: [],
      can_topup_private_money_ids: ["8e60c377-5575-461c-bd24-f8651682a85c", "1a0e8de5-328a-4134-b703-291ce39f7e39", "23d182d2-086b-4027-992e-1df68e06dbe1", "dfaed88e-f467-4539-80c3-a1ad92211b93", "be8e6bb1-2939-45f8-92ec-3c3163b6a7c9", "f00b906c-c7ca-4926-bc5d-ef7054759147", "d73e80d8-ebad-450e-b1ec-26ae44b16c5b", "9cf50c68-cf20-447c-9e8b-60dec5e417e4", "5ade08b5-d1af-4505-b577-164fc67cda06", "98265267-63b5-4fbd-b39f-9e1efdcdc41b"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      tel: "00-3193-0990",
      email: "yKLnZxaZi9@iCa2.com",
      external_id: "kj9IDD4FLU53H4cTCa",
      private_money_ids: ["9b43a2f5-cb06-4ca3-8d07-3ce0fc381a4e", "baf78f38-ce0c-4c15-b53b-233e1f586e97", "b6d34936-c2af-4b4a-870c-bf0644d0521f", "7119a135-33e0-40b0-acd3-045efc0f87e4", "89c66f69-3dc1-462b-9d44-f1022412bbc7", "cf59ec2e-35fd-4019-8f3c-8f0568518edd"],
      can_topup_private_money_ids: ["8f34c21b-e560-42b7-8e65-a3f97c16228e", "0777bfe4-a301-4087-8745-5d1360ce7bac", "11aa511c-7ace-4acd-9075-9cd3230f5ad5"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      address: "GCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0b",
      tel: "04-7976-894",
      email: "nnz7WaCAiQ@d9B8.com",
      external_id: "sl",
      private_money_ids: ["eee041f2-d0d3-4b12-80ae-8dd7ae0d5b9a", "9498ca9c-71cb-450e-9d0e-e04e0523fa39", "e32e0213-b06f-4010-bd51-3d01c369776a", "67bf0dc8-0e89-478d-aef3-f73e1f484c94", "057bd8bf-bc4e-4958-b4b8-c5d608adde6b", "4040ce08-26d3-4679-a6bb-5be9793ea8af", "8fb74d94-48f5-441c-ba21-6a45f304350c"],
      can_topup_private_money_ids: ["bd22e889-8307-400a-bc89-335daf96224c"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      postal_code: "2270213",
      address: "YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJ",
      tel: "06474753024",
      email: "d35gyuBKlw@ozbM.com",
      external_id: "BIp6WWFto",
      private_money_ids: ["68475823-98b3-4c1d-adcb-ae4b9d50b499", "4c3f2157-e392-4c8a-b9e2-74ecdfe5336d", "33424b02-016d-49a5-84fd-b341e1cdeb48", "f08aa952-ff53-4baf-99c3-935676961fb0", "309d701c-ab9c-4145-84ad-773bd210491f", "f345cb99-1287-4da8-b7ae-9e16bc589fb1", "b3b508b0-bdd3-4a04-9bd9-c0b40f181e7d", "b9369a38-c2da-4bef-8120-7c01c13bafb8", "d12f023a-9a6f-4540-aa19-ed395e5b3a61", "d0e7210a-696c-46f2-a22d-d84529e999af"],
      can_topup_private_money_ids: ["958284cb-1b59-4aa5-a590-09445aac326a", "cce101c2-4f7b-467e-bb0e-765722b45a50", "475d44cb-79c3-4b77-a29e-f369117d0ef2", "8a4b76a4-6b92-48fa-b6ba-8ad3b62f659d", "25382886-b226-49e3-9c8a-f4d58f388c00", "42ff4d9f-33f6-456a-b371-73569b71aca6", "8357fb6b-25ac-4563-9349-0a05636dbe6e", "e8485640-ffde-48f6-8fea-4ec6153d2a50", "4c9b78c9-81cc-40b9-a271-beec763eabdf", "2cc0b706-100c-49d6-9e8d-ad4dfeec768e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c0beb884-2a32-4ac7-b6d3-a518b322e8f7",
      name: "g0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42NN7jWbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbT",
      postal_code: "8960979",
      address: "P7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96",
      tel: "066-04450",
      email: "RlFM4Xw2Yn@eFRt.com",
      external_id: "au24yc1kusN7qW2yhhP",
      private_money_ids: ["f26e6e8b-1a85-4e62-847e-f8bfd4a7b448", "f1e5fa9f-2dce-4ad0-a852-503f3dd9ea16", "b77353be-9319-4efd-8311-8ee75cd46c6e", "d203ee85-a1f1-49d9-ae15-b055d4ee5687", "0017e719-bd6c-44e8-be89-c7b4e55bd5ca", "93be7be0-f162-4f3f-8bcf-c4f2b82cd4cd"],
      can_topup_private_money_ids: ["e6ea17ab-d7bd-4735-aac6-bdf7d254c172", "fd813804-6589-4241-a48f-440befecf122", "25e5e90f-a8e3-4fc0-bab5-c3377050ce26", "f1feaeda-dfac-4d4f-9729-8073cc800afc", "fc596d2c-b4c4-4772-b0ad-33c4d4e508ad", "73a59e99-c5a2-4fea-b403-14399d81094d", "615d1616-b6b1-4211-bfb2-ff109526df00", "9cee2842-58dc-40cf-aeef-f431a39e4a41", "ca96a187-a997-4ee3-ad98-e6ea0efd3522", "cfbdb7bb-7585-4c4d-b9b6-493be1d4c1ef"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 2186
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 4327,
      per_page: 3701
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "E---3--Np2-9r--",
      page: 8210,
      per_page: 9053
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006",
      page: 3179
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006",
      per_page: 5426,
      page: 6446
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006",
      from: "2021-07-11T00:25:41.000000+09:00",
      to: "2020-03-24T05:51:22.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006",
      from: "2020-12-21T04:27:29.000000+09:00",
      to: "2023-05-21T18:42:00.000000+09:00",
      page: 5726
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "86c74dec-2ab8-443c-89b0-a9ddbdcfe006",
      from: "2015-12-10T08:40:10.000000+09:00",
      to: "2020-05-21T03:20:16.000000+09:00",
      per_page: 6758,
      page: 4816
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      per_page: 80
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      page: 9261,
      per_page: 5408
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      to: "2018-05-07T21:26:36.000000+09:00",
      page: 6600,
      per_page: 4008
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      from: "2019-05-07T06:23:04.000000+09:00",
      to: "2016-01-11T18:55:51.000000+09:00",
      page: 8379,
      per_page: 6569
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      is_modified: false,
      from: "2016-11-06T07:46:46.000000+09:00",
      to: "2023-08-04T16:36:16.000000+09:00",
      page: 9957,
      per_page: 8382
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      type: "tQnDY",
      is_modified: true,
      from: "2019-05-04T05:45:16.000000+09:00",
      to: "2018-02-17T03:06:34.000000+09:00",
      page: 9097,
      per_page: 7812
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      receiver_customer_id: "942ab63d-fb87-4248-aa68-334a4ba1bd0d",
      type: "5",
      is_modified: true,
      from: "2025-04-28T12:21:03.000000+09:00",
      to: "2016-06-26T21:38:55.000000+09:00",
      page: 9498,
      per_page: 6852
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "5715af98-b514-4483-a478-dc36527a7a19",
      sender_customer_id: "b00606f3-63a7-4158-a752-1cdb09faa388",
      receiver_customer_id: "942a5090-9627-493c-949b-7b637a6a9555",
      type: "ZY",
      is_modified: true,
      from: "2017-09-07T14:20:28.000000+09:00",
      to: "2024-08-12T10:20:27.000000+09:00",
      page: 6346,
      per_page: 4064
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "629625ac-6a91-4ce8-9e30-3dba5fb2a2b3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "3986cc9b-933a-40c2-b6f1-9d42727204b7",
      shop_id: "14027d43-f67a-4f4c-8c6a-0059aa5e1648",
      amount: 7868
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "3986cc9b-933a-40c2-b6f1-9d42727204b7",
      shop_id: "14027d43-f67a-4f4c-8c6a-0059aa5e1648",
      amount: 7868,
      expires_in: 5437
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "3986cc9b-933a-40c2-b6f1-9d42727204b7",
      shop_id: "14027d43-f67a-4f4c-8c6a-0059aa5e1648",
      amount: 7868,
      description: "28zEE65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBd",
      expires_in: 3847
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "576cbb8c-3de3-45fa-9008-03548963a7d3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "e35cc9db-e079-4104-9d84-1086d055266e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "012d4643-f5e6-48ba-899b-b9d43b251fe9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "012d4643-f5e6-48ba-899b-b9d43b251fe9",
      expires_in: 9879
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "012d4643-f5e6-48ba-899b-b9d43b251fe9",
      description: "WLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKk",
      expires_in: 3032
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "012d4643-f5e6-48ba-899b-b9d43b251fe9",
      amount: 9851,
      description: "Eu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT",
      expires_in: 4744
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

