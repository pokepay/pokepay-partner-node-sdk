// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, UserStatsOperationServiceUnavailable, UnpermittedAdminUser, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, SevenBankATMSession, PaginatedOrganizations, PaginatedCoupons, CouponDetail, Coupon, PaginatedOrganizationWorkerTaskWebhook, OrganizationWorkerTaskWebhook, AccountTransferSummary, AccountTransferSummaryElement, PaginatedCampaigns, Campaign, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfersV2, PaginatedTransfers, PaginatedBillTransaction, PaginatedTransactionV2, PaginatedTransaction, BankDeleted, Banks, Bank, BankRegisteringInfo, UserDevice, UserStatsOperation, PrivateMoneySummary, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransactionDetail, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, PaginatedBulkTransactionJob, BulkTransactionJob, BulkTransaction, ShopWithAccounts, ShopWithMetadata, BillTransaction, TransactionDetail, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, PaginatedChecks, Check, Bill, AccountBalance, AccountDeleted, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, GetSevenBankATMSession, UpdateCoupon, GetCoupon, CreateCoupon, ListCoupons, CreateBankTopupTransaction, CreateBank, ListBanks, DeleteBank, ActivateUserDevice, GetUserDevice, CreateUserDevice, UpdateWebhook, DeleteWebhook, CreateWebhook, ListWebhooks, TerminateUserStats, RequestUserStats, UpdateCampaign, GetCampaign, CreateCampaign, ListCampaigns, UpdateCashtray, GetCashtray, CancelCashtray, CreateCashtray, ListBulkTransactionJobs, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneySummary, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListOrganizations, ListTransfersV2, ListTransfers, GetExternalTransactionByRequestId, RefundExternalTransaction, CreateExternalTransaction, GetTransactionByRequestId, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateTransactionWithCashtray, CreateCpmTransaction, CreatePaymentTransactionWithBill, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, ListBillTransactions, ListTransactionsV2, CreateTransaction, ListTransactions, GetCpmToken, UpdateCheck, GetCheck, CreateCheck, ListChecks, UpdateBill, GetBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, GetAccountTransferSummary, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, DeleteAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "DgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d",
      cashback: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "e2f27231-d218-406e-b371-622b2afd45f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      status: "pre-closed",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      is_suspended: true,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_to: "2020-10-07T18:59:38.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_from: "2020-09-07T21:25:03.000000Z",
      expires_at_to: "2024-10-02T20:33:17.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      per_page: 5374,
      expires_at_from: "2021-01-13T03:58:59.000000Z",
      expires_at_to: "2024-09-16T05:40:45.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      page: 9044,
      per_page: 3584,
      expires_at_from: "2024-10-29T10:47:52.000000Z",
      expires_at_to: "2022-05-05T20:55:29.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      expires_at_to: "2020-10-21T06:08:14.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      expires_at_from: "2024-05-06T22:47:15.000000Z",
      expires_at_to: "2021-02-10T04:23:33.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      per_page: 9269,
      expires_at_from: "2022-07-27T12:24:37.000000Z",
      expires_at_to: "2020-03-19T18:01:03.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      page: 6531,
      per_page: 2579,
      expires_at_from: "2023-10-07T04:30:21.000000Z",
      expires_at_to: "2023-04-20T20:38:29.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      external_id: "hBw4No1YXyGaN9eZjSIQORsTn19Lt83IRfp6apsZzwHUgb2qq",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      account_name: "rLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfd",
      external_id: "KJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCb",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 4', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      status: "pre-closed",
      account_name: "nT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fc",
      external_id: "KmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUj",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      transfer_types: ["exchange-outflow", "exchange-inflow", "refund-topup", "use-coupon", "refund-coupon", "payment", "refund-campaign", "campaign-topup", "refund-exchange-outflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      to: "2022-08-23T05:52:55.000000Z",
      transfer_types: ["exchange-outflow", "use-coupon", "refund-payment", "topup", "payment", "exchange-inflow", "refund-exchange-outflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      from: "2024-08-01T20:42:17.000000Z",
      to: "2022-12-23T22:37:41.000000Z",
      transfer_types: ["refund-campaign", "refund-payment", "use-coupon", "refund-exchange-outflow", "exchange-inflow", "refund-topup"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      email: "cm0Sp2RluF@OAxJ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      tel: "07-0551-2657",
      email: "TcJlnsa7zu@y1tu.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      external_id: "dw",
      tel: "071-69745487",
      email: "fKkMLwrBpO@RQ9L.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      status: "suspended",
      external_id: "lnKRmCd4n",
      tel: "045-981479",
      email: "qpn3W7S36l@34SS.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      is_suspended: false,
      status: "active",
      external_id: "W72gqSjd8QPzbjt0rt7UmerReZGbvGgvA",
      tel: "09215911045",
      email: "P1AnQALadF@sAzg.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      created_at_to: "2022-07-27T22:59:50.000000Z",
      is_suspended: true,
      status: "pre-closed",
      external_id: "tuXgZDedIJqTHGgnOhGiwZBj5AvHdO2Atfc",
      tel: "0129-664-818",
      email: "3sP8V6IT9V@FC5b.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      created_at_from: "2021-03-24T19:42:09.000000Z",
      created_at_to: "2020-09-24T18:38:11.000000Z",
      is_suspended: true,
      status: "active",
      external_id: "PASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1F",
      tel: "002-97-992",
      email: "exAarzlUll@rgsQ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      per_page: 6435,
      created_at_from: "2022-12-18T13:21:30.000000Z",
      created_at_to: "2025-06-21T23:46:25.000000Z",
      is_suspended: false,
      status: "pre-closed",
      external_id: "U",
      tel: "070-062-041",
      email: "uPYAKNLvTy@McIY.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      page: 5613,
      per_page: 8339,
      created_at_from: "2025-02-04T14:45:59.000000Z",
      created_at_to: "2022-04-16T16:37:32.000000Z",
      is_suspended: false,
      status: "suspended",
      external_id: "Sz5j",
      tel: "084-00934",
      email: "Pyt1wTnktL@8AYk.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      external_id: "7caRg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      account_name: "ncONv8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycu",
      external_id: "n86BZW4IWD5G"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      user_name: "y4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS",
      account_name: "3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iS",
      external_id: "TBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      created_at_to: "2024-07-25T03:44:04.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      created_at_from: "2023-03-19T21:52:50.000000Z",
      created_at_to: "2021-05-16T14:27:26.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      per_page: 2991,
      created_at_from: "2021-03-14T12:40:20.000000Z",
      created_at_to: "2023-05-24T08:19:28.000000Z",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      page: 4106,
      per_page: 2378,
      created_at_from: "2020-07-23T05:33:11.000000Z",
      created_at_to: "2023-07-26T19:28:22.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 3549,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 7634,
      upper_limit_amount: 4359,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "0444cb55-e682-46a6-a9b9-ba047a7d4d84",
      lower_limit_amount: 1715,
      upper_limit_amount: 3003,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "ljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqN",
      shop_id: "487a51ce-007c-4246-8750-f801fe583563",
      lower_limit_amount: 2571,
      upper_limit_amount: 9230,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2023-04-06T21:01:03.000000Z",
      shop_name: "fJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n",
      shop_id: "07657833-0ba0-4226-9274-368c5525e408",
      lower_limit_amount: 8452,
      upper_limit_amount: 7282,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2024-10-26T06:23:56.000000Z",
      created_to: "2025-05-29T22:35:28.000000Z",
      shop_name: "bvzHyQJ1u",
      shop_id: "cbd78f88-c62f-4afc-b0a9-6ded7735a6dd",
      lower_limit_amount: 7338,
      upper_limit_amount: 5323,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "rSXl5b4zk",
      created_from: "2024-10-25T21:23:14.000000Z",
      created_to: "2021-07-27T13:32:24.000000Z",
      shop_name: "XIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQ",
      shop_id: "a2c93ddf-40ba-4e47-8ee8-4f91a69b9fdc",
      lower_limit_amount: 2090,
      upper_limit_amount: 8705,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "Bc--7nl0IYap--9aa948FjB",
      description: "nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjob",
      created_from: "2020-06-04T23:01:23.000000Z",
      created_to: "2021-04-04T15:21:20.000000Z",
      shop_name: "KVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9",
      shop_id: "5d1946d2-630b-4321-a651-775bec6a8fe9",
      lower_limit_amount: 3067,
      upper_limit_amount: 6099,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "bef68154-e22e-45d7-9a2a-320e11de6b72",
      organization_code: "f1-KE6-WX0z-64b50d-mzO5vzt-ZY-9",
      description: "GujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1",
      created_from: "2022-03-16T12:50:50.000000Z",
      created_to: "2025-02-24T06:36:12.000000Z",
      shop_name: "ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55o",
      shop_id: "2bd82cfc-e5e0-44ae-8149-1891e7317fbc",
      lower_limit_amount: 8500,
      upper_limit_amount: 9174,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "4sTwcYeF",
      private_money_id: "46734710-07a5-4f77-a350-74907f562620",
      organization_code: "",
      description: "0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20",
      created_from: "2020-06-18T16:52:25.000000Z",
      created_to: "2025-05-08T16:17:37.000000Z",
      shop_name: "Bp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9T",
      shop_id: "9075e2e3-dff9-4018-b7ef-496737afcbbf",
      lower_limit_amount: 331,
      upper_limit_amount: 4973,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 8323,
      bill_id: "w0VnsF",
      private_money_id: "c200cedf-981b-4ef9-ba91-38092f4d8b66",
      organization_code: "-vv9f-RNUtv3vq-3p-xRd106X-oyS",
      description: "Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOeAy8xYgm",
      created_from: "2025-07-14T01:33:07.000000Z",
      created_to: "2023-09-20T06:04:03.000000Z",
      shop_name: "d6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WY",
      shop_id: "dc815066-5483-45c8-90e6-b72be0fdd024",
      lower_limit_amount: 3223,
      upper_limit_amount: 5454,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 9810,
      per_page: 2118,
      bill_id: "e9O",
      private_money_id: "2b6354d5-d06d-4bf5-9189-8da161f0127e",
      organization_code: "S-X74VI8-wXiuC",
      description: "2zIxN",
      created_from: "2020-12-02T23:21:54.000000Z",
      created_to: "2023-06-12T18:08:26.000000Z",
      shop_name: "Zx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A3",
      shop_id: "d4837732-d883-44e0-9445-ae53172887f1",
      lower_limit_amount: 3367,
      upper_limit_amount: 1728,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "0be9aed6-e055-444b-80ba-1dc505caf290",
      shop_id: "f8ba3f31-b147-4492-854e-9639a042644a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "0be9aed6-e055-444b-80ba-1dc505caf290",
      shop_id: "f8ba3f31-b147-4492-854e-9639a042644a",
      description: "qLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "0be9aed6-e055-444b-80ba-1dc505caf290",
      shop_id: "f8ba3f31-b147-4492-854e-9639a042644a",
      amount: 8441.0,
      description: "U4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new GetBill({
      bill_id: "ceb060c8-59cb-4cac-a867-3f37e701e96a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "dc8f373f-bb9f-4466-b754-615276c7c142"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "dc8f373f-bb9f-4466-b754-615276c7c142",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "dc8f373f-bb9f-4466-b754-615276c7c142",
      description: "Dusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3Rzx",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "dc8f373f-bb9f-4466-b754-615276c7c142",
      amount: 3143.0,
      description: "TRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEo",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      description: "vzxKV",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      issuer_shop_id: "640b29df-4bdd-4fdd-8f8b-c2f8a00ad6e4",
      description: "oit",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_to: "2021-01-09T20:47:56.000000Z",
      issuer_shop_id: "3c1ae76e-dbfe-46a3-b306-105227017b64",
      description: "0a6T9IRy95",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_from: "2022-10-04T10:31:17.000000Z",
      created_to: "2023-05-18T09:32:59.000000Z",
      issuer_shop_id: "07e82708-a76e-4759-a9ea-893a81c8ee36",
      description: "DV",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_to: "2023-08-06T09:38:39.000000Z",
      created_from: "2020-01-23T21:13:39.000000Z",
      created_to: "2023-01-13T06:28:01.000000Z",
      issuer_shop_id: "c093002d-f240-4c8e-846b-e9f230ddafb4",
      description: "WttvA7t",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_from: "2023-05-11T16:13:02.000000Z",
      expires_to: "2024-06-05T09:36:57.000000Z",
      created_from: "2023-04-12T02:44:55.000000Z",
      created_to: "2020-10-24T22:11:52.000000Z",
      issuer_shop_id: "e6b00f2d-1677-43eb-aa1e-e70d55bc4e64",
      description: "XwioDp",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      organization_code: "uzoNbRpuKefj9znX2XonFzQcO",
      expires_from: "2020-08-27T12:04:05.000000Z",
      expires_to: "2024-05-30T01:20:05.000000Z",
      created_from: "2020-07-31T16:26:05.000000Z",
      created_to: "2024-06-27T02:13:35.000000Z",
      issuer_shop_id: "8ecfc2ed-7764-470d-96e7-6307d783198e",
      description: "Um",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      private_money_id: "085f3bb7-203f-4e33-8980-0fb2ab4c0b6b",
      organization_code: "FchNQksZB6ByT3lVRQ7O823WFeXC",
      expires_from: "2020-02-20T03:38:17.000000Z",
      expires_to: "2020-10-27T05:06:59.000000Z",
      created_from: "2024-04-20T03:42:57.000000Z",
      created_to: "2022-04-13T01:13:40.000000Z",
      issuer_shop_id: "ae173a93-d406-41aa-9c66-65f61a58df2a",
      description: "Wv5Set",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      per_page: 1613,
      private_money_id: "a084768c-99a9-4e2a-80f5-615d7e7003a3",
      organization_code: "ZcB6tdcwibyPvTHbjOWbqqVGNOP2f7",
      expires_from: "2024-02-20T03:43:02.000000Z",
      expires_to: "2025-09-17T11:51:03.000000Z",
      created_from: "2020-12-11T19:05:46.000000Z",
      created_to: "2020-12-14T12:17:49.000000Z",
      issuer_shop_id: "a26c5e0b-75c0-4ee3-8da3-03ae2606f57c",
      description: "6XSXXM3",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      page: 7862,
      per_page: 7933,
      private_money_id: "e8ede37f-8c5f-4950-83f8-69fd26ca8dee",
      organization_code: "FhfkfYgvABx",
      expires_from: "2022-09-20T22:16:50.000000Z",
      expires_to: "2024-04-13T23:55:07.000000Z",
      created_from: "2023-04-18T23:12:42.000000Z",
      created_to: "2021-11-07T03:45:26.000000Z",
      issuer_shop_id: "adfabd04-26ab-46b7-b285-ea2f770a7ba9",
      description: "Xm6F6onht",
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 4069.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 1565.0,
      description: "1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZed"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 7956.0,
      is_onetime: false,
      description: "LbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2I"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 5158.0,
      usage_limit: 2569,
      is_onetime: false,
      description: "flsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 8588.0,
      expires_at: "2021-01-26T06:24:15.000000Z",
      usage_limit: 5493,
      is_onetime: true,
      description: "PSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 4511.0,
      point_expires_at: "2023-03-20T09:30:14.000000Z",
      expires_at: "2023-07-08T20:47:28.000000Z",
      usage_limit: 9856,
      is_onetime: true,
      description: "YocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72t"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 3947.0,
      point_expires_in_days: 9709,
      point_expires_at: "2022-11-26T07:13:31.000000Z",
      expires_at: "2022-08-28T18:06:55.000000Z",
      usage_limit: 3877,
      is_onetime: true,
      description: "yikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 5978.0,
      bear_point_account: "60eaa0bd-34e2-43cd-94ea-b5804c63cca1",
      point_expires_in_days: 4926,
      point_expires_at: "2022-05-11T05:10:00.000000Z",
      expires_at: "2023-04-12T03:55:47.000000Z",
      usage_limit: 481,
      is_onetime: true,
      description: "Uv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 8777.0,
      point_amount: 8833.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 2840.0,
      point_amount: 966.0,
      description: "cpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 5144.0,
      point_amount: 453.0,
      is_onetime: false,
      description: "VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 8402.0,
      point_amount: 4676.0,
      usage_limit: 125,
      is_onetime: true,
      description: "xKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 4802.0,
      point_amount: 4362.0,
      expires_at: "2020-03-01T15:51:02.000000Z",
      usage_limit: 6251,
      is_onetime: false,
      description: "23xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6Hyc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 5463.0,
      point_amount: 5744.0,
      point_expires_at: "2023-05-20T10:59:17.000000Z",
      expires_at: "2023-07-08T18:55:00.000000Z",
      usage_limit: 7133,
      is_onetime: false,
      description: "5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 230.0,
      point_amount: 2523.0,
      point_expires_in_days: 4402,
      point_expires_at: "2022-03-23T18:42:19.000000Z",
      expires_at: "2021-12-25T08:01:12.000000Z",
      usage_limit: 4946,
      is_onetime: false,
      description: "DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      money_amount: 5821.0,
      point_amount: 4366.0,
      bear_point_account: "4de7aa21-f45b-4775-ba3b-3da7b2f82f8c",
      point_expires_in_days: 6040,
      point_expires_at: "2024-04-13T00:45:37.000000Z",
      expires_at: "2024-12-18T05:23:19.000000Z",
      usage_limit: 5918,
      is_onetime: false,
      description: "OOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 1185.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 133.0,
      description: "Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 2757.0,
      is_onetime: false,
      description: "IhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 7675.0,
      usage_limit: 4642,
      is_onetime: true,
      description: "TT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 6469.0,
      expires_at: "2020-07-18T03:30:33.000000Z",
      usage_limit: 6615,
      is_onetime: true,
      description: "c6DIDKem3xaXPio5o0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 6281.0,
      point_expires_at: "2024-04-17T16:46:41.000000Z",
      expires_at: "2023-03-09T16:35:05.000000Z",
      usage_limit: 4472,
      is_onetime: true,
      description: "yrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 2633.0,
      point_expires_in_days: 9272,
      point_expires_at: "2023-11-11T19:30:07.000000Z",
      expires_at: "2020-09-03T18:15:08.000000Z",
      usage_limit: 9855,
      is_onetime: true,
      description: "2Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "1218966b-259f-47a0-8426-0e620a5da89b",
      point_amount: 1601.0,
      bear_point_account: "e42bcecd-ef88-41b5-8a64-f5aa201b788a",
      point_expires_in_days: 7264,
      point_expires_at: "2021-02-14T22:09:27.000000Z",
      expires_at: "2021-09-27T00:04:06.000000Z",
      usage_limit: 5547,
      is_onetime: true,
      description: "W8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9O"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new GetCheck({
      check_id: "f616c977-5ef1-4010-ae24-f1fe2440fe98"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      bear_point_account: "039690c9-b516-4b44-b092-30e5dc164209",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      point_expires_in_days: 9805,
      bear_point_account: "d64426a4-a705-4a79-ab5a-aa2d135d029a",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      point_expires_at: "2020-03-06T08:42:24.000000Z",
      point_expires_in_days: 4807,
      bear_point_account: "f22beb4e-a05a-4d14-b711-7187892faaa4",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      expires_at: "2023-10-17T12:46:49.000000Z",
      point_expires_at: "2023-08-19T12:37:21.000000Z",
      point_expires_in_days: 3644,
      bear_point_account: "29d96a7c-f462-43df-b53c-217311ff0c80",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      usage_limit: 2443,
      expires_at: "2022-09-03T04:25:36.000000Z",
      point_expires_at: "2021-09-16T19:47:01.000000Z",
      point_expires_in_days: 893,
      bear_point_account: "fa0714a9-dc3c-4b5e-8606-12b20beb9ef0",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      is_onetime: true,
      usage_limit: 2892,
      expires_at: "2023-08-07T14:16:44.000000Z",
      point_expires_at: "2023-01-30T13:36:59.000000Z",
      point_expires_in_days: 1584,
      bear_point_account: "f682f622-6426-4cd0-a41d-e49b8280abef",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      description: "L84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCu",
      is_onetime: true,
      usage_limit: 3267,
      expires_at: "2021-08-17T01:01:01.000000Z",
      point_expires_at: "2020-05-30T21:18:02.000000Z",
      point_expires_in_days: 7107,
      bear_point_account: "ffa3d0fd-053d-4c4f-a720-bff4179dfee0",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      point_amount: 1815.0,
      description: "8MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDeb",
      is_onetime: false,
      usage_limit: 6610,
      expires_at: "2024-11-16T11:28:43.000000Z",
      point_expires_at: "2022-11-20T00:35:21.000000Z",
      point_expires_in_days: 54,
      bear_point_account: "2b6f2a8b-1889-4836-b88e-35fb225e1a79",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "60141fdd-6ceb-42e1-9070-532c13725cf7",
      money_amount: 1281.0,
      point_amount: 6556.0,
      description: "3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWy",
      is_onetime: false,
      usage_limit: 2444,
      expires_at: "2023-08-18T16:22:25.000000Z",
      point_expires_at: "2020-01-02T00:23:01.000000Z",
      point_expires_in_days: 187,
      bear_point_account: "972ad034-c929-47b3-93c2-065dbceed3a9",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "TjYiVtdGDmgs4Vk2VUx2tI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["payment"],
      description: "q9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: true,
      types: ["payment"],
      description: "f4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "7fa37eed-4d43-4f3c-b2b6-b411425247b0",
      is_modified: true,
      types: ["cashback", "payment"],
      description: "7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "803-2UWgF9A28O1--25djJe--",
      private_money_id: "ada11cee-4e79-408b-bda5-b1d542c267a2",
      is_modified: true,
      types: ["exchange_inflow"],
      description: "1h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "5lY5r",
      organization_code: "-SPF--Ue-xT-4af1yX--Qo3P-88",
      private_money_id: "2674231f-ff7f-43b2-84c3-4c6ceedee5b6",
      is_modified: true,
      types: ["payment", "topup", "cashback", "expire", "exchange_inflow"],
      description: "2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "16dbac2a-774f-4f16-9eb1-33222607a3df",
      transaction_id: "h3s3e",
      organization_code: "",
      private_money_id: "2893ee91-9131-4550-8a92-0a2dcc76bea5",
      is_modified: true,
      types: ["topup", "cashback", "exchange_inflow"],
      description: "4IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPI",
      terminal_id: "669a3849-4187-44c2-a5d5-8d53644ea80d",
      transaction_id: "xLQqoj9SXP",
      organization_code: "---39",
      private_money_id: "1c45b4fa-8a23-479b-81c1-4b370fc82244",
      is_modified: false,
      types: ["topup", "expire"],
      description: "6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "ee00df3b-d072-4254-9901-4876686f83c8",
      customer_name: "gdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzW",
      terminal_id: "92014d83-8f2f-44e6-8dbd-3e3e7243b88b",
      transaction_id: "YN8tFOR",
      organization_code: "Y-u",
      private_money_id: "37208acc-0117-48c4-87bc-979678a4c767",
      is_modified: false,
      types: ["payment", "expire", "topup", "cashback", "exchange_outflow", "exchange_inflow"],
      description: "HQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8H"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "220e5ac6-5a3a-47ab-b8da-03f468a6ae0e",
      customer_id: "5ebe53c3-108f-47bd-8035-e40645c13b8e",
      customer_name: "ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4Az",
      terminal_id: "f98b4df5-c995-408a-bb6b-47a2f3349e71",
      transaction_id: "Xii06wz9Nd",
      organization_code: "W2--U-l5xjH-",
      private_money_id: "75cb9122-945c-4faa-9f83-ba8444fa9aaa",
      is_modified: true,
      types: ["topup"],
      description: "kBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 282,
      shop_id: "65719173-820d-4a91-b829-3433f2e9fa2c",
      customer_id: "b55e6feb-aa84-4b88-827a-34d322722b8f",
      customer_name: "ot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlm",
      terminal_id: "794e5de6-a982-48e2-89d7-c7a5d468571d",
      transaction_id: "jq1",
      organization_code: "-oW",
      private_money_id: "84ad74bb-a6b2-4c97-8869-a00e6da9db2f",
      is_modified: true,
      types: ["exchange_inflow", "topup", "expire", "cashback", "payment", "exchange_outflow"],
      description: "KUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0ru"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 5103,
      per_page: 106,
      shop_id: "9e6fdaf3-adbc-4bae-9fcc-a256ada8901c",
      customer_id: "04e72a3f-308d-4ac1-8b24-7a85bf70fc21",
      customer_name: "D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5q",
      terminal_id: "a8764f09-9022-4ad9-93e6-af609463b027",
      transaction_id: "dpEz",
      organization_code: "yFH3l-oWbAVbaS-p-1i-rU6H0r5jHe",
      private_money_id: "6b7d83b2-c16c-45aa-b20b-53ca574cb36e",
      is_modified: true,
      types: ["topup", "cashback", "expire", "exchange_outflow"],
      description: "2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2022-08-11T11:06:41.000000Z",
      page: 8459,
      per_page: 7873,
      shop_id: "17d7361e-5f26-46e1-97ee-368e6a3f8367",
      customer_id: "0d4b08f1-92b9-4450-8abd-4b51317ebd0a",
      customer_name: "fQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0",
      terminal_id: "69f06cdb-6214-4c15-807d-8cbd8538079b",
      transaction_id: "ZYNIF",
      organization_code: "s--aXS-ZgJJ-y--WsY4x--Dyl",
      private_money_id: "7440e812-d811-462f-af5f-b514d20a65a5",
      is_modified: false,
      types: ["cashback", "exchange_inflow", "topup", "expire", "exchange_outflow"],
      description: "RdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2in"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2024-05-23T02:09:21.000000Z",
      to: "2021-07-19T10:37:33.000000Z",
      page: 3824,
      per_page: 5692,
      shop_id: "5cb6a40b-f3f3-407a-ba7a-0bea481bd33e",
      customer_id: "271ce8dc-c716-49b7-a267-496a1db4773c",
      customer_name: "cZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86",
      terminal_id: "a069e5c4-b57f-4ea4-b996-25d8c6009908",
      transaction_id: "fo8j",
      organization_code: "--iE55--f5D851N-akMUy6-",
      private_money_id: "6481f61a-2228-4de5-90c4-47010df61e71",
      is_modified: false,
      types: ["expire", "exchange_outflow"],
      description: "7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "d60a13d6-f664-4a16-ac01-df9fba2ae897",
      customer_id: "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
      private_money_id: "6e4a6348-e90e-4594-bd19-959f986dd8b5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "d60a13d6-f664-4a16-ac01-df9fba2ae897",
      customer_id: "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
      private_money_id: "6e4a6348-e90e-4594-bd19-959f986dd8b5",
      description: "Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "d60a13d6-f664-4a16-ac01-df9fba2ae897",
      customer_id: "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
      private_money_id: "6e4a6348-e90e-4594-bd19-959f986dd8b5",
      point_expires_at: "2023-04-28T14:17:57.000000Z",
      description: "ZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "d60a13d6-f664-4a16-ac01-df9fba2ae897",
      customer_id: "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
      private_money_id: "6e4a6348-e90e-4594-bd19-959f986dd8b5",
      point_amount: 6465,
      point_expires_at: "2020-12-08T17:02:41.000000Z",
      description: "2xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "d60a13d6-f664-4a16-ac01-df9fba2ae897",
      customer_id: "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
      private_money_id: "6e4a6348-e90e-4594-bd19-959f986dd8b5",
      money_amount: 5766,
      point_amount: 4156,
      point_expires_at: "2023-09-25T18:36:20.000000Z",
      description: "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      per_page: 515
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      prev_page_cursor_id: "01a288ce-86a9-45f9-a25c-24fb20e7a337",
      per_page: 70
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      next_page_cursor_id: "aebb53f8-8db4-4c7a-a6dc-f0cc65d2b079",
      prev_page_cursor_id: "8d3a473f-2823-465e-acfd-450c5315b0ac",
      per_page: 93
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      to: "2022-11-10T16:42:01.000000Z",
      next_page_cursor_id: "47d51d1c-7d7d-4eed-8f26-2a2b344a5456",
      prev_page_cursor_id: "58ef04fd-d975-4375-b71d-2c52ab07695a",
      per_page: 747
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      from: "2024-12-02T16:14:21.000000Z",
      to: "2024-06-09T17:54:46.000000Z",
      next_page_cursor_id: "985c2180-8c40-4753-8f21-2766712bd439",
      prev_page_cursor_id: "054b129a-6230-46c9-8c4c-84680a7074ba",
      per_page: 562
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      types: ["expire"],
      from: "2022-06-05T12:01:23.000000Z",
      to: "2023-03-04T12:20:00.000000Z",
      next_page_cursor_id: "10e4a5c3-bb76-4eb1-ba02-5721ddf7118f",
      prev_page_cursor_id: "5aa24321-e825-4213-b4c9-e23a309164cc",
      per_page: 212
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      is_modified: false,
      types: ["cashback", "topup", "expire", "payment", "exchange_outflow", "exchange_inflow"],
      from: "2023-04-20T08:04:40.000000Z",
      to: "2024-04-06T18:16:52.000000Z",
      next_page_cursor_id: "f06def02-1d81-4ae3-8e2c-f1039aeee37c",
      prev_page_cursor_id: "86770697-e978-4707-8723-20e2bc00efb1",
      per_page: 296
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      transaction_id: "w0",
      is_modified: true,
      types: ["exchange_inflow"],
      from: "2024-05-31T16:45:00.000000Z",
      to: "2022-05-17T00:35:30.000000Z",
      next_page_cursor_id: "ecda8963-adff-47d3-a1a6-004553a8a936",
      prev_page_cursor_id: "7fa83d28-d8fa-49a2-a791-f7359340cfd1",
      per_page: 904
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      description: "SLVITcWyXkWwNeThL",
      transaction_id: "K",
      is_modified: false,
      types: ["payment", "exchange_outflow", "exchange_inflow", "topup"],
      from: "2021-12-04T22:13:49.000000Z",
      to: "2022-07-18T19:15:02.000000Z",
      next_page_cursor_id: "c624f552-688a-4949-97cd-5dddc9461ad9",
      prev_page_cursor_id: "5bcaf4e0-94b7-4074-b0a3-c47563f1607e",
      per_page: 393
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_name: "9Tu",
      description: "4ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4",
      transaction_id: "Uw",
      is_modified: true,
      types: ["topup", "payment", "exchange_outflow"],
      from: "2022-09-06T17:01:47.000000Z",
      to: "2025-01-07T08:11:52.000000Z",
      next_page_cursor_id: "991edf29-a69b-4ece-a6dc-e8a1551ea22a",
      prev_page_cursor_id: "f46cc625-8afd-4664-bff9-1c2084e2d03e",
      per_page: 546
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_id: "602a6bf4-fbeb-44af-9c84-85b1cf275f99",
      customer_name: "inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6",
      description: "Q3vZwFKRF7w",
      transaction_id: "plclcWB9",
      is_modified: true,
      types: ["topup", "exchange_inflow", "expire", "cashback", "payment", "exchange_outflow"],
      from: "2025-03-18T23:39:01.000000Z",
      to: "2023-01-23T11:08:24.000000Z",
      next_page_cursor_id: "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
      prev_page_cursor_id: "50cc933e-1efa-488e-94cc-cc031b84ad53",
      per_page: 438
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      terminal_id: "5591db1c-46c1-4dbe-bfa4-5fe75f863813",
      customer_id: "34dc55ac-a31b-4d3e-ad69-82ee07a1bdec",
      customer_name: "SJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFL",
      description: "ghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62",
      transaction_id: "8FNzaDe",
      is_modified: true,
      types: ["exchange_outflow", "topup", "expire", "payment", "exchange_inflow"],
      from: "2021-07-15T02:21:32.000000Z",
      to: "2020-08-18T18:44:41.000000Z",
      next_page_cursor_id: "28ed6bca-7154-4a36-9fd8-8fd9b6e23b7b",
      prev_page_cursor_id: "3b702882-1133-443e-9459-489d623d4cb3",
      per_page: 150
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      shop_id: "9f351484-c991-4333-855d-c59732654165",
      terminal_id: "1068ba0e-ffeb-44db-bafb-db0f25acd5b4",
      customer_id: "616664a7-590e-48a5-a680-3be15b55e700",
      customer_name: "hxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL",
      description: "edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE",
      transaction_id: "ye8xiCptr",
      is_modified: true,
      types: ["payment", "topup", "expire"],
      from: "2021-03-23T04:18:28.000000Z",
      to: "2025-08-03T09:21:23.000000Z",
      next_page_cursor_id: "d296a933-1423-4911-be4f-fe210219c8d1",
      prev_page_cursor_id: "b17cfe53-f624-4d0a-a77d-66734f88b581",
      per_page: 780
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      organization_code: "d6-8-4tkX-83ZTJ--e6i3CzSB5",
      shop_id: "c3f9458b-8da7-4e1e-90be-680ec274044e",
      terminal_id: "6cf24dc7-586b-4d5d-8565-8dbc74651c9f",
      customer_id: "9ee13ad2-1979-445a-8378-8744ff3f6ff7",
      customer_name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      description: "2qiGNeSDJueWNAF2i",
      transaction_id: "LhkB0",
      is_modified: true,
      types: ["expire", "payment", "exchange_inflow", "cashback"],
      from: "2024-06-20T05:25:25.000000Z",
      to: "2022-04-12T16:41:10.000000Z",
      next_page_cursor_id: "cc6f73f7-d93c-4eac-a334-38d98eac5466",
      prev_page_cursor_id: "eb83cc8f-73ee-4e13-ba2b-97b5bd45e765",
      per_page: 993
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      private_money_id: "d0faeb33-8f62-4f3e-aa81-8bd825b010ad",
      organization_code: "-o8H-0-u-0-",
      shop_id: "81621e2e-9109-421e-842c-95441ae7eb0f",
      terminal_id: "0a86fd81-1245-481a-aa75-1824bfaeb0fa",
      customer_id: "f231997e-4553-420f-bced-7e0f8e55afba",
      customer_name: "ETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2G",
      description: "N3QYDG6CZS1PVe5LZzi2NmWBlu",
      transaction_id: "rzflOytNd",
      is_modified: false,
      types: ["exchange_outflow"],
      from: "2023-01-06T11:28:46.000000Z",
      to: "2025-03-13T19:47:50.000000Z",
      next_page_cursor_id: "bd78fb2c-657f-451c-8148-c8eea0f06d90",
      prev_page_cursor_id: "c0f73958-3233-4c0b-934c-9a4f50feb4f3",
      per_page: 823
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      per_page: 166
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      prev_page_cursor_id: "60fe0e50-aba1-4233-bb7c-2964f54d34af",
      per_page: 505
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      next_page_cursor_id: "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
      prev_page_cursor_id: "031f1872-bdf4-4c21-b4af-9b43b371718c",
      per_page: 327
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      to: "2022-05-20T00:37:16.000000Z",
      next_page_cursor_id: "3cf72fc5-ee7c-45de-9653-6d578d29a4ca",
      prev_page_cursor_id: "804fd502-9d1b-43bd-ae50-809558cde5bd",
      per_page: 11
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      from: "2022-01-28T10:55:25.000000Z",
      to: "2025-05-09T08:51:20.000000Z",
      next_page_cursor_id: "c4bf879a-04c3-4b4c-958b-6478c3f3b2c7",
      prev_page_cursor_id: "b83d991f-a2be-4aab-bcbb-e04c0387e1e0",
      per_page: 245
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      is_modified: true,
      from: "2025-02-13T22:45:06.000000Z",
      to: "2020-04-27T19:32:55.000000Z",
      next_page_cursor_id: "664ecf6f-3867-4a5b-9068-ff0700d684d3",
      prev_page_cursor_id: "e08fe0b3-f270-4d50-bca3-c73d0b630ec8",
      per_page: 838
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      bill_id: "04fa6b35-29b7-40b4-bce5-ee23988082bf",
      is_modified: true,
      from: "2023-03-07T04:40:26.000000Z",
      to: "2021-07-15T06:56:49.000000Z",
      next_page_cursor_id: "d9edfd02-486b-410e-b3c8-5cb404d2a152",
      prev_page_cursor_id: "b5cd2eb2-924d-4209-a708-fd795d9e25d7",
      per_page: 165
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      transaction_id: "3bf4dabf-bab6-45fa-b1b4-ab0bb6108139",
      bill_id: "c9b848ca-a142-4c52-9adb-3ced964ca051",
      is_modified: false,
      from: "2021-12-10T04:33:28.000000Z",
      to: "2021-10-06T07:05:16.000000Z",
      next_page_cursor_id: "200a23fe-dd22-4a18-9455-fd8746a91a91",
      prev_page_cursor_id: "82b0a411-9ae7-461c-977a-6d65e99bbf7c",
      per_page: 996
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      description: "WdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lz",
      transaction_id: "a88089c7-49e7-43b9-abb8-8583b0e9167a",
      bill_id: "a33bae58-e499-4935-8127-4926dff9f028",
      is_modified: true,
      from: "2023-06-09T09:23:23.000000Z",
      to: "2020-06-13T05:51:52.000000Z",
      next_page_cursor_id: "c09567a8-bcb6-4d72-bd0d-7addd8dda9e4",
      prev_page_cursor_id: "0b94da7a-de29-4fda-803a-078e03815e36",
      per_page: 940
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      terminal_id: "eddf07cb-5869-44f7-b630-2f457760bacb",
      description: "pO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9V",
      transaction_id: "4c785adc-cb77-471b-b0e7-9268c700689c",
      bill_id: "030f0c76-919c-4355-b7c8-1c59d295b734",
      is_modified: false,
      from: "2021-06-23T10:59:12.000000Z",
      to: "2021-02-20T03:43:09.000000Z",
      next_page_cursor_id: "c193c811-e4e7-487c-942d-2771bfcd6f61",
      prev_page_cursor_id: "59c99334-a487-4670-a6b3-17ce5a7e4dbb",
      per_page: 513
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      customer_name: "BV6jnDEmNinmBAkCQlWqd",
      terminal_id: "a9264c34-1456-46a7-a7f4-ace06c4196e1",
      description: "7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz",
      transaction_id: "07d54cb8-d381-4484-b1ac-ea82783a0af5",
      bill_id: "91145548-3538-4838-8ee7-4e9c0828e659",
      is_modified: true,
      from: "2022-05-11T08:04:01.000000Z",
      to: "2023-10-05T10:58:36.000000Z",
      next_page_cursor_id: "64c7c096-2cd1-4c27-9643-dcb4339fbfa7",
      prev_page_cursor_id: "74af3005-1f8d-49b5-9951-0a7da2abe273",
      per_page: 221
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      customer_id: "cf01d52d-da8e-4fe5-9d17-e879ddb76a90",
      customer_name: "s9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJ",
      terminal_id: "6745f3ff-4fcb-474e-a54d-e7327835c544",
      description: "vQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOW",
      transaction_id: "8bfa1c08-f556-4d4e-b1be-6a03ad5ebfcb",
      bill_id: "4cea0c5c-5d43-4d59-abe7-5d61e5c67c4e",
      is_modified: true,
      from: "2023-12-21T19:10:01.000000Z",
      to: "2020-08-16T04:12:38.000000Z",
      next_page_cursor_id: "90bafded-8686-4ea7-a1d3-3dda0667b657",
      prev_page_cursor_id: "499bdeaa-5aca-43ee-9e2b-bbbc64a7a92f",
      per_page: 904
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      shop_id: "ae11e487-1431-4090-ac2a-9fbf0b9e4384",
      customer_id: "ff08dda5-3908-44bc-93b2-941169c57607",
      customer_name: "7yVjYZzSkjksojB4PnV9",
      terminal_id: "144fa3f3-a69d-4921-8207-c5848e4b17a6",
      description: "fF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXW",
      transaction_id: "2fddce04-7c7c-4ac3-b51b-70f4852c0429",
      bill_id: "d87ba3fe-19cc-4ec6-8e27-73a3444916de",
      is_modified: true,
      from: "2020-09-10T20:04:56.000000Z",
      to: "2023-07-09T03:31:17.000000Z",
      next_page_cursor_id: "aac2dd93-e210-4c7c-b15c-9ed6b027a8a0",
      prev_page_cursor_id: "c67bbd50-ea2a-4643-be5f-39880f55a604",
      per_page: 279
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      organization_code: "Fm-",
      shop_id: "a3aa113a-8113-4dfe-a2eb-79007c9f52ad",
      customer_id: "190c67f8-f98e-493f-9fb4-074b3f6b0db7",
      customer_name: "mpotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIV",
      terminal_id: "8ed87dea-d9f4-4f5e-9591-fa6b2e7b2586",
      description: "TSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0Q",
      transaction_id: "361edf54-365f-4f0e-a6bc-afa2f9c42317",
      bill_id: "9fcf2d40-a278-4982-b86c-a5b2d11015bb",
      is_modified: true,
      from: "2021-09-25T23:49:46.000000Z",
      to: "2022-03-23T13:41:52.000000Z",
      next_page_cursor_id: "6915cc42-07bc-496a-9979-aa3fc57b1ed1",
      prev_page_cursor_id: "cb0b8d8d-e5f1-479d-a520-accfee17411e",
      per_page: 272
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      private_money_id: "9aeee731-60fe-4f2b-b93f-764b089d7d68",
      organization_code: "S6-pZn6zKe3am-3l-N7RH-Or9",
      shop_id: "4c31d29a-31ff-4be4-a42b-383ae9016134",
      customer_id: "22e4bfa7-c7ed-47ad-8c80-601f0b400fca",
      customer_name: "zHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApk",
      terminal_id: "a1a45582-2dab-46a4-a144-686552dae459",
      description: "OtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTq",
      transaction_id: "6c4258ff-1c10-41bf-884c-e2a432ad195b",
      bill_id: "9920bdd1-0d77-4861-865a-76025ae04e39",
      is_modified: true,
      from: "2022-05-05T05:49:39.000000Z",
      to: "2023-09-06T13:11:29.000000Z",
      next_page_cursor_id: "44324a70-0bef-45d2-af88-055081e7443c",
      prev_page_cursor_id: "9e7e9011-bc0b-48cb-95e7-2c7e94ec302f",
      per_page: 10
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      request_id: "5bcac3a7-45f6-4f8a-acb9-2b0815fe82f8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      metadata: "{\"key\":\"value\"}",
      request_id: "44e402e2-f666-4112-ba82-a5de35a1e328"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      description: "vgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXc",
      metadata: "{\"key\":\"value\"}",
      request_id: "ef979665-ff1f-4bc4-a9af-5d55fe2005fe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      point_expires_at: "2020-05-07T03:46:10.000000Z",
      description: "70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4l",
      metadata: "{\"key\":\"value\"}",
      request_id: "9e86db5b-d725-40da-8e53-15aebae898d6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      point_amount: 1784,
      point_expires_at: "2020-03-06T06:48:56.000000Z",
      description: "qYiDQPFv2xIXm",
      metadata: "{\"key\":\"value\"}",
      request_id: "7e33e549-d7b4-49d0-a7ec-c13a756c6a50"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      money_amount: 1014,
      point_amount: 6051,
      point_expires_at: "2024-11-06T03:07:37.000000Z",
      description: "odipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnu",
      metadata: "{\"key\":\"value\"}",
      request_id: "6bdb906f-379c-4293-95c9-38904234f5cc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "1ab63957-28f6-469b-992d-5babc333d21b",
      customer_id: "e0eaf756-9705-4513-bfdd-41a01c99ea3e",
      private_money_id: "828591fe-a607-41e1-af1e-f1337b002d47",
      bear_point_shop_id: "94a3bb0e-d04f-4292-a9fa-197fa4d67076",
      money_amount: 7782,
      point_amount: 3914,
      point_expires_at: "2021-01-18T15:28:12.000000Z",
      description: "Trh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7",
      metadata: "{\"key\":\"value\"}",
      request_id: "1f313dd8-be6d-4f70-af60-17222eb9b471"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "8b459ee6-7683-421b-9086-26ed3e9f5b49",
      customer_id: "4394d472-1b0d-4a61-a4c7-da5661d36a8f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "8b459ee6-7683-421b-9086-26ed3e9f5b49",
      customer_id: "4394d472-1b0d-4a61-a4c7-da5661d36a8f",
      request_id: "0a3b86e8-ccbd-49f3-bc4c-0d4a1cbb5515"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      coupon_id: "76591b43-9794-4d8b-807c-7fa2f592dffe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      strategy: "money-only",
      coupon_id: "89da56aa-edbe-4684-aeec-e9f45c36a8fb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      request_id: "7b2377d8-99ec-4cc7-9fb6-6fdda8df1525",
      strategy: "money-only",
      coupon_id: "31ac8e7e-4561-4107-a84e-bde370e3e166"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "a8b0c5b2-de32-4150-abf2-1890b5134305",
      strategy: "money-only",
      coupon_id: "6db53240-3aa5-4b2c-acfc-4573e343977b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "fe5cdccb-1bd7-450e-99f8-9e470c869c1f",
      strategy: "money-only",
      coupon_id: "1bb43774-8ad1-4ea0-af6a-aeb4abf1e64f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "ed340ee9-cdf1-4c08-89fb-8c27d552b262",
      customer_id: "bc8c30ba-25fc-4c51-9c33-5d4de972d2d1",
      private_money_id: "e93012a1-cd8c-4d04-922f-a6ff3627a3a4",
      amount: 57,
      description: "VmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "134750bb-b7e5-40c8-aece-2079c9f9cedc",
      strategy: "money-only",
      coupon_id: "dc7c1a06-09b4-4efa-b9db-5107092db159"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "05c27c83-161f-495a-aaf3-9027f8a00157",
      customer_id: "5fc53b74-229f-40ba-9ed9-cab10690c928"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "05c27c83-161f-495a-aaf3-9027f8a00157",
      customer_id: "5fc53b74-229f-40ba-9ed9-cab10690c928",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "05c27c83-161f-495a-aaf3-9027f8a00157",
      customer_id: "5fc53b74-229f-40ba-9ed9-cab10690c928",
      request_id: "0b232386-c58b-4857-a92a-0c5cc8f09147",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "05c27c83-161f-495a-aaf3-9027f8a00157",
      customer_id: "5fc53b74-229f-40ba-9ed9-cab10690c928",
      metadata: "{\"key\":\"value\"}",
      request_id: "3e1ce7f5-88ff-44bf-a263-40aea121a8e6",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0,
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0,
      request_id: "96cc9c41-f4a1-488b-820b-c7fa5a5c2823",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "8ecf7882-4123-409e-bcae-6ae1c1a6bd6c",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "f7306339-7165-4108-a074-16331f4f3df3",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "8poH65gFI1eD4xOb3KkBBL",
      shop_id: "8b38929d-fbf9-4afd-926d-9e7ad1dc4c58",
      amount: 6121.0,
      description: "JPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCP",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "859b5f2a-cb8e-4882-aee3-8d1c457c9345",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dac31b90-dd57-4ed9-bb81-df03abab299d",
      customer_id: "8c8c39e5-57e2-4685-b434-f952aa6599d5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dac31b90-dd57-4ed9-bb81-df03abab299d",
      customer_id: "8c8c39e5-57e2-4685-b434-f952aa6599d5",
      request_id: "7d06e704-1247-4652-b12c-0a5ca2d298be"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dac31b90-dd57-4ed9-bb81-df03abab299d",
      customer_id: "8c8c39e5-57e2-4685-b434-f952aa6599d5",
      strategy: "money-only",
      request_id: "3fc7b354-7611-400f-b31e-7b3f4d823177"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "6154dce3-609a-4c75-a365-21fd04a25b79",
      receiver_id: "e8f62a9c-b153-4201-8329-ac22ac1e99de",
      private_money_id: "2986f329-4061-4422-a278-a3f2742ec81a",
      amount: 8807.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "6154dce3-609a-4c75-a365-21fd04a25b79",
      receiver_id: "e8f62a9c-b153-4201-8329-ac22ac1e99de",
      private_money_id: "2986f329-4061-4422-a278-a3f2742ec81a",
      amount: 8807.0,
      request_id: "0c2d43d4-c00f-4e7c-9853-a4f856c173da"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "6154dce3-609a-4c75-a365-21fd04a25b79",
      receiver_id: "e8f62a9c-b153-4201-8329-ac22ac1e99de",
      private_money_id: "2986f329-4061-4422-a278-a3f2742ec81a",
      amount: 8807.0,
      description: "g1Ud9jBS9C",
      request_id: "276861d1-333d-4d5f-9f2a-9206b00ae910"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "6154dce3-609a-4c75-a365-21fd04a25b79",
      receiver_id: "e8f62a9c-b153-4201-8329-ac22ac1e99de",
      private_money_id: "2986f329-4061-4422-a278-a3f2742ec81a",
      amount: 8807.0,
      metadata: "{\"key\":\"value\"}",
      description: "qv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6",
      request_id: "c0a7c0f1-a262-44d2-92a2-e1ef20f24617"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "a5067d30-2da2-404b-aff3-21cbbfe23a51",
      sender_private_money_id: "82b59381-c73f-45ea-ae62-1e2d716d363c",
      receiver_private_money_id: "196f5c49-dd46-4df0-aca5-e91d91973ac4",
      amount: 4705
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "a5067d30-2da2-404b-aff3-21cbbfe23a51",
      sender_private_money_id: "82b59381-c73f-45ea-ae62-1e2d716d363c",
      receiver_private_money_id: "196f5c49-dd46-4df0-aca5-e91d91973ac4",
      amount: 4705,
      request_id: "3c302ccc-2e5f-44a0-99e2-eccd842d3d3b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "a5067d30-2da2-404b-aff3-21cbbfe23a51",
      sender_private_money_id: "82b59381-c73f-45ea-ae62-1e2d716d363c",
      receiver_private_money_id: "196f5c49-dd46-4df0-aca5-e91d91973ac4",
      amount: 4705,
      description: "Mvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq",
      request_id: "009743b5-a7fd-4c30-a691-3510e5264873"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "joNHBAUn0qZzCUWIZlu3",
      content: "CPUHg3H",
      request_id: "pQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "joNHBAUn0qZzCUWIZlu3",
      content: "CPUHg3H",
      request_id: "pQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMb",
      private_money_id: "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "joNHBAUn0qZzCUWIZlu3",
      content: "CPUHg3H",
      request_id: "pQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMb",
      description: "8HS4JwKvfQBXbwG5FfO",
      private_money_id: "dd004762-aeba-46e2-8bd5-589322a803d3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransaction({
      transaction_id: "3667a2a0-8fb2-49f7-8fb8-d6a3db04f8ca"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "667f2955-f2d3-432c-b654-f563b2624d26"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "667f2955-f2d3-432c-b654-f563b2624d26",
      returning_point_expires_at: "2024-02-23T15:18:38.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "667f2955-f2d3-432c-b654-f563b2624d26",
      description: "wfudd",
      returning_point_expires_at: "2022-04-23T18:20:52.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransactionByRequestId({
      request_id: "9749343c-1c9c-4430-afba-cecf7c5238e3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861,
      done_at: "2021-10-27T19:04:46.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861,
      request_id: "48d73a4a-a118-4ef4-bce6-c7049d4cc8f6",
      done_at: "2023-11-05T03:17:32.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "0d76909d-f600-42a0-95d4-654dc4e31b4d",
      done_at: "2022-08-18T14:37:28.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "71731cfe-ebab-43be-96bd-cf1ada493903",
      done_at: "2020-05-10T05:43:56.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "0d6a41c4-3c4e-4d22-bdb2-983f7c41ed3f",
      customer_id: "e103bb09-335d-425d-9411-fab6f0bcab9c",
      private_money_id: "c8abf1fb-bc08-446b-97c5-f8abaf064dda",
      amount: 2861,
      description: "v3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDB",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "3416b632-e5b8-4476-8544-2f73b7658696",
      done_at: "2020-10-07T22:23:21.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "cdbd239f-e0ab-44f2-b2db-84dde5c5fec5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "cdbd239f-e0ab-44f2-b2db-84dde5c5fec5",
      description: "FyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetExternalTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new GetExternalTransactionByRequestId({
      request_id: "555b2bee-f118-47ce-9c46-2befdd2a7b4e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "a90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["expire"],
      description: "rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["payment", "exchange", "topup", "transfer"],
      transfer_types: ["topup", "expire", "transfer", "cashback"],
      description: "5Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: ["cashback"],
      transfer_types: ["campaign", "transfer"],
      description: "WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3t"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "177481ae-2a64-403f-a165-95f2ba3cd2e2",
      is_modified: true,
      transaction_types: ["cashback", "transfer", "exchange", "topup"],
      transfer_types: ["campaign", "topup", "transfer", "coupon"],
      description: "QRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "46864138-b99c-4a54-b5bb-9414289c06ed",
      private_money_id: "f2961327-4728-457b-b33a-5e29638c0a54",
      is_modified: false,
      transaction_types: ["payment", "exchange"],
      transfer_types: ["exchange", "payment", "coupon"],
      description: "GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "hwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3Ln",
      transaction_id: "5f987127-adf0-4d62-bba1-e872f6008350",
      private_money_id: "fa3b1f29-7cbc-4613-919a-d78f5d494ca2",
      is_modified: false,
      transaction_types: ["transfer", "exchange", "expire", "cashback", "payment"],
      transfer_types: ["transfer", "expire", "cashback", "payment", "coupon", "exchange"],
      description: "U7DSfY3LgW5M2IvR52"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "d6b54e2d-8c88-477b-8367-d7c9b6a0d393",
      customer_name: "y3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqI",
      transaction_id: "d521ccd1-5163-4841-8426-de416244912e",
      private_money_id: "e649e923-9aca-421a-bce8-95d72ef834c6",
      is_modified: true,
      transaction_types: ["exchange", "cashback", "topup"],
      transfer_types: ["transfer", "campaign", "cashback", "payment", "coupon", "topup", "exchange", "expire"],
      description: "Ezja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "SHyiFoseHqYyK8GIOW0PG",
      customer_id: "323413ad-cfd5-4eb4-b59f-26247c28b0f5",
      customer_name: "Pdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoo",
      transaction_id: "53ae4577-b52d-4624-85a5-f1007464b020",
      private_money_id: "176ea6f1-1877-44ef-a201-c43e462a6f90",
      is_modified: true,
      transaction_types: ["expire", "exchange", "cashback", "payment"],
      transfer_types: ["topup", "payment", "campaign", "expire"],
      description: "4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "772ac225-3f38-4efd-9fb3-a3cec5f78605",
      shop_name: "0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6Am",
      customer_id: "2ec7d873-685d-4877-9a64-90c0bcfb2b41",
      customer_name: "3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWm",
      transaction_id: "ffe29c6d-faa8-4f7c-a5e7-a0ddf6176886",
      private_money_id: "e29148e3-9cde-46b1-8b99-44c7b1018de8",
      is_modified: false,
      transaction_types: ["expire", "cashback", "payment", "exchange"],
      transfer_types: ["coupon", "exchange", "cashback", "transfer", "payment", "expire"],
      description: "ac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 5774,
      shop_id: "8d671953-a0ea-4d65-8637-fd3dd76ae7d3",
      shop_name: "ZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrY",
      customer_id: "fe8a6142-3c67-4c1f-98a7-c011d0c5f288",
      customer_name: "YNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3F",
      transaction_id: "6d961c73-e6a7-4ba1-8217-55fbba093757",
      private_money_id: "b6730a97-d2fd-4f23-8854-fa6101636252",
      is_modified: false,
      transaction_types: ["expire"],
      transfer_types: ["topup", "campaign", "expire", "coupon", "payment", "transfer", "cashback", "exchange"],
      description: "vbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 7444,
      per_page: 1003,
      shop_id: "1317849c-54ba-419f-b744-5f0007fea9a8",
      shop_name: "QdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVk",
      customer_id: "e07625ac-2563-47d3-8905-be6ee8485640",
      customer_name: "vOjFPIL9qlVMwg0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42NN7jWbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4N",
      transaction_id: "68cc9397-f7d9-405e-ba69-d0a0fc7d82f2",
      private_money_id: "39cae2e0-1dd8-47f2-b9d0-10bdbbbb1daf",
      is_modified: true,
      transaction_types: ["cashback", "expire", "exchange"],
      transfer_types: ["exchange", "cashback", "coupon", "transfer", "topup", "expire", "campaign"],
      description: "A9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2024-07-19T13:22:13.000000Z",
      page: 883,
      per_page: 9418,
      shop_id: "6a7b0917-ff6d-44ff-a755-e80790762692",
      shop_name: "Nm",
      customer_id: "a6e49181-614c-4c21-9165-858db5cc9093",
      customer_name: "KEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrA",
      transaction_id: "a81beb64-268f-440b-a20f-a8e39d890fc0",
      private_money_id: "e4f8b6fa-e2b5-4337-a6da-dface2f50d4f",
      is_modified: false,
      transaction_types: ["payment", "cashback", "transfer"],
      transfer_types: ["topup", "cashback", "payment", "coupon"],
      description: "M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2020-06-19T12:50:54.000000Z",
      to: "2021-04-16T23:56:35.000000Z",
      page: 8327,
      per_page: 1261,
      shop_id: "850ff270-396e-43be-9d1e-5bef6bf5833b",
      shop_name: "ezOx6Ov6eGwjQ",
      customer_id: "cc8a1fa1-e0ba-49a8-83a2-66973b24e7f1",
      customer_name: "xdtQnDY4S9N4",
      transaction_id: "2aaba388-9e83-463d-8748-b12ae9e0d268",
      private_money_id: "011f334a-bd0d-47a0-91b5-d1f2d8b4ff27",
      is_modified: true,
      transaction_types: ["payment", "transfer", "expire"],
      transfer_types: ["transfer"],
      description: "Y47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      to: "2025-02-28T01:08:36.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      from: "2023-05-21T16:25:44.000000Z",
      to: "2025-08-01T18:16:06.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      description: "spW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob",
      from: "2021-08-13T10:57:59.000000Z",
      to: "2021-08-02T03:38:13.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transfer_types: ["payment", "expire", "transfer", "campaign"],
      description: "qFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT6b0IY83jSy9CLjq8yjjxInoBnLVw5NxHP7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6u",
      from: "2024-01-11T23:49:58.000000Z",
      to: "2024-08-17T18:28:14.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      per_page: 171,
      transfer_types: ["topup", "cashback", "payment", "coupon", "campaign"],
      description: "7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGs",
      from: "2020-02-22T01:07:11.000000Z",
      to: "2023-10-31T10:32:00.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      prev_page_cursor_id: "cd8be7d0-ced0-4462-8776-83a32b1cd3d1",
      per_page: 699,
      transfer_types: ["cashback", "coupon"],
      description: "BJ7wmgCWNKDP1enxAKZBD2FhNoFZKIbAgSoRCKxxDEWQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJu",
      from: "2021-10-23T19:49:53.000000Z",
      to: "2022-06-05T22:59:06.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      next_page_cursor_id: "6241e537-c29b-494f-9be2-4bd59d675ca6",
      prev_page_cursor_id: "d08d374e-9d15-433b-915a-9f9af02b09b0",
      per_page: 706,
      transfer_types: ["topup", "payment", "expire", "campaign"],
      description: "Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQz",
      from: "2021-10-05T05:21:13.000000Z",
      to: "2022-04-26T03:16:54.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_types: ["transfer", "exchange", "cashback", "topup", "expire"],
      next_page_cursor_id: "f0d8b57d-10a9-4520-9f86-b982ce0c4df2",
      prev_page_cursor_id: "edd2359e-2edf-44b7-a6f3-e2426312baee",
      per_page: 936,
      transfer_types: ["topup", "expire", "payment", "cashback", "transfer", "coupon", "campaign"],
      description: "OVY8vi9Z9lrbTGfh4QbdPS2DfLew9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcxkp2hdiJWs83eoAqvgg01zZW75gRDgWRTNwobRsB1baR1aePdc",
      from: "2020-05-30T21:00:56.000000Z",
      to: "2025-06-20T04:31:53.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      is_modified: false,
      transaction_types: ["payment", "topup", "cashback", "exchange"],
      next_page_cursor_id: "35302418-5147-48c8-8c9f-f22ba9a0cee3",
      prev_page_cursor_id: "853e63f7-18f9-4d3c-94e5-413fff4bb52b",
      per_page: 163,
      transfer_types: ["payment", "expire", "cashback", "transfer", "topup", "exchange", "coupon", "campaign"],
      description: "5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLloM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwhy5RIJGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4G",
      from: "2022-03-11T09:18:48.000000Z",
      to: "2024-11-03T01:17:38.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      private_money_id: "b26c9bb1-cd1d-44db-ba1a-084df4297737",
      is_modified: false,
      transaction_types: ["exchange"],
      next_page_cursor_id: "81592673-63a6-4a08-bcca-1c847dd7b996",
      prev_page_cursor_id: "fd4b5813-f8f9-4813-815e-0c2516cbd953",
      per_page: 991,
      transfer_types: ["campaign"],
      description: "jtVj6RA58jW2j8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp",
      from: "2024-03-31T10:15:20.000000Z",
      to: "2020-09-10T03:14:26.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_id: "f02842a4-ee1e-4735-b122-300ec40eba10",
      private_money_id: "c0f95adf-a8ba-4af9-8102-a699e1982cd9",
      is_modified: false,
      transaction_types: ["expire", "cashback", "topup"],
      next_page_cursor_id: "3cb0bbd7-3673-49f4-b179-c1ad9c9d2e03",
      prev_page_cursor_id: "5a58a2c9-139c-456c-ab2a-71481450b1e0",
      per_page: 720,
      transfer_types: ["coupon", "payment"],
      description: "M6Qkur8Sb",
      from: "2020-10-30T03:47:48.000000Z",
      to: "2025-08-09T11:24:39.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_name: "uCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtCHCm7yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxV",
      transaction_id: "a1343529-1396-48e0-8871-c975b8afee7c",
      private_money_id: "23f95c17-2392-4085-9614-66d9410122f3",
      is_modified: true,
      transaction_types: ["cashback", "expire"],
      next_page_cursor_id: "8be02cf3-4052-41e9-822a-a7f3cffa6509",
      prev_page_cursor_id: "3e2f8fd2-e512-46d1-b91b-b9e535ad433c",
      per_page: 100,
      transfer_types: ["coupon", "expire", "topup", "transfer", "campaign", "cashback", "payment", "exchange"],
      description: "4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FRWe6zLcwMHaeJGFXqwAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZ",
      from: "2021-11-13T13:59:36.000000Z",
      to: "2025-03-10T14:09:56.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_id: "4bad811c-d641-4b00-b9f4-25d442d84648",
      customer_name: "VvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Aze",
      transaction_id: "f6f2025c-51ef-445a-8517-633b4efb651b",
      private_money_id: "ee4d51fd-5a4f-4a59-be75-cef5577dd231",
      is_modified: false,
      transaction_types: ["transfer", "topup", "cashback"],
      next_page_cursor_id: "67fdee20-6471-4a2c-95ec-3ad7551a9c3e",
      prev_page_cursor_id: "0d772977-fefc-49f9-bca6-23859be502c3",
      per_page: 668,
      transfer_types: ["campaign", "expire", "payment", "topup", "transfer"],
      description: "CUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQd",
      from: "2021-06-30T23:53:25.000000Z",
      to: "2020-10-11T11:52:02.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_name: "QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLq",
      customer_id: "b6a1db3b-5505-4716-bce8-b1a19551185c",
      customer_name: "bA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd8wILW6Ubji6nDVo6kwtt0eE996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdO",
      transaction_id: "66c776d2-c2ea-42b3-9dbd-c9fe8c36064a",
      private_money_id: "d50b2aac-ce6c-4880-ae61-e1b3625a3a50",
      is_modified: true,
      transaction_types: ["topup", "exchange", "cashback", "expire", "payment"],
      next_page_cursor_id: "d69ebd7f-e328-47fb-ac38-334f6a1fa167",
      prev_page_cursor_id: "c61dce4e-e5e8-4507-a81a-f5713cac248c",
      per_page: 688,
      transfer_types: ["cashback", "campaign", "payment", "topup", "transfer", "coupon", "exchange", "expire"],
      description: "sClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqw",
      from: "2024-07-17T08:51:49.000000Z",
      to: "2022-06-12T10:58:44.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_id: "b989d36b-720e-4988-ac6b-219f01017e67",
      shop_name: "vqZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHDiw8sqMTw9CGM",
      customer_id: "450967ab-6a85-4407-8694-a0f2228d9570",
      customer_name: "upnZP3tXLGdI4BQeMKNjNC6v4LdJ9q",
      transaction_id: "5f01bdaf-66dd-4430-9cee-9ae9d822e189",
      private_money_id: "d8e13f66-ab89-4241-9523-3c7502f06147",
      is_modified: true,
      transaction_types: ["expire", "exchange", "transfer", "payment"],
      next_page_cursor_id: "18ee3795-f50e-43f6-a389-923452289414",
      prev_page_cursor_id: "63fd5441-5fa9-4d35-88ec-c10c5e766643",
      per_page: 112,
      transfer_types: ["coupon", "transfer", "topup", "payment", "exchange", "cashback", "expire", "campaign"],
      description: "llUlO",
      from: "2023-09-21T11:49:23.000000Z",
      to: "2022-08-10T04:11:58.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "fb66ff47-57a3-40a1-9961-20f013711956"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "fb66ff47-57a3-40a1-9961-20f013711956",
      code: "yu0AtoOYT3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "fb66ff47-57a3-40a1-9961-20f013711956",
      name: "8xXDG",
      code: "31wijg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "fb66ff47-57a3-40a1-9961-20f013711956",
      per_page: 7926,
      name: "WSuuP7",
      code: "XI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "fb66ff47-57a3-40a1-9961-20f013711956",
      page: 9105,
      per_page: 6871,
      name: "zNjNiLWADY",
      code: "WxDRpy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      contact_name: "rNeMACItmOkY1pUONfZUthj8CTdPwk2g7DYhFuXWtax2gH7mosTYAgSjd1Lu4N1G4DllEfWLsx2f1PjIk5LFEcZYZR1K1ULgGU5oSrsDCn36n92LJoBnxVWA0Bmx0P3sS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_account_holder_name: "｣",
      contact_name: "2djDx2E8q2Tl06IVYw4zb7KKLj26g9D4jd9Fi73fT2ekfbMypSoZArmvOOmVqy7LHITpCScM5po6zQrUB5yHtoGfycJYa2GIKQCGBFwcqnjKtXS5ctb0sUDamQiJFavfIlsQjs1Uxv98uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_account: "16",
      bank_account_holder_name: "/",
      contact_name: "bUSgXIGfDPEPwHED0KtmDzxLUbUeg7w8cIU7UKhxLe1FMHoh3041czvU7tiTGNYlDyRk3aGMps1HN2Oi8GzWre6yIHCge3KvTMWtvAOdqc6t46b4EgFIpDVk2sqQhlAUNF0Kr6ekdB7WSGlsT24mzzvf0uixfzgMS7DAxRVXjpoYOkLYbJM46YGKDJVQANt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_account_type: "other",
      bank_account: "335868",
      bank_account_holder_name: "ｷ",
      contact_name: "I9CHdZGkENDSkRyfWKAxjQWjCB8nFcqmENfDor1zgwF9x3xZsR5bLJPhH3FEHzbfU4cD6smAeqngifjNikqDE3OudXpYhNwFWUAKOnWlhna0lYNQbEnbMVdbi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_branch_code: "107",
      bank_account_type: "current",
      bank_account: "47496",
      bank_account_holder_name: "/",
      contact_name: "gHJA1FfneXYRV1FBu9VqwmK2QWEkaIk3Nf30"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_branch_name: "AeRoMBnYRrC4cXtKQ0a4OPrt2tro65RM4SYyWPQ4b5EvFhF0JaiWp",
      bank_branch_code: "088",
      bank_account_type: "current",
      bank_account: "50",
      bank_account_holder_name: " ",
      contact_name: "XFTYAHJdFeGZi1JIa9NTrkMeAKNU2qNMrw4Jay2YBOfulEIFK5T7Dc8oOst1MM9PmjRDk75J779k3qO5Tt2uQGKACRqDnzgekX1v8dvD0ApeDNVXLZhDHmMPohPl8jvZE0kmWyBRnvtcRhoAfyfPvqb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_code: "2027",
      bank_branch_name: "VyEBxJxS2dp5fON6g3h5b1QYmVCtk78JxdSgtNZkgpDcQrvPvYu9rBGsdWvnLsp",
      bank_branch_code: "770",
      bank_account_type: "saving",
      bank_account: "5",
      bank_account_holder_name: ")",
      contact_name: "crgAIrlVAxUxxoJ3m2cOYFN3fJYwkLiuasNI3TQ4Ubb8U4LoGEUFzMVQ4l9WdfwN1GBXrbSDIYZlYLOis5sBRV50E243Lt7Q0CkQGlHLmFUomkHrvNClWFSWTgMn5wd60p6qorRS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "5o7r",
      name: "N4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOK",
      private_money_ids: ["4022ff6f-fccb-47a5-9d07-eaa6d6a3f800", "4713becd-d03f-4a3f-bda0-5f3cb9a04cbb", "2b384f1f-fa33-4542-ab1a-c969d952c63e", "fb2eeb00-01d1-4591-b5ca-fc4378e73e5e", "ab5ad517-5c5f-42ce-8c55-39514c49291b", "6dd04350-79ff-495c-8a70-c9448827cccf", "3b66b7ef-8f47-48ce-926b-2d3e46389901", "ba524d42-7aef-47db-834b-0c9c6bedb4f8", "cbafdd1e-c784-4654-b600-ed8aba665e1e"],
      issuer_admin_user_email: "ABwe33UWeS@zKCZ.com",
      member_admin_user_email: "wv4PwJOyIc@ULWz.com",
      bank_name: "9NZATmh",
      bank_code: "4867",
      bank_branch_name: "mf",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "",
      bank_account_holder_name: "0",
      contact_name: "9Lp665rg0d7eGITtIklkYFTO7OJe9dSEOGALN8S7z1KForIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5Ka"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 5101
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 4594,
      per_page: 9261
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      with_disabled: true,
      page: 4133,
      per_page: 6660
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "7H",
      with_disabled: false,
      page: 1835,
      per_page: 5513
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "qvdSNveWzW@I5L6.com",
      external_id: "QvZvRJLln3CmVmPz2bcH2x",
      with_disabled: true,
      page: 1987,
      per_page: 73
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "028724297",
      email: "7EYCf76ToH@cl8d.com",
      external_id: "zcqD6rqwGDVRdojGjigHpZl8InHQBhMIrdZ",
      with_disabled: true,
      page: 9741,
      per_page: 409
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "9MnQgGfElkSct56tB3QvYjy8mUgDyXQYOSshpGMC",
      tel: "006-53-924",
      email: "BHnAmdlKiU@j9Jq.com",
      external_id: "anI8FqIXqzelGZDONUAJfl2",
      with_disabled: true,
      page: 7886,
      per_page: 4341
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "079-3170",
      address: "kt1pOBZosxcU6W1vFMKN952VUdQ3t63Wpysg20fNhPhFK8mUwq4sfxVOVqIgogobrlTBvrKr",
      tel: "099637328",
      email: "Kz0hnHtPEm@OFzy.com",
      external_id: "sMn1h",
      with_disabled: true,
      page: 4466,
      per_page: 5277
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "gZ4Scflk2JdjznjOojFztUyYyUwwyS9B5htgNIDpUpzKyj3BEvYp1TbuySIy9vMfjs9RSVIuRLJamUgod9vJRMh5laf7AaoLGt4pe6BC2Sel2QniqdOC9my1YOO8CjR0YFmv40UM5wZgue67e0YlrO8E3L7gW6pVO",
      postal_code: "8742621",
      address: "hoBOihdHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8FkE6WXDem2rgS",
      tel: "0335-251-492",
      email: "4kR9S0XTdm@HcC0.com",
      external_id: "GFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16o",
      with_disabled: false,
      page: 2383,
      per_page: 2532
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "5d9925ba-e57c-4dbe-a6da-ce343ae9064e",
      name: "yIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9T54l9EXWThBhNBtq0Hlr5VUDcRjPWhcWE5Ed0Dp6qm5enNIYlp4WuULLQB3hzZG357PPnWlMQlOO65IFrI1BJMiWPv5dAbUBWta68v79KNgsodWT1kP64chZLEzZTeXAsCUOeSILicKJugPMhkbNW44x5lpizelx6Zw3ANk",
      postal_code: "4724531",
      address: "nigb4Yb3t6kmvyhjD7Y1lgzqIh5MLpUpAeuRnJqWXlTPA3BNnPJo0CH10GQb96Jzcef7f3He1f0QYEkgJnc3iiJ3NDVFkNizSfk2HEbXxayxzM2cghdc2Ljaj2GsuiV9UsDnl2m8nhmhWmlD5AgJ4dO8VEt3hyN01xWKpyfSJX1OiNUbqHXuSEWeM8VLmM8qznKIn9uBoqN3XKkwmXFnLL0vhZmz",
      tel: "09-245-6818",
      email: "VnjFoEs5f6@4mvX.com",
      external_id: "C0yIYDrOmfZv",
      with_disabled: false,
      page: 6631,
      per_page: 897
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "j31",
      private_money_id: "2882ae1e-37f2-4296-903d-4aa75728d3b3",
      name: "hD1uxIbudPgKcAH4LqtvnYdJrsgVxWy0PirB5ccKSjPsnaJy0xSUa",
      postal_code: "953-9907",
      address: "veNp11WiSr08uCzB0JSt7hZNL6cvcqBnhGnyRs1ZbgEX46DL0EY9Dfg2K2KSBJ32yceHkpeJS53rQYrIERvl0KriuNlhP5RwfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnM",
      tel: "08-112676",
      email: "F279GcsdDt@M3uS.com",
      external_id: "EYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5x",
      with_disabled: true,
      page: 6566,
      per_page: 9582
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      organization_code: "-7Vh--3--Ez-6-zg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      shop_external_id: "qeTxBrSdGB4t2pP3Ko",
      organization_code: "P-13i--OcHYW-R-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      shop_email: "Gp1Rn3U4KQ@sAmd.com",
      shop_external_id: "QrUihNu2f4606Zw3XOfvqGL",
      organization_code: "65Fg8STCN6Tc-P0-h"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      shop_tel: "027-3119057",
      shop_email: "J7JGBC1o5R@c96w.com",
      shop_external_id: "VrWrKd8Zckn",
      organization_code: "--KfDWMg2-2X--K7qE6-38JgxL1S-6-M"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      shop_address: "xtHaQbqrekxj6KVFbsIqYgBl99xXSIGv3Ovn3SH7ljqEdpqCcPOpWjivoOnvdw0Yvld3IeJyhTlRgTT2NxSiphZRlLoLjMmLSHQhe4tHPdlvKxC8QojNKN0zqICt7BPEI",
      shop_tel: "061-5089-9188",
      shop_email: "xaPzoaDv6U@6SXL.com",
      shop_external_id: "Had9cOSRej1Twb2rvpiwJLSyh",
      organization_code: "-c8-Zb-56--B7-k---p--SOd8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "BEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFu",
      shop_postal_code: "3776878",
      shop_address: "F0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8WbkxbWTp66iGj1lRR9XuMVcs2zeQQbQwb51zUDjfyGpNkIiUDvsd07Li3GyEdt6GGJ1GXo5UP",
      shop_tel: "0096-533",
      shop_email: "rEGcY5I6vY@JqEc.com",
      shop_external_id: "nsSsP2ceIvKP9bgYanQbVQM9Z6RG0kCsPd",
      organization_code: "QQ-31c97F4v-OahJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      can_topup_private_money_ids: ["1d4fc23d-35fb-42ba-9f31-bbe80da3a8bd", "b7523360-3ac5-4c0c-8786-fda0cdbda3bc", "6dfc5bb2-db27-49c5-8691-f76ba0a75deb", "c84572dd-065e-440c-9032-ba0dbc6193ae", "2d58df56-9425-4008-9d49-79167295efd0", "2b10f1f9-aa02-473e-b77b-5d48383aaa3e", "4c403e89-a085-4557-b724-efc593789e5e", "3b7a5ae5-91a7-4d5c-b7a8-a9a9b52a70fe"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      private_money_ids: ["d8dfba6b-43c2-48b9-badd-8e207b381308", "95937bbc-621f-4d12-8229-9642fe742928", "8c2074b1-389e-4d18-9983-fd4e371fac2f", "bc376943-66ec-4e7f-933a-ebc5709d6830"],
      can_topup_private_money_ids: ["b439f16e-a33b-4838-b7c1-c6332fafc38a", "a7547d92-2f06-4e89-b00c-f76c863ce2b6", "16e5e3c0-e10b-4176-9cdb-f773338d9290", "14f655f0-d85c-46be-9b3f-34ff5258974e", "1c97342a-7014-443b-9bac-4fdd6f01a7d7", "9b7ce308-d6bf-46c8-b988-3f755e696e38", "ab3091ae-39f8-48b4-99a6-42dff95c9471", "5a68800c-8596-4032-bc92-26edac99e578"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      organization_code: "-RL--v--7973-gZsa-t0",
      private_money_ids: ["c646f284-8614-409f-ab10-ee8d46d030ff", "5f07daa2-0f0b-4576-a7f7-f24da1c66764", "0a3ffcfd-7f43-4336-99f3-a41a64c3c9a5", "0e6ebc85-941b-4a51-962a-3506fa317942", "37057106-964d-4406-b682-c33186778905", "786d25b5-b842-4d53-82cc-ae5222df5154", "675ac042-2fb4-449c-b09c-3d689daa9bf0", "4ce7836a-ff62-46de-b402-e7018b5851b6"],
      can_topup_private_money_ids: ["22c7329d-8dab-491d-91fd-d5849fa8b21c", "440b88ff-2ba0-4dc8-970e-6365cf4ab4af", "2b09da44-002e-4da8-8bac-b58320d33981", "77b88c78-bbde-4bd8-96e4-081f1feb6bc5", "dc6a7fe7-e426-4f8a-a0b3-574fa019c6ff", "86b32d97-e378-4efb-a8df-4647f63b846c", "94418ef3-8e5a-46e1-9624-9d53c0a80e3f"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      external_id: "joQ6ff",
      organization_code: "37a0EMxE15GAS-ggI81--O2-t",
      private_money_ids: ["4b2a7e91-c6c6-4def-8b62-952a5f1622b7"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      email: "jYgx3gTJKy@6dBb.com",
      external_id: "YYVRZ4jdyfDGYQa0QPCC60HT399N8hk",
      organization_code: "---ZA7o454H8-3--2-P-92p-h-F7X3u",
      private_money_ids: ["a360186d-7e10-49c9-b1e4-2ba77c3b3998", "5ac313ed-69c0-4976-9fa0-75baa08f82d4", "94ea973c-8356-4a38-9ed2-c042ff96f8fa", "d8341aa3-8899-4d1a-9f70-6a15390ea6de"],
      can_topup_private_money_ids: ["bcddb5b0-3380-46e7-aa69-b1781ae93bf3", "b2277304-e182-4b99-8b5a-9510530aa3d7", "93bd386f-2155-4fab-93e5-d44f4fef0152", "340a4a3a-bacc-41b9-9438-20a31ed476ad", "1ee4c4d1-219f-4e3e-8476-e93914dd405b", "1a248e54-600e-4dd7-b3df-5c043da5762f", "0589a6f4-4aff-4fef-976e-59f20c10f216", "4d0bbbf5-94b5-4fc4-bd01-5f2e0cd2aef8"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      tel: "02-2716289",
      email: "R4daTST401@zYU9.com",
      external_id: "O5bmxo",
      organization_code: "21v-PA--8",
      private_money_ids: ["f9e15c0e-1d28-453a-a975-730a022b6491", "f145e3a1-d506-4774-b3de-4f04b212bab0", "3ca2b36f-445f-4388-9206-17a809bf05f3", "70aa5107-0453-40cc-a311-db5f89d60c60", "20782fe9-9d26-45a8-b40a-0e46d4789816", "f75d8514-b4c1-45d7-9eea-6476944f2b9a", "ad9963a3-ebce-482f-a27f-494679e8a56c", "e38ec102-3cfd-41cd-84a9-cc47ffd9c668", "bd55871b-3acf-4c00-b7cd-776a57527f0a", "ab4ad005-0fef-4e0d-9fae-b684cc5754a9"],
      can_topup_private_money_ids: ["d48528e9-d448-4b4c-a2f4-a44e19e6620d", "62858739-55d9-47bb-b179-dfb71bf80fa0", "5543418d-1b52-45de-b553-782de5b2dbe5", "1004dc98-062e-417b-acb4-b122c2e4ff7c", "cbcf6df2-af71-43ea-b144-f4b68eff0bed", "e7a67824-d91d-4742-b267-36be8188d3ab"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      address: "z0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A7Ast7GZKKewMQbpvWdRIf0j2NcGpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvIc3ugQfVcwKEOAlMUYblAnOJUw5uYgLUj2LWIHcZ5Kh7Upt9fM2ThdFR4ZGmC3lY",
      tel: "0424-270-738",
      email: "lQeLzTg9FC@P6bo.com",
      external_id: "kANEWZ0xko5",
      organization_code: "2By-J--1-Gp89-7-C---2--HA9a-Jye",
      private_money_ids: ["cb1affe6-0055-47b3-9b80-3bd439bf55aa", "efffde14-f5c3-488c-b1c1-25fc069e8f38", "d0f43b66-a3d6-45b5-9c03-bfeef84419eb", "b6b03683-907a-48f9-a107-5b4d85a6316f"],
      can_topup_private_money_ids: ["c812412c-d410-4948-8e8b-104698adc9ea", "e53b51ce-4f31-4cb6-8df4-e1315c75ea4e", "2b70ca17-9707-49ce-ae88-84de3f45a5fc", "1c20eaa4-ebfb-4e86-9430-86923737bf97", "8165ffcc-595b-4709-96d3-75ee0b3b8dd7", "ca20ee9b-28f9-4320-8c43-15497e5859e9"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "I44xL3mfrFPuEOVKpPzDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE",
      postal_code: "1381991",
      address: "yCFBUZkKwMvzRhZdC9PIbxRIokrSMcAe6DLpfhwjho9qAj035em2B0e1zQxL4LWrEkUrKUADYaUMS4V1xY0z6q9RliuqOBINm4Q77ByqizVQoe2X9mQJiEELVlycfdA0sn1Jp9ctBvXrxjspmUg2Jofbfd8lI7ca3oyQQIsUl3rCM2ZMpE4WDor4IADTHdTPsjhUsWbuhnbIUFlfvobOclFXKfvdQivs3hj",
      tel: "04265-4850",
      email: "QOLtlkRPIA@eI3C.com",
      external_id: "woSJ0t0xwzgZ3",
      organization_code: "",
      private_money_ids: ["a293ec16-f815-4210-9073-8df4085b720a", "5e745902-f29d-4e15-a9f1-776a21eae237", "67229903-c86a-4ca8-8aaf-5db1a95a9558", "f4428aa8-2018-4961-bae4-5db03f8e3005", "781c38c0-897f-4b4d-9730-d5d1c2553615", "48608f45-8415-40b8-a287-a926e9dd5ff3", "db65c1e9-c691-46b7-be57-fdeb56918886", "839228f4-74fb-4eef-a16d-f65449b03e53"],
      can_topup_private_money_ids: ["45ab6949-7188-4bfd-adf3-deb32aa99c00", "4af6e773-8b06-4c73-bdf3-513a5c44d3b0", "fb9613e2-8dd3-455a-b1fc-2b6344f9c3a0", "66e0c7d2-0187-4635-b204-bfdd62185cbd"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "97a6a400-27cd-4844-89bd-5a6728da9a96"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      can_topup_private_money_ids: ["923525c2-b844-4414-9232-05e5ff431718", "2cffdc74-cb11-4e36-8c05-44119128dad2", "3193dd38-9339-41f6-9282-4807c885f481", "f806a765-a4e8-4559-895a-7ae2615ddcbf", "c96ae27c-b9cd-4268-b625-25cdbaafb710", "8586262f-49e6-47bf-a503-03bb2df6977d", "9658ed1e-04aa-4653-a841-edb8e44b5244", "908165b4-d940-44e0-85f6-32b72d26c00f", "2e3f1e1a-bf21-47cf-9cb7-e680fdf09ebe"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      private_money_ids: ["9885c747-0754-4b37-b04c-832f9d1167a1", "81201ac0-ee90-450a-915d-92b283a73614", "f10c6465-4af0-4511-b868-148e76a70713", "56e6a8d8-cb94-4f76-ae08-ad1330b0d366"],
      can_topup_private_money_ids: ["df8b51f2-cbdf-4ffe-9471-7d7f76fe8201", "646e9318-231f-490c-a7f7-53bc32725ac3", "7a7d65aa-a585-478b-b72b-017ad48a03dd", "7ef3ef76-4f1f-42c7-b61b-72038cfd8f35", "32a1d374-4729-4ffc-830e-b55862e8fe42", "61edf939-6eb3-47fd-9fb4-beb12334d3c1", "8a5b38e4-47ab-441b-845d-a1d16ae6e1a1", "674bcb1c-aee0-4ba6-ba8a-5e53b4ba968e", "80589076-5a72-49b2-bd00-55eaa46f64c4", "b5bb3d32-6e00-4ede-83d0-235eba69f142"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      external_id: "Eg6qDXhSH8haf",
      private_money_ids: ["377d2e09-0084-42f9-853b-4130bc346f2d", "1ac6c21d-850d-45c0-b344-d589be5aa228", "6cc9893e-f182-412e-946e-f44d2b5db9d0", "4eeabefc-557c-4810-b441-205e1d34e9b7", "a9ad5a26-6e54-4590-9a25-1533c6829584", "72f4c4c5-9aae-4db2-ae25-e2245c201e11", "098b7ec3-4ba4-4c80-9bb8-1aca95917aa0", "3293505a-2ee3-481b-b116-b3c9d04ee163", "5ee3fb19-2571-415a-a9c2-eb321e7b1f6e", "3278bc7b-886b-4b3e-9e82-bd68e6d341ad"],
      can_topup_private_money_ids: ["7a9a3fb5-84d6-42f5-ae6e-e6a43816bee8", "3ff40a32-a939-4b1a-ac98-7071b3c259fd", "86cfcbd7-ded1-4b5a-ba10-9f316ffcd5ab", "4746e334-e201-4ef8-8238-c1b9f00700b1", "add80cf2-01d0-4de0-9637-c346fa1a063e", "53563263-e064-4b87-a108-26440a046a80", "9ff31b65-4012-4e10-9e5b-5ec2545afeb6"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      email: "vcOZ1uNBAd@r6lf.com",
      external_id: "zbfqKlnsG40wZo0RT90mTv9ime",
      private_money_ids: ["094322e9-25a6-4f3e-99b6-d4b279373a42", "c9c34063-d8b0-458f-ae35-217984cf1178", "2a5f035f-efae-46a7-a778-32586fadc776", "50ad7ebb-354b-4006-a4df-2144aaba6be1", "349fe32a-e318-4f30-8d5f-0563edf0f317", "fc55b7b2-9476-4d35-bc4e-7cf60b6b7bbe", "396c6fc5-f352-4fff-921b-888fc4e05db1", "d5c2afef-fd0b-44f6-953b-1a6f88d74210", "24b42053-9a4d-4614-b889-d77520ef0b2b", "8f0408f7-7414-413c-9fef-f569440d7e73"],
      can_topup_private_money_ids: ["c9443f33-8f0c-433d-8615-b1680bf7fbcb", "e853b0cf-778e-4574-8841-7bef4119283f", "34e24629-048d-4f58-88a7-3137560b7d27", "1935306f-0970-462c-94f5-b2619b1b44e5"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      tel: "00-8125841",
      email: "rFSjbB1hiR@jTNS.com",
      external_id: "U46DKPvyktKcWCyKm4tG2F",
      private_money_ids: ["b37e8ae5-7c03-4dae-9fd7-fb5862325978", "36eb65d0-8b4e-4936-92e9-0ecd44c21256", "82837668-4286-4fda-ad1f-94829086e990", "706f4d6d-ff47-4aea-9e30-d61108add354", "27a38d8d-6d4d-4c91-8ea3-b3eaef1475d0", "c5f62e06-7f17-4426-92ac-f1a83e64c546", "4fc42fcc-6da7-4908-98cd-0b2b27293b1e", "4dcee2b0-d25c-468f-bec4-5a4c24fca67c", "78c18a88-f764-47f7-8015-8d569a8c6fd8", "7988f124-15a2-4b31-aa24-1c1f3f0f923f"],
      can_topup_private_money_ids: [],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      address: "fPZtzGunVJbtCnsdFVcjFxpkr7nBijaa4uqZKlbpHQT4mZQDB6u1kMJt8otXLMwiqJK6MisPTXvJ9APWVf0nkI2cpiZrwht02dhTsSxNXBuhLAxPxLgPF7PH9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwNVNkX1wbtHq7h4XHkBbxR0RnLtirGJS2N5S6EE",
      tel: "052-0491-9945",
      email: "BrmndiCNxX@XwjF.com",
      external_id: "RAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j",
      private_money_ids: ["a5ab3533-b49b-43ff-a507-0bae901ca15e", "4a9013ad-7082-4a3b-a493-f22cfe809c44", "acf091e3-799b-4270-9a75-85ff0a3de75d", "f14fea1d-27b9-49e9-8ee9-8b8f7d30d0c0", "2ebe0345-930a-451c-b709-c6e3bc72d66f"],
      can_topup_private_money_ids: ["f5427be5-1b9e-43a2-84d1-0633483129b6", "8538da80-0fce-43d2-a5b2-c62c9624cc49", "21b9ace0-02ea-41bc-a879-aabf1879aac2", "e6bd7634-da84-4ba7-9bbe-1c76d4a21acb", "8b3a6610-93ac-4809-bbd1-5fdd85bba8b7"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      postal_code: "237-1703",
      address: "Cjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11TAHpgNTXOxFwqhkpZVaDhpFPp5bfKVt9DPYJAVzV6vyI6ywfpyKilj5zg8pn57kF0DYbPLXjuwrpeD0A9IDYP4sAiFNwaac9r9GBqh0SVIl9M1spjv4mKXU1rVLf6U",
      tel: "04-42-610",
      email: "HKqYzk7GBG@1DZK.com",
      external_id: "BRFerhSu",
      private_money_ids: ["128b3e97-2200-4214-a2b2-bb7e371cbb21", "6a3bc367-9347-44bc-a2e7-123e512f87e1"],
      can_topup_private_money_ids: ["640b19f0-0b03-47a8-8630-82ee9a6dcfed", "8c5f834c-fc4d-4d1a-a6dc-16ee560b2307", "433fd12b-7b49-43af-9c59-42d4ec62a710", "a0a706fb-25d1-4764-be1e-50bab17f1c9b", "9611cef1-3192-4c83-bc1d-f0c83706b100", "31fe607f-9324-434a-9a25-6ab807cf05d7", "76ab9909-596e-46c0-8418-5d48161c9a8f"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 9', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "79730e08-bc85-44b0-847c-58afb26ed907",
      name: "VfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZRhGDMxuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1",
      postal_code: "051-9562",
      address: "T2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2A",
      tel: "0429007-5087",
      email: "1V16DlcE5m@r4I9.com",
      external_id: "qCPq1klPYI",
      private_money_ids: ["03a74be9-f7b4-4d7e-a61c-1367a873a25a", "321df47a-8cde-4c2e-b0bb-f90d410cf32e", "e1140cc6-fd9e-45e6-8782-5e3934f3db99", "b2490f76-1f3b-445d-8420-acc3418c5852", "ff3f331a-3696-442c-8d94-87c45afc9fa5"],
      can_topup_private_money_ids: ["84cdb638-b9ca-4bb5-b99e-b84f7786305b", "b01b001c-98f4-44e3-af5f-26eb61ab243c", "4bc11f86-237f-4e1d-ab3e-7aa89137b5c5", "a6cda5df-7a84-4216-a84d-ea4d0ac938d6", "01024e5e-0d9b-485d-89e8-d46db38ecacb"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 5299
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 6796,
      per_page: 1258
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "aS3qLR873-i-2m5ZG9-807s-2-i",
      page: 4191,
      per_page: 4017
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f",
      page: 13
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f",
      per_page: 627,
      page: 3171
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f",
      from: "2024-11-05T18:59:45.000000Z",
      to: "2020-09-03T19:49:23.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f",
      from: "2021-04-04T15:41:36.000000Z",
      to: "2022-07-23T21:24:52.000000Z",
      page: 6486
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "ff54fc91-7642-4ae0-919d-07e4e7d7a11f",
      from: "2023-03-13T13:21:42.000000Z",
      to: "2021-08-11T18:21:11.000000Z",
      per_page: 6895,
      page: 2455
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "e8a6c2da-79ee-489b-936f-02677817e878"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "e8a6c2da-79ee-489b-936f-02677817e878",
      to: "2022-02-21T20:18:06.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "e8a6c2da-79ee-489b-936f-02677817e878",
      from: "2020-05-17T00:49:18.000000Z",
      to: "2020-12-07T20:20:30.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      per_page: 7230
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      page: 8126,
      per_page: 3761
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      to: "2022-09-20T17:58:40.000000Z",
      page: 3013,
      per_page: 5760
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      from: "2024-02-21T14:04:56.000000Z",
      to: "2023-09-20T00:36:01.000000Z",
      page: 9065,
      per_page: 5172
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      is_modified: false,
      from: "2020-10-22T23:31:16.000000Z",
      to: "2021-05-13T16:08:43.000000Z",
      page: 6860,
      per_page: 1972
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      type: "expire",
      is_modified: false,
      from: "2022-02-09T05:00:48.000000Z",
      to: "2023-07-11T23:03:57.000000Z",
      page: 4460,
      per_page: 2624
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      receiver_customer_id: "b28d2b38-3a16-4384-ad36-9ac34c384bec",
      type: "expire",
      is_modified: true,
      from: "2024-07-09T20:44:32.000000Z",
      to: "2020-09-27T00:50:45.000000Z",
      page: 8852,
      per_page: 1401
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
      sender_customer_id: "88b15035-4c8d-4ac3-85f7-dc35bb3de47e",
      receiver_customer_id: "95bba404-1c12-49b8-b33c-80cae6f8f332",
      type: "expire",
      is_modified: true,
      from: "2024-11-12T16:05:48.000000Z",
      to: "2023-11-30T16:04:38.000000Z",
      page: 7185,
      per_page: 9592
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "774f7d6e-0e80-413f-871b-c9ad0aa54f65"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "852eee3b-f35b-4508-9588-d9d4de2e22af"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "852eee3b-f35b-4508-9588-d9d4de2e22af",
      per_page: 8470
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "852eee3b-f35b-4508-9588-d9d4de2e22af",
      page: 4071,
      per_page: 5065
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "5ca2bbb1-3216-48f0-b171-26ec05dfcc03",
      shop_id: "63d7205e-21c9-48a8-a0bd-bb1d4eb5cc68",
      amount: 7688.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "5ca2bbb1-3216-48f0-b171-26ec05dfcc03",
      shop_id: "63d7205e-21c9-48a8-a0bd-bb1d4eb5cc68",
      amount: 7688.0,
      expires_in: 2305
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "5ca2bbb1-3216-48f0-b171-26ec05dfcc03",
      shop_id: "63d7205e-21c9-48a8-a0bd-bb1d4eb5cc68",
      amount: 7688.0,
      description: "KkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0PiIwS54q66i2nXWkvfusE3magRZXBvYQN11diTIPMylP78XJ",
      expires_in: 4682
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "1cbf2b06-cf32-46e0-a6eb-f3ef0282918b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "ddb0dd59-258d-4611-878e-db9420db9586"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2d39a92c-e0bd-4586-a492-a61b1264550a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2d39a92c-e0bd-4586-a492-a61b1264550a",
      expires_in: 6558
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2d39a92c-e0bd-4586-a492-a61b1264550a",
      description: "uaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6Xqlqr",
      expires_in: 4874
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2d39a92c-e0bd-4586-a492-a61b1264550a",
      amount: 3257.0,
      description: "ptmz4nyVSUDS2rGPI8RxpE3teEPiaYEeN8ncoL5boSBHerEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdDg4emZxxvv3UzyZmkPPeL3QSeHszKal8UJ7mvjTFU0wWAMu89",
      expires_in: 2117
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a",
      per_page: 29
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a",
      page: 9391,
      per_page: 38
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a",
      available_to: "2022-03-04T06:42:31.000000Z",
      page: 1796,
      per_page: 36
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a",
      available_from: "2022-04-27T15:23:38.000000Z",
      available_to: "2020-01-23T22:52:17.000000Z",
      page: 7546,
      per_page: 25
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "fd800db0-acbf-4388-a854-baf08f22a10a",
      is_ongoing: false,
      available_from: "2024-12-16T18:45:53.000000Z",
      available_to: "2023-03-17T19:45:26.000000Z",
      page: 3011,
      per_page: 12
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["7d030ef8-b390-445b-83c6-fa2f553d7a5c", "9b9f94af-bed8-4f23-8fb7-012db8a494d0", "a4127608-18af-4d44-89e7-4d986dd00b2d", "3d07d367-8e72-4afa-aece-075712154f8a", "02a68cc2-0856-4209-b05d-c205f76bbef0", "f8ad3e0f-26b9-4a8d-88c2-1dc251ce480f", "2d45c754-752c-4a54-b0ab-5d29a60c80b6", "48c0cf9c-73c1-4fc7-b04d-be9a9fb9930e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["41b855cd-9622-4aa3-a08f-cb9d174e0e3e", "8a4c09cf-109e-447e-bd81-2133f1385ce2", "3c841774-d0c0-4f48-ad59-fca373af6f9c"],
      bear_point_shop_id: "e90da617-e947-49e9-aac2-052876cbb814"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["2ad1fb98-df2d-470a-9bd1-73e1d20744ec", "248aa002-1b75-41b6-839c-e000e75c8512", "0c5d789e-4263-4168-a7ba-ec3be5bcdca2", "a369adc4-0317-4bd6-b220-18d0eb4a55e3", "08abf01a-b1ea-4a0d-940c-8bdca1423ca4"],
      description: "2ctvmZzuG53qZWTYzGouuBX6LUUUBENz9R18rNQjTARxcKWcb1nyLLVIf7PJ4PKIYRAl1UCuQycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9nOtCiuSxp7i",
      bear_point_shop_id: "404d2fa8-e331-4cf2-aa1d-bce3b4fd5861"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["b3b32ad2-d47d-4fab-b47e-4e8c77cbbec5", "84cf6c57-2e6d-4315-9005-ad0147fde34a", "126b13d2-d259-459a-855c-003048149296", "d298cbaa-d098-459e-b6df-7067f4066ccc"],
      status: "disabled",
      description: "Gn2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbipC8utokXPq016coqfiAUWXxFRzN5EfouqVIJLmWFeGJqYbyf9xqeV9",
      bear_point_shop_id: "9529ebcc-27aa-4a9a-a724-498458d7e7b6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["bafd2a34-8def-4512-97ef-f7d2b622fcf8", "2b446b1c-fd4b-442b-91be-73b5cc37bacb", "77d4269c-f20c-47a6-9e85-a1526012cd18", "f7d464f2-5ead-4833-a916-022824af3d86", "ab536a68-b0fb-448e-b865-c4679ca7bb8e"],
      point_expires_at: "2020-05-07T23:44:06.000000Z",
      status: "disabled",
      description: "CN7QJ0QWlqwtDL88aLfgCd3mseLQBXIUiYpTvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXd",
      bear_point_shop_id: "b029329b-46bc-446e-9f1a-e8c54d0890ce"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["fa3ba695-e2f3-4d29-8833-352ead2b6624", "bae15a8e-8ec0-4a0d-aaa6-d4c25a57b1df", "c25fad23-166c-4677-9a89-0f814a596d60", "247eccf2-a3c4-4c7f-92b7-acb21251a9e0", "33ba3d7c-ba16-48a3-84c2-7f8d1e982eb3", "10a25e24-52e0-4a37-a613-4307875daac3", "5dcc4e8b-fb52-4fbc-8074-98fb8ed0f4b8"],
      point_expires_in_days: 5471,
      point_expires_at: "2023-02-16T20:10:15.000000Z",
      status: "enabled",
      description: "iPIwClGZ1KOGgE2sj7Hu6WK5M7npguch6s2J670P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljHGXrpV",
      bear_point_shop_id: "1979b09d-d582-47ac-93eb-d7532b65a0e4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["55097a89-80af-4a42-a440-eeff2e8a5b82", "7829c4d1-020f-439a-bcfa-9471262e0558"],
      is_exclusive: true,
      point_expires_in_days: 7136,
      point_expires_at: "2024-06-04T13:59:51.000000Z",
      status: "disabled",
      description: "Ck88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2A",
      bear_point_shop_id: "b57222e6-53ad-4315-8f2d-ca0c5531a82b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["49011f99-2921-42b5-a31a-c7377846026e", "f49c3173-5a53-45db-b8f0-d654f739af0a", "3739a38c-d88b-4ab7-a9f7-b84e413bf7ec", "17c38589-2f9d-4b39-9843-38cb3af5f505", "d909de4e-0980-4a35-bf00-fcafb9fc69f9", "9b392018-fa40-48a0-a89f-7ec3cb7e04a0", "f0cdaa73-2302-4014-84cd-c1bec2415f18"],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 5012,
      point_expires_at: "2024-10-22T19:39:13.000000Z",
      status: "disabled",
      description: "6vjoZFJU5quwxFBXnJ5Eq6GcNPCEVPq46GdIPJm8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz",
      bear_point_shop_id: "044a3830-c575-4044-a5ef-7711eafd233d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["1dc51783-f87b-4cb2-8712-ef272d10b961", "f770e2e0-3f78-4f11-a885-e43f3814f8a6", "570004cc-1789-4a85-8da9-eb6add3ac78b", "f528585a-9d82-4ca6-a84d-fa7e8c924137", "a4d8b217-ea07-41e6-8218-9abe663e2bf4", "d8b5e245-6e2c-4ea4-ac9f-80693b593d4b", "b5116a27-77d0-4bfc-bac0-aad15d90194c"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7115,
      point_expires_at: "2022-05-08T02:45:03.000000Z",
      status: "enabled",
      description: "tph1c8gKwadNnw5eCqfZdksVLOzbmWJa8YkV10V05hf8WtQGHpv3",
      bear_point_shop_id: "3ac17578-6ad0-4c51-baa1-c2502b58ffa5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["6056ebbb-a787-4abe-97bf-ad5aabca754d", "7c22c7ba-c0e1-43b3-a354-fced31ede7bb", "90c893aa-a810-41d4-bff3-603dafb2eb6c"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 6,
      point_expires_at: "2022-03-18T09:03:54.000000Z",
      status: "disabled",
      description: "00PkzT3rjRscSaTDEUxwAJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0VsciZqVg9CY4JyxUqm9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKXOz8JwoX",
      bear_point_shop_id: "0f58ed12-6757-4a8e-84a2-5ab381847212"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["ca3f93a4-28a8-41d2-bc2c-c9f19bd0ed6c", "ef0af12b-4f17-4bd4-8898-3e2ce859c485", "d2de2059-5ffb-4cf7-8dde-700741016714", "6442c90f-854f-40bf-a580-5e1715c1dd73"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 2386,
      point_expires_at: "2021-06-24T11:48:48.000000Z",
      status: "enabled",
      description: "umGQVfUsw4hfYXr8Tws7k4",
      bear_point_shop_id: "08c1287b-3fb8-4192-b08c-e18740a510ff"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["77b27466-25aa-46cc-8d87-f50e2f247b1b", "eb9d67fb-f920-4561-8f0b-7f28f82d049c", "4fb98b15-9034-43b4-bf17-0eced34e104a", "01ff14cd-212b-419b-8398-c7c3c9acb665", "d892228b-964a-4938-aaec-0613e4a6c82d", "27046f73-61c3-45e6-9eb1-b2da5e20cf11", "4d8f562f-97c7-49ae-ad7d-a6e6a581fa65", "0f3ba77f-9cb6-41e7-9319-7998146464b6"],
      applicable_days_of_week: [0, 2, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 4601,
      point_expires_at: "2025-08-05T06:27:11.000000Z",
      status: "disabled",
      description: "U3f6AMPJnByO8IAY8ZIAKOHAMaB7ZxbhLpAG3vIRMVqbJVgHdPhvPKwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6c1NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3P",
      bear_point_shop_id: "160b4878-9b92-4a6f-abfa-2e600c4d4a76"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["2dbdb904-d2ee-4d67-83d7-cc70c752ddc1"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 0, 2, 2, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 6774,
      point_expires_at: "2022-01-14T12:55:57.000000Z",
      status: "disabled",
      description: "Nu3aeeMh7MwqqZDhOobPpK6TParuulg11gUrgWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRllx603bU9utxlgE1LKaCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5HWIqhNUoMi9wNIaJyI2pADs2B4yB1GZTk4B1PKHR",
      bear_point_shop_id: "8e4c4b91-425f-42a2-b213-5bc5a689a51f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["4826c8bf-8719-46d7-a88c-a350b7a39824"],
      minimum_number_of_products: 7764,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 2, 6, 3, 3, 3, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5912,
      point_expires_at: "2022-10-10T00:56:20.000000Z",
      status: "enabled",
      description: "VHpUajLmD9cCimPwC97LHWaSOnICBJimGKiopraV9F",
      bear_point_shop_id: "0092027d-de89-4375-b437-5fbe008317be"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["337f2c14-48e9-407d-86df-2344a47333e7", "5bf82582-667c-4b94-ae27-cd3914cc52d6", "ef30deca-faea-489b-9fc5-27440debf089", "7fe1bb31-06de-42b7-966b-702e82ac5d6a", "907303a8-9b4e-493a-a92f-0ff22eaacf25", "f389b07e-ea32-4dbe-9cb9-4803e9de3235", "a8d53a6e-5d87-443d-8e7b-4afb542d294d", "ddce0822-b152-402f-8893-c2ec3c21c332"],
      minimum_number_of_amount: 9233,
      minimum_number_of_products: 3142,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 6, 0, 2, 2, 3, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5164,
      point_expires_at: "2023-11-08T03:08:49.000000Z",
      status: "disabled",
      description: "5MEWhdNFDbX7fss0ltmaJnxslaUL7RrxqbBxY5tCbx",
      bear_point_shop_id: "d1a03e2d-e5e2-42b3-b5c6-447ae8477085"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["2c82aee6-006d-4796-baeb-41aa01e2de16", "ebbbdbe4-28b3-43f0-9ce4-25925d0806f5"],
      minimum_number_for_combination_purchase: 2600,
      minimum_number_of_amount: 1091,
      minimum_number_of_products: 6782,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 3, 3, 2, 1, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 3776,
      point_expires_at: "2020-06-16T06:30:24.000000Z",
      status: "disabled",
      description: "6GsJ8XiLApVwNY6zjKIEdqTZCuDots6oOpUnX5paeprWtPSGZrL9UrmNU3vFgZ69vwXIbJ7yB2uIbdTxo63tcXPzmao0EWnRVCjlgZcfxXnQfXvfoocz3td7BZN78",
      bear_point_shop_id: "635dd8eb-45e0-4f23-b17a-b8ca435f49dc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["bcb2a5d5-6df3-4a7b-a69a-345f58bf30fd"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5516,
      minimum_number_of_amount: 9759,
      minimum_number_of_products: 8087,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 1, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 4679,
      point_expires_at: "2022-01-24T15:40:00.000000Z",
      status: "disabled",
      description: "pRHSTTSFxnvRwj3Oa3urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0dEOIqOFLqn2ZuLk5GF2FUuyDVUpZnC5UYez0zM0cPoxe0DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd2",
      bear_point_shop_id: "ee6dc6b1-26a8-4995-bdcc-141c8befc116"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["bf27061c-56fc-49a9-a1a5-5a9c1f0e5d39"],
      max_point_amount: 1206,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 2237,
      minimum_number_of_amount: 9538,
      minimum_number_of_products: 3554,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 6, 2, 5, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 2656,
      point_expires_at: "2025-02-16T01:49:08.000000Z",
      status: "enabled",
      description: "0OJOUKjKLeGCgLyc3XcFOYpAAHYYK9z73uxDP2ictixYSW0AnlJyQ4ogjQgbj8PRfNm4vkTJ8joyTSHmI2see5qGgNKlkv5vEcEoMjbT4VP8lZF0AhpuShoXCly79fXYfw5LEwfbe5dxC9nFb6EnR37XI7b090WiBtR",
      bear_point_shop_id: "7d8d0b5f-c27b-492d-aa68-c830506c48bc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["e0178961-1bdd-4d76-97ef-f8ac011241ed", "90ec9e37-fe03-4c2e-9b69-f3532eeaed92", "88c7fc25-518e-4a5c-bcc6-ef9d5c316fc9", "0f5f5081-79cf-44b4-b55a-d3640da3c890", "3c7ec724-2774-470b-8a80-4b475d42776e", "b50d44b6-3d48-40bc-9c24-bf57236b4791", "911dab9b-1a25-4ccc-9d3c-53ab375e7c42"],
      max_total_point_amount: 9431,
      max_point_amount: 9842,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 3384,
      minimum_number_of_amount: 7115,
      minimum_number_of_products: 2848,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 1, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 5584,
      point_expires_at: "2022-11-27T14:56:55.000000Z",
      status: "disabled",
      description: "yRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMcSPrmt0hjIJ",
      bear_point_shop_id: "7b804381-8d75-4f20-b49a-b801d39ba53b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["8ca82f33-86f7-41c2-9737-d473651b8291", "455c64e3-677d-4b57-92ab-0d6cf7288059", "201a1969-78aa-405f-9272-20f2c8525b2b", "c9883fea-362f-4136-989e-1b24c370216d", "92f100a0-437f-4bd8-84d9-54eff37a6571"],
      dest_private_money_id: "a04274a7-1b56-4ec5-be9e-bc7f561e8376",
      max_total_point_amount: 2935,
      max_point_amount: 2854,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5368,
      minimum_number_of_amount: 6210,
      minimum_number_of_products: 6117,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 3, 6, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 9413,
      point_expires_at: "2020-11-02T22:18:52.000000Z",
      status: "disabled",
      description: "uaSpYl1TGEiugglxJJBGt0dcPbtQc4uSkk26uSRwX6Rx7fOEoFSQiDYpTTgrywklVD4mELe2edQd6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea3eTBlP1za",
      bear_point_shop_id: "0a19e7fd-1e31-4118-ae37-9dbdf9e353c9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["5735c800-05bc-4a21-9729-880145ff8b1c", "f7fdf44d-2880-476c-9d72-e9bd3f7406df", "093ed6d6-5e31-4e13-a579-601eaa4ee730", "268334a5-f346-4223-9331-277fc0332c01"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "3a3e0db3-5c92-4471-8337-36fdb9adad69",
      max_total_point_amount: 3522,
      max_point_amount: 8179,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 2680,
      minimum_number_of_amount: 3710,
      minimum_number_of_products: 9236,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 2476,
      point_expires_at: "2023-09-11T10:51:33.000000Z",
      status: "disabled",
      description: "4XfUae14Wbt93t26LiQAMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGfq9ue8TvZwYbMntyIPzqAGarjc22UJafoQs8oM8ozoz",
      bear_point_shop_id: "4abeceac-1148-480b-932c-bd76a0051f89"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["3d00caa0-ee9e-43a4-b701-9f03d7944570", "b98bea53-60d5-40ac-aaee-fd32a72d3329", "f55092a9-9df6-4471-97f7-25e9bd7f7975", "011f763c-6131-46b4-9189-4e442fdffad6", "28a2cf09-8f3f-4248-bd47-f1a0334f90cf"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "d4cecef2-50db-47f3-a119-8b13b623cfa8",
      max_total_point_amount: 2250,
      max_point_amount: 8396,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 5391,
      minimum_number_of_amount: 9774,
      minimum_number_of_products: 3266,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 2, 6, 4, 2, 6, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 3860,
      point_expires_at: "2021-05-13T09:47:55.000000Z",
      status: "enabled",
      description: "jKztGRK6K9KAPEUIedziHih60rhQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3zE9qA6JlqvTos7SrIAldP",
      bear_point_shop_id: "07ac6128-9bad-4835-bd0d-f1af17913a5e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      applicable_shop_ids: ["3b720d61-2d7e-4419-8461-f57f72b08268", "f5e53ff6-f607-4faa-af28-1a71255b7e49", "355bf09c-8e66-4f17-978d-e9b3ac14dc48", "84564237-8fc8-4532-a732-382a3d081cd8", "b1b97a6d-09b9-4171-b968-73edd4434300"],
      budget_caps_amount: 1502919932,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "e19206a1-798b-46f2-8bc9-5d7a18eefa8c",
      max_total_point_amount: 2829,
      max_point_amount: 4143,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 1389,
      minimum_number_of_amount: 4875,
      minimum_number_of_products: 6288,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 5552,
      point_expires_at: "2020-10-02T00:14:24.000000Z",
      status: "enabled",
      description: "gMO9grD73ccOw2h3Fa222nHBaN6510b",
      bear_point_shop_id: "048dd806-ee8c-4a9f-815d-dcc8f6655be4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["069024d6-3189-43d2-92d6-5bae8e24ec9f", "c14d9b98-981f-44f1-b44a-786281ee1ab7", "8bd8cc8c-a3c7-4395-8cc1-dd8b5577d818", "b9fd765f-5735-48ea-86e5-6912637239dd", "f7c75754-2f68-4f86-a1d7-063f74979522", "da7b0793-7535-4a71-9012-bff253082d0e", "4ca5fcb3-c4aa-4097-a193-9ff9d94e07c5", "44209de4-37b4-4ca3-80e4-be817beaeed8"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 24', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["ffa25075-fd4c-418c-b0f2-4c59788ca0a3", "47439d73-7541-4ea7-bae0-e6868ac97591", "19e3cdb4-f95b-4333-809f-b44d261553ed", "7b26edc0-3628-4df8-8692-7236873e4968"],
      bear_point_shop_id: "9246eb09-2292-40f6-b055-118c7ed03d3e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 25', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["dc7d4ce7-c333-401a-bc19-f687c25d38c9", "014fdfce-0f70-4dff-b683-1e6967b26cb2", "e60e9b0f-51a0-4bab-bc12-4342201bc537"],
      description: "flubMg8I3PF",
      bear_point_shop_id: "4111dba0-01dd-4e27-9128-c0fa93b24958"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 26', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["b86d95a0-2c98-41bb-9357-c0f5109f2d38", "8b100673-5c8b-4163-a9af-b22bbc28de2d", "faec44bc-28e8-4e71-977e-de2000a516f7", "8e636ed7-f6cb-41cc-8983-e3f36b6e56e7", "48017178-7d6f-4a92-b885-1fa198a1f5dc", "e51de9ab-8aa8-4e86-99de-34a8cb1405da", "61ac1f43-7351-4632-b4b4-7e31e03fb762", "ac103fec-3e89-4786-bb0a-ba89b2f85bcd", "1bce5174-e11d-4053-8f7f-1d5ad55ce648"],
      status: "disabled",
      description: "WLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1",
      bear_point_shop_id: "23d2aca0-c866-40a8-b9e2-d0388befa367"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 27', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["7ffa20c9-8398-4e17-83cc-fdd0c8697ef1", "52f34884-bbf1-427e-af11-e8f70b7f01b4", "30d3411e-eca1-4cff-b126-2ea74b14d3c7", "9588bfb8-9d66-46cb-9c52-c41f501054dd", "b31ab973-4be9-4f2b-acea-305a0382fcd4", "c925a11f-9492-4ab9-ad5e-a541efc53e43"],
      point_expires_at: "2021-05-28T14:19:14.000000Z",
      status: "enabled",
      description: "FhSbUnXdQpmPpnHFqiJvOHOlQFLdxOm16oejI9dat1CLgQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kImOLWynZ7sTqSkOWWDLZmiyY4qSDce16GC4wPtLkv3o4",
      bear_point_shop_id: "abef2a19-7ced-4feb-b8b8-c6098b728b79"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 28', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["5b0a69fe-0c2c-46ea-a052-beea24d755fe", "fe2f8397-3ab6-4670-b093-b923babbc04a", "4b89074c-4217-4d90-98ee-f76c91366a2d", "b61b9b65-24e3-4738-83ca-072d2cb8850f", "c727e64f-b25f-4c62-bfd8-2975ac0209d2", "a9cb86f3-efd0-4cd6-a546-eb989c28e995", "86d7a14a-6363-4109-b33f-e28ebdfffa28", "d49e01cf-d3c3-45c2-b9df-d06499c0d117", "85f3d28b-3e5a-4988-88ab-58964a4951b0", "851d2b15-49eb-4887-8901-72b075db872a"],
      point_expires_in_days: 263,
      point_expires_at: "2023-07-26T04:21:34.000000Z",
      status: "disabled",
      description: "7bYH6IQhPn4Xu22OkprhqhwvNpMEMbpSnLulsX8V7SnJwOTksCozm6o1k9oepRB7yq0O",
      bear_point_shop_id: "dd8e7727-94e1-4d1f-b153-fcbd505cc87a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 29', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["6dc11dde-93a7-41ee-a6fe-4e4581a32a21", "495198c0-e074-40ff-8040-0c78a350d1ba", "afe847c1-f396-49db-96eb-7145472401a0", "b723ee14-f43c-466d-b708-9f737c661909", "7d3eaed7-3a0f-4a71-bf89-02824751b8fc", "75a2f5af-0328-4abb-8323-17f4747d086a", "972dcc7a-6f20-4d8f-bcef-eb3a23d8292b", "911150bb-af55-457f-a874-ad92aca3bedb", "6b0d642f-2900-4cd7-b841-be9916cd3594"],
      is_exclusive: true,
      point_expires_in_days: 5063,
      point_expires_at: "2023-06-03T00:22:24.000000Z",
      status: "disabled",
      description: "3GwpJ6pUWjvsxF7sC23pAVbXivHZtrIAyP3B3n1m451mPU8dTD7bnX1r8l3hCw6Snm9mfcT5cLUh34lWYk1AXf6CZiEJmgnIHDOUd6m8hlpqS572AEF2Ig4ikrPHEQKtfhnULfkSB8h",
      bear_point_shop_id: "73508bd6-5dd6-4752-a8a6-a15a932cf485"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 30', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["589d9511-c173-4a18-a1bf-822bd8b00686", "7b560730-cc7b-42d3-a844-9b25a18e20c1", "e41c6d31-5ba0-4591-9494-449ce75f4926", "6b2c1f1f-c4ac-4122-be7e-eeb4a2fc3a94", "7e363121-af95-4a6b-8878-9bc283668224", "4add5a68-4b9f-4103-b631-3b41fc2b7ca0", "07e621a1-c00e-4211-9ecf-36f99b8f71ff", "be4c2e0b-9a97-4c0a-b009-b86e72cb0012"],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2937,
      point_expires_at: "2021-09-17T16:06:23.000000Z",
      status: "disabled",
      description: "zXXsopchwGQjGjB8",
      bear_point_shop_id: "d5ab1c18-a2f0-422a-b2f3-ec3a8d5cee56"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 31', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["d24d7f29-85ec-4cff-96a4-8c632c80b717", "d2872331-2ac6-4d37-815c-a50dc530d395", "7b5e0b6a-77cf-4c10-8d82-6137eba4f1e2", "2ad1e44a-05f4-432d-9dcf-4fb70b6ccec4", "c491e06e-b881-426e-953b-b1e36bab9ab0", "61c91f81-533b-421d-ad39-c472e371fe0c", "f6e7c314-f686-4643-a047-4e4d50b82535", "a5cbbc03-be9a-475e-8268-b1f61961ef6c", "017fdffe-d022-46a2-89f9-cdfcf8775e06"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 9537,
      point_expires_at: "2021-03-09T20:49:48.000000Z",
      status: "enabled",
      description: "8tOl1gapEcvHpCxJHTvEJuFQdQk10O1BigovU99ROsTZK65zQOhilbvDcAlCpIpPo9knGna2qU0GmaUmeizgJ6Bwq",
      bear_point_shop_id: "cc1e4045-7904-4dbb-94ee-bc617ff74821"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 32', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["31dc4435-b342-4d67-a705-0e656388c754", "80a13c54-43f3-4bbb-9ed4-716412233358"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 1176,
      point_expires_at: "2025-02-20T21:24:25.000000Z",
      status: "disabled",
      description: "gtXl8b4nZOZsr1VPBj7ivp8ue6C3vcL7BXf3IHjK0XiCg0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZstFpjBFQy9bZmz7mGiFtXmRSje5IwYSIq",
      bear_point_shop_id: "c7c281c4-b7d2-43d1-a2b8-6c6c505a180c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 33', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["b5f3afbe-fbe6-492c-9fb3-3e6c95a8f538", "d6f4662e-ad48-4951-ab1e-a9516c7b7f75"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 9205,
      point_expires_at: "2020-02-13T15:54:21.000000Z",
      status: "enabled",
      description: "s2ZcRpli1kcYUjdKenDWjLTaaBosz7aBykLG1RzGMmx1hSkje9X0kmePd8GXi22Jw1idAxcQ9RQcA93jzkpVE1oN8GZytUXsp14vePeJl09h",
      bear_point_shop_id: "a281b693-fe5e-462c-ab04-f7859ce1b7b1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 34', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["c38cc520-e9ed-47d3-80e5-72b7594c4f7a", "ff078c0d-75b9-41a5-b558-c14a749bde99", "80013de5-c639-441b-a152-0fbd33612dc2", "dd9f6a4e-c947-451b-9946-50e9ac5b6b0c"],
      applicable_days_of_week: [2, 1, 4, 0, 6, 6, 5, 2, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 6812,
      point_expires_at: "2022-01-15T23:02:27.000000Z",
      status: "disabled",
      description: "OMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRIEnGneOjH6PTi68jf1Ll0O4t8yu2YY3amcbZRFCGWEFlMAhGqMbfoqHBJlao6arWtW2Kf2i4IAcwQjuFWx2kNI9qHm3gWQVGMb",
      bear_point_shop_id: "230c69c5-7d0a-452a-8b75-eda55a53c02f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 35', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["cdbaf3dc-2c34-4384-811a-3ee64fdaff5e", "423c09f5-3f3f-4477-a3dc-f47d52a4aaf7", "1941fba8-0e65-45d4-abcd-d8f2466d83fd", "9b9ed327-18f7-4834-9884-53e6b70d18fc", "762d7f32-c614-4a64-802d-68a98415e77a", "9b4df14f-0c9a-4807-b7ec-801e18f8a318"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 3, 4, 5, 5, 1, 0, 5, 2, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 4630,
      point_expires_at: "2020-09-11T00:50:27.000000Z",
      status: "enabled",
      description: "pOWKljojyXNatscwZjWuBesyFuc4sWKFJn",
      bear_point_shop_id: "664c7d09-bb5f-4acc-8437-322904312ced"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 36', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["7daec0f0-9651-4d9c-bb00-1ff0ca36abea", "e91a6744-e6e8-4001-ba46-91b507ad6927", "e637fd0a-e9c2-4279-8a00-145534a7177b", "508a885a-5e6f-4988-8b74-8fbb5770f68e"],
      minimum_number_of_products: 9995,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 6, 4, 0, 3, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 4663,
      point_expires_at: "2021-03-28T14:07:04.000000Z",
      status: "disabled",
      description: "9cBHdXfv4mxi0ybLSzTGhHvgOYEOxJ03xV3nSGPvtC19a5RpyBdhfDtmpMgxIW5ljI6yfgW8zOoaul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQ",
      bear_point_shop_id: "9e9908ed-3a5f-4f90-8ea2-96bd9a0c2d23"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 37', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["a9e13225-7fd4-426a-810b-949b94518d54", "2d08b969-7e60-4c9b-ba34-33c6de9b42f6", "59fa2f21-7e0f-4fd4-afc2-93f93f7169dd", "3afd511e-a993-4a81-b172-bb8145c81699", "698ad8d3-a7c9-4c7a-af9b-20697fdd3d32", "d91d6b36-22cd-4b47-a770-8cd1e39a4928", "1fe9ccb9-7e3d-451d-a1c4-a04b5ee29ba3", "a6b51650-4284-4529-b308-1816756c0505"],
      minimum_number_of_amount: 8968,
      minimum_number_of_products: 2730,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 0, 2, 0, 4, 3, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 6051,
      point_expires_at: "2020-10-18T14:55:08.000000Z",
      status: "disabled",
      description: "qxLBzmQKSHkl",
      bear_point_shop_id: "0909ef8d-aaff-4aa3-9032-7747fd65f909"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 38', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["5bdafbfb-1a3f-405c-8e6a-65e6739c14a2", "b92904cb-78c6-459f-aba5-2db32d4a8ddf", "5599cb26-d578-4253-90ba-1623d0def9ce", "a076782b-13b2-4245-a194-13aaf8289375", "c8a6df5a-fc63-42db-a56b-716d64e853b4", "734c5275-e189-42d5-9fc8-87771d3d7316", "293ec243-c03c-48f6-934c-5b79470963c1", "3180ec26-dd16-49f9-a2d9-6da21cf89f0c", "2548fed9-8702-4dfd-a401-d60c734409a0"],
      minimum_number_for_combination_purchase: 7296,
      minimum_number_of_amount: 4397,
      minimum_number_of_products: 9173,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 4, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7307,
      point_expires_at: "2020-06-19T20:23:54.000000Z",
      status: "disabled",
      description: "raJiLHRNzuStDZHp5MvhzfbMCo9qyaARx",
      bear_point_shop_id: "00c07ff4-fd3e-485d-a15a-ffa16d2ad75f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 39', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["4b107df1-f60f-4ffb-bb9a-9ce7f8d657dd", "a4f79a42-2235-4566-b430-b4ebdd9beb01", "73f637a3-b0a2-4eae-b416-e2fb5416ba88", "cf11d5ea-3a66-4dd3-9834-4085a6adc37b", "01edc172-82e0-4cb5-ab0b-03a4b5fdcfe6"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 7501,
      minimum_number_of_amount: 6219,
      minimum_number_of_products: 1900,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 3995,
      point_expires_at: "2021-10-01T03:18:14.000000Z",
      status: "enabled",
      description: "gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt",
      bear_point_shop_id: "4d5d5d35-2114-492c-a747-18d38dcf747e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 40', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["bceefe99-e932-4a53-a27c-7e177128b50c", "69d801c2-c212-47db-9213-e3501a90dee0", "5a542ba8-0961-44d9-8f65-76571851bf3f", "11b47af9-086e-476d-a8a8-0d5531198bd1", "79bb6adf-c63b-476b-8727-66da268cc290", "1e118498-22cd-4cf2-b4b2-5035a0382dd6", "1a2be490-92d7-4c01-99a9-de0f5d5cf6a3", "35ca5cdc-cfc8-4822-921a-98b776450450", "83cc536d-911f-471c-8175-2159459cc808"],
      max_point_amount: 1744,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5754,
      minimum_number_of_amount: 8249,
      minimum_number_of_products: 9358,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 3520,
      point_expires_at: "2023-02-02T20:04:20.000000Z",
      status: "disabled",
      description: "E1piomvY0y0iLigYmahsEfLajE38CSizXaYXCbSM5b6xxCi9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8KkZCOZQxeSP2z9qxNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOl",
      bear_point_shop_id: "1c2c0ede-6902-495f-8e95-16e84aba1c82"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 41', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["dcc5cb9d-9800-4d93-ba53-2588274d9449", "5824b92e-a910-4607-8275-5e332598bd9d", "bba7524c-3334-4605-af96-aba5cecea9c2", "06cf879f-1f30-4487-838c-07a3c5668351"],
      max_total_point_amount: 1100,
      max_point_amount: 5483,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 9451,
      minimum_number_of_amount: 4266,
      minimum_number_of_products: 855,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 0, 4, 6, 3, 6, 0, 4, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 5441,
      point_expires_at: "2022-08-24T11:45:25.000000Z",
      status: "disabled",
      description: "JyZq3ofPUU0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4",
      bear_point_shop_id: "8ef5b770-fba8-4c26-9b4d-9befbc582743"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 42', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["e6257d2b-676b-4410-9c10-46bfa259f2f8", "3e860070-9753-4970-b111-97125ed3a22b", "61446d2a-ada9-4da8-a84b-9a8b1e69134c", "5c63b680-84c4-498c-a91f-a5f29954baf6", "454877e7-6aae-4d3c-933b-5c10536e4e21", "2854e789-de06-4452-af0e-acf69b8541ac", "b85d1842-99ae-45d6-b605-9dc14d8075d9", "78312e27-bf51-4ed0-b0ce-f91bb1a5fed0"],
      dest_private_money_id: "65378204-dd35-496f-8d05-5138df3e3c95",
      max_total_point_amount: 7938,
      max_point_amount: 4317,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 8855,
      minimum_number_of_amount: 2378,
      minimum_number_of_products: 8413,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 6, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 6661,
      point_expires_at: "2020-09-14T16:41:04.000000Z",
      status: "disabled",
      description: "KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM2RajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyCoZoaTfbTmVX0Xq",
      bear_point_shop_id: "bff96bf1-e04c-4207-b244-581b16796688"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 43', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["7b55fd43-c0e4-43ce-9747-2e5c9bb65bf6", "4cf3ef21-1c21-4fb9-80d1-038fe7778c61", "e4dc1987-79ce-4800-be4d-9cedeb8e48f8", "2a4cbb18-dc58-4c32-9311-a73261d40166", "4b9d11d0-1a26-4c5c-a83b-2299b9221b36"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "d42ac8e6-f45c-4ba7-8e79-95b129eee133",
      max_total_point_amount: 7990,
      max_point_amount: 5890,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 1334,
      minimum_number_of_amount: 453,
      minimum_number_of_products: 5643,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 5, 6, 6, 3, 3, 4, 2, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 4593,
      point_expires_at: "2024-03-27T08:13:52.000000Z",
      status: "enabled",
      description: "Aw5Vcp7CE78JSe44PvWgrDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7fDHExM6iUcBW9LDUejJe4laTFkcJAyP9v3lR5fJ1SC",
      bear_point_shop_id: "767bbf84-a85b-4cc6-b53c-c646f63b301d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 44', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["9c635b5e-7d5d-408e-94d6-8671be3af2c3", "80273963-9436-4023-bbbb-7313b0fdfd7d", "292ed000-62b2-4943-b34c-755621d94a01"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "cb2e1220-a514-4400-9259-104b2282f150",
      max_total_point_amount: 4509,
      max_point_amount: 6010,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 3192,
      minimum_number_of_amount: 122,
      minimum_number_of_products: 9276,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 2, 1, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 3780,
      point_expires_at: "2021-03-24T07:20:56.000000Z",
      status: "enabled",
      description: "sObY8JjUm176PqMxSejYJwKQkQhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2FF3HAzhtt18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL",
      bear_point_shop_id: "e490be31-b19a-4c14-bbd5-3d387267020e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 45', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "LWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNou",
      private_money_id: "ad4c1d63-f179-4042-a281-658f939209e2",
      starts_at: "2022-05-26T22:20:53.000000Z",
      ends_at: "2022-07-23T11:21:13.000000Z",
      priority: 3464,
      event: "topup",
      blacklisted_shop_ids: ["f2b52ae6-ef7e-47ad-947e-378185246b50", "baae50e7-8ea5-4b03-9ad1-bfdd8e2f6f25", "74b5c092-3f1b-4aef-9eaa-a487ee6525c7", "bf0f3ca6-5158-4984-ab4c-0c251f6affdc", "4a174fba-77db-4784-bee2-918973a98db8", "e9e81068-cd54-437d-b50f-6df68f8b478c", "3ca7772e-8c7a-46e2-bfdb-c3e2cc7793c6"],
      budget_caps_amount: 361470586,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "0cad39ab-3073-4b4c-8ad6-97a108e60f00",
      max_total_point_amount: 9104,
      max_point_amount: 6073,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 4630,
      minimum_number_of_amount: 4968,
      minimum_number_of_products: 9964,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 2, 2, 0, 3, 4, 3, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 1833,
      point_expires_at: "2025-09-15T17:39:47.000000Z",
      status: "enabled",
      description: "Ia6s2Oi",
      bear_point_shop_id: "2acdd953-e4b4-4929-b497-735e52177dc0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new GetCampaign({
      campaign_id: "f8df46fc-51b8-4fab-ba59-d311353d81a7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["796fd967-8d74-4d35-b8f0-fadf5fb8278d", "2a820e54-652a-4f05-a1bd-53e80d83c071", "6eeceeeb-d478-4528-8b7c-15d76d81685c", "e546b275-234e-4e34-8b4f-406be178c705", "8f502f59-5306-42ed-956e-07ebc39972c1", "8240608f-e09b-4ec6-8f2d-7b489132610e", "d461637d-68f2-40d7-b59b-6c9021ee760a"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["6315f497-9fb8-4920-84a2-1c4513af3ce8", "25df8399-bbf6-4b47-a6ca-fcc68acaebe8"],
      name: "LPIWgGXu2FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZrpJNYtglnu99Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSkvCAJURQ0xc8v3XGoxNY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["38bf9b20-5afa-48d1-8632-3687a4bf2bb6", "b6968aae-5352-4599-92ee-c30dea1967cc", "f15dc4cb-1a90-42cd-b2f6-c8e1be5e9840"],
      starts_at: "2025-05-03T00:07:06.000000Z",
      name: "Hzuhk8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2qt1fISbJLQ2IGy7A4O5EuFDi3ep7E8KTwqzGZlqsr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["e3f1e85e-604a-413e-a6be-0b83928c1b99"],
      ends_at: "2020-03-08T17:19:07.000000Z",
      starts_at: "2025-08-21T11:21:14.000000Z",
      name: "TtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLgNEFPzTNAeMR2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["acf54af6-8adf-443c-afa8-6a56181e6a1a", "100bb4a6-cc67-4c2d-94af-73d2abbcda43", "fb6e3423-0798-40d9-b2f2-b1ddbf19a01f", "d637f0c5-d050-4d70-8a91-13f2619c0a26"],
      priority: 8622,
      ends_at: "2024-05-03T23:22:07.000000Z",
      starts_at: "2020-08-26T14:34:24.000000Z",
      name: "NeaYJXDFnN5l443TmOvQLPfQxkSjhKrHXePF1aNsQcGEPe2hgvk3yuDeTC8XzXR9jncya31KgghsgYe3TbLJN21a8hZtm5so8Mz8sE9uDmHdcukVhdalQqRPyTvG2tPeRbQcNODGa3IhebkRxi8kuGoSk8mmCPAG5TaOSJrFwT6IMSTQQD3aZSLuV5KvsCMK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["11d6d5d2-d6a1-45b5-a7c5-4362e5f7cb3d", "f86080a7-00d4-442a-9796-fad650cdf515", "da733d7c-fb34-489c-9cd7-28970ec5779f", "8d851dd7-1cf3-42a0-92f9-ffdd2e4682ff", "6bd76a84-8923-4c2c-922b-2f5b52460ad8"],
      event: "external-transaction",
      priority: 5165,
      ends_at: "2021-12-17T04:06:49.000000Z",
      starts_at: "2022-07-30T09:06:53.000000Z",
      name: "Vg4CYuzSBW4stkoPc7UXRyRiV8Pax53IDmwuQOCWjbIPmFGWkh7DMCSqp4SWi3zPKlO0ubMaaWt2sfRwBothNvTY3vFr4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyBkd9RsSiJlXzLN5312aQsa3khCQuI0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["e778230c-b698-46a6-87db-f151ec1a2c95", "57b4631c-d00f-42ed-8765-6630492c9f39", "37faa7af-3765-400f-98ec-ac4b3eae16f4", "f6bb97d0-d111-4fe7-b1d3-41c19565c230", "0ba9e345-2ed2-46a1-a19e-c3964ee366c7", "acddf418-997a-48b4-b6f6-87085e0b663a", "217cd782-8b12-4c2d-89ad-8f03f4d54f69", "b14411c1-2cb4-4c06-a8bc-37fbfd3ca1e2"],
      description: "e1yI3CGp5l",
      event: "external-transaction",
      priority: 8374,
      ends_at: "2023-11-01T17:07:57.000000Z",
      starts_at: "2020-02-12T19:25:41.000000Z",
      name: "gOCupwcIPxBzhbkfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["5ec20df7-6b6a-401d-a7eb-ac21509eab72", "07155347-9dee-4688-bfb0-5f75148ac026", "5ba16e25-5888-4fc1-ae30-16bd5c77138f"],
      status: "disabled",
      description: "qI2b5rxtzGOZhKJMKwzvYsbBzT",
      event: "topup",
      priority: 7833,
      ends_at: "2024-12-07T23:47:24.000000Z",
      starts_at: "2022-12-24T20:39:00.000000Z",
      name: "6bpAqcWNJrNTsv2Llex1ejGQ2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQoWt3KCnkWzy38cC0E7gsSEI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["56186844-123c-4865-a9b3-582ba90fa8f9", "27b1214f-ca6b-42bd-829a-058b5eed3199", "ef45ef36-e8b4-46a4-b2f9-bd203a2a0d10", "d1a16335-8a4d-4393-93b6-ed82213ebd20", "942d539b-df5a-4faa-a8c7-7302ca44558f"],
      point_expires_at: "2023-08-26T03:40:59.000000Z",
      status: "enabled",
      description: "NmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnNgPyT",
      event: "topup",
      priority: 8359,
      ends_at: "2025-03-06T22:13:05.000000Z",
      starts_at: "2024-06-16T11:49:05.000000Z",
      name: "FexxHoOsY3XmfSCMMI0hPIOcfptkBjffHuYKUEJ4zrJepcLNjePvmbsJ6aAodX3lOsSzeTfXuU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["236fc187-e881-4f72-baf9-a711ab6f905e", "97c2dacb-098a-47da-8e32-5d7fc46f99a0", "35167d2a-8c10-4a49-9f28-51df69d3627c", "c35b331a-7070-4776-9ac4-6e955aeba162", "f6e6b3ae-1655-4447-8e2c-66919c8aa68a", "9c2bf0a8-a97e-411c-a062-c3ff24196966", "6c8aae39-c632-467a-be1a-d3bdc9867347", "0cedfe65-736a-4669-b93e-eb375bb14be2", "c9288240-31b3-47f3-bf72-210b39cb21e7"],
      point_expires_in_days: 2087,
      point_expires_at: "2023-04-23T04:54:05.000000Z",
      status: "disabled",
      description: "7LVnhxTyA",
      event: "topup",
      priority: 382,
      ends_at: "2022-09-09T03:06:11.000000Z",
      starts_at: "2023-12-24T09:05:30.000000Z",
      name: "fZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42w"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["ce08a7f0-d679-46bb-817b-d6bac5ee44a4", "88d728e9-3220-47c2-9892-ddfeba00066e", "9abbd355-07fd-4c2c-a242-604c5441169d", "63a791c1-b67d-4056-af00-11b9730cc58f"],
      is_exclusive: false,
      point_expires_in_days: 4902,
      point_expires_at: "2025-01-03T12:57:34.000000Z",
      status: "enabled",
      description: "ftKTMpHhWMUK3SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8reI7vFyo7eM4dNHW25nKJYDvzM0",
      event: "external-transaction",
      priority: 6836,
      ends_at: "2024-01-01T04:51:29.000000Z",
      starts_at: "2023-12-19T12:56:00.000000Z",
      name: "SYdkecoFJzr3brOZ5f3RQvkhtySJKYRUQ3NzIgBo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["a1171378-cd93-446b-afac-1e309ccd3b3b", "b9eb1ebd-8898-4c5c-91b3-a7b81f9edc76", "3eb332af-9003-46e9-a7ec-b754e85cb2b3", "c17b5bea-a612-4d18-9d37-21f5bf268acb", "b92af539-74c6-4d45-8f38-f03af5c4c592", "fd6921f7-ab8a-4efd-bbf0-51d46625f24d", "4f5b7862-3d05-49a2-95ef-7f00f3709f8f"],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 3124,
      point_expires_at: "2022-02-25T19:36:20.000000Z",
      status: "disabled",
      description: "jcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gUnx8oHUCw9IDU8v5tebk72bnq5V1PYuyQsrCeZvlknHwyCYeoTGD6IVelM1xkQHIUR",
      event: "topup",
      priority: 8476,
      ends_at: "2020-07-08T09:15:47.000000Z",
      starts_at: "2022-04-04T13:25:42.000000Z",
      name: "G9E4BcH9vh8Qcd9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["9c553892-1054-4da8-8cce-b644382ce074", "be2ba898-f967-4ac5-9770-d6644de7afdc", "4ec9f30b-f411-4802-abcd-813ff5353a6c", "398917a3-0658-40ca-8ec1-b50f6b9e92dc", "a686654b-ad9b-40e9-806e-7ff6f4cabed6", "44dc80cb-bf11-44d7-b508-1180a84f601a", "8a090988-519c-43a3-aa03-3bce3edce38d", "750f98c2-2e7d-4669-a3b0-e66ce87a84dd", "0d878de2-dd90-48d0-b5e9-c52a9404b428"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 8017,
      point_expires_at: "2024-12-28T11:15:16.000000Z",
      status: "disabled",
      description: "b3qItRRs3F",
      event: "topup",
      priority: 3894,
      ends_at: "2021-08-11T07:12:44.000000Z",
      starts_at: "2025-04-30T13:59:29.000000Z",
      name: "lrydgPmYNQmdCCSHSb7Peq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["24f2600a-f196-41c7-894e-454ef835fd9d", "0ecc5198-c71c-4879-aec7-a0ab375b09fb", "c7c6212a-07ad-484d-b806-af8a3c10f09a"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 3155,
      point_expires_at: "2022-06-03T04:33:51.000000Z",
      status: "disabled",
      description: "poUBZS7wM2sjFT50Pr6H3Lr5Vqadi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wD",
      event: "payment",
      priority: 6368,
      ends_at: "2023-01-11T13:07:39.000000Z",
      starts_at: "2025-02-15T11:38:55.000000Z",
      name: "01hvmpIXnG4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["7392922a-7999-4164-8a98-30f1960c5e95", "38cc0cb7-d667-4c4e-8174-2df14fa8ca3a", "f5d44972-d571-4a4b-ad9c-7b2e0ad092ba", "45a3e936-dba9-4275-8b51-864e0191d851", "b80fb348-85b3-4e18-9087-c715c2516a44", "efdd8e8d-cee3-4052-b7bb-837c5a361555", "c7a455c3-3f07-44e5-8f3d-3f6397912f98"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2984,
      point_expires_at: "2025-07-30T03:49:35.000000Z",
      status: "disabled",
      description: "arYUfATbiJrkxUEwT3M91XjHrTG7fMCl81IJPQuSHXTmEReE1YV9ebnUBpzD7d9DsGnOvPtZOQ7wRQgMz",
      event: "topup",
      priority: 9169,
      ends_at: "2021-06-17T16:47:19.000000Z",
      starts_at: "2025-08-06T10:46:43.000000Z",
      name: "Yhb78oA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["83e7edcc-a993-4d27-a193-e4c5dcec5439"],
      applicable_days_of_week: [0, 0, 5, 2, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 8788,
      point_expires_at: "2021-11-05T04:16:46.000000Z",
      status: "enabled",
      description: "ZEncCQxjIhrUeBMFsGSoFMs14cvovqZ6GQpcxkL1iWim0Xpy9XRR4FHqayBd9Y6naDnC",
      event: "external-transaction",
      priority: 3297,
      ends_at: "2020-02-11T19:45:46.000000Z",
      starts_at: "2021-05-18T05:57:05.000000Z",
      name: "IshUK5sOcLMoSdluvLDw0rIOalhSCHrt5J1YKxmhpIQaAHuF1XqBsQEc2YHzb0v51JNexx20BlobdlTY6n3LbK6Vu4m4rhE7PkEzPYVXfzwtjxI8n9Z0CQKMUdsLKbKLcaV6nH18WcZidvZ55mAgOE16AnmYbzCLHYWconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDwnUvtTuwE1P6w3jvuc6WVynWZlMwTGtLKHN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["8a39d1fc-5af6-459e-b019-4ca07bd4c047", "3b4d53c8-e14d-4e29-81b8-eed9f893f1ce", "5433f32e-8c56-450a-a3f4-092a111d52a7", "206da07d-a3f1-4d88-a098-0bee8862c405", "3ba3c030-5dc8-4179-9d82-832c0904358c"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 0, 1, 6, 5, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 3901,
      point_expires_at: "2021-05-05T20:45:37.000000Z",
      status: "enabled",
      description: "TMRGGhLK4",
      event: "topup",
      priority: 2029,
      ends_at: "2024-08-25T17:59:00.000000Z",
      starts_at: "2022-06-27T11:21:07.000000Z",
      name: "8CvDRXJmyMUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoYYcgPPK3Dchqik562nQJ7JN9nEMDfH9ZULXMKOjFu2fGiShoySflnRPKvTH4Qb4HK1DE5zpHipftSBuuUyajKD4UG1MO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["d8f0fa37-e1ee-4b83-b2e9-102c56c44f91", "2ed878eb-988e-46b7-b3d1-be7921c66be9", "6a6279e1-89df-43db-8e9f-8e6004afa0ff", "e0bdf0cb-f7bd-4480-aa2f-b6ed17aa2f73", "585edcb0-6325-49a2-a917-d9c6f6116282", "8ac6a9d9-eb47-42f2-84d7-e2931712cedb", "8108e678-9d78-4617-accb-f297e4ffee22", "316fc177-bd3f-4d97-bfcf-e2ec05ef45c3", "371342e9-609e-4e5d-a28a-772873248c74", "d4b7b5f1-c632-4004-8e65-f6a2ba4d5d30"],
      minimum_number_of_products: 5037,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 0, 0, 6, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 7702,
      point_expires_at: "2021-01-29T18:54:37.000000Z",
      status: "enabled",
      description: "mox8hwqx5x7fQZGPMXFo6oIvZGxUJAAeHeUyg78eCpqwfbVaGI8MUg6pkTJeF4LA5VGWmlO55tLRhXfPthFrTbvP80JDs4TLAvvWwguBec41EmwzzFrgc709a7P9KtTHr3zG8NnPjRfIRrqy3F",
      event: "topup",
      priority: 6797,
      ends_at: "2025-09-11T09:21:14.000000Z",
      starts_at: "2023-11-19T05:24:02.000000Z",
      name: "RiHbftN77E9sKP2LWTHQkvbYQTkmfSmGSFmTTeLGAy7h6m0YyagUC0Ij3N9K7EVH4f0IDf80jI5hMMqGagepFcb0C3pMeh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["755f4f1a-5ec2-48cc-b789-3910e4133eb9", "97604202-4323-4411-9f20-4b95b8da8075", "e28ada85-7a3e-45e8-a75a-aba283fa8789", "ebdc2973-046c-4d83-b823-50ba41cb8f25", "35b83370-df1f-4b93-ab19-bd7f6bb86db6", "d84bc3fe-b521-493e-b5fa-872034b7d4f3", "4e4b2c19-648c-4d8a-8c01-a11f9fdbe34d", "5166ca4f-6661-4dd7-880e-2d26afe296cc"],
      minimum_number_of_amount: 6007,
      minimum_number_of_products: 991,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 2, 6, 2, 4, 5, 3, 1, 4, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 5299,
      point_expires_at: "2023-09-11T03:17:07.000000Z",
      status: "enabled",
      description: "vDDPPtMusem1WSPOdAkWLCHhP7q7jyjEo8V3Di9DtzhzAGKUtsDdhPal5eEvQkTNVI1DbDv2IC",
      event: "payment",
      priority: 870,
      ends_at: "2021-05-21T07:42:04.000000Z",
      starts_at: "2020-07-09T23:15:24.000000Z",
      name: "qeRzwnNnU8Hy7seU6TPp7YTcvCbmuWQvyjmdKhWFzroFJfg0zCih9qHu842U5SnX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["75d07ae9-81f0-4c89-a110-6393c10b62a3", "271d365d-069c-44cb-8dbc-3909c7790911"],
      minimum_number_for_combination_purchase: 6148,
      minimum_number_of_amount: 4980,
      minimum_number_of_products: 1317,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 2, 6, 2, 1, 0, 3, 0, 5, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 8782,
      point_expires_at: "2022-12-12T17:22:30.000000Z",
      status: "disabled",
      description: "PZEq0xgguEtAXJ6WozfUGo1oVRA1PV2JD5SjzUvS2Jlq6P8",
      event: "payment",
      priority: 9887,
      ends_at: "2025-07-16T04:08:45.000000Z",
      starts_at: "2020-12-17T16:16:41.000000Z",
      name: "1PRe6ex8zQnoMXPxIs0d6X24reGHeQvAPqGMsA1rg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["1cf9df50-231a-4920-bff5-3b3470a1ea83", "b4cb510f-91ef-4a24-ac5f-1d76f18714a7", "911dc498-723f-4643-b124-8b075f09eacb", "f9efb6c4-620f-4e44-ae45-eab1a3d90d98", "171644c7-d45d-4b16-b2bf-bba97acd78ed", "c5f319c7-ba05-4e55-b9a1-fd265fdaf59f", "d6c398d9-90e5-4544-9902-f5c824e323b5"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5626,
      minimum_number_of_amount: 7677,
      minimum_number_of_products: 6975,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7427,
      point_expires_at: "2020-06-16T07:48:24.000000Z",
      status: "enabled",
      description: "eqkSknjWS4aW80Xp5YCo9TXEMx6Q3N4lydCpBzThmgOIjIatpE7508LaYMNkxpSQqkfWLu8WbqqwjfwNPVeBo88egFulBO0tWJ93Y52C590AS7UiB0DiDGREmImyJDbbC2wEGBfcAGc0EsTxqnb80BRFYcLTC4xCABLekowD1pN0MSUSSu62wEl",
      event: "payment",
      priority: 8169,
      ends_at: "2022-05-03T17:23:28.000000Z",
      starts_at: "2021-03-10T18:10:35.000000Z",
      name: "UkIv4a2NsBAg7OoWmbOWXvcqkH6OCG8bjnFs6Wxag7kVTYLZtjqA6blCNXCxB23NKDv8dBki6rCZ5MRu3n3kWR611LhXRF1WjDXemYssWVQAa0S9OWEqIPoWhsZ81p0D8THD4dpuhxNvhxjPfdLCMpGSOhV764tKT9oHgjnPne51YZOU0zGq4PpZBc0rJPOstD7C9IM7suB5w40dZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["3a87ef54-05c0-44c0-b302-fe755087704b", "17c05515-e08b-415a-8773-602c3fd5dd46", "537fe6bf-513d-4cc5-acbe-74eda66cb851", "ed56fc06-e7f0-4f2f-8134-bcc08bf99252", "640c832c-e553-4f90-9354-c3e14c20a8d4", "8102293c-de20-4dec-8cde-a826d59c3f2f", "50dd61e1-75f1-49ec-abd5-4f3ed3b2adb4"],
      max_point_amount: 9018,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 9817,
      minimum_number_of_amount: 4874,
      minimum_number_of_products: 4078,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 3, 6, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 7978,
      point_expires_at: "2021-11-14T05:12:08.000000Z",
      status: "disabled",
      description: "LCIvDzYzwAtEksQWSl6Am3gCBrhM35EfmrtOFWMml5EKRiDsWg9ZcujQMFmb4vZ2HzNm8wdK6sB9HsuClaKx3AfzVa",
      event: "topup",
      priority: 2431,
      ends_at: "2021-04-06T18:22:39.000000Z",
      starts_at: "2023-08-29T19:33:07.000000Z",
      name: "NDBH1uzKMqlEF94aThPURq2Q4ZM2ZH2d8EggWOOiiO67HWQCePWkLnY7y5P2vTc2kTDF85U9g31HpRLtjhMxgRT9FEddBtVan5HyW6Uan9MoYMbeeBKUXDDy014vqgIch5W6XuTL0vlIdvdIMbz7wUi6BXoKUl0tR07369wBiPR32MXZafz3jffpT8lgGERnFdcWhSdaJfJ60D0H2T0aKhnL3FlnAD82QrpYaKuslNraOesyAiawWiyWkSV3bs4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["be22404f-c66b-4f57-9a04-fce87dcf25c8", "f82aba7b-72c6-4f20-b8ac-a0338250e150"],
      max_total_point_amount: 7351,
      max_point_amount: 5636,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 8999,
      minimum_number_of_amount: 7918,
      minimum_number_of_products: 1145,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 5, 1, 4, 3, 5, 2, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 7879,
      point_expires_at: "2023-03-28T08:28:08.000000Z",
      status: "disabled",
      description: "b7w6ZClkoqVajvuG5cGcBP5wA9GwSB8bfxMId7hFKERGvYa7vbD1cIywVpXocQ5N98CAVKuKRC5FLAIRiGKuI8CNBTqLCZ99AjVbK3l31NeAICSoLJdEVZoJB0H5I2jN",
      event: "payment",
      priority: 89,
      ends_at: "2025-04-30T06:25:22.000000Z",
      starts_at: "2021-08-20T19:26:44.000000Z",
      name: "CMs9TezTj3A085y5hWQ3gdeDOWFExGORRYNLJdsZ6n3IGoF44i0499bTqwmusaHN4dAo0kcMwrj6lsuth9pSzmqVAxW3BZh2UFG0NdobuyCqKAyF8XBloHn7nUM7l934bPMQ7DIwFMXGuPCrmdUDxKggDFfFvOJkxhc8IPvtQD4QxNm6tX3Guvbo2vDNfvQpElqxJKgNyOMeXS2rUoCJ5iHqorIswPc2cBsLEwskU0m8hSr1m"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["55cc9d65-bf40-486c-a53d-521627bd39f0", "dd470fcf-13b9-4dcc-9f28-0c85941f3eee", "4b434677-c9c9-4de0-b38a-ad2b186c2e55", "5d41de11-e225-42e3-93dc-ed1b7d4f006d", "e3979da0-6fa5-4b76-a234-b9c79054654f", "17afc60d-75db-4bd5-b1c3-fe7ad51446b9", "22a49c63-e347-4444-a28b-24971a89a5c9"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 2493,
      max_point_amount: 4350,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5841,
      minimum_number_of_amount: 8713,
      minimum_number_of_products: 9532,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 0, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 4824,
      point_expires_at: "2022-07-02T15:24:10.000000Z",
      status: "disabled",
      description: "WLcKpd2P335Nv6jpCTg7cImjgcPmkAEumRe3a",
      event: "payment",
      priority: 3464,
      ends_at: "2023-06-15T15:39:22.000000Z",
      starts_at: "2020-06-03T07:16:58.000000Z",
      name: "g8VGC0KZL7VMaMEGv2NsNRGCHkqW6b190Xf2yHeAyBqIIySMiYLD3kq3Znz8pepfEmpSiLZTFdERWScAwFtubDUWmymMiDwFFfcNNLAfTp6G3m2S11HDiNC2T6Z1NRFWi9xNJqHv5TG4qAHZdsob31RGFcTjCHIRk6EOKDYDfh7IyYBfSv2V1UV4oPfCtFaYiWkYeLppJ33CkM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 24', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["ef8d6958-4390-49c6-8d4a-d2e2eab7cba8", "46aa8347-8fd0-4771-9cad-257e319b7125", "31fa377b-8709-4211-8062-4f9916f3f8a3", "63c57e04-3fe7-4371-b2dd-b82b5d11d6bd", "57debfb9-522d-4c10-871c-c63cd4ee207a", "edbde70d-097a-42b5-bab9-575c0d0afe95", "5e3e920a-5e76-44d6-8ff6-82e9b2e8783f", "ee24a86e-2935-4abe-86c0-13dc0895e90f", "6cfce6d6-0085-46da-a941-d40719d0d03c"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 2604,
      max_point_amount: 9589,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 3675,
      minimum_number_of_amount: 4042,
      minimum_number_of_products: 7761,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 4, 5, 1, 6, 6, 6, 0, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 1205,
      point_expires_at: "2021-04-09T14:41:56.000000Z",
      status: "enabled",
      description: "0pgRwqKcwLRpyfhvSp3huvf9IS",
      event: "payment",
      priority: 7891,
      ends_at: "2023-02-10T05:38:34.000000Z",
      starts_at: "2020-07-10T02:06:41.000000Z",
      name: "V5b6lHxDKXrcl2EVGtJV2Ntce9IqiVZ5m5eyekXLeKtBuImxNnX45R5ZNIieikdp8w9LWlkrqUcz43dBm26Or7FE7oxXwqyeP95WFsrDTZsTHaLMAx4xhJmPNb2Vt3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 25', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      applicable_shop_ids: ["6b52f383-f598-4deb-be23-f57f32fb650e", "5464e926-09cd-4a5f-a754-c4fa3c3f0541", "999f4778-12ed-42b3-ae18-139f85ff73a5", "1a14c9f5-b79b-4343-b46d-16b4b80486f4", "4e7fdcc0-3acd-4e1a-b4a5-5af2e94102d1", "c4555337-373d-4298-94cd-375d6eb428d7"],
      budget_caps_amount: 896353089,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 3105,
      max_point_amount: 4631,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 7645,
      minimum_number_of_amount: 9636,
      minimum_number_of_products: 7976,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 6, 1, 1, 6, 5, 1, 0, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5093,
      point_expires_at: "2021-04-20T22:14:33.000000Z",
      status: "enabled",
      description: "koAN4R6PBgm1bgbkQVRY8MuhwDykulFo5mDyJw8V3XaTOkFDFDXkJRYuzmNrD0IPFMYcPpoEqcZqYNWKYupHW3vkZPbupwOmpLyfcnvR24ekndSEuijqLz34cJjz",
      event: "payment",
      priority: 804,
      ends_at: "2024-07-16T14:28:33.000000Z",
      starts_at: "2025-05-20T19:43:19.000000Z",
      name: "zSXV2waIpnDEjnPuGDOLqsy43AtWyT6hyzJkPIxdv4Vr2ADhNnBQ2AhJrtrRhEmEhncAz9T8Jn6tKv842hmKtJWGe0W2JoBVxOBG6QSEaMM6DcJjfAtdrmKAg3KBKDu0vlbYdVC6n9nVLo43cE33CQPF6kxIlI0uguDnziraNYM7VX5YLnlD8HOOCDlP4GZ7jbmXMO5zVMwfk3fyCehTHNb57OPg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 26', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["93336af9-6227-4d95-8bfd-ea9ab781991e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 27', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["48a16919-ffa4-48f3-94f2-5dd17721e060", "b4d111c3-f41e-45a3-ac7b-92179006e649"],
      name: "NbKg5EGtS1CRG8HTOfVnvp3qGXZFBsOSpPHbliv7UIdhUMzObVJcG5btiH5rur7GsubMGTjIcOXKD9o8Kba3zToGBURahT5P9DvE8UV0j2YqC15yVJZpc8KVpHARBDgg1Gn2XcmC1vS6JUWIFuWHifSCeHqDX4OovF1kPsfFAfUD6hedBMnO5c5siBhPS0PdEUgltcrxJuLRpPyEyLzg5USUF0acnAYj9bCB7rUqwv3jfmweeo8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 28', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["74b2f4ed-caea-47eb-a995-0011ac3056f2", "65aa82d6-9ae2-4f4d-b49b-4b177385a779", "5e33bf5f-6def-4aba-9bc6-d35b76aa877f", "35759b2a-cb62-45d9-803f-90281d72e4d2", "34fb5509-5dec-449b-8dbf-0c60ca02b9e5", "70d664cf-6266-4c2e-b928-c986ddc7ac11", "d4deee9a-894b-444f-83eb-1318443a0271", "17450130-6052-49a0-bc46-fd7a4cc13a6a"],
      starts_at: "2024-01-25T13:46:50.000000Z",
      name: "HwRArvOU8komJ1Atk5RVlui7mGRMrDuzhgMwi2QEwxvEfxvbfoaYN92mmS964bSnGq9n7PpIOomMWW66P3IlH0kXmsTMdugDsmRtGnF7L4kFCWrbFqt27c2GHcIyayD2aKjXN0NBWyTy0xC6byToeZc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 29', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["967dc4b7-fc8f-4498-b35d-a9dc095c249a", "67f7a419-1cdc-4f00-b437-622cd1824612", "aeb94116-6a76-4f81-9bf5-66c5d1ad73ed", "f9a0ed3c-8de9-4c88-92a6-0e727521079d", "e7c6d46c-4588-4ce5-92fe-bd02b4272793", "9af03ff7-3859-4b4d-bfc9-7db5f04c033c", "60e91c57-4990-41ce-8da4-2c26615b43e9"],
      ends_at: "2023-02-16T19:34:05.000000Z",
      starts_at: "2020-09-30T13:50:46.000000Z",
      name: "AMJzfUo3Mw8SUD48UFtXOBKAPivd5iJNrdqAuTxyB0A3WX2EcUb892jz3Nv10xFyFeM64iLpLDhctAZixWvzCjvZGuuLmpXAGJua2paAAkUgzb5zEsMYGbxzOIV2r2JtDEGxgzX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 30', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["b4b19528-e02d-4007-9b7b-a0b92503ec81", "8c504826-9910-4b30-b81e-e7d18c93cb31", "8c8afedc-f128-43a2-b145-77f7b257aebb", "c205fe1c-d36e-444f-aa2d-84ff532edf24"],
      priority: 2705,
      ends_at: "2023-12-02T04:44:50.000000Z",
      starts_at: "2025-03-19T03:24:58.000000Z",
      name: "jMdE2ZgqC6g1ENWOPFMuygZod8nuff2bwE3RDjoGhPLmonziI8gPB410GLPQCeC7jS6W3DftZcdyglmNXEppEtAwequ8PJiYpSm0jLeVc0IIOPvouCcBMs9oEUXdmuJ5CsXeAgeV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 31', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["4694a1ed-dd87-4521-ba40-60b0c20d4458", "07dbf6e4-b3a5-4642-9027-56f106287f0d", "79632d76-7efa-4a32-8c5a-2171642e0953", "32280e20-8a62-4294-b1c3-87983a974c72", "1f6663b9-1b47-4e05-9281-29761c58d4a8", "be2d5cca-d1aa-4084-abb1-4d755baa7918", "94903036-0592-454a-966e-f5e226f7fe17", "536473a8-7d30-488a-a634-281ceb60226c", "c1b1e8be-ea51-40f9-9322-bf9e085ed9b4"],
      event: "topup",
      priority: 3006,
      ends_at: "2023-05-22T21:36:00.000000Z",
      starts_at: "2024-12-09T02:33:15.000000Z",
      name: "93ttYPJhOiPCYhnxitPJhteZ9v4lYIFrYpnV35pBMGKJEJkpn6Mlr99tmpLoTFQeHIPsIBBDhi4oQ1t1s3zE32Vk24Ceen1NSjytDUp3byZcFEPnIDVyEjs1xIVAG7PJaXsPvnXy7JLPWT4POJKIKUBKfvAdAdVhR8qFWp5tCaOkj67zOOhzPjoLUnpes4zWmpVcy9ixDX4fCfbAE0AZjhFFPDiC5XgRDuJC7DFGXWJ1DsLyOnXTqwNlXWPS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 32', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["27770274-56b4-473a-9528-67b44599ef78", "ae3406c2-c84d-43b1-b4a4-491f8ec865cd", "e3bc690d-b07b-494d-91ef-a64ff61e36f9", "5aeff1d7-ebbe-406f-aa41-9d97e763adf1"],
      description: "WcD5ADFBSPh7o2MC5sMNAQhF0HCoj9Dj4ZpJqp2buSHK5WKI86hTWo47qb9nSKNBR3LjzCdQo4GwTY7y2Am8ZcyGh3BczuQ1HmAT4U7cCHORIBupKF2LGLWlWRqEU1R3HVfumJrkxA1RBhkJnrKn6T4UBYf",
      event: "topup",
      priority: 2469,
      ends_at: "2024-05-29T01:49:10.000000Z",
      starts_at: "2024-04-12T00:37:17.000000Z",
      name: "p3cMOeoQItbJApNFNbizZqSEKvNBsiLTmRsG1pcvzPfSNlMjgyCm3l36NNuyyweAXXanZi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 33', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["80333b8a-8f4c-4253-9e2e-df360231dc6c", "96c86062-c2ea-41b9-ac4a-4018bec9aba6", "fc5545d8-f0ef-4956-bb1e-f0a4f5678e2b", "b8381357-39c5-449a-8f6a-cb94f82fc89b"],
      status: "enabled",
      description: "NWcJ8Pqob8ZBDc2LIkAJFpX3tMiPvkskr",
      event: "external-transaction",
      priority: 3296,
      ends_at: "2021-07-15T00:23:15.000000Z",
      starts_at: "2020-11-30T09:23:15.000000Z",
      name: "NQht6pUXt6QkeG9pRp1c5EcN6nLJcb0NEcuMnzKSDbJDSeKRyRniwPaN0afN8mRVY0r2kLaYAQQnNWq5gJk8ucSDE2uEYUD0C3IXLL4lH8T3KxBkSfET7NeTYdPy8UjYc9OlslQQZIq7zSOEeSzczj6ObIBdQwmJP2q6udBME6WRlyybO27figMsVRHKPW8EbdfuKdbyfcjYNDVx4A2ovqPMZA8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 34', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["d89c3069-9072-4817-afba-145850d2be4a", "fdeb1139-a795-4023-858d-8a1fb7376d36", "925638da-8c3b-4663-9e4d-0ffab709019d", "51e179eb-a24c-4879-a9c1-b8713474ee8e", "5edf9ae7-8600-45f7-933e-ee6057336fef", "42d84f64-80e4-44e9-bf0e-4c3e1fe465f5", "fa7fd990-7606-43ea-97d4-07e74dc8076e", "ddce62df-b084-4b28-bcb1-45312374306d", "d9c53a01-33f0-4c78-bde1-4ebc400a7102", "226af07d-2756-4949-8c59-16e7f0ebd451"],
      point_expires_at: "2020-02-29T06:11:33.000000Z",
      status: "enabled",
      description: "o5GvBiHKw3I5f57jFE45d3P21Pzx2jnlKrw0LdNS4VtkXCDrt0LJOE3QgwrCcszhfH09Y5OthVwPmvHXBFS5mnHJDaN7ByqCBViT8YJSc5gafw5E7JxTvjUc1aT5EbGpCQn8B7l65BYMvNkhE",
      event: "topup",
      priority: 5346,
      ends_at: "2025-08-19T15:10:56.000000Z",
      starts_at: "2024-04-20T04:02:26.000000Z",
      name: "q7C0zj85JoEScisdzkhxnXFFT7CXS50vaovkROQbPFa2Q0QZFPxPWcwwu3uh9fDL3S3NHvBIxMXxVOS8aVOpiS1EeKe2EnvF9kW30yXFj5pEZQNOtIwcrR2Tap7tnXzfq7vVXcZZXk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 35', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["89a3206a-8759-4b02-a4d4-3ec5cc09ddcf", "41bca8fe-76b6-497d-817e-e19c3fd00a35"],
      point_expires_in_days: 2585,
      point_expires_at: "2024-06-20T15:45:19.000000Z",
      status: "disabled",
      description: "NQtFJaR",
      event: "payment",
      priority: 5841,
      ends_at: "2023-06-06T10:12:20.000000Z",
      starts_at: "2025-03-01T19:39:22.000000Z",
      name: "5yyqZjpM3EGDvxc2vHpfKAFMK87o5EDfCnjGchqfzXJGnbGhZsKdVrETxLEt4GFvxAKZGN2hkrp4AuDVFN5fAvBVJFsjezB3YP3w02SjMN6p0E72qWtOk3QUVbESEWPtcFyu37VMAkI2ylOPtFPfUfw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 36', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["60ef787e-53e3-4b9d-8e51-9f6ce42bf36d", "7147fb59-7020-40a9-b9b8-1d05de458676", "464d02b9-72a5-49c5-bd5c-49ddf3a03021", "05e237eb-aa0f-4961-99e8-329c12496ea5", "5f45f707-ae32-4a46-852f-f1f06c275573", "9b72adaa-754b-4007-8525-32f334526b89"],
      is_exclusive: true,
      point_expires_in_days: 684,
      point_expires_at: "2024-12-15T12:24:42.000000Z",
      status: "enabled",
      description: "KWXhqcS1Ua3AEPfEflYFcCoy2dXgtWk5Skp4k9FjiQcyxviUOicaOZqLE3MkcTFrJK4NHPvl4VhqOdqyKHcIOPhbvogj2mEAT9kQkxX80ARofdpsoiXVeBxFuF7c05YcbHgR3SFdYgsuZbSsGmFYxkuLrQM",
      event: "external-transaction",
      priority: 4419,
      ends_at: "2023-06-30T18:08:07.000000Z",
      starts_at: "2025-03-13T04:42:21.000000Z",
      name: "ww3RYCIbC9pf8Wzgm4choir96Zk4wBbHbRE9tWUhNPatHCNYgstx4oloda7k12vM37GlbZJKSAFS4eQAmyXqltVLiYXrByWE1iViSMuTkME7Xo3gZLzoJUOW0EXfGSkB9sMClBaFjZtZBNIprWMfHv0Adc0Cr3QSzeJKZKHWOYDy8Xa1naLbp7yoCkUCkILHDjG2icoeSoFWNBFxzeu6Kj8LSmqtcTHfZNvkLrHlNh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 37', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["897967a5-4126-47d0-a6ae-2a3404dc24af", "5fa715a0-7583-4600-8560-0ec98bdf2c2c", "3cbab537-d66d-41d6-85ad-99bc97648da9", "20eb53c5-87f1-4d3f-9ae4-4b1a8b50ad99", "0df28983-cab8-4453-b90b-97a1516068f4", "f51ede11-3fae-4a72-be1e-40733af4c554", "f67ea6d9-4327-41db-b127-5ed212959559", "711b9113-17fd-4ddf-8fb9-dbf115e193b3"],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 1412,
      point_expires_at: "2022-01-14T06:39:49.000000Z",
      status: "disabled",
      description: "lF19OJHZirKKYCiI5WbqIsQYvdmHcE3kg67Mp0CzjOzftNuETzfXonmfKJhNI2H30SlKK1O1UKOiryeoJ2KHqioForPYYFDgWpGReS1ZkiP3jHymN76Njiv2bjGekXOVbuSOvVupSap8p4f5efgdz6gyp1GcS4",
      event: "payment",
      priority: 3985,
      ends_at: "2022-10-09T06:08:14.000000Z",
      starts_at: "2021-07-05T05:12:53.000000Z",
      name: "bS5TrzXQYDyRb4tqKolqMgdRHskFZ317m16rSuV3GWqnvnIS00nrMnQNFRYYqQB2LOvvxaJWdM6RyNE08AoCyr23XqnSacLmBXCHDyWfJbD0iY7FmSIIJxWwKBqcUUGOv4rpZxW6C1o0zvPKHwlN5cgpKhTDjrt62aO0gTJKvsFX8pCgUNdYXQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 38', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["0497fb68-314f-418b-8e94-0068a429f0f7", "dfef3d57-62c7-4b48-84e1-63949c29299a", "ae7280d1-b9a6-4352-b374-35ffeb9f5685", "05b86921-0b3c-4bbd-8d05-04fa86c63df9"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 4420,
      point_expires_at: "2020-06-14T14:16:59.000000Z",
      status: "enabled",
      description: "r4ZI5zg9bDUlUJBBIg9Fd6Y7e4aTjbZiLOaWRsEnzqZ6lGrz0tQnP1Co4x4AXMvzQhY1JlrHqbdULcyqcFghqKIiyi3aAuGXWsNdhyWJyqrPAKmmZGZJNC4j2awHXlJF9A7cu6AxfU8HIO6LO5Dd5XiFWL9oU011XoGoCpelXPpOt9Y3msxtcs0",
      event: "payment",
      priority: 466,
      ends_at: "2020-10-01T09:50:09.000000Z",
      starts_at: "2022-05-19T00:42:06.000000Z",
      name: "q2AUltkkF5RV8aSNO9GQnDszD12NRIYvg8bbFQzPdXDpujuzOkg0dnSdALdNv5r8wM328x"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 39', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["277e0a75-8e99-440c-8d9c-acc25cd6666d", "c0c55107-860f-4ea9-9a84-bd5f76418f31", "b989019a-a848-453d-b378-41550d4672e4", "292b76fe-840b-4dac-883f-e7fee139233d", "bebae39b-a5f3-4d09-8553-ffd955128d1a", "993e1e2e-ba2b-4050-97f9-a1ddd8838856", "a0134279-0487-4445-96f2-73ce4028b38e"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 9612,
      point_expires_at: "2023-01-05T19:17:48.000000Z",
      status: "disabled",
      description: "9OH6RQgeafcESSUHZ6h2XaPg728Rk",
      event: "external-transaction",
      priority: 6102,
      ends_at: "2024-02-25T16:41:51.000000Z",
      starts_at: "2025-02-13T14:38:13.000000Z",
      name: "cGA0kjIj9fnBbIK8dSJpAN6wIXIQbTWkewXW1RgDvxeuhtqc0lVuVevBpKZFsUJPsCckORoCtdXbeAqJmttYcSXDoCgwypQnQUs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 40', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["e7a79094-84cf-48bc-8b81-b1cd6bb1f160", "93aa0fda-bb33-43ae-b2ca-15385e74d707", "b66e8be1-e052-41dc-9d8e-2e4759bf9df7", "11e8155e-a618-43fa-9636-4c56cf58de44", "7260221e-47f1-4032-a96b-4ecc84ef13d6", "7998c9b7-132e-4615-9552-bd807c0d8886", "3822fb39-ef5b-4285-97d9-498275a99673", "222105b1-f442-4bd4-a2cb-7b6a130ffc39"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 3239,
      point_expires_at: "2022-08-13T22:16:39.000000Z",
      status: "disabled",
      description: "46l1ev23Q5PTPgtt4yAIzCwP1Z0JVfF9RSrf0Q1pmhWHNJvae7EjBkQNn9uWl9JunPyftwg9sZ6EOXmzMsMVDh",
      event: "payment",
      priority: 7585,
      ends_at: "2022-01-15T07:23:38.000000Z",
      starts_at: "2023-12-08T17:26:53.000000Z",
      name: "fFvUl3UtKdNP5TLVhbhll0GP4QAkQeOPrTAo5HhYx5jCaGbLEuJCfBO4W1IV2UViZVHRWPkdj3cWX27LHxVCRXJ7RR9vhNIu31vkGd5KFMjSHWQRA9E535lViSyzzCHjVEEg0SpYDFFDY1quxNkSS1vmCLOUldc17zrM7imj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 41', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["466777d9-45ee-45cd-8b46-70ed2a795f07", "4f39f0da-c4d6-491e-8bc0-efe23ad8b96e", "514bd151-46db-46af-bf11-efa053cf6f73", "485d9beb-c24a-411d-b453-14cad38840bc", "6fd2619e-4c82-4957-9b59-f464131436bf", "7d9a6bae-1e3a-4494-803d-e200e1b51686", "1a128dee-df28-4fa6-b8cd-056a3ff8ef2b"],
      applicable_days_of_week: [6, 4, 6, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 1291,
      point_expires_at: "2020-11-12T10:55:56.000000Z",
      status: "disabled",
      description: "w1Vg5A3jIY5TVDn7VAyGhf1a2i4Xb006Y5FN9bW9vksFBm8sMwbh1WFtpEmCrFqNwdLZ15QmFMvlNaa2goLZ5E9OEvOUI",
      event: "payment",
      priority: 7854,
      ends_at: "2022-02-08T18:19:46.000000Z",
      starts_at: "2024-02-18T11:38:38.000000Z",
      name: "bJ5GuqfgOe9nVnbOf1mceXbMKgmiS2lNCj0coTfFCchnpKAXXDxQv4bOJ9FCs7r9SIiPLZxhYcpGO5FAV5Tmz4fnzfWLRafbjHHiTlinfVLWJIyGq0eGZ3Lj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 42', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["23023c05-f7a0-468a-b4a0-ad5c08c36595", "7d6a3de7-321d-44d1-a011-d39d63b8d21c"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 4, 0, 2, 0, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 4167,
      point_expires_at: "2020-09-29T03:34:33.000000Z",
      status: "disabled",
      description: "pFJl8a49K0SiRVrDmJ5TPkLuNgnu18c0Kn6PzJQm77hC3byYhnk9L",
      event: "external-transaction",
      priority: 2681,
      ends_at: "2025-05-31T09:41:09.000000Z",
      starts_at: "2022-11-02T08:24:20.000000Z",
      name: "kNHRMXQTzW1iBiUI5JGbGoEyKdo0WvNvuZ2zOymd6UzJ163lry8C4rDtJNzcEFdrvo427ISByum8MIrVugVBfTif3qpXYgZnZ3LJOu3iwipHdsS3ShjnA4Sr1gSN2PelpywqnkqJGFUWWcs7OK2a7LaTGiS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 43', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["46d9e6b2-24ee-4b5f-9643-71e1465ad2a7", "de1b59b3-44dd-46cf-ab5d-281119d2fdd7", "bf87e5df-0c94-4fe6-9b53-0937be9cd988", "67461741-d571-435c-b7cc-c1eca7fb13c8", "1c820cdd-a4d0-4316-a915-fe2360aafb3e", "3fc302cf-f7c2-4ec9-b9f1-6bed1431d081", "eab30e46-72ea-43cf-90c6-4fcd8652a0d9", "a3f6e75e-cad1-464c-911b-720b25f9c608", "3d59cc4b-0a85-45a2-aa5d-a45fd724b5a4", "6c5a5771-3588-4dc8-b960-98a5acfea14b"],
      minimum_number_of_products: 2696,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 0, 2, 6, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 7952,
      point_expires_at: "2022-05-20T04:27:02.000000Z",
      status: "disabled",
      description: "89AbrhaWMPvJ4w9BbWGLWxTOnqHU20ukx1FDQpVqtvlq3pwtYNpqFJFhJ6HuYWnqyIUhAD4rpz6whWSFAXMqy8UduAdQ5IH0TK2HSat5A6ikNbGO6nv206MCoq10cKjOOAJZbMJkEXTJUvgYePqHLhUyWTkN1F8Xwl2rFV9LPEG0FsEHZ0zFFEN3CsRlByNyR64VEa3",
      event: "topup",
      priority: 94,
      ends_at: "2022-06-10T11:14:09.000000Z",
      starts_at: "2021-05-02T17:00:03.000000Z",
      name: "muyUE26kLnIwLEQafbBqwyh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 44', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["ec27e1fa-9594-4fa8-a7eb-b855cd0d96de", "07290fc4-9498-4953-9376-3885d8206030", "fb7a2b86-05cc-473d-ab49-047a7dcefae3", "a8c4a1a6-b35a-4518-a2de-3c11f40dfbee"],
      minimum_number_of_amount: 3566,
      minimum_number_of_products: 3508,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 4, 6, 5, 3, 6, 6, 6, 3, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 1918,
      point_expires_at: "2024-05-29T19:18:30.000000Z",
      status: "enabled",
      description: "II6xukRoB486IcnSrXwZGPsDFfbhpjo6CvZmit6sG22LWplDlWahPig9MKERKZGyJip4Qp4t6WiXGIWU4TxH2FAjMtbi1KGeJyFNO2KrkgbsXcbEbgPoZFbPh9J838rL1gDfq3VsJIZMJTMvIMK26sORVFvF51N",
      event: "payment",
      priority: 8399,
      ends_at: "2025-01-01T23:58:29.000000Z",
      starts_at: "2021-08-05T10:55:15.000000Z",
      name: "8RI7n9XLkQqGxRAu4ClCzUyuIEYrXjU1Rl6vF7n9cWf5sF0ARyOKP3HCUhOEdj0FvKzWLO0X17seRboXyaTp5fxFISfuSj9R4g3InaFkgEE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 45', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["9bf790e4-4a2f-4272-8d77-583e2dc357e4", "96169027-0dc8-47f5-abf0-56c360fff969", "0b422663-4cfc-48c8-8221-126a602c70b6", "55a61534-5466-42a9-9fb1-1303bb3a23bf", "e33ef0c4-e654-4bb6-8436-5da4836a294d", "9c468bab-ca69-45e5-9b02-43fef1e39389"],
      minimum_number_for_combination_purchase: 5743,
      minimum_number_of_amount: 5250,
      minimum_number_of_products: 4230,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 4, 2, 6, 1, 4, 0, 6, 1, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 143,
      point_expires_at: "2022-03-21T11:08:53.000000Z",
      status: "disabled",
      description: "F3MGwgLve3TZFNm4S8a9Imcm3HEYVUSqsC3AriSwCEB0Kew5ULKwo1UdPl33Js1Kuu0UegnQjK5K12MWvCvA9DjpAvmSouPF8sEd3lBtNl0JB2dKxVrlXLEonC1KsoREeh2RXqHgFOF3b7VdwEdOPGXSe9OOoep5LkQDV7qJw1By6uFHkBH",
      event: "topup",
      priority: 8874,
      ends_at: "2024-03-30T01:37:00.000000Z",
      starts_at: "2024-06-23T20:42:06.000000Z",
      name: "urHoZlcvR7Q0TdgtR89zH4BRb4LxjYp1VFXi65IWH287FkS1AdoZmrqVFQp8fp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 46', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["dd278c49-8570-45c4-87ce-3754261d9eb3", "744d5932-200c-4658-98bf-9a6a7641a6d3", "c341299f-8765-4b41-b3e6-85f391fc51ef", "a90bbe77-746d-471e-be72-3094d8f8180d", "f6ab0f0a-b7ee-4b79-b4ae-ecc6874d1eee", "95d15dc4-274e-4cd0-8572-09ca035d6705", "47ee3b87-e7c3-4592-b054-c7bc5a30cd89", "c5e28a7e-899b-44b6-bcea-fab8bb556154", "cecd0d28-451c-4fd3-82ce-bda6d666cfb1", "b84a4ec7-4889-48d2-8978-6fe62a9e89ca"],
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 7206,
      minimum_number_of_amount: 6614,
      minimum_number_of_products: 3229,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 3969,
      point_expires_at: "2024-07-15T18:34:58.000000Z",
      status: "disabled",
      description: "jTfUU5d5AtOipE6L0lEeYXxSLgJV1GwAOqdc8zzTPJEfMbaKIEhnBHfV6tGM4VGRurvyE3ASr9IOsPHz4Zd6uXHhCBvnC8wCQDn5TxePGCKc6zq0vbsfAwCBSEwRfx0DBbi",
      event: "topup",
      priority: 8410,
      ends_at: "2021-06-13T01:48:41.000000Z",
      starts_at: "2021-06-18T22:24:18.000000Z",
      name: "Oey7zjJ6OyJP83x3uLLTOPjH6jjFnlRSGQkOLow4uOPR7jYUkie5Rbdop3nbAQNRasJaqAeaFh0mPOgCiw12joVskUHIrzFx85stT5X2fdTs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 47', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["340b6509-0065-48e2-a025-9b7bd3ec4dff", "31d85352-8ef5-46e0-8c81-e3ddae12bb98"],
      max_point_amount: 5463,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 8059,
      minimum_number_of_amount: 4049,
      minimum_number_of_products: 7638,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 1, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 8390,
      point_expires_at: "2021-07-10T17:54:03.000000Z",
      status: "disabled",
      description: "hnrWkQVh8G8vXFKeuF0FhTncNlMmgEuaHAHntz60OEH7JgjiAw3cGaLL5KHpinnRK5y0OzJ9Hvf2cVYRMoN8ciCbZWnzcDnK4LA4gWzsFxrEWGQmIqwq80GWYOCdqp3aMw45RftnlC78XMJnZ0CKAQudtFEN83UK6KJ482qLWZU1lT",
      event: "external-transaction",
      priority: 4221,
      ends_at: "2025-08-22T06:07:04.000000Z",
      starts_at: "2020-05-13T11:47:14.000000Z",
      name: "EtylA7LcgVEYNBH5KGkiTeGrXAkdlmbDvPcxbP00J7QmpOVA7MePtYYSm3L3WBUYIGLXhu0DvMLxvuDjJfJxeesKkwbEHxkNigyccRVuXaxHAAzt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 48', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["4514726c-1388-4d10-8da9-1113e41f7272", "aa936362-db07-4aa7-9894-7aa86ff57935", "dfc44fb0-94b7-4a61-abba-45a56324f2e9", "eb8a7074-44f8-4364-9463-76d9e12a5616", "a8e7c3ea-55ea-4b43-8f40-894afd393a95", "ec92c1d6-91a2-477c-94e1-413e829dacac", "207985f4-b458-46d7-b33d-cff369d3e088"],
      max_total_point_amount: 2014,
      max_point_amount: 6580,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 2403,
      minimum_number_of_amount: 2826,
      minimum_number_of_products: 1899,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 0, 4, 3, 2, 3, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 2759,
      point_expires_at: "2022-12-11T05:15:24.000000Z",
      status: "disabled",
      description: "sltjjmodDQEUxDaghv7DnSC5Rfu0C0uKFwmpPkPjblE3KxRrUTFSpI6jwJUUxrUc5YmXel2A200gV6FxYfWwCiS0MuCLswxDV9dr",
      event: "external-transaction",
      priority: 2835,
      ends_at: "2023-02-06T16:39:04.000000Z",
      starts_at: "2023-04-03T17:33:28.000000Z",
      name: "LSvZ2KQORxMHroQo6jM66W2y8KrZ8xMlNalvWasLjNh8s14cZJ7e4Q9GCUyL2v9u3mWzZwKqxzujrUlmkKRdRXeieY6AmMB38"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 49', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["59c1c443-f9a9-44a9-99af-e3ab78335271", "a44bde01-8347-4f5a-a3d1-b9d7ff1b624e", "7b1d8ba2-bce5-438d-a435-a94217f668cc", "a7f9e724-20b6-40ff-adde-4d0d9569213a", "685ed8b6-6b5c-4535-9730-95eefa82245c", "fc6a9530-2852-47ed-803e-03a1e12079bc", "902b59e8-3e2f-48ff-901d-124e4757678e", "d17fbbfe-519b-41a7-a6ac-1f7bf5736f8e"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 4274,
      max_point_amount: 4306,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 6661,
      minimum_number_of_amount: 2887,
      minimum_number_of_products: 9570,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 1, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 7319,
      point_expires_at: "2025-07-07T09:08:08.000000Z",
      status: "disabled",
      description: "eeSgcGsS3PA5BMU547lNJdN573CatnkU3QijXWL36Ne9BIyD0VsxUMLq2pynj2i9JShHMs7dpH",
      event: "external-transaction",
      priority: 9448,
      ends_at: "2024-05-20T19:54:45.000000Z",
      starts_at: "2025-09-25T16:30:33.000000Z",
      name: "mzmDvsu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 50', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["ac1ca397-4064-4c5c-917e-2a2816516246", "c3304020-5846-4583-b162-4f90c82ca202", "0b72947c-aa8a-4a5b-bb2e-70b9126d52c6", "44e610a7-12c6-4556-9394-395d95c53c29", "906f7ffe-def8-4bce-8ac0-bb40eb3872d2", "fc5a16a7-cf81-4968-ad28-32596a80e65e", "aa0d2bb3-d194-4343-a57c-e995b4581c28", "81a66ec7-d227-4507-b3b8-073375ac1e46", "5490eb2f-f179-4666-a684-47a46b6b5921"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 7985,
      max_point_amount: 7263,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 600,
      minimum_number_of_amount: 9974,
      minimum_number_of_products: 8581,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 1, 2, 4, 4, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7192,
      point_expires_at: "2021-11-07T05:10:24.000000Z",
      status: "enabled",
      description: "YOyXeD7lp3hQ7iTUdtYXMwyZtYN7NcCeDXI01ioT6dE59eFWe4",
      event: "topup",
      priority: 5139,
      ends_at: "2022-05-26T14:47:41.000000Z",
      starts_at: "2021-08-23T04:47:36.000000Z",
      name: "M6PRObQxj3f4w8El4HGgfInUuZUZacdXJKlldoDuv9TA2XHRXocL0a2ENjq4YdkJGWgFmKTEIA1MAf2HgecIl74FyRST7ScfdaiXI0aphnQpmaEH46JpxMwBWB66twUXazpjqxEREjqmyqJkEdfkYviMgBpZAYBbcvRZzaI37qk5Qpl5Gz36NQavWZXSE0IrKdpz0FXnt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 51', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "93fcaf0e-d5d9-407e-b5d3-62e51d486cf2",
      blacklisted_shop_ids: ["aa13fcf7-3319-4fcc-bc00-35f75f64d073", "1a794928-7850-46b6-bc50-bea1616b4c28"],
      budget_caps_amount: 2136805741,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 8720,
      max_point_amount: 3404,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 9703,
      minimum_number_of_amount: 2132,
      minimum_number_of_products: 5551,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 5, 2, 2, 2, 3, 6, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 4169,
      point_expires_at: "2023-02-13T11:20:27.000000Z",
      status: "disabled",
      description: "oeAT0NWEwBSET0oVnBy6crZKnvytNg93oYMrwaGFqX3wegLSKGRpqSEuwLWT9k07B088FFfNZznrcL9APcDhFVXImIJBKStcO3wB304Jmf05hgJ0rNiPO7Acqsb1X8oQj9wf9SU4WjLK1VT02GEDFloz09QK5UFuC5JXRVayFf6oyQZu5",
      event: "payment",
      priority: 4727,
      ends_at: "2022-06-30T14:42:31.000000Z",
      starts_at: "2020-12-18T12:48:22.000000Z",
      name: "KTTxm1brwQKhHT3R75Hu8YJJm39h1WaxTt5SssiAjKWyz1Cvo6cvEGDQNsufaSx2VVAwQqeQUNQCi45yyQTl9wTWmjZWPblWstjkwC6ll5fjzCHapR04ADVEFmUehgiDu605XKZkJCbVsNuqqVdUDyaVdHFVHz0uIFKJoDWeoZQYdDyUkA8HMjkxTYcusA1RKieQ1ldipC3qoQ4XwLIDsqZ3ZF38hv2ikQGfIfeAIGZfO7OrSr8B2QPQ9Y2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RequestUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new RequestUserStats({
      from: "2020-09-08T19:28:18.000000Z",
      to: "2021-02-01T07:15:30.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check TerminateUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new TerminateUserStats({
      operation_id: "9e996d8d-a15b-4270-b3a5-c26a074f4830"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      per_page: 4838
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      page: 1316,
      per_page: 9778
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new CreateWebhook({
      task: "bulk_shops",
      url: "WBx1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new DeleteWebhook({
      webhook_id: "9d5a228d-a804-4302-9403-50afcfa8d933"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "5ac0ed31-2294-48bf-9e63-6a7ddcb86809"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 1', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "5ac0ed31-2294-48bf-9e63-6a7ddcb86809",
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 2', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "5ac0ed31-2294-48bf-9e63-6a7ddcb86809",
      is_active: false,
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 3', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "5ac0ed31-2294-48bf-9e63-6a7ddcb86809",
      url: "t",
      is_active: true,
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "eca1f362-57ab-4295-bcd0-b84375ca8699"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 1', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "eca1f362-57ab-4295-bcd0-b84375ca8699",
      metadata: "{\"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new GetUserDevice({
      user_device_id: "1ead4f40-9f41-4dd4-8e62-f7660e956691"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ActivateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new ActivateUserDevice({
      user_device_id: "ad99a445-2754-49df-a75f-759d219ba4dd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankDeleted> = await client.send(new DeleteBank({
      user_device_id: "8afed34d-4a9d-473c-9b83-3805b3a22524",
      bank_id: "c970698c-2885-4338-8b2f-a3961de526ef"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 0', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "aff84fa3-5610-4c5d-9c3e-0d6f93f40543"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 1', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "aff84fa3-5610-4c5d-9c3e-0d6f93f40543",
      private_money_id: "e768535b-5005-45f4-a553-3a1ea727e938"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "df43edfb-403e-487a-9122-b960789a4c24",
      private_money_id: "aeb888bd-ec94-4d20-9eb1-c9662f8ed995",
      callback_url: "4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6BbdWS6JCIuNd5OFNrZXER72Q",
      kana: "Nr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 1', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "df43edfb-403e-487a-9122-b960789a4c24",
      private_money_id: "aeb888bd-ec94-4d20-9eb1-c9662f8ed995",
      callback_url: "4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6BbdWS6JCIuNd5OFNrZXER72Q",
      kana: "Nr",
      birthdate: "pzY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 2', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "df43edfb-403e-487a-9122-b960789a4c24",
      private_money_id: "aeb888bd-ec94-4d20-9eb1-c9662f8ed995",
      callback_url: "4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6BbdWS6JCIuNd5OFNrZXER72Q",
      kana: "Nr",
      email: "fcTDxwidoK@xhgH.com",
      birthdate: "IlA44"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "7d8a3c84-5db0-49a6-8403-b936da907638",
      private_money_id: "746267c0-b9e9-4de5-b62b-c31950e78f6c",
      amount: 5622,
      bank_id: "f1753180-4c03-48c0-adac-cdf4e9ea0d86",
      request_id: "fb14762d-898a-4d5d-8d21-c65c7ff66cc2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "7d8a3c84-5db0-49a6-8403-b936da907638",
      private_money_id: "746267c0-b9e9-4de5-b62b-c31950e78f6c",
      amount: 5622,
      bank_id: "f1753180-4c03-48c0-adac-cdf4e9ea0d86",
      request_id: "fb14762d-898a-4d5d-8d21-c65c7ff66cc2",
      receiver_user_id: "04fd7392-f097-4997-9317-b2822e337102"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      per_page: 5485
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      page: 2145,
      per_page: 4061
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      available_to: "2024-01-11T13:13:31.000000Z",
      page: 6061,
      per_page: 5678
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      available_from: "2024-11-10T14:43:52.000000Z",
      available_to: "2025-06-19T01:49:43.000000Z",
      page: 3798,
      per_page: 7026
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      available_shop_name: "zLy9",
      available_from: "2023-10-31T04:30:48.000000Z",
      available_to: "2023-08-22T22:03:54.000000Z",
      page: 3065,
      per_page: 5692
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      issued_shop_name: "4h",
      available_shop_name: "bOAXXYVgV",
      available_from: "2021-11-08T21:38:50.000000Z",
      available_to: "2021-07-28T11:30:37.000000Z",
      page: 1818,
      per_page: 2043
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      coupon_name: "hmxuYV6",
      issued_shop_name: "qe5o2",
      available_shop_name: "2Ol",
      available_from: "2024-06-06T10:27:30.000000Z",
      available_to: "2021-01-11T11:41:00.000000Z",
      page: 1710,
      per_page: 1574
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
      coupon_id: "dk5kJbuw4",
      coupon_name: "uJbyUdwtwe",
      issued_shop_name: "akD",
      available_shop_name: "g0TFsZujDl",
      available_from: "2024-10-27T07:48:57.000000Z",
      available_to: "2022-09-10T05:04:20.000000Z",
      page: 8642,
      per_page: 5517
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 1652
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 5260,
      storage_id: "7033b9a0-1891-4bb9-bbcd-c0ae3d8f5dba"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 5087,
      min_amount: 5576,
      storage_id: "60e30a97-574b-4b17-811b-a94b37f49ab4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 8386,
      usage_limit: 1711,
      min_amount: 2743,
      storage_id: "4be306f3-704a-4234-b2b4-37e0787a3040"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 8262,
      code: "7dkeP",
      usage_limit: 4539,
      min_amount: 4628,
      storage_id: "ad06a318-3398-4311-a207-cef05010cbf2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 2331,
      is_public: true,
      code: "qXJLC9",
      usage_limit: 3524,
      min_amount: 9964,
      storage_id: "4bdfda0e-9e27-4d1e-8708-6fa123467822"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 9578,
      is_hidden: true,
      is_public: false,
      code: "Yc",
      usage_limit: 1115,
      min_amount: 437,
      storage_id: "898a7733-e75b-425c-ab02-a901188a9c05"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 7028,
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "D",
      usage_limit: 1150,
      min_amount: 482,
      storage_id: "5cf27213-7406-450f-be70-b906bc11e64e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 1132,
      display_ends_at: "2023-09-22T17:22:23.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "IqFEpEzlkb",
      usage_limit: 6104,
      min_amount: 2850,
      storage_id: "ac034b73-d584-445e-a83e-30dcd0cf40c8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 4965,
      display_starts_at: "2025-01-14T01:00:59.000000Z",
      display_ends_at: "2020-12-06T13:27:21.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "R7zZjof",
      usage_limit: 7512,
      min_amount: 9518,
      storage_id: "e89fee8a-1bff-4d25-8770-bd3821dd4d71"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 7169,
      discount_upper_limit: 4290,
      display_starts_at: "2022-06-08T04:18:09.000000Z",
      display_ends_at: "2025-08-11T13:10:07.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "6Vch",
      usage_limit: 257,
      min_amount: 8481,
      storage_id: "b66aa2aa-2748-4918-bc77-584f51b8f33d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 1965,
      description: "SBaSPaNKxM4bPYPan8UYIRAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfTVlWMFnuMgJI5wZ1cKhV863o3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87GnzBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUtXBf9of2MaByNhkorzLzXS7sax7iYOPlAj5UlMDxo6iDarlMDzJC7wMAkFYNemkzZpvDvog0lglLv2T90aOF7qLZJG",
      discount_upper_limit: 6999,
      display_starts_at: "2023-02-17T12:59:14.000000Z",
      display_ends_at: "2025-02-15T13:48:00.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "8mYG8iBp",
      usage_limit: 9003,
      min_amount: 519,
      storage_id: "a4c4c6af-5741-450a-b98e-4ef786cfcea6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 439,
      is_shop_specified: true,
      available_shop_ids: ["f444e5e5-6306-47f2-bf81-e3cbfaad056d", "56bb459c-03a6-434d-bd44-f428b55af8ca", "0f495d1f-d189-452f-844e-78b9a4672a3e", "a35fa222-862f-4204-beeb-f63d59435b6a", "fe28456e-a185-4f2a-9f04-23aa54f0369a", "5f4b473f-83c5-4d2b-8174-762f396b5957", "de7779eb-6d2c-440c-8ddb-7231b753c330"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 7545,
      is_shop_specified: true,
      available_shop_ids: ["09583827-43da-4293-8cc3-5cb38dcddded", "799adb74-119c-47bd-81ae-4b1608c888b5", "afc00aa5-424e-4ee2-83a2-2c663736bcae", "b9d4f3a3-d25d-4cea-8474-228afa3b30ae", "e9785497-c4f8-4346-9ffc-b4d8df5a02e8"],
      storage_id: "d3ae5c4a-c8db-4ca3-99a3-7f48f488f4f9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 4512,
      is_shop_specified: true,
      available_shop_ids: ["ecf16d17-21bc-4b65-b3bc-8f60c83f0284", "963b4390-0f60-47ad-ad38-7df9d5775e76", "54836e4d-95b1-4ed3-a37b-bcc5be4dcd63", "201adefa-5fcc-4366-8f1a-1eb32cdaf362", "4bc015a4-532c-4b8e-a725-b20fc3f371e3", "d6c31202-144d-44d3-a075-5acb4c302ebd", "1128e664-2df1-4b33-86f3-f609ade1300e", "61052515-5082-4f28-9eec-177d6ab7c647", "d8952262-d18a-47eb-8807-51264406a515"],
      min_amount: 958,
      storage_id: "a30796a3-3168-4178-a220-26e2f3f2071b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 3122,
      is_shop_specified: false,
      available_shop_ids: ["6963beab-ea6d-424f-9a98-51836523fc9f", "b1af9f29-3f86-4f52-966a-d91cd1d7e3b1", "83a71a5e-5d79-4599-84bc-5b66ffa7de07", "4eaf406b-26d0-4aaf-bdbe-027b6c03d2f1", "7f9bf865-0b75-4a92-8a8a-483759329423", "ee4b1e2a-173c-4e92-8ed6-70146075451f", "07492c97-4d98-4d1e-a647-11faf4f38207"],
      usage_limit: 9241,
      min_amount: 3048,
      storage_id: "38f7bc84-d71d-4243-b87a-3cc486803686"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 2400,
      is_shop_specified: false,
      available_shop_ids: ["5c41ada0-92c5-4250-a64a-f03e560c287f", "c545fd2a-ee73-405c-811d-79f2f6514e27", "d3d658c3-c13f-4b88-96b0-c89aa523c371", "f44896c5-f076-418a-828a-6f4ae04ca1ff", "30a4a404-bd28-4350-b0fc-920d0607d356", "5183c33b-e600-4cc0-af84-df5e892bc916", "b59a29a3-c33d-4c04-b11c-2097bab9ebb7", "8758db37-0896-4850-bcf5-ecd99f230aef"],
      code: "FV",
      usage_limit: 1565,
      min_amount: 2276,
      storage_id: "303b3d9a-1f29-42c4-8588-fefd89a07d38"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 8803,
      is_shop_specified: false,
      available_shop_ids: ["d4aca829-ba66-4b93-a93e-6309946576b3", "8eed0ee9-9296-46aa-b58b-6b7f163185de", "19a89ff1-1dc6-422a-87c2-d24327bf382a", "a1452348-b65d-4dd9-9870-3fcc9eb37fbe", "e89ea638-a6cf-42c4-8276-942bbf2dbff7"],
      is_public: true,
      code: "aMAc0JPV",
      usage_limit: 8322,
      min_amount: 1978,
      storage_id: "2c0b1ea2-e02e-4c76-9018-585fa28aaee8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 876,
      is_shop_specified: false,
      available_shop_ids: ["bd693b97-7331-4cfd-9474-43eb50501383"],
      is_hidden: false,
      is_public: true,
      code: "QHQhhRs2PI",
      usage_limit: 7694,
      min_amount: 9569,
      storage_id: "1e2bbcfb-aea7-4816-aba8-c93d2ff7017f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 1378,
      is_shop_specified: true,
      available_shop_ids: ["892f69d1-7f31-4cdf-9707-31f9b7c70778", "781ff27e-20f8-4a0a-b6ac-576960942c50", "75e58658-0cb8-4524-9591-c477d08e584e", "91795556-e11f-4670-8320-ab4ea3c74555", "c4c4b379-a369-4645-85a6-04fa9433459d", "b3bdfe41-fe70-4ccb-9f4d-5a7c875ea41c", "53361dbb-3ab6-4836-9abd-1dde493f4840", "46aa28a1-eaeb-4ec5-8f86-fe4f72f5880c", "101fe03c-1874-486f-91a0-c501aab66db1"],
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "c",
      usage_limit: 889,
      min_amount: 1191,
      storage_id: "dc11ebad-29a0-4280-9cc4-7c5c46a8182c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 4877,
      is_shop_specified: false,
      available_shop_ids: ["18de54cf-2627-45dd-89d7-d29e78bd9f7c", "f8f20a5e-0180-4256-b726-b02abe027def"],
      display_ends_at: "2025-04-30T11:06:46.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "YbDKlivy",
      usage_limit: 2499,
      min_amount: 9591,
      storage_id: "d80e34bf-1640-46d3-8ea4-7317c4e175f3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 9604,
      is_shop_specified: false,
      available_shop_ids: ["010ac9f1-65d8-4943-9b9a-8c951ab36b43", "eaf71d65-afd4-44e2-b702-fcf0d9e1019a", "6d505039-956a-417a-8925-b3e0bc9a8041", "92ac7a6d-de6b-49d6-99e5-2419ae00197e", "2c6a791f-9501-4779-bc60-6e1611f579a3"],
      display_starts_at: "2020-08-28T10:01:06.000000Z",
      display_ends_at: "2020-05-28T10:34:08.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "1",
      usage_limit: 2588,
      min_amount: 4057,
      storage_id: "61a7a3f2-15fa-47f5-90f2-f16bdc11b00f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 2346,
      is_shop_specified: false,
      available_shop_ids: ["9b2ce793-bc9c-4387-bbc9-0f8ff14162bb", "5f3f9bc1-c7f7-4063-8a36-b35eacb61ab3"],
      discount_upper_limit: 5001,
      display_starts_at: "2024-03-28T16:27:24.000000Z",
      display_ends_at: "2021-01-03T22:30:03.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "rF",
      usage_limit: 5901,
      min_amount: 9491,
      storage_id: "7394ee64-0f6a-4a07-841e-6303ead7e18b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_amount: 4312,
      is_shop_specified: true,
      available_shop_ids: ["bc19f443-26c5-44d4-a06c-9d1856d67637", "c50b9b36-66ad-4d83-a727-88b451592775", "385ea431-ee00-4d93-a245-897b0a43ec55", "5469767c-d80a-4a75-9b8f-ce2ecfa24cda", "7c4a2ea7-69f3-4721-a53c-59daced7402a", "8dd15ed8-eda4-4345-9b90-27e9ab588807", "8cece700-bbe7-47f3-9822-a0c8ff36fe16"],
      description: "q2ofRToY5BXgCjIyZIJEzXmOEMtSXxzZokGYkRiArikWZSvWA49o8HQUEwypAtZsgSDOAS6m",
      discount_upper_limit: 6042,
      display_starts_at: "2023-08-12T22:59:42.000000Z",
      display_ends_at: "2020-10-11T18:25:58.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "4",
      usage_limit: 3336,
      min_amount: 5789,
      storage_id: "e0a172e3-3f23-4945-8bbe-5981d0ab5c65"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 4040.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 5234.0,
      storage_id: "b318c1ae-11bb-4926-b436-eb3370e78305"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 8727.0,
      min_amount: 2203,
      storage_id: "00a728ec-e896-46d2-9cd8-e4dee993b89b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 6612.0,
      usage_limit: 7666,
      min_amount: 2847,
      storage_id: "68524588-a469-403f-8dd0-2902327b4cab"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 8048.0,
      code: "0j1CI",
      usage_limit: 9139,
      min_amount: 8812,
      storage_id: "f8686f3d-bdb6-4d9d-94ca-f214ca063810"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 6129.0,
      is_public: true,
      code: "jXV2f",
      usage_limit: 8505,
      min_amount: 4187,
      storage_id: "4f3f253b-57b9-4024-ad7e-39d09cb349cf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 9638.0,
      is_hidden: false,
      is_public: true,
      code: "1e",
      usage_limit: 5609,
      min_amount: 6570,
      storage_id: "d0b5abd7-7139-4840-98d2-e5ad3731253a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 629.0,
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "XLsbYmrfH",
      usage_limit: 1408,
      min_amount: 933,
      storage_id: "beeaeb57-00b6-4fa3-9fc1-c51021177765"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 4635.0,
      display_ends_at: "2023-12-10T00:55:04.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "u9jSykyDM",
      usage_limit: 6165,
      min_amount: 5141,
      storage_id: "8e269f26-f402-4778-aadb-b7d1604dc668"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 9389.0,
      display_starts_at: "2024-04-12T00:32:28.000000Z",
      display_ends_at: "2025-08-03T16:34:08.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "qsNkUwp",
      usage_limit: 2564,
      min_amount: 8157,
      storage_id: "8a19749b-c16e-4fde-b84f-924ae4809762"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 1150.0,
      discount_upper_limit: 782,
      display_starts_at: "2022-11-06T13:22:02.000000Z",
      display_ends_at: "2021-02-16T08:52:36.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "5NaDqvIkEg",
      usage_limit: 6914,
      min_amount: 3797,
      storage_id: "298f0d91-6abf-4131-a947-894aa1e2916f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 420.0,
      description: "eu1nD62pEennAfXO8IbuWWi93UYOzWoEzm8A2AGl9yivXZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iLkGceRH09p3Djf3U",
      discount_upper_limit: 5565,
      display_starts_at: "2023-10-28T02:22:16.000000Z",
      display_ends_at: "2020-03-05T19:18:32.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "TuFX",
      usage_limit: 6751,
      min_amount: 9718,
      storage_id: "e8d9374a-c281-46d4-b2eb-1699428f08b8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 16.0,
      is_shop_specified: true,
      available_shop_ids: ["3b0ac878-46b5-4918-a3ab-95d6aebe6e4d", "6941497d-cf5f-4d5e-a3b8-b3f565f89da3", "90edb614-dfa8-4361-9c9f-246b71a3a69d", "fe255ee3-b545-4049-a579-b2f8b3915f51"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 7034.0,
      is_shop_specified: true,
      available_shop_ids: ["0be67d44-9891-457f-8b3b-bb85f652f834", "9565a101-3709-4336-a996-a29f337517bf", "5de5047d-c112-4bd3-a5c7-2094209fa416", "8e989502-5f90-4f8a-9f83-a0668a78dc45", "93581364-bd70-420b-8491-dfac6fd4cf30", "008e847d-13d5-45d2-9cd6-e70b636d3e6b", "6ab27a46-c996-4b4c-946d-9183c885476c", "7f58953e-4ef8-4d70-b827-3cdb4e15e5d3"],
      storage_id: "e2f48f3d-93c9-4ab9-9563-f6581cb1ba0c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 7653.0,
      is_shop_specified: false,
      available_shop_ids: ["abca8ce3-67f2-4bed-931d-8312a5499d7d"],
      min_amount: 6946,
      storage_id: "fc3ec10d-8e5e-41ee-a3eb-ecf007648237"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 7441.0,
      is_shop_specified: false,
      available_shop_ids: ["749f1228-3ec7-42bf-acf9-7e48080914b3", "406886f4-7c15-4fbb-a50d-af090c29e932", "847a7848-d91d-4b80-acc2-e634db4cfda1", "85e4e6f7-0d2e-4fc8-86e2-72bd43016c43", "9c606947-5978-4011-b09e-a19d7f03d52e", "791ed6d8-b37a-4540-b1f8-733279a2e0f7", "27da9e13-adde-4d28-ad87-c874931531e1", "cf098bc0-3fcb-4197-b0f5-4631e0d7f63f", "50c856f1-b4e4-4308-ad8d-c5694ad22acb"],
      usage_limit: 731,
      min_amount: 3054,
      storage_id: "859c197e-e41e-4507-9db2-eb322146c00b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 8262.0,
      is_shop_specified: false,
      available_shop_ids: ["790476e3-570a-4d28-ad13-87f4790072a9", "a51aa449-c273-480d-a7f8-2badaf9be3bb", "61a99690-ce54-46d4-969e-f05d9a80e28b", "93f14e32-f4b4-4557-a32b-fab348d063e9"],
      code: "jgCa",
      usage_limit: 3124,
      min_amount: 2118,
      storage_id: "f84d4705-52dd-44b7-8d97-800f0e122529"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 3592.0,
      is_shop_specified: false,
      available_shop_ids: ["2a30dfe2-19a2-45fd-ac32-a2b4e7771215", "8fb89428-26d4-403f-b692-ad56f1ee34a5", "63c1b8d9-f679-4008-ba9d-0290d26cabc7", "7a74dc7e-3309-402d-a36f-f88fc9dc7d4e", "1226b183-21d9-4c4c-89af-8221b2be0958", "aa6a4786-91f8-4524-8df1-4cef3d731f60", "d9ebceee-c26b-4b1d-8dbe-4047c5bf1d7d", "2fc608f1-8e58-4aec-8a98-5f70aa0ec17b"],
      is_public: true,
      code: "Qwp",
      usage_limit: 2617,
      min_amount: 4372,
      storage_id: "074bd6b9-0ba5-4b9f-a376-1830f8e26c18"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 4996.0,
      is_shop_specified: true,
      available_shop_ids: ["f4edbef5-8379-4eba-a7ed-b5c841041ea2", "2e158c90-3f4b-4df1-870f-3bee09d769ee", "66576a4f-5aa1-4aa7-81e5-89cd6dde4ef4"],
      is_hidden: false,
      is_public: true,
      code: "o3ZtB",
      usage_limit: 4429,
      min_amount: 5828,
      storage_id: "545f6b80-fa17-4944-a09b-673b175ddbb0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 7313.0,
      is_shop_specified: true,
      available_shop_ids: ["6be4a0ab-5929-4093-ac16-585b3e3e6e64", "3bc820d7-b47e-4d05-8645-e52327f9df25", "d58e3e94-bfb8-4c17-b55a-6a6abd902427", "4abb60e2-5755-49aa-bde1-d2ae26ab5320", "f2011f1e-1a54-49e0-85ac-b2ba6984e53a", "cbe6028b-884e-4f03-8e68-b9eda39236f8", "f108f2b5-d160-4a43-a80b-904c0b52b693", "2cc1dc71-2dc2-4e93-a7f6-db6656a313d7", "2d10076e-597b-4cdc-b285-aa673e6cbb36", "c6495edf-0d77-4bff-840b-51941a0285a8"],
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "880",
      usage_limit: 1602,
      min_amount: 9533,
      storage_id: "6d0eb481-9344-4ac5-aa88-0a402854fade"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 2292.0,
      is_shop_specified: false,
      available_shop_ids: ["35447b1e-6e4f-4377-b522-a5d8d2ab9e34", "6fee5791-c844-48ed-ab58-811e467b0298", "5e4fa790-8073-4efb-84bd-6763a95020aa", "715d910c-dcbb-4550-8855-9aef3b35de65", "1189d112-5ed6-4e27-9b02-c6acd2099a31", "15ff8dd8-481d-4502-be5f-23c86e482eb7", "f9288591-2038-4de8-afdf-798a6de9eab5"],
      display_ends_at: "2021-11-10T17:20:07.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "wm",
      usage_limit: 5860,
      min_amount: 4606,
      storage_id: "54038678-f3af-4939-88a5-9330ab25d64f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 6352.0,
      is_shop_specified: false,
      available_shop_ids: ["f222d4db-080b-4dd8-b30e-0ea6862c8a03", "a6c690f9-c4ba-469f-9020-62b9fe243670", "fef113b5-550f-47de-b9b2-c9416469e195"],
      display_starts_at: "2023-02-28T16:49:59.000000Z",
      display_ends_at: "2024-02-25T16:17:18.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "zXIFX",
      usage_limit: 8794,
      min_amount: 5390,
      storage_id: "6fefa024-e1e2-47ea-b369-4a6963ace58f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 974.0,
      is_shop_specified: false,
      available_shop_ids: ["a9a50a8f-d598-4907-985a-c222afc2f930", "9744146c-0846-4427-9467-0487b52481bc", "9a0c30dc-ad93-4fb0-a78b-85a81baaa6db", "1f4268e2-54f5-44d1-96ab-02f7063ff491", "fe45f2c0-38cb-4365-a1a0-de9b87ac38d1", "c23a2934-2648-4957-a650-b206586cf015", "99de4af5-11c4-4bee-9f38-1edd6842b9f6", "215bbf74-574c-45ac-893b-ba9c1b2f362b", "31cf17c7-fed4-4310-96aa-bacb07df4783", "5da604df-2c79-4239-ba8a-8ae2e13a3fe1"],
      discount_upper_limit: 5518,
      display_starts_at: "2024-11-20T23:37:34.000000Z",
      display_ends_at: "2022-07-08T23:35:29.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "rNxQgJ",
      usage_limit: 419,
      min_amount: 1970,
      storage_id: "0e3f20fd-d064-4eb1-92ab-5aea1c5941d2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "95211c5b-07c2-4920-816c-7394f1f9625b",
      name: "f",
      starts_at: "2020-04-14T11:16:32.000000Z",
      ends_at: "2020-09-04T21:17:15.000000Z",
      issued_shop_id: "1330505e-bc9a-4de8-b068-7a07c009ebc6",
      discount_percentage: 5956.0,
      is_shop_specified: true,
      available_shop_ids: ["d6c4aaf8-d3f8-4603-960d-44ecd205b5be", "32976b51-7846-44e8-8d4d-f4326bd6881c", "06caff24-392c-4965-846f-43705c41e260", "9d8957ed-0c49-4cec-9f6d-bb8cb01a91f6", "4b765fad-fc8f-47f1-ba2d-15f1df0e657e", "9acc1b5b-aa97-4ca5-bf0f-6414b4997f10", "30664fee-ecc7-4f4f-9459-1ee2e127aa14"],
      description: "g6rdqjemTbEPE7it6nxw8VlzyCNbz8zcALV0qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmGiUoPteza9Foxx3GETJuunMNM7JUVu7YgDI0zSm63cU49za1QJALcpDZJ7Y",
      discount_upper_limit: 1227,
      display_starts_at: "2021-02-14T03:30:06.000000Z",
      display_ends_at: "2024-05-01T05:30:09.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: false,
      code: "ZqFQRMY",
      usage_limit: 1570,
      min_amount: 2282,
      storage_id: "adcdd6b7-7165-42c9-96bb-e192156d31b0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new GetCoupon({
      coupon_id: "8b2db09a-324f-46e9-a7d4-5e226d78ffe7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 7248
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8890,
      name: "r68fP2A8RCqVjIMZulltZtj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8983,
      description: "MfuDxn3QgsidEuf2NvBHeZX8hYKnrzJWptMhyWUi64YZbGeyCSFHt3mcrCB8tq8q2IVY2UPxEK8mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3v7wYe7b9HTOawWBmOJlSRN9rogVZwJO2xNcltqUbvpNyoJI0vqJ8n0oUjQYsKaRMsrJUacY2rYQO4gmGHCfbUV5BkcqYiSNlDYC6",
      name: "MEWefziiHI3E"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9849,
      discount_upper_limit: 4095,
      description: "NpjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3HttlG4eyiatMI7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2",
      name: "LnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzMBL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 3145,
      starts_at: "2024-10-02T04:32:20.000000Z",
      discount_upper_limit: 9077,
      description: "nWJGeGMfsCgwJoSsvq0p2vMuqT6yOdp5xmnGGOh83wD",
      name: "3YT1DlU5jqThl0v0LlAw1sxsypKPTUBVqh1Y1karSx9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 2979,
      ends_at: "2021-10-07T18:16:08.000000Z",
      starts_at: "2023-07-26T08:01:11.000000Z",
      discount_upper_limit: 9299,
      description: "p4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDnAJbsKD6b895iftqbY67Ut2zsAKH6lKT6gJXbaEKAddoUM0CRdaSDeoQ9lXXELG9oQdgpEse81VvpXr3HeuSevupI3Lg6cydG4CQY3zROLCcC3cDzGwCmJXHiF5C2aKJupg0Hph0EUCWBeCDLYnE6HiVXo",
      name: "G09ihrRj4aejWMyEn4Q3X3BDxBJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 4678,
      display_starts_at: "2022-05-09T13:55:20.000000Z",
      ends_at: "2022-06-10T09:45:46.000000Z",
      starts_at: "2023-10-23T17:45:14.000000Z",
      discount_upper_limit: 7814,
      description: "lpvEl0kBLWjk",
      name: "R0Mj5I3Hqz506kx1IdZKDkCNCl989Inr9h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9039,
      display_ends_at: "2023-10-05T17:36:26.000000Z",
      display_starts_at: "2025-01-25T12:32:46.000000Z",
      ends_at: "2021-02-21T21:20:32.000000Z",
      starts_at: "2025-06-19T08:02:08.000000Z",
      discount_upper_limit: 4698,
      description: "68JstsOcxw5PoatcF0TU5W5omYIqjFLKdIYieVX7m2aCCypluKCuWAlkVHsDkHFJ",
      name: "vihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo4vEubGw6jVHah"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8099,
      is_disabled: false,
      display_ends_at: "2020-03-10T15:06:45.000000Z",
      display_starts_at: "2022-08-08T23:08:26.000000Z",
      ends_at: "2025-04-25T10:19:15.000000Z",
      starts_at: "2023-03-05T12:27:58.000000Z",
      discount_upper_limit: 1657,
      description: "qoWcQPdnYsCcbQIY2KFXsspdkpVkTBJa3OTrsXs88kJNoIZazm0lWPTZ7efHVp4Du6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLngmui2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksuJSc3uI6YbNMb4YSuPWKo7xO0kav9UABs7zcSSckrHrP7zrKa6Deu24AbEENpv2",
      name: "R4vcFbZYPGyrsGLqJFlRMGfDCisIe5qHDsMdG7wbTKEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85V"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 7951,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2021-08-25T05:17:15.000000Z",
      display_starts_at: "2024-11-27T19:18:04.000000Z",
      ends_at: "2021-10-01T02:42:58.000000Z",
      starts_at: "2024-06-25T00:40:49.000000Z",
      discount_upper_limit: 6248,
      description: "JKp8EeWwIbRZU73CECtq6YH4jkVjZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5cuoy",
      name: "A3tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9EWUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8914,
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-04-15T08:33:57.000000Z",
      display_starts_at: "2024-11-20T12:30:49.000000Z",
      ends_at: "2023-12-12T01:24:30.000000Z",
      starts_at: "2022-09-13T16:43:57.000000Z",
      discount_upper_limit: 4234,
      description: "pGLgUAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn158N5eaT1YQUtPEMBFK5RCvbOFISTKPBIbnB4IlVfzKQeAZtwqv4AGYkQ5YWzuO0mrMzlLTVYxU13omHKmdh2ng7xlmB0D7qlC",
      name: "lsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8718,
      code: "qGzpCuGxgj",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2024-08-31T01:29:06.000000Z",
      display_starts_at: "2022-09-05T23:52:33.000000Z",
      ends_at: "2023-08-11T08:35:11.000000Z",
      starts_at: "2024-11-05T03:45:03.000000Z",
      discount_upper_limit: 4846,
      description: "Fm6nBFTBcp5MgKi6djde9q9Gx06zspIhW3gmaN6JcrvmX5G7cBGoNqTURH3hLLIVR7YcRrTeQOsLdvK2PUyIdpshyxjFJxJ7Fcj7Ywb40WRFS5iP8DHnWS95dKYCDWjMDqXUFGoRA4XvfiL62Wv2vl8qJafcwBDpLTRN1a0lar5cvmWk6HP3Edv56q9t5VGuIJJqB",
      name: "hC6IgJljp1y8KOJgfu4WFT3sPLKGiMRgfz5jiMdvRW63Z9043h9S"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9267,
      usage_limit: 5310,
      code: "fTD5o4Kn6T",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2022-12-01T13:27:45.000000Z",
      display_starts_at: "2024-12-07T05:23:01.000000Z",
      ends_at: "2020-04-22T23:26:11.000000Z",
      starts_at: "2022-01-04T04:06:32.000000Z",
      discount_upper_limit: 1593,
      description: "tmnNiOZyV9AO3DnB1YRES4xlc6449ibwy8gDnWqdIP3eIh1PycrJFKeRKa6OogwkyZYeik5qw2qVOD7lJwoEqJ4uimGtF4vDevDABoV1497oKjyplKXUyjuZoAdZaiUShsjoKemD9IJVji3EhQ10nakJ4Xx7BosawhL51XW0ltZ8tyBqdUl09HCPEoMCgQwCdLCVxkfS7LC09h1a33P4feIw8r",
      name: "kq1IJcIVXzbXoLITUciADNRcm8cr7h7uvpVmJgh2hspBOtxaFVpQwu69vaYb020lVhpK1ujAV4SIGQk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 4048,
      min_amount: 131,
      usage_limit: 2541,
      code: "a5YJsZS",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2023-07-21T07:30:15.000000Z",
      display_starts_at: "2024-03-14T20:57:01.000000Z",
      ends_at: "2023-12-04T07:25:10.000000Z",
      starts_at: "2025-03-30T19:49:09.000000Z",
      discount_upper_limit: 6984,
      description: "hKFZRjFJsBJwxE5ymHkkfvwj75uGxXyxLiKvyAHQ0Cmh0GR2i",
      name: "pQgbrTS2HEffP70DHCUohTMu269OO6DIw88je3Px2M6UQ20lAXsAZIDxFXqpctZUoXMEwvfZIhfCcdW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9985,
      is_shop_specified: false,
      min_amount: 9298,
      usage_limit: 4612,
      code: "KBpAMRk3",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2025-06-10T02:37:08.000000Z",
      display_starts_at: "2022-09-12T07:05:29.000000Z",
      ends_at: "2023-03-17T01:41:53.000000Z",
      starts_at: "2023-09-16T22:14:00.000000Z",
      discount_upper_limit: 8357,
      description: "Dvn680BNVo61whu52VEWHzeXnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2sW9FitjutUJJsIkCXGENUTkzcX2ykkKJlN107OaiUpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZqZQp71KYV2dqAhSRH0jBaTj6CKr7da3Hc5",
      name: "MrDSrYQmTFD8MK4Lhw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9289,
      available_shop_ids: ["80f0cc6c-a161-41e4-9fcb-23c591b787ee", "94e2f67b-5fff-408e-aa0e-0cd5c94684c3", "589cc60b-90d5-42ab-bec2-ee4da3320c54"],
      is_shop_specified: false,
      min_amount: 827,
      usage_limit: 296,
      code: "jSLXQWZdq",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2023-11-22T17:54:04.000000Z",
      display_starts_at: "2022-03-02T17:26:50.000000Z",
      ends_at: "2024-10-18T21:58:25.000000Z",
      starts_at: "2022-09-19T19:08:56.000000Z",
      discount_upper_limit: 4130,
      description: "OS9NchMxuvMOV5pE0ThIcNVnpd1n04",
      name: "FvafoOT5XflXygJfyBJl1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8735,
      storage_id: "51dcde96-2486-40a7-ae94-ca77aa5bfd8a",
      available_shop_ids: ["97858073-b988-41be-b6ce-0965051a3219", "fad97f93-160a-4788-bdb3-64863977df5e", "4d2ae353-c7b7-4be0-866b-2ae4f04299af", "a82559f0-bac8-4daf-9326-08173d5790ec", "7465480c-b515-4511-8ade-b219c99b57e9"],
      is_shop_specified: false,
      min_amount: 838,
      usage_limit: 6051,
      code: "f9vj51i",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-09-27T00:12:25.000000Z",
      display_starts_at: "2023-09-17T02:04:37.000000Z",
      ends_at: "2020-09-20T10:14:14.000000Z",
      starts_at: "2021-02-01T18:35:10.000000Z",
      discount_upper_limit: 8834,
      description: "kai7fMidPllBkchJ2ELHNBkuEPtWGn6U1tknXv7iBjpuz8kXfTQVtq7nYSMGg6A5q48d0VvhbqvZRxaI0AVDH5phIrM988xOpACBuWehCLI5Ithzpo1sbw0fi8Tfl4MiezYuuDN5NO2HkiJUlQ4dKgR3uo3pyHQKCLEzAV2HW0T6wtgFowhjkpuax7inTCKJlAlkDX0z9k4WtlP60t1pGDCB7WpLio",
      name: "RLUylhwp3jBXylmnz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 646,
      discount_percentage: 9684.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 9945,
      discount_percentage: 2129.0,
      name: "PT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 2769,
      discount_percentage: 4924.0,
      description: "EDpiIl88uXhFr9tzNaCFLhrW7Qg63LOoyDRk2frbKYDtHXRSpeSviFk4W1qsOLMcNwe8KEeqmGGreSt4nt1ybC0Ywm3a7y1jkUDzYlQVb",
      name: "nnRBBQRDsGnvgO2bodBPeKpRFsQIEwGMkEBFs4OKbpkXgOJ3P1nM9riBWugVW8sRaEhx8aJkSJHuUfzU3cxqLS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 1095,
      discount_percentage: 339.0,
      discount_upper_limit: 2271,
      description: "aP0CNMNfb6VowWUVfzovzP7VL5ebcijLtVhmlM6kBu7DCNg4aU7Bl",
      name: "WsNECFWA4hHlvtcjGtIPadSKiVX8t6IuP7AfSh1iSdno"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 4461,
      discount_percentage: 2723.0,
      starts_at: "2020-11-26T20:15:19.000000Z",
      discount_upper_limit: 7587,
      description: "lXA8y2v",
      name: "wAsTNYaeLyV7CWdrmk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 7060,
      discount_percentage: 1975.0,
      ends_at: "2022-06-26T23:06:42.000000Z",
      starts_at: "2025-04-17T02:09:08.000000Z",
      discount_upper_limit: 7201,
      description: "yx2nAdRh4U2Gnj6HilrfsKlPIExrXeCFOu5KxrV4xhz7DzBywKIciMlN0S7L0N0uBHj0xIlmI7crwjgiJmBq8x2BMoiejWmPY8qwKCFWRUhTWJtrSHM5KvGCx3jvLeQXqJ7fOtRApW564YK0LvLN69VHlYJhXH6cUQL7XLfiXA0zUZ8WIiKSeWU9z6lAbD3wpFlmsWusC8RGaBKUJdHLf9kwaxRbmzAo5vzrqC43kvR5VzS4JSx7Qk5qYm8EJV1",
      name: "y6vGk0FuWZ3ptkSyNBcc9paWacdvlF8sKq6M8TMch0t9MLsXgvG8EYKbsPpBkO0z5h9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 3552,
      discount_percentage: 6207.0,
      display_starts_at: "2025-01-25T07:10:06.000000Z",
      ends_at: "2025-03-11T06:00:19.000000Z",
      starts_at: "2022-03-12T22:06:07.000000Z",
      discount_upper_limit: 3388,
      description: "0rjGagOIQ6x9sSfu0zX8zdCniT7rbp4RdF8jzLLX07kGwmRZR89QJDyeQCnprhi7qh3KP4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1SL4LwXctk2uyuazqzFpngLk90ZBFe71DIECbUav",
      name: "pCer6amUqWii2uDVrmTki6pqO0f8cnptMkBRjmpnnbeCg4xumOoxK0oT4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 3718,
      discount_percentage: 411.0,
      display_ends_at: "2020-05-23T00:13:04.000000Z",
      display_starts_at: "2020-11-25T18:49:06.000000Z",
      ends_at: "2022-10-13T01:01:14.000000Z",
      starts_at: "2024-01-22T22:08:02.000000Z",
      discount_upper_limit: 7304,
      description: "CZgSERTDaoK9IqITw9RXh5VLaBXSS3EzsrMpj8GBIyJaRyweuGKy2nXN4UBPwGQ9mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEzrW5FEq",
      name: "VpVqu1DpFd0JaBsPBEjjxsN82R5bV74h6MclFLskpVJhF8OvhWGp3gT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 5026,
      discount_percentage: 8515.0,
      is_disabled: true,
      display_ends_at: "2020-03-29T06:48:50.000000Z",
      display_starts_at: "2025-08-17T01:31:00.000000Z",
      ends_at: "2022-01-03T03:03:19.000000Z",
      starts_at: "2022-01-01T06:37:40.000000Z",
      discount_upper_limit: 8678,
      description: "Z8zWBqSC3vDIMcnooU2vsEkhFzbMP7H4x70jy8CyXSjsNQfhm4JdiSR8LU0sAxVpKo9Pr8tnCR4b3VVcnR7ySaTJSLXaRbjFaOCY9HY0faJMcRsZ3tfn14pqdpY2gO",
      name: "zxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQafvlfkuyBchbjOVFfaAmwoPiUeFs2qGGZk77FXigkP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 888,
      discount_percentage: 817.0,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-12-29T22:28:41.000000Z",
      display_starts_at: "2021-08-16T12:19:15.000000Z",
      ends_at: "2025-09-21T17:55:55.000000Z",
      starts_at: "2022-06-20T23:39:23.000000Z",
      discount_upper_limit: 5175,
      description: "cdhHDyq2BmegmNcooOzsV0UAnFDq2j42XbKSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt",
      name: "JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU1BYQYTGkBMdZ9g"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 4471,
      discount_percentage: 6528.0,
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-01-28T10:08:21.000000Z",
      display_starts_at: "2023-10-18T19:41:56.000000Z",
      ends_at: "2022-07-09T00:36:35.000000Z",
      starts_at: "2022-11-03T00:03:33.000000Z",
      discount_upper_limit: 4036,
      description: "eBSRiyqeameMaY0bgN8gTUkelv3hkGmk4iWQZAVafOlabiOcEnloh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPrWNcD1BCJ2Q7A3yxMyBqUSnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqB",
      name: "BGmKnZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8671,
      discount_percentage: 4903.0,
      code: "6",
      is_public: true,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2024-04-13T06:27:16.000000Z",
      display_starts_at: "2024-03-29T06:39:30.000000Z",
      ends_at: "2020-07-18T22:13:32.000000Z",
      starts_at: "2025-06-28T09:08:31.000000Z",
      discount_upper_limit: 7918,
      description: "3",
      name: "iuFQrrgeXzyNXNrNkeWa9hW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 2675,
      discount_percentage: 1484.0,
      usage_limit: 5487,
      code: "6",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-08-01T12:04:56.000000Z",
      display_starts_at: "2024-03-26T08:53:20.000000Z",
      ends_at: "2021-11-17T01:29:16.000000Z",
      starts_at: "2024-09-05T23:12:18.000000Z",
      discount_upper_limit: 4352,
      description: "dmMatyD",
      name: "W12s5SKsd06fYHa9p"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8804,
      discount_percentage: 7125.0,
      min_amount: 8575,
      usage_limit: 7742,
      code: "D",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2023-02-25T13:47:48.000000Z",
      display_starts_at: "2022-09-28T08:12:08.000000Z",
      ends_at: "2025-03-02T15:09:01.000000Z",
      starts_at: "2021-03-18T17:19:28.000000Z",
      discount_upper_limit: 2642,
      description: "ln1g4q1AmzenaBAIYsPX5BE",
      name: "EkSwN7Jl7UfMqNeIWxDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 179,
      discount_percentage: 4779.0,
      is_shop_specified: false,
      min_amount: 2802,
      usage_limit: 4402,
      code: "MS5",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2022-05-11T05:45:18.000000Z",
      display_starts_at: "2022-05-21T00:07:59.000000Z",
      ends_at: "2024-12-12T23:04:45.000000Z",
      starts_at: "2024-08-12T21:16:50.000000Z",
      discount_upper_limit: 2416,
      description: "eG29hBWbNKIGuoyWD3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsiJRl1b2ESaJKCDCVaIjvXY9buv1PGDaqpx",
      name: "AcB7XJ2PMH0HA7mMCxlziaJ1nphI9ySRxw6pdyrj7YEb5BIbPwZWptKeWMAfjTzhjO10bQwyTU6ZUhr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 8850,
      discount_percentage: 3071.0,
      available_shop_ids: ["939d6507-7f99-4488-8a01-a9a02b633607"],
      is_shop_specified: true,
      min_amount: 5902,
      usage_limit: 1422,
      code: "80a47LYIcD",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-08-02T00:07:21.000000Z",
      display_starts_at: "2024-09-05T15:59:04.000000Z",
      ends_at: "2024-04-13T10:47:36.000000Z",
      starts_at: "2022-01-15T05:11:05.000000Z",
      discount_upper_limit: 1785,
      description: "YwYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1Kexb2ZIYN0",
      name: "8OgDDQYpUk9QvTpwbva3X3fUufQzzx2hzebS68SpNEGkfmS3Uyy5Zn41VzLK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_amount: 1037,
      discount_percentage: 401.0,
      storage_id: "3ac4c00c-d755-40e7-8784-5b3337e7397c",
      available_shop_ids: ["bd16f56f-b00f-436d-b1d9-d7a062624bce", "6ddd52e6-d9aa-400d-a5de-9ffddaae43e5", "59b603cb-5aef-43cc-a395-a164ddefeaa6", "9c4a8b83-9746-4c45-b848-15aa55abcb6d", "dab3cd3c-fcf4-41b9-9238-344292401bbc", "6c334b98-1b91-4bf6-b12a-e141b114b4db", "22bd014a-b773-4342-ba33-db6cca2a48b6"],
      is_shop_specified: false,
      min_amount: 1081,
      usage_limit: 7481,
      code: "Q",
      is_public: true,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2022-05-09T11:58:30.000000Z",
      display_starts_at: "2025-04-22T23:27:16.000000Z",
      ends_at: "2020-10-23T07:03:33.000000Z",
      starts_at: "2023-09-02T01:28:05.000000Z",
      discount_upper_limit: 8946,
      description: "fIkmiU4i2bFcYt3zvnnQAgg6WKGNaTc3A08bOic61u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazSiZH6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00aco",
      name: "lEqYYGWZUMgU5LJ8nedbEkL6VCbZlYCZFu0YjXrvick1kbCzvMElblaTUskxDWTi4syFdijX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 7385.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 1498.0,
      name: "6Fkp0v2rObj5KP7CaX5R9O7hn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 1999.0,
      description: "MfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq2k3ETquM3SQujWFDE153B47G8gAIFr9zY1ABG4Q6S1AZ81ee9F1zaeUGprRtPpZgZzOhvmvIjVKe7aM7QiN4LuTtB8ZF5mN9clYyKl8cUsYw8CW8rHVcmWZsjKlFT0f7did2pSfVDNNjekhaUaqNZOry7pQcwkQvvHfTZTUiaSB",
      name: "niTvgiF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 2915.0,
      discount_upper_limit: 5152,
      description: "fXoobW27D2zSsjxSJQCC2TKE3m70u0i2E7e3WCog3HknLhb4mGHjaX24jJAlJFQ82MhyQQoipgFNSux0jeobdQD1",
      name: "VXjUggH7qMtHhSfZdXUyjb1NxKa8yAWf3eI4rn2GKxT8MfsHveV88627AlMJYf8M"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 201.0,
      starts_at: "2021-09-26T21:03:13.000000Z",
      discount_upper_limit: 348,
      description: "c9iCp3raZonaiDazAfoVN5ZcNoMxEFE11voG9m7gWIlidcsFhnnSlOPQSKVW980GqQVfPuvUPiEFV6mDyiAjmPC8FhIFplNkUQpOFZAAuAkdYYYV8q02r77ePIgPu4dPH7ImSF7bIQ97lNoNEqqi11P4GN23Eb6NlDd7BTwpYu4Valw5x",
      name: "iIJ7Q1Cipp2CPMRifbrHbdPk0z0U5np6zSSSsJChBCfGVrTTzFEA3cEkuniAENmbJtM74yoK3yNaovdjb7urlPondGWEfVzKMwihh3UCJATPnnGfbSAjt8y1LpRX9w"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 5565.0,
      ends_at: "2022-12-31T14:16:19.000000Z",
      starts_at: "2020-02-05T09:21:00.000000Z",
      discount_upper_limit: 3013,
      description: "SDM7H6DKpMVCMs6AqPF1N4VGIihJYcZH1yqyLKdrb7VdvBferrdPPsgFTBp21GVpuNthlN8cTNxtCl",
      name: "PPAh3ydu7juMaO7kqGjaASQkqyw2Q45pim16jWY8Li2yJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 7541.0,
      display_starts_at: "2023-10-11T19:52:31.000000Z",
      ends_at: "2021-12-30T21:37:20.000000Z",
      starts_at: "2023-02-07T14:38:04.000000Z",
      discount_upper_limit: 9389,
      description: "C9WmiQzTAP0hsvYk94ECXfwyrT6FNWSeiPJDkaNGUUFy",
      name: "37fVBCxguWkgEaSRxikajDhky1e9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 9165.0,
      display_ends_at: "2021-06-21T19:15:33.000000Z",
      display_starts_at: "2021-05-29T10:22:05.000000Z",
      ends_at: "2022-06-20T20:37:17.000000Z",
      starts_at: "2022-07-26T09:58:16.000000Z",
      discount_upper_limit: 9818,
      description: "9eEBDTjFI18oRpgCoDiEOfsuO3LMtzPm5pmHiztzTLcjSeNyveotr1SbLY9f9RM3h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ipOldTUQCXPcZtLDZ6t1d7NhS3tIbiaQ9UqJHQZFkEmVia7WMZwoONY9mYcjUD3BWfN3hpObBbd0WPCuqh90wnUEefdvvGn56xgqcINC0Ma",
      name: "OVTzO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 4825.0,
      is_disabled: false,
      display_ends_at: "2020-03-19T03:59:17.000000Z",
      display_starts_at: "2025-01-01T20:29:33.000000Z",
      ends_at: "2021-03-25T08:47:13.000000Z",
      starts_at: "2021-10-26T19:22:34.000000Z",
      discount_upper_limit: 1436,
      description: "dS1dG4VhCAXdvLcusNkP92lEHAtBr5uMSg7mI2h9L5UgNjF9pGXPoR6V6EH9oG2E8mJwg74tJdyJ5Llab29gfUQ6hTQL306GhITMLHDmfb2965KcWooPsLAa0LofoeILq2j1JbokM11iel9SifEKQQKEl5jTOYEn550ChTMJy5Ri4zQipR66DYXbWwtCBK4yI7b7ruIn1DQefV0LKmn0D6u1aqXUgLXLPq",
      name: "2aRw08aQ0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 7410.0,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-02-13T03:59:11.000000Z",
      display_starts_at: "2022-10-08T08:51:46.000000Z",
      ends_at: "2022-06-02T03:37:52.000000Z",
      starts_at: "2025-05-20T00:14:00.000000Z",
      discount_upper_limit: 831,
      description: "sccmXhG1yeE5aq4GKVSCfP0aoPIG5NuiBMU7rfLf6FhpORYw57l88LjJn33RIRSOmlXSQfzzTwn3Dxt4Xew7YzDaZ1J9OdsQM2IVUV93tsgTE0JEew3ek7732woVpaWAn4e207OnXy1NWRJfp7ZK3WimQaowti0F0S2aIOKkN5iwpVUwFU1amkd1FBZBysFgH8TiyAaF4dUSAbqyi68iyJ302sQl233vCftoqwC5tymvF1K2",
      name: "3X2uYu46ypSW9PxtiaID1SUCfz9yEelMoF9a26c2RLHzQWOO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 9920.0,
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2025-06-15T09:04:43.000000Z",
      display_starts_at: "2023-02-05T13:50:39.000000Z",
      ends_at: "2025-06-19T21:12:18.000000Z",
      starts_at: "2024-10-04T16:44:28.000000Z",
      discount_upper_limit: 3982,
      description: "o0g8SXRzZ3pUKHHeXuuwg12Ygg3AsTOryINKyRmJ3gWCDcmsuvkMrJePtGFhv4aIw1aGtGR3fEQezBo8XnXONHGXDMcl8tuhVdB5KkP8PHvZEmmcBKkGsr9sdEDTBkey7pr4d2jpaf36YY6mrG9Y2ztoKUUUx5B1bSO8xEgnoe60dnWTC",
      name: "mm3x115QsBZT6dCGgqZsePkl6iY0bdXM6Nza2rTctUJQmh0gNd3qkWY4lVW5zCUF3zWzIdrHm6OsiyHBxsWBtx4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 9655.0,
      code: "LViM",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-02-12T16:13:52.000000Z",
      display_starts_at: "2023-12-01T15:57:45.000000Z",
      ends_at: "2024-10-19T19:02:27.000000Z",
      starts_at: "2022-06-04T09:04:38.000000Z",
      discount_upper_limit: 5454,
      description: "zcDCX5bbsPzVUGeD2BWp2XUNEsAtEjlivj0NhalsavWYZduuXynvh05rJdAnnKPkjJzRbGyuQYyb8948tP6VkRaNaNdjmk2wkclkjGIdrGdF8qpLKYfd3JbJX5QcdKyJ1DmsToKu4w1tRUaP7awM87Mt7bWysOyzqkBrGaMjb1sugqjE",
      name: "eek3DeIDBfKsRBbYLkU2TfJXzuBqG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 3879.0,
      usage_limit: 7741,
      code: "FPReFsmx",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-01-09T17:16:04.000000Z",
      display_starts_at: "2023-05-03T19:23:01.000000Z",
      ends_at: "2021-05-22T01:47:36.000000Z",
      starts_at: "2021-03-04T18:00:14.000000Z",
      discount_upper_limit: 6488,
      description: "wuc649dznjsqwxML0aHpiMuF",
      name: "L917lUTrE8EACTMWkW53gnqE0TT1OD00WYy85d5RKAlbrPQ0st0t7yJcv8GqBqgGEHafl1jNP9k7uydClg9A7an27PrVxBqiE9YWo8xjmzBGJVwTTanAXyFjLag3g"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 8456.0,
      min_amount: 2768,
      usage_limit: 9997,
      code: "lq0FFnt",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-08-03T15:44:25.000000Z",
      display_starts_at: "2025-07-25T06:03:24.000000Z",
      ends_at: "2021-02-11T01:09:05.000000Z",
      starts_at: "2021-06-21T05:24:34.000000Z",
      discount_upper_limit: 417,
      description: "0p27NPGQTdAXKNGuLNgDO4Ma1ptA22IkyjkgPuZUMAq2NjJocNYKTrm2m1ssPqyT3XyCFCrR8uZnHFgU1ZOwuoeukDxIIOg9CcbCgtxt4qQAP06TDLYKBc2zPf6wToG8lTKcMPiFJX3LNKTomMc8wnROYRP673oHx5",
      name: "3DOO7AdxANDE2ea2N2bsCqxQkk2AG5TTqX05IlCZ5tUdSwXVRIVCnlZj6NtOwX2FI8Wr1369uaTF42a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 48', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 2914.0,
      is_shop_specified: false,
      min_amount: 5095,
      usage_limit: 9999,
      code: "mtEHAWzKV",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-01-17T20:32:49.000000Z",
      display_starts_at: "2021-12-31T01:50:06.000000Z",
      ends_at: "2024-08-08T04:23:16.000000Z",
      starts_at: "2024-02-10T13:15:36.000000Z",
      discount_upper_limit: 1537,
      description: "1Q1Fha0o1JxRbdO7sJMkOiIt9zNKCX0VzisXLLiEpULitiIsW57odiOHhS8DsZfAQRFK6oTTeP8tTTuInowX2TMHi2vDKbmu8",
      name: "aUF4jypKaAY4yQaiw0JpUpNfjrUKaUCU4cuncfOgZgC0vnz9vdHX3zI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 49', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 1485.0,
      available_shop_ids: ["f56c82e0-c87b-4a1a-b900-7e5049d1518d", "3eb4937e-9f4f-400c-844b-8e05115c5a55", "6beaf601-d480-4a9a-872b-e58a4a8ce071", "ab1ee887-7a3f-416b-b209-fcd8b4f25384", "47b867dd-8ba3-457d-b49b-b14116dd65e5", "a2d4d4cc-e46d-483e-85be-832da1e388d2", "39e2cb71-2584-4600-98dc-ccb5387e0b16"],
      is_shop_specified: false,
      min_amount: 2018,
      usage_limit: 1453,
      code: "DROtzb2h",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2024-07-27T08:36:25.000000Z",
      display_starts_at: "2021-09-30T05:43:01.000000Z",
      ends_at: "2022-10-21T07:22:43.000000Z",
      starts_at: "2025-01-04T01:40:17.000000Z",
      discount_upper_limit: 6393,
      description: "QXA4kt1s5IzgftNOCeiOWbpouk4VaYSYsK",
      name: "6oU3L46cfTNsJ74FdhPrGorQztiuURWZ5r1OnryKkdpmMzmoITgipjScgSjEKEvn9tkKJsfEeEirDJBvMOLUpWvpk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 50', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "694d5520-76fe-4c3f-aaac-0966b2ebfd3d",
      discount_percentage: 6886.0,
      storage_id: "17b33c84-f761-4042-b741-021b21b38cc8",
      available_shop_ids: ["9b381b05-e50e-4b0a-b59f-ca675200137f", "f7f81e62-b7a9-4397-a0ca-29b17f3a893a"],
      is_shop_specified: false,
      min_amount: 4503,
      usage_limit: 9296,
      code: "mdwaTBcNwq",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-06-12T06:57:22.000000Z",
      display_starts_at: "2024-10-29T03:32:45.000000Z",
      ends_at: "2025-02-13T06:48:35.000000Z",
      starts_at: "2023-09-13T09:54:16.000000Z",
      discount_upper_limit: 1555,
      description: "6a6zzUqrHdosHdbmLywqukvEUDGTtuu5mLHhGQ9yekqoyNLKN2h7BNq3rRMob2yqEgXsKX0DNjA5LloLW2ZGwTADg0EGo2tY0BvAArU4c3Hcr3rYtMZs1YhEQlphw1DkmThPoIdPA7X1r8JTPyIk7mw82VAIRkHcNMgqN77FQwuiGtQW4p",
      name: "FSkfz0ZAYuHKErS89ga8rAwXpAiqwTxt1HL4wWzmkMDA4SVfWD13Zj3L9DQPYajb0tVdWEdtL2ujHbA770c9iXi2Q1VWdznJovLhT0BrHHw3tEd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetSevenBankAtmSession | 0', async () => {
  let status = 400;
  try {
    const response: Response<SevenBankATMSession> = await client.send(new GetSevenBankAtmSession({
      qr_info: "BOJZocfpIF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

