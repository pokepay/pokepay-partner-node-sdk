// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfers, PaginatedTransaction, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, Check, Bill, AccountBalance, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfers, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, CreateTransaction, ListTransactions, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccounts> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "7c419418-aa59-4e5c-bbdc-7d8d6bf88c31"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_to: "2023-12-04T19:51:42.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_from: "2023-01-15T03:20:22.000000+09:00",
      expires_at_to: "2016-07-18T17:09:40.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      per_page: 2394,
      expires_at_from: "2025-01-10T04:46:02.000000+09:00",
      expires_at_to: "2024-05-11T03:04:24.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      page: 5477,
      per_page: 8394,
      expires_at_from: "2022-03-09T11:53:53.000000+09:00",
      expires_at_to: "2019-09-12T11:19:03.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_to: "2023-10-14T15:41:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_from: "2016-02-07T23:51:43.000000+09:00",
      expires_at_to: "2023-06-26T07:13:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      per_page: 1280,
      expires_at_from: "2017-09-19T20:56:50.000000+09:00",
      expires_at_to: "2021-05-01T18:07:44.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      page: 7954,
      per_page: 183,
      expires_at_from: "2017-07-15T07:24:12.000000+09:00",
      expires_at_to: "2018-02-11T05:24:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      email: "CRcEAVa4Jm@fjoJ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      tel: "07915737-6839",
      email: "BqxPDSP5Bp@fA0d.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      external_id: "cuMmHpa4aDHWm32hBFhI0DxRhz",
      tel: "038101710",
      email: "lNvpHM0s7D@d9Uu.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      is_suspended: true,
      external_id: "qWqC0qUtLag9adxARTcCtKjz1M2kusM3c",
      tel: "04-52-8842",
      email: "pxWNvKR6Gc@p6PW.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_to: "2020-11-24T10:08:23.000000+09:00",
      is_suspended: false,
      external_id: "NymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANii",
      tel: "05-838-7657",
      email: "xc7L05i8jk@Z1Wa.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_from: "2022-05-27T02:04:46.000000+09:00",
      created_at_to: "2016-12-11T21:40:59.000000+09:00",
      is_suspended: true,
      external_id: "Ag",
      tel: "0003-858-273",
      email: "nyiHZ1n3qw@k3r3.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      per_page: 1312,
      created_at_from: "2025-04-07T11:12:06.000000+09:00",
      created_at_to: "2022-09-25T01:02:12.000000+09:00",
      is_suspended: false,
      external_id: "hfSXAhy6Q6NsE0G4ET",
      tel: "06827149",
      email: "XyGaN9eZjS@IQOR.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      page: 7156,
      per_page: 8998,
      created_at_from: "2022-02-19T23:34:45.000000+09:00",
      created_at_to: "2020-09-19T13:48:01.000000+09:00",
      is_suspended: true,
      external_id: "9L",
      tel: "080-9236601",
      email: "psZzwHUgb2@qqrL.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "13fc31f4-ab13-4552-8970-52a788378b0f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "13fc31f4-ab13-4552-8970-52a788378b0f",
      external_id: "MZnFJMuPuuYDxHZdnik"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "13fc31f4-ab13-4552-8970-52a788378b0f",
      account_name: "AchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtr",
      external_id: "I5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6T"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "13fc31f4-ab13-4552-8970-52a788378b0f",
      user_name: "u3BU56A0DovC2AWlgsj8",
      account_name: "O1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfddKJfLPJmxAhDpkltxfpGBgKzLBWM",
      external_id: "YifX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405",
      created_at_to: "2022-04-20T13:19:07.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405",
      created_at_from: "2023-06-22T06:11:54.000000+09:00",
      created_at_to: "2020-12-13T09:02:00.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405",
      per_page: 2964,
      created_at_from: "2018-02-16T12:42:28.000000+09:00",
      created_at_to: "2020-07-10T19:56:26.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "cefac7bd-7c9f-4b80-8497-6f58374d0405",
      page: 743,
      per_page: 5060,
      created_at_from: "2022-08-28T18:33:16.000000+09:00",
      created_at_to: "2019-06-07T10:01:10.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 6550,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 5371,
      upper_limit_amount: 1502,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "0744757a-0466-40a2-9fd3-6d2dc831404e",
      lower_limit_amount: 503,
      upper_limit_amount: 2063,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "UPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl5vCAHh7QD95u0YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlnsa7zuy",
      shop_id: "621c603a-c6b1-4df4-9d75-62f3e2935501",
      lower_limit_amount: 1015,
      upper_limit_amount: 5477,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2024-02-09T16:55:33.000000+09:00",
      shop_name: "Z1wrrgdxWfKkMLwrBpORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36l34SSSOxW72gqSjd8QPzbjt0rt7UmerReZGbvGgvAZbyLJ1Lea6an4P1AnQALadFsAzgfKjbtuXgZDedIJqTHGgnOhGiwZBj5AvHdO2AtfcLabY2vDzXzQx3sP8V6IT9VFC5",
      shop_id: "6a438f62-b511-446f-b093-638a0541d53f",
      lower_limit_amount: 344,
      upper_limit_amount: 4198,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2017-10-06T00:37:12.000000+09:00",
      created_to: "2022-10-15T14:09:50.000000+09:00",
      shop_name: "8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exAarzlUllrgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1wTnktL8AYkBvD7caRgncONv8Kje2pUTWzADND",
      shop_id: "195e4ee5-eb1d-4906-b8b7-82efe5592669",
      lower_limit_amount: 193,
      upper_limit_amount: 7876,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "B6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1V",
      created_from: "2025-06-28T06:22:12.000000+09:00",
      created_to: "2022-10-09T02:35:10.000000+09:00",
      shop_name: "ebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONN",
      shop_id: "4faa4393-bfc1-4501-bb6a-b042c64b79ab",
      lower_limit_amount: 1219,
      upper_limit_amount: 729,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "AsqS2Z-V79-dtNkY7",
      description: "xuQUV",
      created_from: "2023-06-24T23:35:38.000000+09:00",
      created_to: "2022-08-08T06:45:21.000000+09:00",
      shop_name: "ZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIe",
      shop_id: "515d81cf-56c9-4e2d-8b3e-fcaf1c1fe59d",
      lower_limit_amount: 4965,
      upper_limit_amount: 6298,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "864ea212-382c-493b-9df3-443f4fd60db0",
      organization_code: "Q0--Vm51xP51j-Uc-1fe-3Z-e---",
      description: "TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDt",
      created_from: "2019-04-11T19:02:55.000000+09:00",
      created_to: "2016-03-28T17:19:29.000000+09:00",
      shop_name: "Hs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acle",
      shop_id: "54afd3d6-a852-4a73-bc70-69e31ba6b2ec",
      lower_limit_amount: 868,
      upper_limit_amount: 2036,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "5tmURvImdn",
      private_money_id: "ed6fdaa7-91e9-45e5-9b29-8dec29b3be0c",
      organization_code: "DoRXh-Y-9SWD-l-fv-u",
      description: "Ys7Yv5K",
      created_from: "2016-09-06T09:57:24.000000+09:00",
      created_to: "2023-02-14T22:10:18.000000+09:00",
      shop_name: "cz7zjgazoph",
      shop_id: "e79838f5-c921-4023-9669-1143c81ef931",
      lower_limit_amount: 9302,
      upper_limit_amount: 3548,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 447,
      bill_id: "XiXW8JGdO",
      private_money_id: "5050d80d-c7ba-4f99-ad8b-b975c78d25bf",
      organization_code: "z",
      description: "uwMI02c6YHU8uGe8qGNvTmA",
      created_from: "2021-03-11T17:24:05.000000+09:00",
      created_to: "2024-02-26T23:31:28.000000+09:00",
      shop_name: "H06f3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KA",
      shop_id: "e1400ce0-47d7-451c-9618-89c8bbd88a9a",
      lower_limit_amount: 2172,
      upper_limit_amount: 8069,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 5228,
      per_page: 6990,
      bill_id: "aQT0YWfQtg",
      private_money_id: "aa0d8a40-f689-4fdb-b8d6-736898ef5371",
      organization_code: "-4V-k1D8HboK--w-uW",
      description: "LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKV",
      created_from: "2024-12-05T21:24:47.000000+09:00",
      created_to: "2021-12-15T16:10:53.000000+09:00",
      shop_name: "9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOz",
      shop_id: "ef491acb-060a-4810-910f-e7adbe43b402",
      lower_limit_amount: 2666,
      upper_limit_amount: 8542,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "10b38e5a-a0a2-4643-b978-0431d3fe12c5",
      shop_id: "6be77097-48f0-43b4-96fd-0f6bfa0ed65f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "10b38e5a-a0a2-4643-b978-0431d3fe12c5",
      shop_id: "6be77097-48f0-43b4-96fd-0f6bfa0ed65f",
      description: "AmGgvgI7Yg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "10b38e5a-a0a2-4643-b978-0431d3fe12c5",
      shop_id: "6be77097-48f0-43b4-96fd-0f6bfa0ed65f",
      amount: 7044,
      description: "C9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "f74385dc-54b9-4a04-b397-68b535a93439"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "f74385dc-54b9-4a04-b397-68b535a93439",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "f74385dc-54b9-4a04-b397-68b535a93439",
      description: "IWGujcTx",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "f74385dc-54b9-4a04-b397-68b535a93439",
      amount: 7494,
      description: "XyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwo",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 5442
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 4924,
      description: "BCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8v"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 7165,
      is_onetime: false,
      description: "QwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4V"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 9795,
      usage_limit: 6471,
      is_onetime: false,
      description: "4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 6414,
      expires_at: "2019-05-03T14:12:01.000000+09:00",
      usage_limit: 7164,
      is_onetime: true,
      description: "L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 4023,
      point_expires_at: "2018-03-11T02:38:10.000000+09:00",
      expires_at: "2022-07-08T12:11:45.000000+09:00",
      usage_limit: 872,
      is_onetime: false,
      description: "ltNB5ed"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 1652,
      point_expires_in_days: 5298,
      point_expires_at: "2020-07-06T08:37:37.000000+09:00",
      expires_at: "2024-02-16T01:46:48.000000+09:00",
      usage_limit: 3355,
      is_onetime: true,
      description: "n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 8215,
      bear_point_account: "526fadb3-fa90-457f-8e5c-0678195e33c1",
      point_expires_in_days: 5555,
      point_expires_at: "2018-09-23T16:27:36.000000+09:00",
      expires_at: "2018-03-05T11:35:21.000000+09:00",
      usage_limit: 1183,
      is_onetime: false,
      description: "6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 4341,
      point_amount: 8453
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 1819,
      point_amount: 12,
      description: "gx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5Eo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 342,
      point_amount: 5638,
      is_onetime: false,
      description: "dmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 4463,
      point_amount: 8092,
      usage_limit: 7440,
      is_onetime: false,
      description: "UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 5024,
      point_amount: 7269,
      expires_at: "2016-07-06T05:37:37.000000+09:00",
      usage_limit: 3031,
      is_onetime: true,
      description: "JKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 1083,
      point_amount: 7854,
      point_expires_at: "2022-11-09T12:14:18.000000+09:00",
      expires_at: "2016-07-31T12:05:06.000000+09:00",
      usage_limit: 7214,
      is_onetime: false,
      description: "czNdwQ9LziqjK5MdQ1lZMyA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 1234,
      point_amount: 8064,
      point_expires_in_days: 6979,
      point_expires_at: "2024-08-10T09:35:05.000000+09:00",
      expires_at: "2018-04-18T08:05:42.000000+09:00",
      usage_limit: 5344,
      is_onetime: true,
      description: "SqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      money_amount: 4553,
      point_amount: 5773,
      bear_point_account: "aa1efee2-12fb-4a74-a545-2a0562a1f98f",
      point_expires_in_days: 5520,
      point_expires_at: "2018-06-14T19:13:27.000000+09:00",
      expires_at: "2018-12-04T15:17:40.000000+09:00",
      usage_limit: 8710,
      is_onetime: true,
      description: "OMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 3558
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 7124,
      description: "v94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 7755,
      is_onetime: true,
      description: "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 7999,
      usage_limit: 6753,
      is_onetime: false,
      description: "T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 9565,
      expires_at: "2017-02-13T22:49:55.000000+09:00",
      usage_limit: 4769,
      is_onetime: false,
      description: "j9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 7691,
      point_expires_at: "2016-03-06T09:52:08.000000+09:00",
      expires_at: "2021-09-17T16:54:03.000000+09:00",
      usage_limit: 1206,
      is_onetime: true,
      description: "SXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 2225,
      point_expires_in_days: 2621,
      point_expires_at: "2019-10-29T04:38:08.000000+09:00",
      expires_at: "2023-05-17T07:39:03.000000+09:00",
      usage_limit: 6629,
      is_onetime: true,
      description: "NJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
      point_amount: 4479,
      bear_point_account: "13049eeb-a24c-4638-bceb-db1ea417ee75",
      point_expires_in_days: 7753,
      point_expires_at: "2018-05-08T07:35:43.000000+09:00",
      expires_at: "2023-11-14T12:55:05.000000+09:00",
      usage_limit: 608,
      is_onetime: false,
      description: "oA9Wjz3x"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "F4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["exchange_inflow", "topup", "exchange_outflow", "payment"],
      description: "kjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: ["topup"],
      description: "jLV6mNckmXW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "a40cfb3f-af62-467d-b6e3-c1af51828844",
      is_modified: false,
      types: ["exchange_outflow", "payment", "exchange_inflow", "topup"],
      description: "EvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "ig--4-fcSL",
      private_money_id: "aa92f50d-93f6-40a2-9803-fed3e036e42f",
      is_modified: false,
      types: ["payment"],
      description: "KMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "0fb67407-43e3-4511-8399-d1974a85b8da",
      organization_code: "F--Z-5I-1mh8EC-B8-ZcAV-",
      private_money_id: "efd2a76f-9ab7-4890-9a8c-efcd17be6265",
      is_modified: false,
      types: ["topup", "exchange_outflow", "payment"],
      description: "Rh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2Hwa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "8e458efe-91de-4e56-8fd6-ded7b78bb2c7",
      transaction_id: "2f6339e3-904f-4df6-92e7-a2fe07d2701f",
      organization_code: "qh2M--2-9BgDQ-L41a5t16640PHY",
      private_money_id: "e4fae6f0-0800-49c7-8372-bc4f3be9d20a",
      is_modified: false,
      types: [],
      description: "VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "mFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s",
      terminal_id: "afc82730-867d-4fb9-b384-fcb2f9f13d44",
      transaction_id: "50349298-229b-4cb0-b75a-2dca7e16a0fd",
      organization_code: "H64O--QS--G-q--P-6",
      private_money_id: "a259373f-52a9-4586-ac65-5cab84228a3c",
      is_modified: false,
      types: [],
      description: "Zr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "6d04b015-9c56-403e-82c7-808b9a0345fd",
      customer_name: "p3Ank6BTTvgxHzzgdLIxgPMdYrCUs",
      terminal_id: "90023026-69bc-407c-948d-9e11135456aa",
      transaction_id: "3c5fe1e7-910a-46e0-b704-41ed5d3c1c46",
      organization_code: "67",
      private_money_id: "694d2edc-4dab-4d19-803b-cc69c379a756",
      is_modified: false,
      types: ["payment", "exchange_outflow", "topup", "exchange_inflow"],
      description: "qahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "5dae2af2-ebf6-445b-bad7-fa3b475d913f",
      customer_id: "6e68a055-afa0-4f82-886e-1001fd307d6b",
      customer_name: "7KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5",
      terminal_id: "fcb66ced-3d2c-49c1-9b8f-2546816ea216",
      transaction_id: "dd584a5e-f8dc-4441-bd3d-39c963bad19c",
      organization_code: "3So-gBis-Dk--zO-olBuG-7XhI92-qH1",
      private_money_id: "6033af2a-2850-4426-a6d7-1d4450a2086e",
      is_modified: false,
      types: ["exchange_inflow", "topup", "exchange_outflow"],
      description: "peMsqUtDBV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 2023,
      shop_id: "97f940b5-bbca-4005-8ed7-c1d0858659c2",
      customer_id: "3a0776c0-7bfb-4a70-bad3-1800628e550a",
      customer_name: "tetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIP",
      terminal_id: "51efd7e2-6f9d-4bac-a9cd-bf5d5db4905e",
      transaction_id: "29a3eaa3-231c-451f-a8d9-faec39ca81ad",
      organization_code: "nI-s85b-BLd-6dCV-0Brcq",
      private_money_id: "64ce4fd5-e801-44cf-9412-9d80b97a29bf",
      is_modified: false,
      types: ["payment", "exchange_inflow", "exchange_outflow"],
      description: "7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 5497,
      per_page: 9594,
      shop_id: "d03d8be0-1757-4c89-a30f-613e284a8ce7",
      customer_id: "1316862f-53a1-469d-8092-487bd5226a40",
      customer_name: "vBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04J",
      terminal_id: "6dff4f01-af6a-47d2-be74-c8e0d4ef07dd",
      transaction_id: "3d08c424-18a1-42a9-9ecb-b85d1e6e884a",
      organization_code: "-mdp-X7--l-6Y0rQy1",
      private_money_id: "dcc480ac-5d41-4298-b474-fb4dd4432d13",
      is_modified: true,
      types: ["exchange_inflow", "exchange_outflow", "topup", "payment"],
      description: "CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84S"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2015-12-17T05:32:38.000000+09:00",
      page: 7262,
      per_page: 5704,
      shop_id: "e82469f7-3983-4b97-8190-f22ad3a9db2e",
      customer_id: "96c233c3-1fc5-4268-96db-2f9cd23b3e6f",
      customer_name: "VmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdI",
      terminal_id: "dd96efe5-4be1-4cac-9dfb-e509011991c0",
      transaction_id: "d1842a47-085c-4c74-a49d-097989f0e19d",
      organization_code: "l-UB-y5Wn--5I--9u393gS--s3",
      private_money_id: "fe6213e7-e07d-4a7e-adfe-2cf43ac6f070",
      is_modified: true,
      types: ["payment", "topup"],
      description: "uBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0ac"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2017-06-11T03:38:01.000000+09:00",
      to: "2015-11-22T15:59:25.000000+09:00",
      page: 1622,
      per_page: 1059,
      shop_id: "dd17bced-76aa-4cc1-82a8-c1450ce3e6b9",
      customer_id: "59b79ec4-2f57-4974-814e-a4206a752548",
      customer_name: "5sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvt",
      terminal_id: "c0716dc8-7e53-4bed-a5df-c42ab08daccc",
      transaction_id: "9bac8fe6-e33d-40db-b67e-67e70c3ab2ad",
      organization_code: "10-7--Wn--w1A-43n-n7u38w9q",
      private_money_id: "ace6436e-314c-4242-b6c3-8ce6c180cdf5",
      is_modified: false,
      types: ["exchange_inflow"],
      description: "WsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "7c060d92-ea09-40f8-9126-4b667e847f87",
      customer_id: "28293aba-96e0-469c-8ff1-264e6c4457a5",
      private_money_id: "a2162487-9e95-413b-8b89-ddc73ed91754"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "7c060d92-ea09-40f8-9126-4b667e847f87",
      customer_id: "28293aba-96e0-469c-8ff1-264e6c4457a5",
      private_money_id: "a2162487-9e95-413b-8b89-ddc73ed91754",
      description: "hBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "7c060d92-ea09-40f8-9126-4b667e847f87",
      customer_id: "28293aba-96e0-469c-8ff1-264e6c4457a5",
      private_money_id: "a2162487-9e95-413b-8b89-ddc73ed91754",
      point_expires_at: "2020-04-14T13:08:25.000000+09:00",
      description: "RlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8M"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "7c060d92-ea09-40f8-9126-4b667e847f87",
      customer_id: "28293aba-96e0-469c-8ff1-264e6c4457a5",
      private_money_id: "a2162487-9e95-413b-8b89-ddc73ed91754",
      point_amount: 3034,
      point_expires_at: "2017-03-31T18:15:26.000000+09:00",
      description: "vlfPZ9XRs2DjUex8FZcru468uiy2IBQsK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "7c060d92-ea09-40f8-9126-4b667e847f87",
      customer_id: "28293aba-96e0-469c-8ff1-264e6c4457a5",
      private_money_id: "a2162487-9e95-413b-8b89-ddc73ed91754",
      money_amount: 7650,
      point_amount: 894,
      point_expires_at: "2021-08-05T17:01:01.000000+09:00",
      description: "UonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      request_id: "12873ff0-f0a7-4f8d-b2ad-25cf642cb155"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      description: "7ktZcH",
      request_id: "cc474057-b105-4273-8bda-3c8a04992c7f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      point_expires_at: "2024-10-27T05:25:48.000000+09:00",
      description: "EtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1",
      request_id: "7508f855-4d79-48d0-9202-02e1456064c7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      point_amount: 3784,
      point_expires_at: "2021-01-16T15:18:32.000000+09:00",
      description: "kyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xl",
      request_id: "4f57728f-a26e-4378-b631-80dc19de3382"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      money_amount: 6761,
      point_amount: 1028,
      point_expires_at: "2025-04-10T20:20:59.000000+09:00",
      description: "BdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYv",
      request_id: "686f83c8-1ae9-4867-a4c2-0116c175ee8a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "714ae247-b68c-4542-93db-005699bd57cc",
      customer_id: "b23cdd26-76f0-468a-8b32-ccd657594e6d",
      private_money_id: "d7c06467-3e1d-45a0-be33-87e5f9b30da8",
      bear_point_shop_id: "ccd1df59-d82b-4776-914b-b45b160fddd6",
      money_amount: 137,
      point_amount: 1422,
      point_expires_at: "2020-02-19T21:22:44.000000+09:00",
      description: "VdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzH",
      request_id: "0d5219fc-8b40-4265-901f-51ecc6802c77"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "05bf58ad-60ad-45d2-ab9d-5a4869e6efca",
      customer_id: "42aa1f4c-61d0-4004-a562-822045b98659"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
      customer_id: "93cc8961-0be2-42f0-a8fc-6d79e7879700",
      private_money_id: "a0cd1f40-75ea-47d8-9033-dca08d56be14",
      amount: 4654
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
      customer_id: "93cc8961-0be2-42f0-a8fc-6d79e7879700",
      private_money_id: "a0cd1f40-75ea-47d8-9033-dca08d56be14",
      amount: 4654,
      request_id: "dcdd1b78-cb75-4413-a8e8-7279c66b08b9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
      customer_id: "93cc8961-0be2-42f0-a8fc-6d79e7879700",
      private_money_id: "a0cd1f40-75ea-47d8-9033-dca08d56be14",
      amount: 4654,
      description: "RsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakw",
      request_id: "1f1618df-3a43-4fe9-a832-89a7ab8b750c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
      receiver_id: "555e5ecb-47f2-4f4a-9d38-1e758febb733",
      private_money_id: "6b57a04a-4623-48f4-800b-5d07452a8a19",
      amount: 4040
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
      receiver_id: "555e5ecb-47f2-4f4a-9d38-1e758febb733",
      private_money_id: "6b57a04a-4623-48f4-800b-5d07452a8a19",
      amount: 4040,
      request_id: "e52b4877-2ab1-4533-820a-294a04452a4c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
      receiver_id: "555e5ecb-47f2-4f4a-9d38-1e758febb733",
      private_money_id: "6b57a04a-4623-48f4-800b-5d07452a8a19",
      amount: 4040,
      description: "qURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlI",
      request_id: "a9001573-4cdb-4a6a-a359-51644f40ebc4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
      sender_private_money_id: "da109100-e2fa-4783-9783-8f2f87ea64e6",
      receiver_private_money_id: "f970404d-f9bd-4e3e-8b56-45d980d67ece",
      amount: 6534
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
      sender_private_money_id: "da109100-e2fa-4783-9783-8f2f87ea64e6",
      receiver_private_money_id: "f970404d-f9bd-4e3e-8b56-45d980d67ece",
      amount: 6534,
      request_id: "367806f4-330f-45a5-9195-2ba133f57846"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
      sender_private_money_id: "da109100-e2fa-4783-9783-8f2f87ea64e6",
      receiver_private_money_id: "f970404d-f9bd-4e3e-8b56-45d980d67ece",
      amount: 6534,
      description: "ORiCKaN1GSBkTmsnETZgON7wI25X",
      request_id: "87cb461b-ae44-4a7e-b4cc-0117b77b58c4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "gtc1eHQx",
      content: "a3",
      request_id: "8fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "gtc1eHQx",
      content: "a3",
      request_id: "8fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVL",
      description: "mxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRl"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new GetTransaction({
      transaction_id: "bed23e28-88f1-475d-ba4b-d807e81099a5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "0eb2777e-c829-4aa6-a0d6-13621cb88acc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "0eb2777e-c829-4aa6-a0d6-13621cb88acc",
      description: "VJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: [],
      description: "zEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["payment"],
      transfer_types: ["coupon", "exchange"],
      description: "bDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: ["exchange", "transfer"],
      transfer_types: ["exchange", "topup", "transfer", "campaign"],
      description: "h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "c65b0a84-bb86-47f0-b5d6-b443a30c8b2f",
      is_modified: false,
      transaction_types: ["transfer", "exchange", "topup"],
      transfer_types: ["topup"],
      description: "xeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "a3f148cd-adc9-4f2b-a2b0-bb676afc0c5d",
      private_money_id: "535f40b8-6a52-42af-a0d8-ac39e593f147",
      is_modified: false,
      transaction_types: ["topup"],
      transfer_types: ["campaign", "exchange", "payment", "coupon", "transfer", "topup"],
      description: "H0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH",
      transaction_id: "016dc3b5-d7cf-469c-8ce8-c2250cd9079e",
      private_money_id: "4fdcc056-5e05-4eef-87c2-ad1ab99f2593",
      is_modified: false,
      transaction_types: ["payment"],
      transfer_types: ["coupon", "campaign"],
      description: "piSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98R"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "4afd3c23-693e-4973-acc4-31bbf5a0a724",
      customer_name: "BuoJS",
      transaction_id: "54834b5c-2549-4c46-95f2-4d29e2e821d4",
      private_money_id: "f5f8a4d2-f1ee-49e5-b9a2-8631397a70f5",
      is_modified: true,
      transaction_types: ["topup", "exchange", "payment"],
      transfer_types: [],
      description: "Cce6NgXmM6SU8mT9N7YdoyhvI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "K96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7Ozzt",
      customer_id: "2b4181c9-483a-435e-baba-78401722ad20",
      customer_name: "dIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9d",
      transaction_id: "301147bc-3a2f-4fc0-82fd-82b858b3ea40",
      private_money_id: "f2e96a66-0843-4d9a-ba2f-42824b382693",
      is_modified: false,
      transaction_types: ["transfer", "exchange", "payment", "topup"],
      transfer_types: ["coupon", "transfer"],
      description: "lj4kfEe2uvMtiKxUivt9MIJ97msI3tB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "75bef93f-7005-4ce5-9d36-bc5f52ee8074",
      shop_name: "0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxAr",
      customer_id: "ecf1ee67-a619-43a3-8926-165e06407c75",
      customer_name: "mMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSr",
      transaction_id: "2b1ca2cf-2e83-413b-a711-2207d10f2627",
      private_money_id: "4df4117e-0612-4887-897e-e12b4b8efaa6",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["payment", "coupon"],
      description: "mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 1567,
      shop_id: "8790a206-12be-4cab-9134-6ca74327ccd1",
      shop_name: "caCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqz",
      customer_id: "6b7b7356-1686-403c-bf24-b9bb6f2d752c",
      customer_name: "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a",
      transaction_id: "d27cdc88-5538-4389-9fad-97206d021994",
      private_money_id: "eccd10e0-4ed4-40e3-88d4-9db09a3600a5",
      is_modified: true,
      transaction_types: ["transfer", "exchange", "topup", "payment"],
      transfer_types: ["topup", "transfer", "payment", "coupon", "campaign", "exchange"],
      description: "vEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90IL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 1129,
      per_page: 6706,
      shop_id: "734ec046-c66e-47bd-8586-e53b5f3a5494",
      shop_name: "5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtP",
      customer_id: "6385eb40-9ae6-4027-9f3e-31cbdf6f8c88",
      customer_name: "W4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3X",
      transaction_id: "3caba7be-3fcd-4c7a-8067-754b559c1f44",
      private_money_id: "aeaf25be-9b4b-4bad-8d4f-262cf2905bb5",
      is_modified: false,
      transaction_types: ["exchange"],
      transfer_types: ["campaign", "coupon"],
      description: "MF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2019-01-09T15:47:03.000000+09:00",
      page: 5725,
      per_page: 5685,
      shop_id: "38473e13-0853-4862-8b6b-e46feb7e297a",
      shop_name: "4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gp",
      customer_id: "483a2104-49f5-4e1f-b769-f65798fdfa62",
      customer_name: "08UbIXfaz",
      transaction_id: "06d32ec9-e589-4e9a-976f-c3e74df9fa6a",
      private_money_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["campaign", "payment"],
      description: "phEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2019-08-14T09:14:35.000000+09:00",
      to: "2021-03-26T06:55:36.000000+09:00",
      page: 1845,
      per_page: 3344,
      shop_id: "5c103d4e-0833-4ae0-a258-eb5c8fbae437",
      shop_name: "yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3",
      customer_id: "ab504349-7dd1-464b-9151-b9010663148b",
      customer_name: "b6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG",
      transaction_id: "3b92770b-6b3c-457f-bb09-158719436b14",
      private_money_id: "ef847494-d531-4dae-b9b8-d90ebeae6aef",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["payment"],
      description: "Cptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      contact_name: "fnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8n"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_account_holder_name: "ﾗ",
      contact_name: "9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_account: "474481",
      bank_account_holder_name: "ﾋ",
      contact_name: "wJ1udEIb7zDJ6KZTEk0mDRGqd8jGih"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_account_type: "other",
      bank_account: "27",
      bank_account_holder_name: "ｿ",
      contact_name: "3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_branch_code: "977",
      bank_account_type: "saving",
      bank_account: "1718",
      bank_account_holder_name: " ",
      contact_name: "hWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_branch_name: "w9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQ",
      bank_branch_code: "409",
      bank_account_type: "other",
      bank_account: "05",
      bank_account_holder_name: "｣",
      contact_name: "v10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_code: "1245",
      bank_branch_name: "A0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "39240",
      bank_account_holder_name: "\\",
      contact_name: "e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "2NE9OohrFLhvABt92YjeNGkeRyZCxDw",
      name: "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
      private_money_ids: ["eb110732-d01b-4e84-bb07-9a71c68d5516"],
      issuer_admin_user_email: "iGNeSDJueW@NAF2.com",
      member_admin_user_email: "iLhkB08mWo@SEw4.com",
      bank_name: "huu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUe",
      bank_code: "",
      bank_branch_name: "z1G0bwCFurxmaLHHuXDOcuycP",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "04",
      bank_account_holder_name: "6",
      contact_name: "yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 4213
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 6561,
      per_page: 1320
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "2",
      page: 1639,
      per_page: 7999
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "HYeeJWiJLn@1TOW.com",
      external_id: "VNqKCYgaN",
      page: 4407,
      per_page: 1671
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "077-4582173",
      email: "7yVjYZzSkj@ksoj.com",
      external_id: "4Pn",
      page: 2965,
      per_page: 6871
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8Qhc",
      tel: "05-320-471",
      email: "potaJBLyz8@KN17.com",
      external_id: "xPU1GvU5oJnH6",
      page: 7393,
      per_page: 3901
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "829-7601",
      address: "gmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOt",
      tel: "03-1060591",
      email: "IVjtUkLTSk@OKux.com",
      external_id: "3",
      page: 177,
      per_page: 7370
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSV",
      postal_code: "776-3433",
      address: "OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QI",
      tel: "05-226375",
      email: "OQG1PZp7fj@d91z.com",
      external_id: "g",
      page: 1313,
      per_page: 7470
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "728185e8-ad31-4fdc-9d52-a548ebf7bb9d",
      name: "tL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZ",
      postal_code: "8303389",
      address: "rdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41",
      tel: "072132-6884",
      email: "SyQgT1GkRh@boXH.com",
      external_id: "Y39x3Xs6KbKOjUQYLsphxNcJX",
      page: 5734,
      per_page: 3013
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "-8y7-7-zKsxh-i-NcR0D-",
      private_money_id: "84adb392-9e81-4bfd-ac71-595667491e24",
      name: "tFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVC",
      postal_code: "9196121",
      address: "ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwl",
      tel: "0245704778",
      email: "4BT2IdLeJZ@DTCE.com",
      external_id: "i4ZW2q7YUbIlt759XkPd0Pd9Lm5F7",
      page: 3953,
      per_page: 5488
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      organization_code: "--0-L7--IG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      shop_external_id: "OKYuUs7zf9dIsiva1vYlz4sIXfB3e",
      organization_code: "HmGj-d15u-ph6a---Hk2-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      shop_email: "LymzX1iKAB@zsal.com",
      shop_external_id: "h9et3sJPwGPZVdfeHb",
      organization_code: "u88017XJ-B8-01N--"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      shop_tel: "042830-8605",
      shop_email: "ncEWYebt4R@UGRq.com",
      shop_external_id: "T3wcuceySCabxrgTXSxZbg1Ud9jBS",
      organization_code: "x3o"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      shop_address: "nO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZ",
      shop_tel: "0501-709580",
      shop_email: "3nVCPUHg3H@pQOk.com",
      shop_external_id: "zK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReM",
      organization_code: "G6-2-T-s--d5-wd4-e6mKeq-3o"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "qfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cU",
      shop_postal_code: "229-4168",
      shop_address: "EZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpI",
      shop_tel: "0787-3037-873",
      shop_email: "waJTi7OUK0@vKQ1.com",
      shop_external_id: "3gfO1QSAIUcA7AjS",
      organization_code: "hDw5-H6baOe-55okG-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      can_topup_private_money_ids: ["66b1bf08-6eb4-4a31-89b7-8424bf10a9e0", "9bd23843-046c-4e07-999f-75d6adb23850", "f800985a-db5c-40df-8261-fb64b35f64a9"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      private_money_ids: ["5c74ab8e-1843-4493-ba83-af32038bfd97", "2f938dfb-3eb1-406f-944c-b467188422b0", "8dbbd2da-3768-4b10-a030-93b80b31f9b2", "83feccf2-b4d3-4305-950d-e86dc8014023", "635b9e67-be0a-4854-8a9b-432ea0ad1e67", "c4481a5b-e987-49ec-ae29-aca433910309"],
      can_topup_private_money_ids: ["52e715ad-7074-48be-8e58-87287390ced5", "1d4252f6-deef-4390-b05e-44cdce27c897", "fad1e6bb-f541-413f-9725-03c5287c63af", "19621cab-7b7b-4ebf-9336-f3eeab1d4a99"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      organization_code: "39-0o-4iVgf",
      private_money_ids: ["dcc5bad5-96e9-453d-9f1e-e9c4becfec56", "3f6e336a-e979-424c-9838-89081e841925", "759594cb-ba7c-4cb2-adf8-e40b0eb71992", "2579b04e-f9a3-46f8-9f7e-2cd382af6b4e", "68cd4814-ef0a-4544-bb7e-9842751d1e41", "4036b942-22dc-4b91-b287-8428a06d081e", "bca90331-d06a-4805-9244-88bc337b5199", "d107ef96-af6e-4e44-a6d5-f316153c7cf4", "fcd3d140-c97d-4fb4-a55e-d2d9e04ba167"],
      can_topup_private_money_ids: ["a9a4f779-01da-4d00-a154-1ea01bd44ff3", "6a92b995-2369-4914-9248-e14fee0a516d", "8eae4ca2-0f9b-4aa4-a3c3-4008d482fdd3", "776a6540-12e8-4d6f-8fc5-3478555fe31c", "856f107b-7b23-4601-b820-e458666b2044", "5f799fba-468c-44fa-b76d-d45c84ad7475", "ec2b84bd-8aaa-485f-b040-9d8a5939c54e", "9c48a214-5f1e-45ed-b43d-b578db8c5372", "2330ade0-9b6f-42cb-8956-8c3c36f5c9dc"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      external_id: "k7sDu4lw8ZxL5ooBCUmbex",
      organization_code: "Y-A4-y-7",
      private_money_ids: ["66b94401-91cb-45b8-89a6-05232fb8fc4d", "09820aca-4a49-4e29-8203-c63b254b0b11", "44c1b2d7-a50d-4fa1-b128-abf658c9438d", "3ac1a0c2-501e-4131-92ad-e3a05697a6bd", "9bd6f2c3-db38-4ebe-97d1-542538847d23", "7ead4924-107c-4f0a-9b37-ee299ea3b001", "a36e9dae-1227-4435-a503-745af358388f", "bea8478f-ee71-47b2-bec3-cfd0e1fb65a5"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      email: "Eph5LyiHrK@KZHY.com",
      external_id: "eA6KMsRSBkbfNhFwjSSUkq",
      organization_code: "Rz-n--Pw1f-c-0D1a9w-7-",
      private_money_ids: ["09002d25-f392-4a5e-af17-343a376f552c", "2bc7ad5e-5319-4283-896a-c26580b039c1", "61e4d0c6-291e-49b8-a04e-edaacd62461b", "880c547e-4db8-4784-bd9c-c72452614c58", "aa7103db-555e-4f97-83f6-10951a42213a", "06c6209d-9452-4005-8559-188daa5037f9", "1eb77290-dace-497c-aa6a-58368a5aa9df", "65ddcfac-36ff-4f91-8006-0185821c43cc", "2a81243c-f516-457b-ba2f-7c9921bdc850", "7473d8ce-99ef-49c6-a214-dbd9c82d375e"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      tel: "0019-7734152",
      email: "bfAUj6MGuD@CQRg.com",
      external_id: "bbh69IfO",
      organization_code: "Y--PYyJc--8xcJ4YtFxT6Jyvs-j",
      private_money_ids: ["1540ac9d-fe7f-4170-a208-488bf38cfd12", "f51edb4c-f60a-4203-b12a-84cbd65e9186", "525929ec-3fcc-4db2-95b0-ce5349c2a599", "c5c9497d-0359-43a2-bb3b-2d3244b7185d", "1e880938-b29c-42c3-bd18-02c570aa5992", "1cdc6ec9-1e1b-4df0-a358-59f6a932fdfb"],
      can_topup_private_money_ids: ["d600a0fa-4232-4892-ac58-6eb0928a23a7", "038f90fd-cad7-45ac-bdc6-be94e7e9c312", "0c82b9e7-d4eb-4287-9554-14ca94221059"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      address: "HHOr63hjnglJCcSZdRjCOwyap0ls",
      tel: "078431590",
      email: "MU1TN0yX6w@xY6I.com",
      external_id: "oPyEr8klncfGkEwHB",
      organization_code: "ID5OJh1yuUHt9n-181",
      private_money_ids: ["0aabb158-4a4a-4fb3-9b07-7134c60401be", "692d1b02-cda9-4b96-8780-8803e42e8bff", "03ae9046-39fc-431f-995f-8cb213d594d3"],
      can_topup_private_money_ids: ["415071f2-dff0-4651-8390-f0662b2a425d", "c5e334fd-ea6d-4c39-96cc-577b76b60b65", "221cfa81-0930-4e60-8f1a-35fd2e8d6a2c", "8f0a1472-8820-41d3-9c50-bb9c9e705bd7", "bb4edf12-fdab-4899-ac7e-41f2c7163d7c", "96d6d290-0650-4413-abab-6e9215947c89", "6b22bcbc-e461-4438-a621-7198f3244ce2", "543db74c-e777-4aa1-a423-d48a8d6d30ea", "628e4b56-4087-4eac-a18f-f2531b037893", "fda332b9-844a-483f-8009-3e797f99c8e4"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45",
      postal_code: "408-1828",
      address: "qW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0F",
      tel: "0513595039",
      email: "0vDYNEWMfx@XSVH.com",
      external_id: "Y4YZdsEswklf9tWgAr9",
      organization_code: "-oz6-50bY",
      private_money_ids: ["77ea7c81-1436-46ec-9cdb-c74eb0b40bf7", "0245c836-b300-43b6-8259-96f192bcde73"],
      can_topup_private_money_ids: ["9c2c3f99-a00f-4d23-b27d-6fac3cb56886", "d6e59a72-5e00-4af9-805d-1780db700134", "78ccd645-4814-4d28-89d8-b1a1e25f8b30", "cd1cc0c8-d2b5-47d3-bbf3-0140203a46ea", "d48a7b26-9813-4c42-ab47-0390ed9ad8e9", "20cac7de-6cb2-4984-b674-6c33ba3a7a49"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "6eb30c0f-4395-4d20-960e-651246ed2ccc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      can_topup_private_money_ids: ["d3301f2d-71ff-4eae-9349-40a6609bfaf9", "5f505541-8736-4941-bdfd-4c89bbe6d96f", "08b73f2b-782b-4ab8-9c3f-df7bbb8a1c3a", "04d8339c-0632-40b1-98c5-f23ec65ce703", "7ffd962d-3bdd-4a04-b535-970adf92c283", "1e2ee80a-7be8-4ce3-b239-7d8b4abd38fc", "6fd09e5d-b870-467f-a776-71aea637d91d", "b90a0efe-5d88-4b34-a0f3-2f5acac61bc2"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      private_money_ids: ["c745440d-0d8a-4793-99b5-28778d9bb58e", "35f3aca2-243d-4d41-9e34-d74f78d1e5e7", "6aff83b2-72ff-4698-83eb-fd9f9bb962e4", "32e616dc-7712-47c1-99cc-f9dbc403b1d6", "d8a16754-a81d-4003-b8bb-06882133c31a", "4fd5670f-b153-464f-b3e1-ef3df748833d", "bec4b37c-a98d-4c53-b31e-add5c5c62e6d", "65886f64-2c16-4b5e-99fb-6b8d8458ed96", "b76dc0b0-76a5-4743-8c9f-cae315705c66", "abbc3d97-d63f-4f1c-af21-3a5f8ddef3d5"],
      can_topup_private_money_ids: ["1dd9a7a2-f40b-4b53-892f-eae4d85eecad", "4b14cac5-8c4a-41cd-87fb-409953f2c323", "fcfd5891-195c-4ba9-b908-b42a9840ef80", "1f67e313-96b8-48fa-9402-f0dfb5decf1b", "a9ab9843-2b8d-4a40-b604-e82317f692ef", "2fd9a974-b893-4697-8c86-d67098605753"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      external_id: "w3LnpbrPkZnN",
      private_money_ids: ["b8ec109f-d0a5-4250-ac9b-3916e4c32796", "0ae15cac-29d7-47cf-8ce0-7cb523097e7b", "a1fa08b5-a711-4a55-b77e-47a1a2066044", "a9d0b953-cabd-4c66-85d9-71331aa2a04c", "204f8012-d1e7-4a3f-bed7-59b58514e04d", "1baab15e-26a6-4bb2-8920-4040dcdf26f6", "fe592ea4-eb52-47b5-9d3a-1e32d6b54e2d", "fa768c88-177b-49c3-a7c9-d3936996bcc2", "057f9ca7-2894-4cf9-a5b3-4b88829f8faf", "48df5765-4323-467b-87cc-9695b7f804a1"],
      can_topup_private_money_ids: ["e6b165f9-2a73-4ba9-b1b2-6a9c01fc4302", "7f829dc8-a02d-478b-8f2a-00fd0e92bb2b", "dea1b9ba-d3c8-4590-8483-ab8f3bdadd46", "9fd33d1b-9519-4646-a5f1-1a01de1d3c4c"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      email: "oUtYmfM0XL@YceQ.com",
      external_id: "bY3jVYhbh4RW4SjcPHu2gI",
      private_money_ids: [],
      can_topup_private_money_ids: ["f92ffa0f-4c48-4890-8490-636cb33c8493", "e8565392-e39f-4943-a7f8-80bcda9efed9", "ecd8ee6c-9196-4346-9a5a-251a00f8aa7a", "52f0a0c2-ca24-4575-a4c8-e21e57cf88da", "672f7509-2838-46f4-9e7e-b0eacdd5fcba", "29722373-da68-4600-be36-f93881d5edd3", "de2f5663-aadd-43fc-9a84-63aaaa05ebba"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      tel: "049-05361",
      email: "9o0TcGJkIJ@gRMa.com",
      external_id: "hTjY4B83KCbssdnciBK2yKUyBpazsFHLyP",
      private_money_ids: ["3691a03d-81ef-4243-b12a-6cbfb7121957", "e7b8f193-1657-4af2-ba1d-e0e96c3d0912", "f0e284eb-73c8-4bb0-bf44-54f2dd789ea7", "d33a6b54-21a3-4be8-9f7c-88c95c430fa1", "4d759039-09ee-4664-8b09-78c3a33f61ff", "365cc841-a9d2-4158-87b9-67e907a125da", "7afd2ae8-1a80-458d-9549-3a776cc20ad5", "03c6943d-ba72-4973-9189-f0e0edffb40e"],
      can_topup_private_money_ids: ["fc8ecf55-c222-44e9-aa1f-7c0560e5390f", "483a3693-4126-495e-afb5-2d8f21d5b121", "37b9c735-fd91-4b3a-aee4-ddf97342d528", "4d9b993b-5709-4a3e-a9a0-3a8adc6a53c2", "cdbe40f8-8a58-46e2-8bd7-4859defd9e0d", "a227ea06-f8fd-433a-a8ac-e2f115b0c7c9", "d521ccd1-5163-4841-8426-de416244912e", "e649e923-9aca-421a-bce8-95d72ef834c6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      address: "wASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uv",
      tel: "04571208",
      email: "Ii4C82SzJJ@G4lO.com",
      external_id: "DNS2Ij7U5b72UTWbjXGfzCm",
      private_money_ids: [],
      can_topup_private_money_ids: ["f00f597d-de32-4c3f-9c0b-191ebc78a176", "64ec1ceb-f259-472b-ad86-b925c20f2b72", "55c31543-87f2-429b-977f-707e2e8182f7", "b0eff541-03b7-47c9-a2eb-e55c4be2b644", "fcbc166d-0cdf-40eb-bf27-5517899fa02d", "591f66b9-bf87-4ce1-9bbb-d2638e9443f2", "38929b0f-5afd-46fd-b874-20fdde07b2d8", "e08ed103-cb39-42fb-8a51-e614fa5782d3", "8325ccc8-e2f9-4169-862b-4f22fde3c66f", "bdcf9ef3-8ebd-42dc-8765-dea5d682c415"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      postal_code: "880-9595",
      address: "K8GIOW0PGU45uzPdd0dJeNNvUC0bqs1h",
      tel: "0846-4950-984",
      email: "evbrAQGpnY@omE2.com",
      external_id: "pD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2o",
      private_money_ids: [],
      can_topup_private_money_ids: ["07b75d79-57e0-451b-8972-7031b8ea0f6a", "04bd31e1-acb3-479e-baf5-6b83d541de81", "35ee8012-226d-4e8a-b69e-fc1755f1f0e5", "5b13e937-8237-40bb-b11d-d96b06bc832e", "e11522d1-a837-489e-ada2-017c8d771777", "f0426010-b25a-4bee-8a66-79c7f926b4cd", "f9c2a0d1-ec61-43f3-8331-24fff9f37179"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "3728d47f-c5f5-496a-a6ef-556538da78bc",
      name: "b1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKu",
      postal_code: "1646363",
      address: "KCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6Ns",
      tel: "0521-29103",
      email: "IK7BQ6Amsw@dAM3.com",
      external_id: "JrwVbs9pMx",
      private_money_ids: ["ad6d4501-57cd-48c3-b4bf-ea6857fa1c8c", "6d131169-d3fd-4bf6-bbb1-8f24d91c78e1", "020de332-0745-4e16-85c8-cb469e4cd36d", "60840aae-a29b-4add-9177-b1345a296e4f", "8fa8a9ed-544a-47f3-9c58-76dcdf310baf", "1c8a9886-9e72-4f61-815e-cda7dcdf0fa7"],
      can_topup_private_money_ids: ["20394f08-06ec-4e69-a292-ffc5ce8c1aff", "61f66ac2-fc05-4b19-96bb-3fd07c1f73ed", "6b2148c8-827f-4572-88b7-a2b6ca4e4640", "942fa36f-d2fe-4501-971c-7c0f59c9ff88", "840dd463-4891-4073-b293-e10edbaab9a9", "68454c37-8cf9-47bf-9af0-1c884d4025bc", "72e1d49f-2574-4d77-94cf-66c92ac534a6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 1992
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 7439,
      per_page: 3155
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "-pxt-zfw-hZk9-i52--OGq1-K-8o",
      page: 7075,
      per_page: 9099
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993",
      page: 8347
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993",
      per_page: 5435,
      page: 9296
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993",
      from: "2017-05-13T17:08:51.000000+09:00",
      to: "2025-06-02T12:11:06.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993",
      from: "2022-06-19T10:56:21.000000+09:00",
      to: "2016-04-03T10:22:37.000000+09:00",
      page: 907
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "e2e9b1b0-db90-40e9-92bc-e48f1bf10993",
      from: "2023-09-05T06:36:10.000000+09:00",
      to: "2025-07-13T20:31:52.000000+09:00",
      per_page: 5661,
      page: 7042
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      per_page: 3769
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      page: 5727,
      per_page: 546
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      to: "2022-03-28T00:00:35.000000+09:00",
      page: 5419,
      per_page: 1275
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      from: "2022-10-10T10:15:09.000000+09:00",
      to: "2017-11-18T23:55:30.000000+09:00",
      page: 3942,
      per_page: 4322
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      is_modified: true,
      from: "2019-03-09T19:38:07.000000+09:00",
      to: "2024-10-26T06:14:47.000000+09:00",
      page: 6676,
      per_page: 2346
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      type: "0rU",
      is_modified: true,
      from: "2024-05-30T20:29:53.000000+09:00",
      to: "2017-09-30T20:15:42.000000+09:00",
      page: 1622,
      per_page: 5756
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      receiver_customer_id: "d783a8bb-7d3a-4ffe-a0d4-81e00c4ae0e3",
      type: "nGDBsZu",
      is_modified: true,
      from: "2018-02-21T16:33:11.000000+09:00",
      to: "2022-12-23T09:50:02.000000+09:00",
      page: 3648,
      per_page: 8655
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
      sender_customer_id: "ed0e598d-4ef6-4f00-a9e6-459dd79243d3",
      receiver_customer_id: "ee2103b9-4341-47bc-aef5-d5e6d749657b",
      type: "ij",
      is_modified: false,
      from: "2021-07-08T16:22:22.000000+09:00",
      to: "2024-12-16T19:43:12.000000+09:00",
      page: 6877,
      per_page: 1042
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "7bb1c585-166f-40a4-a3e9-e7bad81755eb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "dfc5a242-9910-4e02-8acf-8107b715e8eb",
      shop_id: "852fd018-fd23-481b-9cc4-a333ad15e046",
      amount: 8463
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "dfc5a242-9910-4e02-8acf-8107b715e8eb",
      shop_id: "852fd018-fd23-481b-9cc4-a333ad15e046",
      amount: 8463,
      expires_in: 1911
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "dfc5a242-9910-4e02-8acf-8107b715e8eb",
      shop_id: "852fd018-fd23-481b-9cc4-a333ad15e046",
      amount: 8463,
      description: "naI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2",
      expires_in: 2760
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "34e67976-b4d3-4518-b73f-85965bab6090"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "9cf07c12-3205-408c-873e-fed1154bba7e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2fb52007-c055-4363-bbf2-3cbaf35659f5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2fb52007-c055-4363-bbf2-3cbaf35659f5",
      expires_in: 8154
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2fb52007-c055-4363-bbf2-3cbaf35659f5",
      description: "P4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKL",
      expires_in: 7844
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "2fb52007-c055-4363-bbf2-3cbaf35659f5",
      amount: 6023,
      description: "nZxaZi9iCa2kj9IDD4FLU",
      expires_in: 3878
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

