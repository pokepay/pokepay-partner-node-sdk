// DO NOT EDIT: File is generated by code generator.

import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfers, PaginatedTransaction, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, Check, Bill, AccountBalance, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfers, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, CreateTransaction, ListTransactions, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccounts> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "7c419418-aa59-4e5c-bbdc-7d8d6bf88c31"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_to: "2023-12-04T19:51:42.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_from: "2023-01-15T03:20:22.000000+09:00",
      expires_at_to: "2016-07-18T17:09:40.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      per_page: 2394,
      expires_at_from: "2025-01-10T04:46:02.000000+09:00",
      expires_at_to: "2024-05-11T03:04:24.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      page: 5477,
      per_page: 8394,
      expires_at_from: "2022-03-09T11:53:53.000000+09:00",
      expires_at_to: "2019-09-12T11:19:03.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_to: "2023-10-14T15:41:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_from: "2016-02-07T23:51:43.000000+09:00",
      expires_at_to: "2023-06-26T07:13:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      per_page: 1280,
      expires_at_from: "2017-09-19T20:56:50.000000+09:00",
      expires_at_to: "2021-05-01T18:07:44.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      page: 7954,
      per_page: 183,
      expires_at_from: "2017-07-15T07:24:12.000000+09:00",
      expires_at_to: "2018-02-11T05:24:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_to: "2023-02-11T07:47:16.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_from: "2020-01-01T12:00:03.000000+09:00",
      created_at_to: "2019-11-19T15:40:21.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      per_page: 834,
      created_at_from: "2018-07-13T05:22:58.000000+09:00",
      created_at_to: "2023-08-30T00:52:57.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      page: 9263,
      per_page: 4380,
      created_at_from: "2024-01-01T10:34:58.000000+09:00",
      created_at_to: "2019-09-03T13:00:52.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda",
      account_name: "9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRtt"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda",
      user_name: "S46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa6h6AAgB9jXehhbgsnyiHZ1n3qwk3r3QhfSXAhy6Q6NsE0G4ETHn0hBw4No1YXyGaN9eZjSIQORsTn19Lt83I",
      account_name: "Rfp6apsZzwHUgb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkp"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      created_at_to: "2017-05-02T07:13:19.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      created_at_from: "2019-05-07T16:43:54.000000+09:00",
      created_at_to: "2021-06-24T03:05:57.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      per_page: 758,
      created_at_from: "2019-07-01T07:29:17.000000+09:00",
      created_at_to: "2018-01-12T01:15:29.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      page: 7453,
      per_page: 6265,
      created_at_from: "2023-03-02T16:53:14.000000+09:00",
      created_at_to: "2023-06-11T02:57:46.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 8459,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 2642,
      upper_limit_amount: 4412,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "c5a081b5-2306-4dd5-9066-8fa43128c503",
      lower_limit_amount: 1373,
      upper_limit_amount: 612,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "KJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCbHnT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl",
      shop_id: "0e8432df-1229-4cb5-b6c3-68412cf8a548",
      lower_limit_amount: 8572,
      upper_limit_amount: 1896,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2024-10-18T17:18:17.000000+09:00",
      shop_name: "5u0YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlnsa7zuy1tusdwen7Z1wrrgdxWfKkMLwrBpORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36l34SSSOxW72gqSjd8QPzbjt0rt7UmerReZGbvGgvAZbyLJ1Lea6an4P1AnQALadFsAzgfKjbtuXgZDed",
      shop_id: "59cc8126-a2c9-44a8-a02e-662887d7527f",
      lower_limit_amount: 9162,
      upper_limit_amount: 7252,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2017-08-03T19:43:38.000000+09:00",
      created_to: "2018-08-22T12:36:17.000000+09:00",
      shop_name: "nOhGiwZBj5AvHdO2AtfcLabY2vDzXzQx3sP8V6IT9VFC5bo0KXfPASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exA",
      shop_id: "3a09933c-d79a-4c61-b223-697af9fa436c",
      lower_limit_amount: 7262,
      upper_limit_amount: 9879,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "rgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1wTnktL",
      created_from: "2020-10-13T07:39:34.000000+09:00",
      created_to: "2018-01-11T09:13:19.000000+09:00",
      shop_name: "BvD7caRgncONv8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47",
      shop_id: "fca68fdf-e379-4a07-a60b-6dc76fca1bef",
      lower_limit_amount: 9975,
      upper_limit_amount: 9191,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "0-NI-25d2-CwW",
      description: "JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy",
      created_from: "2023-08-21T17:45:32.000000+09:00",
      created_to: "2018-01-16T12:49:02.000000+09:00",
      shop_name: "5w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO",
      shop_id: "6d2c30b7-cb67-416b-87cf-29045c2afe97",
      lower_limit_amount: 796,
      upper_limit_amount: 915,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "05d0f501-30fb-4b6a-82ab-c4c34b5e2792",
      organization_code: "-Z10sqS2Z-V79-dtNkY7ifIRY",
      description: "BryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi",
      created_from: "2016-09-12T12:15:14.000000+09:00",
      created_to: "2025-03-18T03:16:46.000000+09:00",
      shop_name: "2IzWH9emhQ0",
      shop_id: "8dd978fb-fe7f-423d-8394-80f1ffcb1b3e",
      lower_limit_amount: 1270,
      upper_limit_amount: 8733,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "rhy",
      private_money_id: "b31a1952-5467-492d-b978-26a57064bdf8",
      organization_code: "8dDncR81k54kQ2",
      description: "AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iS",
      created_from: "2024-04-06T22:53:16.000000+09:00",
      created_to: "2024-05-14T16:49:08.000000+09:00",
      shop_name: "ZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsb",
      shop_id: "c8ec16a7-378f-4e71-98ba-edebe6006f57",
      lower_limit_amount: 5083,
      upper_limit_amount: 3998,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 7054,
      bill_id: "hxkWkSb",
      private_money_id: "8af5ccc3-262b-402c-a389-6851123c6dd6",
      organization_code: "km04YsY96x1-RN-c-",
      description: "0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3",
      created_from: "2017-05-06T05:18:03.000000+09:00",
      created_to: "2020-10-04T07:13:15.000000+09:00",
      shop_name: "JFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8J",
      shop_id: "c5282a47-573e-4664-8f0d-c7ba5ae4df99",
      lower_limit_amount: 9663,
      upper_limit_amount: 1089,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 9506,
      per_page: 1260,
      bill_id: "94khcXRAw",
      private_money_id: "11816a9b-b96c-4d0b-8618-83e0e1dc665b",
      organization_code: "6-nbWsiw",
      description: "3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14",
      created_from: "2023-10-17T23:24:23.000000+09:00",
      created_to: "2022-02-13T15:40:56.000000+09:00",
      shop_name: "bs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KA",
      shop_id: "e1400ce0-47d7-451c-9618-89c8bbd88a9a",
      lower_limit_amount: 2172,
      upper_limit_amount: 8069,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e",
      description: "fQtgxVhq9RVZQG6j5A2"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e",
      amount: 862,
      description: "pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      description: "wXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVF",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      amount: 9879,
      description: "b9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 5725
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 4848,
      description: "u3R9lJVdDaUu8gKI7uxlsX8tJTVN1"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 2143,
      is_onetime: true,
      description: "4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9960,
      usage_limit: 3414,
      is_onetime: true,
      description: "S"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 3353,
      expires_at: "2022-08-21T17:25:16.000000+09:00",
      usage_limit: 9717,
      is_onetime: false,
      description: "KN3fmfJoVUvvyWz4acD4Y"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9626,
      point_expires_at: "2020-12-07T07:33:42.000000+09:00",
      expires_at: "2024-02-22T15:56:45.000000+09:00",
      usage_limit: 5305,
      is_onetime: true,
      description: "59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 994,
      point_expires_in_days: 292,
      point_expires_at: "2020-12-07T16:59:41.000000+09:00",
      expires_at: "2017-08-14T05:37:38.000000+09:00",
      usage_limit: 4493,
      is_onetime: true,
      description: "CDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9174,
      bear_point_account: "5627e643-9947-4ea3-90b4-9afbfb197d73",
      point_expires_in_days: 2389,
      point_expires_at: "2020-07-23T19:05:31.000000+09:00",
      expires_at: "2016-10-24T02:27:19.000000+09:00",
      usage_limit: 8199,
      is_onetime: false,
      description: "FwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxd"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7483,
      point_amount: 5088
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 5982,
      point_amount: 9304,
      description: "F6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 1545,
      point_amount: 9480,
      is_onetime: true,
      description: "LjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7750,
      point_amount: 8964,
      usage_limit: 2092,
      is_onetime: true,
      description: "1a7"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9289,
      point_amount: 4294,
      expires_at: "2023-06-15T23:07:14.000000+09:00",
      usage_limit: 5207,
      is_onetime: false,
      description: "PubyeqITUoc5"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7568,
      point_amount: 2074,
      point_expires_at: "2015-11-08T17:04:41.000000+09:00",
      expires_at: "2021-08-30T17:57:47.000000+09:00",
      usage_limit: 271,
      is_onetime: false,
      description: "WI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQ"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 3740,
      point_amount: 935,
      point_expires_in_days: 318,
      point_expires_at: "2020-08-29T15:11:20.000000+09:00",
      expires_at: "2021-08-02T14:38:07.000000+09:00",
      usage_limit: 4871,
      is_onetime: false,
      description: "UPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOe"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 2753,
      point_amount: 8697,
      bear_point_account: "acd953b8-2978-4cd9-965d-4be75d49686d",
      point_expires_in_days: 4312,
      point_expires_at: "2023-09-14T04:18:46.000000+09:00",
      expires_at: "2021-05-02T05:23:56.000000+09:00",
      usage_limit: 1700,
      is_onetime: true,
      description: "nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilS"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7896
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 5516,
      description: "fgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb8"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7473,
      is_onetime: false,
      description: "ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUb"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 2876,
      usage_limit: 5574,
      is_onetime: false,
      description: "l1xg8SX1voG8Gydqo4fQ7D47J36"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 4633,
      expires_at: "2016-01-15T08:47:29.000000+09:00",
      usage_limit: 3487,
      is_onetime: true,
      description: "f2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2H"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7673,
      point_expires_at: "2016-04-22T11:52:10.000000+09:00",
      expires_at: "2016-03-11T15:22:48.000000+09:00",
      usage_limit: 1549,
      is_onetime: false,
      description: "rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQ"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 8169,
      point_expires_in_days: 3652,
      point_expires_at: "2018-12-31T16:31:21.000000+09:00",
      expires_at: "2022-01-28T23:09:55.000000+09:00",
      usage_limit: 8741,
      is_onetime: true,
      description: "R3czNdwQ9LziqjK5MdQ1lZMyARXVB9A"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 9500,
      bear_point_account: "ecd3b933-7732-4883-a094-c845b821ae53",
      point_expires_in_days: 2034,
      point_expires_at: "2017-06-10T01:31:40.000000+09:00",
      expires_at: "2022-05-21T19:15:20.000000+09:00",
      usage_limit: 8277,
      is_onetime: false,
      description: "E1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "8fK7SBxethCuCr4dBSWzD3agM"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["topup", "payment"],
      description: "CmtviHLHOBHoLHZ5Hyso5u9Osji"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: ["exchange_inflow"],
      description: "3o"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "37d793f6-50f7-450c-bbf0-c731e85e91d1",
      is_modified: true,
      types: [],
      description: "fTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQV"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "yBG23J4r5m-Y0T5RdV8-AWz7Z-arBk66",
      private_money_id: "5f7ece5d-8e1e-4c10-b46f-fd08df7f8bf6",
      is_modified: false,
      types: ["payment"],
      description: "f4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioD"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "ae278820-8bf0-4c66-a5d8-5300ae21310f",
      organization_code: "-551--RPEW--1N7-",
      private_money_id: "968c2e33-6349-4f80-b26b-a81b8f08e846",
      is_modified: false,
      types: [],
      description: "QksZB6ByT3"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "a174c088-526c-457f-9f29-0056a8b8f410",
      transaction_id: "d426d352-c951-4284-be37-22cff830132c",
      organization_code: "XWH-t5u1mKvDD26-e3-S79wquImT32p-",
      private_money_id: "0661f61d-34e2-4d0f-b11a-52aa845f9d24",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "GNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiB"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "PB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2I",
      terminal_id: "30329426-2752-4a09-a73f-d2668d8cbc7c",
      transaction_id: "02a9c1fb-936c-4111-96f3-8ff6163f2377",
      organization_code: "-I3w-bd-7d-g-b6iS32WX",
      private_money_id: "071ac1fb-3260-47c6-acb0-f5d9cd7b4bcb",
      is_modified: true,
      types: ["exchange_inflow", "payment", "topup"],
      description: "lCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURj"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "49b9c7d9-e808-4cfd-92bb-c5a010426ee1",
      customer_name: "H9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbM",
      terminal_id: "9fbf7b94-f6ea-4580-a147-533d4b3050e2",
      transaction_id: "446f6428-e871-4ac3-8818-aa0a38ec41e1",
      organization_code: "78-b6-7---2-684SFIq7br65V897-n",
      private_money_id: "aa18e04d-f933-4694-b0ec-516759b065ca",
      is_modified: true,
      types: ["payment", "topup", "exchange_inflow", "exchange_outflow"],
      description: "wzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "50c2d693-1828-4a9c-bd16-ca4b87248a21",
      customer_id: "30780644-adf6-4d82-9ab2-30502a96acf5",
      customer_name: "FKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJg",
      terminal_id: "922c4767-6dc9-4ccd-be2f-d0ad93ed9227",
      transaction_id: "51cedb89-ff19-4723-813d-7b15eef5d3b5",
      organization_code: "--0-",
      private_money_id: "71cf1133-99bc-4378-a7d6-9da362ac564a",
      is_modified: true,
      types: ["topup", "exchange_outflow", "payment"],
      description: "FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeO"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 7134,
      shop_id: "39fe6fdf-9647-4f13-bf9f-6a06741869b5",
      customer_id: "138080e3-6634-4485-9be2-e3d390a6b5a6",
      customer_name: "VBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH",
      terminal_id: "4e399835-b206-493b-adb6-79e771a94b2d",
      transaction_id: "08afd9dd-0a6e-4a9f-b923-e11535092675",
      organization_code: "l---QRTs---lt858-8ZqO",
      private_money_id: "2c724c4d-7e84-4d3f-b074-3b73c1d4f0f0",
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "BqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 4023,
      per_page: 7995,
      shop_id: "97fac9da-4a1c-4622-8e33-18e40b07f190",
      customer_id: "94ddd3d0-2715-40c7-98ca-2a96176e14d9",
      customer_name: "ssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMP",
      terminal_id: "b93ff5ec-63d9-4a22-99c1-f0ff53003a39",
      transaction_id: "a8d1bb64-0bb2-4d89-b48f-d77b920a7de7",
      organization_code: "Z2-G-4-2-LzD--2Q1m7-mdp-X7--l-6Y",
      private_money_id: "7c2bd41a-f1d0-45bc-b1a1-02108c4685a4",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "A4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZp"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2025-03-30T13:25:34.000000+09:00",
      page: 8283,
      per_page: 2322,
      shop_id: "62737187-aaa4-4b01-be8c-a13936d4d681",
      customer_id: "14d5ce3b-6a7c-4462-9ff5-213cb8512173",
      customer_name: "52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaD",
      terminal_id: "228c24d5-1f4d-4423-a721-4c617b71e9b8",
      transaction_id: "dd54d9c8-b55e-4c3b-bd1f-f5bd256a4e50",
      organization_code: "J3--X--9E-G-E2P-um-sY",
      private_money_id: "3aa18985-00cd-4a46-a10d-b9eb1e45bba4",
      is_modified: true,
      types: ["payment", "exchange_inflow", "exchange_outflow", "topup"],
      description: "ttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2024-07-22T11:16:32.000000+09:00",
      to: "2015-12-03T06:29:54.000000+09:00",
      page: 4403,
      per_page: 8576,
      shop_id: "4f60ae8c-1cd2-42ba-bf73-13e77342e07d",
      customer_id: "1984da7e-6ced-49fe-b470-38fc5f3bd71d",
      customer_name: "zruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdz",
      terminal_id: "181cba89-bcc8-4914-ae2e-94d3f896a5bb",
      transaction_id: "e7ee55b5-4981-44cb-abc9-c338061b0497",
      organization_code: "160SXNVg5HI0E--M3of8uvT3y-R",
      private_money_id: "70558694-cc11-440e-8740-148cb4fceabf",
      is_modified: true,
      types: ["payment"],
      description: "Xt2RyxOmHZB8"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      description: "VqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      point_expires_at: "2019-06-30T08:46:10.000000+09:00",
      description: "g4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKD"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      point_amount: 4444,
      point_expires_at: "2019-07-13T22:26:43.000000+09:00",
      description: "CYdf"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      money_amount: 2592,
      point_amount: 1096,
      point_expires_at: "2021-11-30T11:41:07.000000+09:00",
      description: "y6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEw"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      request_id: "a337952c-6a6c-4cb8-a981-1cdf06d87aa2"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      description: "3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMea",
      request_id: "253c57e9-d5a5-4593-94bf-87c5d4e411e4"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      point_expires_at: "2024-04-06T22:58:51.000000+09:00",
      description: "PRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUS",
      request_id: "5117d4a0-185d-4378-b22a-b09257933002"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      point_amount: 2143,
      point_expires_at: "2017-03-14T09:27:04.000000+09:00",
      description: "eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcH",
      request_id: "cc474057-b105-4273-8bda-3c8a04992c7f"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      money_amount: 6996,
      point_amount: 5804,
      point_expires_at: "2025-02-05T06:34:16.000000+09:00",
      description: "tZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fa",
      request_id: "60ac0a79-f78a-4006-be5a-689ce3188cfb"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      bear_point_shop_id: "b2c9875b-4223-482a-b227-361e9c265c1c",
      money_amount: 476,
      point_amount: 2995,
      point_expires_at: "2017-01-21T23:05:13.000000+09:00",
      description: "2vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM",
      request_id: "25d6f3b3-7ec4-432b-94d4-6f53c995e761"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "b358b55b-a0b7-4cf0-8aa5-14fbdb6ea820",
      customer_id: "1439a7ec-4b6f-46b8-8a9b-2e9ff4e2770e"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8c3d0553-5536-469a-8e92-6ba6b08a4e14",
      customer_id: "103c7aab-80ed-4c05-89d6-2be6e80d1bc3",
      private_money_id: "22f3f304-80ec-497f-9f82-1e38d897650b",
      amount: 8358
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8c3d0553-5536-469a-8e92-6ba6b08a4e14",
      customer_id: "103c7aab-80ed-4c05-89d6-2be6e80d1bc3",
      private_money_id: "22f3f304-80ec-497f-9f82-1e38d897650b",
      amount: 8358,
      request_id: "24c34c4f-8836-4e1c-9854-a79bab28b8f0"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "8c3d0553-5536-469a-8e92-6ba6b08a4e14",
      customer_id: "103c7aab-80ed-4c05-89d6-2be6e80d1bc3",
      private_money_id: "22f3f304-80ec-497f-9f82-1e38d897650b",
      amount: 8358,
      description: "GUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3Po",
      request_id: "63474c6c-907e-4aa9-be73-322520264a64"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      receiver_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      private_money_id: "22905154-736b-4651-b2b9-4c3f1dfc3f2b",
      amount: 7361
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      receiver_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      private_money_id: "22905154-736b-4651-b2b9-4c3f1dfc3f2b",
      amount: 7361,
      request_id: "84c0e434-ed25-4435-bcb8-f54ffdf462c6"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "32d4c003-a3e2-487b-b217-018aecfa7812",
      receiver_id: "1b984778-0255-4354-a2fe-f113e9606a70",
      private_money_id: "22905154-736b-4651-b2b9-4c3f1dfc3f2b",
      amount: 7361,
      description: "UiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabph",
      request_id: "5b3d87fc-6d79-4700-80ea-27d8fcc6c450"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "374ba533-dca0-4e14-ae78-cb750143b413",
      sender_private_money_id: "a294b6e8-83e8-4279-b9f5-0a470b84b7d2",
      receiver_private_money_id: "248394f3-3ace-4fce-9ecf-875d9d394cfc",
      amount: 8955
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "374ba533-dca0-4e14-ae78-cb750143b413",
      sender_private_money_id: "a294b6e8-83e8-4279-b9f5-0a470b84b7d2",
      receiver_private_money_id: "248394f3-3ace-4fce-9ecf-875d9d394cfc",
      amount: 8955,
      request_id: "daf9066d-8b5a-4a2e-9135-11ee65771283"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "374ba533-dca0-4e14-ae78-cb750143b413",
      sender_private_money_id: "a294b6e8-83e8-4279-b9f5-0a470b84b7d2",
      receiver_private_money_id: "248394f3-3ace-4fce-9ecf-875d9d394cfc",
      amount: 8955,
      description: "bPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgN",
      request_id: "1140d986-9100-42fa-83d7-4d83da258f2f"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "MVYN8tF",
      content: "iCK",
      request_id: "aN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "MVYN8tF",
      content: "iCK",
      request_id: "aN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx",
      description: "1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new GetTransaction({
      transaction_id: "0ef86e33-40c4-49ee-97b6-f54b5608c25b"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "a53c1d92-510e-4699-b1f3-0e989cdcc79f"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new RefundTransaction({
      transaction_id: "a53c1d92-510e-4699-b1f3-0e989cdcc79f",
      description: "DEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkb"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "zmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2w"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["exchange", "payment", "campaign"],
      description: "rqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFh"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["transfer", "topup"],
      transfer_types: ["topup", "coupon", "exchange", "transfer", "campaign"],
      description: "eHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SU"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: [],
      transfer_types: ["topup"],
      description: "Ubd6EIlmf"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "30a5a982-48e2-4cc9-97a5-571dea1dd1c2",
      is_modified: true,
      transaction_types: ["payment", "transfer", "exchange"],
      transfer_types: ["coupon", "campaign", "exchange", "payment"],
      description: "3aM3MFSn6Z9Xp0dYAIwKPnm62HiK7"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "f1c2eeb7-2535-44a0-8655-b1ea851422ca",
      private_money_id: "6ef3bb8d-3e4b-42d5-b7d7-5e96a1ec1c9b",
      is_modified: false,
      transaction_types: ["exchange", "topup", "payment", "transfer"],
      transfer_types: ["topup", "payment", "campaign", "coupon", "exchange", "transfer"],
      description: "u9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "aeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5",
      transaction_id: "0102373e-1571-4f09-a2d9-0c13d78081e6",
      private_money_id: "8624af60-b027-444b-a364-89f0780c2145",
      is_modified: true,
      transaction_types: ["exchange", "transfer"],
      transfer_types: ["payment"],
      description: "8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVo"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "bab7f487-c6c2-4d1a-935f-9a313c9cc3ec",
      customer_name: "uiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuK",
      transaction_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      private_money_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      is_modified: true,
      transaction_types: ["topup", "payment", "transfer"],
      transfer_types: ["transfer", "payment"],
      description: "Dhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTu",
      customer_id: "7144917b-1b3d-4e4f-93fa-67f248fd1212",
      customer_name: "wGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSs",
      transaction_id: "6d71e010-5ba8-4021-a48e-10a56a0df75e",
      private_money_id: "ee650165-45e3-4ef3-b085-09def054ecc5",
      is_modified: false,
      transaction_types: ["exchange", "topup"],
      transfer_types: [],
      description: "8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBa"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "cf0c9bc2-164f-402d-9ae4-7b82c14afb8e",
      shop_name: "WGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLe",
      customer_id: "683e521c-5a89-4ff4-b570-4ae9409745cc",
      customer_name: "JGKA08kU",
      transaction_id: "1514d43d-2b83-48cc-b427-b944135623d8",
      private_money_id: "49cf10ed-2837-4fed-bec7-06713e29469a",
      is_modified: true,
      transaction_types: [],
      transfer_types: ["topup", "coupon", "campaign", "payment", "exchange", "transfer"],
      description: "qhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 9777,
      shop_id: "b835df51-3e91-48aa-a068-7f7e042fbdef",
      shop_name: "jzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdi",
      customer_id: "0db6b3ee-d800-4d54-8a69-782471ce5a73",
      customer_name: "7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb",
      transaction_id: "5eb24cdc-9c37-4c70-b24b-e4f16ec81c29",
      private_money_id: "14cfa1d7-3bd8-44c8-af13-4027d9aca128",
      is_modified: false,
      transaction_types: ["transfer", "payment", "exchange"],
      transfer_types: ["exchange", "campaign", "payment", "transfer", "topup"],
      description: "y8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTY"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 5137,
      per_page: 2028,
      shop_id: "4e0554e9-5846-4245-9f49-371fdc837249",
      shop_name: "prQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrL",
      customer_id: "7efac275-38f2-4134-acf2-ceba6996a695",
      customer_name: "AgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK",
      transaction_id: "5afd0db1-785d-48fb-85d4-5797d56626da",
      private_money_id: "713d02df-bad6-45fd-b269-b22386f4452e",
      is_modified: false,
      transaction_types: ["payment", "topup", "exchange", "transfer"],
      transfer_types: ["transfer", "exchange"],
      description: "toEzw7Z1gM6fgx4uEjyIUvT"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2021-06-27T02:37:18.000000+09:00",
      page: 8562,
      per_page: 9582,
      shop_id: "6bbe6b19-df6c-4109-8fe1-bc283b639c9c",
      shop_name: "23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y",
      customer_id: "2083fb8a-e731-4b9b-8a16-46cf1d21542d",
      customer_name: "DoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761",
      transaction_id: "7cb5c7c9-220a-4ad7-80d3-bfb75a912ffa",
      private_money_id: "c72e51d4-8933-4b5e-8aa2-e608786dd1a6",
      is_modified: true,
      transaction_types: ["exchange", "topup"],
      transfer_types: [],
      description: "3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfL"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2017-09-08T00:26:13.000000+09:00",
      to: "2018-03-19T08:33:52.000000+09:00",
      page: 6224,
      per_page: 3009,
      shop_id: "67492e53-9ca3-4a07-bcee-9439d394f434",
      shop_name: "pSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtL",
      customer_id: "e55a324b-3ee7-46bb-8e8e-7dc632295026",
      customer_name: "IeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywY",
      transaction_id: "18c78153-d09a-4fc9-83f4-3fd9165498e3",
      private_money_id: "9c4639e2-3490-46c8-bbdc-fb6c0f56898a",
      is_modified: true,
      transaction_types: ["payment", "exchange", "topup", "transfer"],
      transfer_types: [],
      description: "54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5m"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      contact_name: "h9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_account_holder_name: "ｲ",
      contact_name: "s2aiyvcn732KUYpvpwWJTv2DUcm"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_account: "496",
      bank_account_holder_name: "ﾄ",
      contact_name: "fgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_account_type: "other",
      bank_account: "72307",
      bank_account_holder_name: "ﾅ",
      contact_name: "aLxa2QZma6CRo8nyJO9Y"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_branch_code: "609",
      bank_account_type: "current",
      bank_account: "474481",
      bank_account_holder_name: "ﾋ",
      contact_name: "wJ1udEIb7zDJ6KZTEk0mDRGqd8jGih"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_branch_name: "2zo2GN3",
      bank_branch_code: "713",
      bank_account_type: "saving",
      bank_account: "6",
      bank_account_holder_name: "｢",
      contact_name: "ZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLU"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_code: "8704",
      bank_branch_name: "rgoghS3pPHE574eeX1ksH4R2MgyW6",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "1828",
      bank_account_holder_name: " ",
      contact_name: "gzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjO"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "netJol0g7uhhZVwBBSB9NQuG198o4cE",
      name: "ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt9",
      private_money_ids: ["a4186e32-1dd9-4581-aa8e-3565c3f9458b", "ce658da7-be1e-4e10-be0e-044e6cf24dc7"],
      issuer_admin_user_email: "keRyZCxDwn@yuzP.com",
      member_admin_user_email: "dWfYw482S6@oHFs.com",
      bank_name: "EE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8z",
      bank_code: "",
      bank_branch_name: "5Zx6rdzZ6Kiw60EKpO7FL05ARS",
      bank_branch_code: "272",
      bank_account_type: "saving",
      bank_account: "89580",
      bank_account_holder_name: "3",
      contact_name: "w9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nC"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 1065
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 8260,
      per_page: 8580
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "GOYqsqY3PQB7j8S1LcJM",
      page: 3806,
      per_page: 2234
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "jV6h5DQ4TL@9sXb.com",
      external_id: "iutZ4wF",
      page: 3732,
      per_page: 840
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "089320-8657",
      email: "XLc6he8Kxv@6FPa.com",
      external_id: "Z",
      page: 6585,
      per_page: 6967
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "AxiybIUdjn2",
      tel: "03418712893",
      email: "FDiggsas4N@m4Pb.com",
      external_id: "qn0MLycuAIyd8Tc91YrDumA0",
      page: 9283,
      per_page: 6422
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "6575018",
      address: "u5hz8qu",
      tel: "0816-6347",
      email: "5YQseyms9Q@yHVo.com",
      external_id: "Eq6zLZyg3cEPs9bN7e1DJRmWCvXV5f",
      page: 8580,
      per_page: 6072
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKC",
      postal_code: "920-1309",
      address: "OvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06",
      tel: "06601725",
      email: "zeNINZktFZ@U0Jp.com",
      external_id: "pSrpNbF8O",
      page: 7341,
      per_page: 4056
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "eb60507a-787b-4ad9-8653-bac70daa8159",
      name: "bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1Wpw",
      postal_code: "8808845",
      address: "V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkzi",
      tel: "01-4883593",
      email: "NrFvlQBIX1@JBgn.com",
      external_id: "D1yLFlL5kbgs6xUgxf5sOo",
      page: 8099,
      per_page: 4455
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "t-5wtjozI-W--eh9DI-653G1K",
      private_money_id: "cd897ce5-67ec-4c21-b218-3e6cad3fb2e1",
      name: "3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6p",
      postal_code: "3216775",
      address: "prfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AH",
      tel: "0561-0559-7845",
      email: "Wi0UlM5hWR@opq8.com",
      external_id: "fm3QjwrUJDS6QIEgbG",
      page: 2502,
      per_page: 9298
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      organization_code: "0D"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      shop_external_id: "qVtFI20RqU84wWVej7KjR7PO79YO",
      organization_code: "PnaLu832"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      shop_email: "220xtZpZdQ@9ssl.com",
      shop_external_id: "YJHAlylPpV6xWxt7f2",
      organization_code: "36yrJrt62"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      shop_tel: "08407063",
      shop_email: "yiodipyOhB@LvJd.com",
      shop_external_id: "7msVClY",
      organization_code: "Dw-9-up-3Mr-n-n20"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      shop_address: "KOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQ",
      shop_tel: "04-93-4163",
      shop_email: "FvVtR4Fr5E@n7ms.com",
      shop_external_id: "KrOq6L",
      organization_code: "J0t-P8J41H-3-OxL7--IG"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "G1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
      shop_postal_code: "599-5342",
      shop_address: "7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY",
      shop_tel: "067-7523808",
      shop_email: "65gFI1eD4x@Ob3K.com",
      shop_external_id: "BBLymzX1",
      organization_code: "0E5n2Wq0RF2"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      can_topup_private_money_ids: ["56c173da-86fb-4ce2-898f-fee776527987", "849803fb-733e-4ec0-96a6-2231f236d2d5", "aab13f64-cf3f-4d11-b92f-4eea4e679c92", "52a71ac2-0b17-42d3-b943-61d1baae333d", "1d33ad5f-c69f-442a-8610-ae93f63b11bb", "bb6df880-3a17-4571-b636-62af17876854", "62747db7-2c1b-438a-a5c9-9a7e33aa9f21", "31b39651-2a20-4d8d-9882-b64839321daa"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      private_money_ids: ["66e9564a-8ea8-4add-a438-7bd368d4fa28", "5b89c116-b8a9-4914-97ee-a2a362b7c170"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      organization_code: "-mw-Z--pu-w1-Uz",
      private_money_ids: ["7ae39a7d-a59d-4cfa-bd35-9658f7ce5492", "396e67cd-0b8b-47a5-942e-d572999d59ed"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      external_id: "Y7bQCW9sPYWAKIaPAnl",
      organization_code: "S3E-MW--weNqQ-RO-rlG-ufJ8--L6q-",
      private_money_ids: ["71d96a89-05ff-4ad7-9ea7-a39dbd9e920c", "e62c8e6e-e425-475b-9fd2-5fef29efc713", "d76ba855-6432-4178-9219-dc170bc6520b", "6af2ea32-3f9b-4117-9e5d-fa112270b2be"],
      can_topup_private_money_ids: ["5df20958-f57e-4f1e-89cb-fb66c92d6f41", "76fc0a04-0c99-40cd-a8c2-b4866f27a8d3", "3267ce5b-2640-48e8-957e-3a280ad90b36"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      email: "I6qbRRo0Ks@KQjb.com",
      external_id: "FpDLYbMMvl",
      organization_code: "dj1-8--p7Qt-Owd",
      private_money_ids: ["f7453643-0b0a-4811-ad7c-ca99d399d0f0", "1b5c4179-22cc-453c-bef9-a39a42ccb65a"],
      can_topup_private_money_ids: ["009743b5-a7fd-4c30-a691-3510e5264873"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      tel: "015412-101",
      email: "ZzCUWIZlu3@nVCP.com",
      external_id: "Hg3HpQOkzK7LlGZ5l2cQL9",
      organization_code: "U--R---1g-D8c----QG6-2-T",
      private_money_ids: ["3667a2a0-8fb2-49f7-8fb8-d6a3db04f8ca", "667f2955-f2d3-432c-b654-f563b2624d26", "cb03ce4d-d64e-4304-b79c-54a4329971e6", "69ab5306-29e0-402c-b52a-ece49b886a9a"],
      can_topup_private_money_ids: ["14586284-343c-4c9c-b02f-c1bad7b7cecf", "7c5238e3-41c4-4c4e-a27d-e3b2915b983f", "7c41ed3f-bb09-435d-9d94-cc11d1a3fab6", "f0bcab9c-f1fb-4c08-ab17-29c5cc4ff8ab"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      address: "NJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpN",
      tel: "07471600-289",
      email: "xylFWlu94S@8FVS.com",
      external_id: "MY5BU",
      organization_code: "98QtGh2L-5a58UR-cXu-00LTES",
      private_money_ids: ["c3a4fd9e-1a8f-420a-b131-3e5aa4d03563", "5f350335-164a-442c-9df5-093551faa8dc", "08d42433-b9a5-4d55-9c0e-e71f2917bc59", "1782f5cf-c0c3-41f7-aca9-9d35b7a259c3", "f05521dd-d613-4424-b87c-b33b5143fea3", "9f33c540-ce72-47a0-85ad-8a984b491eab", "4940e23b-0e71-42b5-b94e-5209c8af26fd", "9a6d2a66-ec90-4368-b828-c5ce7a792e0f"],
      can_topup_private_money_ids: ["20719c65-8588-4035-ada6-68f27eb27e58", "16ce03c0-6fb0-459b-b256-20a14e7ceac3"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "jcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXS",
      postal_code: "0184488",
      address: "NlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K",
      tel: "08-3834212",
      email: "21jRDnDfUt@4YgI.com",
      external_id: "aTsiHOmcCShoExxXDzwmu0Nmtxr",
      organization_code: "e--Q-d0-sg-gLJF001dZY-A4-y-77Lj3",
      private_money_ids: ["b7e07e29-abc2-4603-bb11-b2d70b40a50d", "9b04bfa1-8331-4f28-b68d-a0c25280501e", "bf726131-bc52-4cad-a0bd-f2c35446db38", "47f29ebe-f3d7-46d1-a523-49240fa3107c", "6047df0a-b41b-4c37-a901-9daea9dd1227", "ced97435-b9a5-4d03-9a8f-478f9a53ee71", "b20ca7b2-a03e-49c3-90a5-b390f50ba945", "f210510a-25f0-47e8-bd3a-e6fe81268135", "e7d78a82-b7c0-4bcc-b9e9-4bc87fd8498f", "4ff4fdbe-c18b-42ad-b216-2407e774c6cb"],
      can_topup_private_money_ids: ["76655b9f-544b-4409-bb5a-c792662a2f3a", "64ca06c8-7640-4990-9995-d7a773e5b5e5", "0f914add-112c-4dc1-899d-8cb6dbf260bc", "ce09e05b-797c-4187-8b4d-44f3c5d17887"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "7433c307-2c5b-43d2-93c2-65067f7579bc"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      can_topup_private_money_ids: ["aaa980db-3aa4-4e88-9e4e-2b3c855a34a7", "73642fe8-41c6-4a77-bb2a-21ea24b7fc06", "4c215c53-d95b-4153-97dc-918240b1078b", "d2b7e555-43eb-49df-b116-510e86e5c785", "ec9e11ef-0df5-44c7-8bd6-00124e11cab2", "5b88c33a-f7bd-40d5-8c2a-3066681abd8d"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      private_money_ids: ["4795060b-12e6-4db3-8b7f-914cb8b56a94", "04086ee9-8e27-469c-ab4f-e00f5234cded", "747041b0-8728-4df5-82b6-fbcf65b58f64", "4aafd7d4-babd-4213-99f6-80d951a32931"],
      can_topup_private_money_ids: ["66729419-18d7-478c-8d83-149b011f45e1", "1f93510f-31c0-4936-824d-2b9abd167021", "1df4ae64-6305-4a17-8862-c96f95b332f2", "6114aba0-0139-4683-8201-438c5a7f67be", "09af1b3c-faa0-49de-a938-ee565e035993", "0224ccea-71a7-438b-9925-f3929d811a5e", "dd68deaf-a417-443a-ac5e-5319e889d283", "0f95e909-296a-4265-81c6-291eec3f79b8"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      external_id: "N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbf",
      private_money_ids: ["03903fd5-b08f-4081-aab6-875ea946437b"],
      can_topup_private_money_ids: ["dbbc0714-2b09-4375-89c4-bdae3cba20de", "efb883c3-36bf-4d27-91c0-87d2e8869567", "3c957a07-4cac-4d7d-a2e2-9bbeacf66eaa", "4048c268-511d-470c-99b6-62a498d4cd39", "fd6ecaa0-afc9-43e6-98a9-4a28b1952881", "fe05f98e-ff4f-4c1b-8ecf-502db63c13f1", "a4be4f64-5dc6-4976-93a8-56a58cd62005"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      email: "cvTYHWhMSc@2JtD.com",
      external_id: "SC",
      private_money_ids: ["a606702f-41dd-495d-bb3d-749c5de6f6f8", "2210e970-b8d8-4281-bec9-8b0099af6bfd", "43bb1342-8aa3-424b-aad8-62b0e2eec67d", "1a043577-8810-4662-8549-6dce4b5e33f4", "61b7b775-5518-49e8-9e1b-6993bade1609"],
      can_topup_private_money_ids: ["560cc03c-8cd7-4af9-934a-22db105f041b", "31119526-5aed-4ba9-80f8-2ae8260a9395", "f8d5af98-b75e-4792-a374-d3695b7b0ec5", "1540ac9d-fe7f-4170-a208-488bf38cfd12", "f51edb4c-f60a-4203-b12a-84cbd65e9186"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      tel: "02-992838",
      email: "EIpXvCz2lX@0WFg.com",
      external_id: "UTJYHHOr",
      private_money_ids: ["b5e21336-6fb3-47be-a891-726ae140617d", "3ee1b31d-38ee-4a1e-9567-f226f53dd95e", "681f5005-3801-48ec-8c4a-dea35b35ed43", "b6e61963-ef80-4bd3-8420-665adbe6d164"],
      can_topup_private_money_ids: ["3f3c133d-aeea-4c26-838b-6d4fc7a05390", "0f237877-10f9-4219-8661-02becd7f1770"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      address: "0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZ",
      tel: "095019-4305",
      email: "HLGCGYvgqb@qCId.com",
      external_id: "oPTy",
      private_money_ids: ["37697502-0c7f-4147-9166-b5285d43c26a", "3e32e683-d6c1-40ec-8f89-63f6fdc03025", "d7c87185-31e2-46dc-9000-92a7b4114e60", "33a93ccf-262a-4b77-82d2-4266e6ae8a74", "ad71ae99-aacc-4db3-ad9d-0a7b9390efd4", "1f87438f-bd66-47ca-a8d4-fafbba69d06a"],
      can_topup_private_money_ids: ["392e8773-4dae-41b9-9163-c9389341b451", "c57ccb1c-e53f-42ce-8fd5-1d474278763a", "5e0ea876-80af-406e-a874-cd3ae6b1ceab", "8ef880b1-4e13-429e-9579-14631a40583f"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      postal_code: "2648700",
      address: "e7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4",
      tel: "089853-0632",
      email: "Gi2vt3IVLu@jfoe.com",
      external_id: "XIyA6Ao821XE55hc29pv4sZBooZY5wA",
      private_money_ids: ["ce1ad74f-e5e7-43b2-9883-50eb72c8fd9f", "9bb962e4-16dc-4712-81d9-8bcc7f2ff9db", "c403b1d6-6754-481d-83f8-5dbbee350688", "2133c31a-670f-4153-8f73-0ce17206ef3d"],
      can_topup_private_money_ids: ["abe3e373-311e-4dd5-ad64-2c16c2f1db5e", "171219d9-4cfb-4b8d-96b0-76a514c0c743", "d6b252cc-df9f-4ae3-a697-d63f071c4f1c"]
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "5f0a42eb-d2fe-442f-a21f-340c4156811a",
      name: "UMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo5",
      postal_code: "1514989",
      address: "iBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy",
      tel: "0628055492",
      email: "RrjDmsbpR1@t9xm.com",
      external_id: "e9U0GR2pRvNpUL",
      private_money_ids: ["3f071b0d-0d6f-4c54-b236-57484099ca35", "a737fba0-5d19-4570-b2d9-77079ac7231d", "0d446b35-2859-46c2-a15d-619b4a1d4e7e", "e0c5c914-46cf-4402-9a64-d6944cdaa553", "8db6d6b1-e2ad-4f05-8ff3-d72e60a72899"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 112
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 3693,
      per_page: 7247
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "Oc-A2y--5",
      page: 1037,
      per_page: 5962
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2",
      page: 2644
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2",
      per_page: 4608,
      page: 1531
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2",
      from: "2021-01-14T15:01:38.000000+09:00",
      to: "2016-01-11T04:40:33.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2",
      from: "2024-12-21T12:29:20.000000+09:00",
      to: "2016-09-09T10:45:13.000000+09:00",
      page: 2218
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "9af7db69-5507-4b34-83b8-e007343062b2",
      from: "2021-01-22T17:30:06.000000+09:00",
      to: "2022-04-01T04:37:30.000000+09:00",
      per_page: 5967,
      page: 8447
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      per_page: 807
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      page: 5121,
      per_page: 7202
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      to: "2018-11-04T08:20:52.000000+09:00",
      page: 7990,
      per_page: 5859
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      from: "2019-12-05T18:09:45.000000+09:00",
      to: "2018-07-01T06:46:46.000000+09:00",
      page: 6101,
      per_page: 3672
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      is_modified: true,
      from: "2020-10-02T08:22:01.000000+09:00",
      to: "2022-05-02T23:26:09.000000+09:00",
      page: 4040,
      per_page: 6247
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      type: "CmZ2vk",
      is_modified: false,
      from: "2017-12-03T19:11:25.000000+09:00",
      to: "2023-03-15T02:25:49.000000+09:00",
      page: 5444,
      per_page: 2035
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      receiver_customer_id: "44db529b-ded7-487f-bef7-f541624103b7",
      type: "kDmk9acr8t",
      is_modified: false,
      from: "2020-05-25T10:48:37.000000+09:00",
      to: "2021-04-08T19:16:19.000000+09:00",
      page: 9749,
      per_page: 724
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "37cfd318-007b-4253-b249-07db64eaf29e",
      sender_customer_id: "8325ccc8-e2f9-4169-862b-4f22fde3c66f",
      receiver_customer_id: "bdcf9ef3-8ebd-42dc-8765-dea5d682c415",
      type: "HqYyK8GIO",
      is_modified: false,
      from: "2018-12-04T12:29:01.000000+09:00",
      to: "2021-04-15T12:44:40.000000+09:00",
      page: 7178,
      per_page: 9
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "975e10bc-5d92-42c7-add5-eeb4b1466735"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "201f649f-2624-40f5-bafd-cf5016c350e4",
      shop_id: "1422b8dc-d2e4-4fff-9298-12302d4952e4",
      amount: 6659
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "201f649f-2624-40f5-bafd-cf5016c350e4",
      shop_id: "1422b8dc-d2e4-4fff-9298-12302d4952e4",
      amount: 6659,
      expires_in: 9635
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "201f649f-2624-40f5-bafd-cf5016c350e4",
      shop_id: "1422b8dc-d2e4-4fff-9298-12302d4952e4",
      amount: 6659,
      description: "NNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1",
      expires_in: 2143
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "51f8af0f-2344-4f9b-99dc-8a0ec00dbdaf"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "6e55a5ad-c4f1-413c-b285-c8803b47999e"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "19b64f55-23bd-4092-adcc-9badeabedffb"
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "19b64f55-23bd-4092-adcc-9badeabedffb",
      expires_in: 1210
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "19b64f55-23bd-4092-adcc-9badeabedffb",
      description: "x0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlR",
      expires_in: 3011
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "19b64f55-23bd-4092-adcc-9badeabedffb",
      amount: 7202,
      description: "xfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8",
      expires_in: 7793
    }));
    status = response.code;
  } catch (e) {
    status = e.response.status;
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

