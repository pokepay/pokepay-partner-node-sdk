// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedCampaigns, Campaign, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfersV2, PaginatedTransfers, PaginatedTransactionV2, PaginatedTransaction, PrivateMoneySummary, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, TransactionDetail, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, Check, Bill, AccountBalance, AccountDeleted, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCampaign, GetCampaign, ListCampaigns, CreateCampaign, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneySummary, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfersV2, ListTransfers, RefundExternalTransaction, CreateExternalTransaction, GetTransactionByRequestId, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateCpmTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, ListTransactionsV2, CreateTransaction, ListTransactions, GetCpmToken, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, DeleteAccount, UpdateAccount, GetAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      status: "pre-closed",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "553fd4da-7231-4218-aeb3-2d714f66622b",
      is_suspended: false,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "78993f7e-a95e-4e84-8ce0-7a7b0adcc451",
      cashback: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a",
      expires_at_to: "2021-05-19T16:07:19.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a",
      expires_at_from: "2018-05-08T14:00:21.000000+09:00",
      expires_at_to: "2019-08-29T14:43:17.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a",
      per_page: 9044,
      expires_at_from: "2015-11-13T07:54:24.000000+09:00",
      expires_at_to: "2023-12-17T09:40:00.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "124a3fe8-1e88-4803-9195-15bbd1722f1a",
      page: 5673,
      per_page: 5586,
      expires_at_from: "2022-06-09T18:09:43.000000+09:00",
      expires_at_to: "2017-11-03T08:44:37.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd",
      expires_at_to: "2016-12-05T14:11:55.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd",
      expires_at_from: "2024-05-08T18:48:53.000000+09:00",
      expires_at_to: "2025-01-11T13:02:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd",
      per_page: 6193,
      expires_at_from: "2019-01-16T17:00:54.000000+09:00",
      expires_at_to: "2022-10-20T15:33:42.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "1395c3b0-3227-4847-b485-d25fcda949fd",
      page: 3229,
      per_page: 3545,
      expires_at_from: "2019-04-01T22:27:42.000000+09:00",
      expires_at_to: "2018-06-03T18:12:31.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "f39e0dc7-ebbf-4161-a34e-e312bce444b9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
      external_id: "eZjSIQORsTn19Lt83IRfp6apsZzw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
      account_name: "Ugb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6",
      external_id: "i2f3OojTDEk0fitYgK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "f39e0dc7-ebbf-4161-a34e-e312bce444b9",
      status: "suspended",
      account_name: "zfXu0N7ZPQ6Ey6Tu3B",
      external_id: "U56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyND"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      email: "xfr4xKRRC5@UPfd.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      tel: "09-1302581",
      email: "hDpkltxfpG@BgKz.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      external_id: "LBWMCY",
      tel: "0680922280",
      email: "nT3R8fCd81@15Vz.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      status: "pre-closed",
      external_id: "SNwUPij0JCeKaErwIngTct5VctC8ahSG576",
      tel: "029-20-627",
      email: "hNuqsd2aOE@u5ug.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      is_suspended: false,
      status: "suspended",
      external_id: "0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw",
      tel: "0302-887",
      email: "IImkvl5vCA@Hh7Q.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      created_at_to: "2017-11-11T00:03:31.000000+09:00",
      is_suspended: false,
      status: "active",
      external_id: "YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlns",
      tel: "0775-9145-4752",
      email: "n7Z1wrrgdx@WfKk.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      created_at_from: "2021-08-28T21:00:04.000000+09:00",
      created_at_to: "2015-11-25T18:11:51.000000+09:00",
      is_suspended: true,
      status: "pre-closed",
      external_id: "pOR",
      tel: "00807-2523",
      email: "d4nadmeyKn@qGyq.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      per_page: 4016,
      created_at_from: "2018-03-12T00:01:50.000000+09:00",
      created_at_to: "2021-12-03T04:41:26.000000+09:00",
      is_suspended: false,
      status: "active",
      external_id: "36l34SSSOxW72gqSjd8Q",
      tel: "04040475",
      email: "merReZGbvG@gvAZ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5a434e63-82f5-4d3b-9357-6d0bf3dd402a",
      page: 1123,
      per_page: 890,
      created_at_from: "2021-11-19T16:34:34.000000+09:00",
      created_at_to: "2020-01-07T05:35:58.000000+09:00",
      is_suspended: false,
      status: "pre-closed",
      external_id: "Lea6an4P1AnQALadFsAzgfKjbtuXgZDedI",
      tel: "08-40087872",
      email: "iwZBj5AvHd@O2At.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c2634781-e592-4c94-87e6-1be01b1d99a9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c2634781-e592-4c94-87e6-1be01b1d99a9",
      external_id: "LabY2vDzXzQx3sP8V6IT9VFC5bo0KXfPASw8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c2634781-e592-4c94-87e6-1be01b1d99a9",
      account_name: "PQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exAarzlUllrgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1",
      external_id: "nktL8AYkBvD7caRgncONv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "c2634781-e592-4c94-87e6-1be01b1d99a9",
      user_name: "8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1",
      account_name: "d1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj",
      external_id: "inGr0IGEeLzU5m"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
      created_at_to: "2022-08-14T03:51:44.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
      created_at_from: "2019-11-10T12:31:26.000000+09:00",
      created_at_to: "2019-03-02T06:47:02.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
      per_page: 5016,
      created_at_from: "2021-02-21T01:26:31.000000+09:00",
      created_at_to: "2021-11-11T09:43:58.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "122f7c99-ba73-409e-bcaf-ca2e6fa9d12e",
      page: 878,
      per_page: 4128,
      created_at_from: "2016-03-21T11:12:51.000000+09:00",
      created_at_to: "2023-10-10T08:53:50.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 7359,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 4602,
      upper_limit_amount: 4086,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "2e5af513-ed9a-4083-b833-b54d02d47b19",
      lower_limit_amount: 8071,
      upper_limit_amount: 9515,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "oePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9",
      shop_id: "0c7a21e5-557f-4a6d-955b-517b3dd30ee8",
      lower_limit_amount: 209,
      upper_limit_amount: 816,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2016-09-22T06:07:05.000000+09:00",
      shop_name: "qvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcO",
      shop_id: "948773a6-ae75-4949-97d6-b2718a61833c",
      lower_limit_amount: 3549,
      upper_limit_amount: 2078,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2017-04-21T06:11:13.000000+09:00",
      created_to: "2022-12-18T16:25:01.000000+09:00",
      shop_name: "93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1I",
      shop_id: "6272f9c9-0408-48a5-9d98-2915c1561fc7",
      lower_limit_amount: 5847,
      upper_limit_amount: 708,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5",
      created_from: "2022-08-09T13:54:34.000000+09:00",
      created_to: "2017-05-06T05:18:03.000000+09:00",
      shop_name: "fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cpkGDNNhHR4jcwCrCw",
      shop_id: "ae4a9f70-fa3e-4f8f-96ec-d3709e06d89b",
      lower_limit_amount: 8058,
      upper_limit_amount: 2251,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "404Hb--O42M",
      description: "uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi",
      created_from: "2023-06-15T17:06:17.000000+09:00",
      created_to: "2023-05-29T14:48:38.000000+09:00",
      shop_name: "YKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJ",
      shop_id: "a4e25bd6-be64-40c4-a1be-1ed5eaa685a2",
      lower_limit_amount: 9117,
      upper_limit_amount: 8053,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "716cc767-18cb-4049-b7f5-b82c3175b4f8",
      organization_code: "-ysR--VE0l4w7-6-Wyr-iTkm9kUT0GB",
      description: "Z8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1E",
      created_from: "2021-09-15T09:27:20.000000+09:00",
      created_to: "2019-06-27T17:44:43.000000+09:00",
      shop_name: "AmGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN59s59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraY",
      shop_id: "28ed2a08-e8f9-4ed6-9ffe-24291ea30b55",
      lower_limit_amount: 6511,
      upper_limit_amount: 4296,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "Sd144X",
      private_money_id: "e78721b7-4691-46da-8571-73a2a1c7c8b8",
      organization_code: "31-Uf7-6-z-zknx92q-1x",
      description: "sz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkp",
      created_from: "2024-05-07T23:27:04.000000+09:00",
      created_to: "2025-03-31T00:14:26.000000+09:00",
      shop_name: "bqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5P",
      shop_id: "42dc7102-d24d-40e4-96c4-a4f5a3dbec42",
      lower_limit_amount: 2291,
      upper_limit_amount: 3021,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 7335,
      bill_id: "4",
      private_money_id: "676cfe50-fbd4-45e6-9ddd-57bbebbd2038",
      organization_code: "-1J46-L17Hqg--PKp90",
      description: "eqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7",
      created_from: "2019-03-10T19:56:29.000000+09:00",
      created_to: "2024-05-06T13:46:18.000000+09:00",
      shop_name: "GOWj7LV4",
      shop_id: "4755ab3c-64f6-4635-bdaa-a7a57e89da79",
      lower_limit_amount: 6767,
      upper_limit_amount: 9588,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 9150,
      per_page: 5993,
      bill_id: "j2v",
      private_money_id: "2a50f1eb-066a-4d69-ab5c-a493546c70a6",
      organization_code: "81m-q--4s8Omc8L08V3--9",
      description: "4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc5",
      created_from: "2023-07-02T11:25:11.000000+09:00",
      created_to: "2015-11-08T17:04:41.000000+09:00",
      shop_name: "HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXO",
      shop_id: "6abb6696-1d0c-4d3e-a5c1-3ca99e0575ac",
      lower_limit_amount: 8697,
      upper_limit_amount: 5048,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "99dcacd9-5096-4d5d-a76d-7d532be62f04",
      shop_id: "86feaa53-d0d7-461e-aee4-902ed59606a4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "99dcacd9-5096-4d5d-a76d-7d532be62f04",
      shop_id: "86feaa53-d0d7-461e-aee4-902ed59606a4",
      description: "nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "99dcacd9-5096-4d5d-a76d-7d532be62f04",
      shop_id: "86feaa53-d0d7-461e-aee4-902ed59606a4",
      amount: 1850.0,
      description: "1kMYSkzLYWcqyBEPqq6jXo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "011b504d-9950-476f-89b5-74640faf5c82"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "011b504d-9950-476f-89b5-74640faf5c82",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "011b504d-9950-476f-89b5-74640faf5c82",
      description: "tAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62Eyf",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "011b504d-9950-476f-89b5-74640faf5c82",
      amount: 2605.0,
      description: "yRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pL",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 6406.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 7560.0,
      description: "6TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 8205.0,
      is_onetime: true,
      description: "HweV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 2950.0,
      usage_limit: 4601,
      is_onetime: false,
      description: "DqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 9233.0,
      expires_at: "2024-08-13T01:01:15.000000+09:00",
      usage_limit: 8368,
      is_onetime: false,
      description: "9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 721.0,
      point_expires_at: "2023-06-18T12:50:23.000000+09:00",
      expires_at: "2022-06-13T19:26:25.000000+09:00",
      usage_limit: 7698,
      is_onetime: true,
      description: "NC6SfrLsEgbwDrafzykU4qQWw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 7086.0,
      point_expires_in_days: 9379,
      point_expires_at: "2018-12-03T12:37:48.000000+09:00",
      expires_at: "2024-08-24T00:57:08.000000+09:00",
      usage_limit: 1768,
      is_onetime: true,
      description: "7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 5780.0,
      bear_point_account: "c1af4784-46d4-4052-9fd1-04a3fa8985d6",
      point_expires_in_days: 6945,
      point_expires_at: "2023-07-25T12:28:26.000000+09:00",
      expires_at: "2016-06-03T17:04:55.000000+09:00",
      usage_limit: 7755,
      is_onetime: true,
      description: "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 7999.0,
      point_amount: 6753.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 8837.0,
      point_amount: 7734.0,
      description: "9IRy95uKnYj6aDVb3qDkr4z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 2007.0,
      point_amount: 5825.0,
      is_onetime: false,
      description: "7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 9899.0,
      point_amount: 9349.0,
      usage_limit: 8408,
      is_onetime: false,
      description: "6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 9908.0,
      point_amount: 8704.0,
      expires_at: "2019-04-26T10:28:52.000000+09:00",
      usage_limit: 8888,
      is_onetime: true,
      description: "hKD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 2375.0,
      point_amount: 1634.0,
      point_expires_at: "2019-01-28T23:19:44.000000+09:00",
      expires_at: "2017-04-01T10:05:47.000000+09:00",
      usage_limit: 8306,
      is_onetime: true,
      description: "6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 59.0,
      point_amount: 6448.0,
      point_expires_in_days: 3901,
      point_expires_at: "2019-05-31T03:19:07.000000+09:00",
      expires_at: "2023-03-07T18:36:03.000000+09:00",
      usage_limit: 3273,
      is_onetime: true,
      description: "gud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0Fc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      money_amount: 5589.0,
      point_amount: 4338.0,
      bear_point_account: "a334af1a-2e28-4ac2-9f0d-d5c86ad58a8e",
      point_expires_in_days: 1744,
      point_expires_at: "2024-08-25T06:38:19.000000+09:00",
      expires_at: "2023-11-25T04:31:05.000000+09:00",
      usage_limit: 9411,
      is_onetime: false,
      description: "s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9AR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 653.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 5893.0,
      description: "ntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71k"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 9193.0,
      is_onetime: true,
      description: "HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 6236.0,
      usage_limit: 1020,
      is_onetime: false,
      description: "qv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 6692.0,
      expires_at: "2024-02-12T12:16:30.000000+09:00",
      usage_limit: 7484,
      is_onetime: false,
      description: "pGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 9270.0,
      point_expires_at: "2018-07-24T11:01:23.000000+09:00",
      expires_at: "2017-09-13T10:22:26.000000+09:00",
      usage_limit: 4324,
      is_onetime: true,
      description: "6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 8165.0,
      point_expires_in_days: 3911,
      point_expires_at: "2017-07-19T23:16:18.000000+09:00",
      expires_at: "2023-11-29T12:55:51.000000+09:00",
      usage_limit: 109,
      is_onetime: false,
      description: "6KgKFTgUMIqeaKPydQtxKkP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
      point_amount: 320.0,
      bear_point_account: "4533aa8a-86c5-4415-bea8-1969ccba28df",
      point_expires_in_days: 3002,
      point_expires_at: "2021-06-16T18:57:59.000000+09:00",
      expires_at: "2025-02-10T15:11:10.000000+09:00",
      usage_limit: 1661,
      is_onetime: false,
      description: "2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "VBGp3Ank6BTTvgxHzzgdLI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "gPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: [],
      description: "R9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7s"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: true,
      types: ["topup", "payment"],
      description: "5S2r82nr4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "889e4085-0dae-4c43-a83e-3e2dcfa49e8d",
      is_modified: true,
      types: ["payment", "exchange_inflow", "expire", "cashback"],
      description: "C6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "fTKPUe1w6KO-cq3kHfugs-gv0j-5-",
      private_money_id: "9c616828-afa0-48b1-9e9f-37c8022ec883",
      is_modified: true,
      types: ["payment"],
      description: "wM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdse"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "51TT",
      organization_code: "-iLW-Q-",
      private_money_id: "2214ddc3-4de3-41c8-accd-75e1f5fddc40",
      is_modified: true,
      types: [],
      description: "OIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "ff130851-0143-4076-8919-72817621a07b",
      transaction_id: "LohtP7Y",
      organization_code: "K--lYK5fg-EsaGa-K21r-d--",
      private_money_id: "2aa3cb3e-3402-46a1-a5d4-d2acf092321a",
      is_modified: true,
      types: ["exchange_inflow", "topup", "expire", "exchange_outflow", "cashback", "payment"],
      description: "EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "LyZpFNZ79b",
      terminal_id: "ef4dd3df-08f5-413c-b380-c9dbf36f898b",
      transaction_id: "5",
      organization_code: "----Q3I6AC--de064H-xR-ip39p",
      private_money_id: "a8f139c5-42da-42af-8d7f-e5250fb628c6",
      is_modified: false,
      types: ["topup", "expire"],
      description: "16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "52845131-cd8d-44da-95fc-9793404d60e1",
      customer_name: "Wwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF",
      terminal_id: "eb701a31-5958-444f-86cd-02f7c81c4c1e",
      transaction_id: "bCbRi8M",
      organization_code: "4T-9Hu-9WU487tN-3",
      private_money_id: "a3e101fb-a33d-40fe-b494-31d6ffea551c",
      is_modified: false,
      types: ["expire", "cashback", "payment"],
      description: "2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "da583a28-d396-41fa-89c8-e914fc2c9aae",
      customer_id: "3167022e-94d3-45bb-b581-a4cbe2becbab",
      customer_name: "84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCA",
      terminal_id: "aff597e8-7349-4c16-b8f7-1d08a8caabe5",
      transaction_id: "f4mhVFw56",
      organization_code: "X-ht--D-8v77zAmT71--GS-Sh23-x-",
      private_money_id: "2e41e3ce-0b8e-45dc-975e-5a9f80c6650e",
      is_modified: false,
      types: ["payment", "expire", "exchange_outflow", "exchange_inflow", "cashback", "topup"],
      description: "mOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 9833,
      shop_id: "893ca648-9656-4126-85ea-7bf53a455b12",
      customer_id: "b4242a8f-eb46-468b-b305-a61104f9a6eb",
      customer_name: "UixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx2",
      terminal_id: "d1f39f2a-b092-4002-a45f-bc20449d9481",
      transaction_id: "eVHz2wOx",
      organization_code: "2mo7-c--6k-6HA3IhSPF--Ue-xT-4af",
      private_money_id: "89d58316-8711-4ff4-9ad8-f03910cfe9b7",
      is_modified: false,
      types: ["payment", "topup", "exchange_outflow", "expire"],
      description: "SO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 5431,
      per_page: 7439,
      shop_id: "41381a92-6ba6-4e14-abed-0c0585582ec9",
      customer_id: "8e3cadd6-2be6-4bc3-84ec-a97fc9a648df",
      customer_name: "8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv",
      terminal_id: "2e906136-e590-46be-8f30-c81a4f25116e",
      transaction_id: "aLFwVLI",
      organization_code: "-d4---1DT-q-j3E-2-2vc3u-SL",
      private_money_id: "fb6afb43-dcc1-4434-a535-d87cfb9da6b8",
      is_modified: false,
      types: ["payment", "exchange_outflow", "expire"],
      description: "0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2020-11-17T13:21:59.000000+09:00",
      page: 1829,
      per_page: 1879,
      shop_id: "9a784064-d673-47ae-88c4-6c21bce9089c",
      customer_id: "42a65923-5789-4806-99b1-ce48e372a261",
      customer_name: "rFGRZ0Q28L",
      terminal_id: "ed1c8790-2e79-4ef7-9a8d-b3d6c7e79e47",
      transaction_id: "z2sIRx",
      organization_code: "B0za8tu8TiZH341O",
      private_money_id: "65771283-7b8b-4f8d-a2e0-bcd0b6d3fb16",
      is_modified: false,
      types: ["exchange_outflow", "expire"],
      description: "irLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2019-01-09T04:25:26.000000+09:00",
      to: "2025-07-22T16:47:29.000000+09:00",
      page: 7288,
      per_page: 959,
      shop_id: "3334017d-b35f-4586-a3c5-137d95302a29",
      customer_id: "da76d485-3f0d-4766-9094-9a11464fb66d",
      customer_name: "yakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A",
      terminal_id: "777f1cb8-c588-4fa3-8b86-315ef58efeae",
      transaction_id: "FHDE0",
      organization_code: "FmL9wT--116J-i9-wg-z-3",
      private_money_id: "c3f6c7db-749b-4fbc-a543-b1dc3b764f28",
      is_modified: false,
      types: ["cashback", "exchange_inflow", "exchange_outflow", "expire"],
      description: "19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8J"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "4c465e88-d17e-4002-a4e2-477788aff273",
      customer_id: "1c28c6a2-9817-43a9-956a-238e90da7f9f",
      private_money_id: "962b71c0-75c6-401f-a872-db3acf509f2d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "4c465e88-d17e-4002-a4e2-477788aff273",
      customer_id: "1c28c6a2-9817-43a9-956a-238e90da7f9f",
      private_money_id: "962b71c0-75c6-401f-a872-db3acf509f2d",
      description: "NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4G"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "4c465e88-d17e-4002-a4e2-477788aff273",
      customer_id: "1c28c6a2-9817-43a9-956a-238e90da7f9f",
      private_money_id: "962b71c0-75c6-401f-a872-db3acf509f2d",
      point_expires_at: "2023-08-29T17:28:41.000000+09:00",
      description: "B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "4c465e88-d17e-4002-a4e2-477788aff273",
      customer_id: "1c28c6a2-9817-43a9-956a-238e90da7f9f",
      private_money_id: "962b71c0-75c6-401f-a872-db3acf509f2d",
      point_amount: 3812,
      point_expires_at: "2021-03-01T15:33:42.000000+09:00",
      description: "ZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "4c465e88-d17e-4002-a4e2-477788aff273",
      customer_id: "1c28c6a2-9817-43a9-956a-238e90da7f9f",
      private_money_id: "962b71c0-75c6-401f-a872-db3acf509f2d",
      money_amount: 2767,
      point_amount: 7938,
      point_expires_at: "2019-12-07T07:28:16.000000+09:00",
      description: "1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      per_page: 50
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      prev_page_cursor_id: "0d5bccbe-5203-4e2c-bc68-3b22871826fd",
      per_page: 829
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      next_page_cursor_id: "25cdd41c-d1b3-43de-a181-b0cdfb355833",
      prev_page_cursor_id: "ba561d3f-444d-41c6-ac0b-5153fdaa47ee",
      per_page: 311
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      to: "2024-11-24T20:43:14.000000+09:00",
      next_page_cursor_id: "723e7139-539d-4cfe-afd8-5198e210f85b",
      prev_page_cursor_id: "b2d00103-db70-4630-bae4-a60b204c7059",
      per_page: 450
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      from: "2019-12-14T02:16:49.000000+09:00",
      to: "2022-10-28T16:40:39.000000+09:00",
      next_page_cursor_id: "d3f4776e-2aed-40b6-bbb2-cc97372e71c8",
      prev_page_cursor_id: "3a8fca69-a00e-4b2f-8c1e-754bb23030ba",
      per_page: 824
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      types: ["expire", "payment"],
      from: "2019-04-28T23:20:29.000000+09:00",
      to: "2019-11-24T00:06:41.000000+09:00",
      next_page_cursor_id: "3ccb5e96-1c9b-42f3-833f-24138fbf65c6",
      prev_page_cursor_id: "9d3ae8ad-ae55-4acc-8048-b5c3d3d03f11",
      per_page: 694
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      is_modified: false,
      types: ["topup", "cashback", "payment", "exchange_inflow", "exchange_outflow", "expire"],
      from: "2022-11-13T16:24:33.000000+09:00",
      to: "2020-07-27T22:15:44.000000+09:00",
      next_page_cursor_id: "f4811381-2f77-4f4b-babb-5245bc500d45",
      prev_page_cursor_id: "71605e46-1e72-4176-b084-bb86a05737f0",
      per_page: 694
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      transaction_id: "C2XFSxI",
      is_modified: false,
      types: ["exchange_inflow", "payment", "topup", "exchange_outflow", "cashback"],
      from: "2020-05-23T08:19:55.000000+09:00",
      to: "2021-08-05T15:56:52.000000+09:00",
      next_page_cursor_id: "70eb8275-bb9c-4579-9a10-14617e9b3e26",
      prev_page_cursor_id: "42e4cdc3-1e45-494d-95da-a09004b70893",
      per_page: 691
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      description: "u8UbXHSU9E0Qlg3gebv",
      transaction_id: "wj",
      is_modified: true,
      types: ["exchange_outflow"],
      from: "2020-07-20T16:07:06.000000+09:00",
      to: "2018-08-17T11:34:52.000000+09:00",
      next_page_cursor_id: "5c460b70-1604-41ae-9de7-ecbb51915b97",
      prev_page_cursor_id: "af8fe7c1-fc25-4534-8458-99cec1300774",
      per_page: 491
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_name: "g9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcd",
      description: "zIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGA",
      transaction_id: "KdkwD",
      is_modified: false,
      types: ["exchange_outflow", "exchange_inflow", "payment", "topup", "expire"],
      from: "2020-07-18T15:55:06.000000+09:00",
      to: "2020-06-10T05:06:53.000000+09:00",
      next_page_cursor_id: "36f2b5dc-61aa-4392-9488-4fb5516d64cf",
      prev_page_cursor_id: "cb5a5ba9-eb12-4484-b6bf-138e237a2404",
      per_page: 594
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_id: "a11be964-42a4-4ea5-9a9f-225fd2da3f6f",
      customer_name: "RUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrg",
      description: "h98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSH",
      transaction_id: "tKw",
      is_modified: false,
      types: ["exchange_inflow", "expire"],
      from: "2021-07-15T10:43:26.000000+09:00",
      to: "2024-08-02T23:54:58.000000+09:00",
      next_page_cursor_id: "e80c519a-fcb9-46be-b15b-ac59df78c0b9",
      prev_page_cursor_id: "65bd5f10-38eb-4a42-b86b-24d65cf22ec4",
      per_page: 574
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      terminal_id: "dfe17a71-35ca-4a85-88cd-be075bc1e9ea",
      customer_id: "15821e7e-d38b-4cf9-b6f2-fe035426b798",
      customer_name: "4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zT",
      description: "tm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mG",
      transaction_id: "20",
      is_modified: false,
      types: ["exchange_inflow", "payment", "exchange_outflow", "cashback", "expire", "topup"],
      from: "2017-07-03T05:32:16.000000+09:00",
      to: "2017-09-20T22:07:28.000000+09:00",
      next_page_cursor_id: "fa9de85f-d7a4-494d-8c9c-cb79c773cfb1",
      prev_page_cursor_id: "50482f66-ed9f-4b27-a4de-64536fe160a0",
      per_page: 499
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      shop_id: "2b1ca2cf-2e83-413b-a711-2207d10f2627",
      terminal_id: "4df4117e-0612-4887-897e-e12b4b8efaa6",
      customer_id: "7610c305-2cda-461c-a6dd-3c18a7b4d2a1",
      customer_name: "nZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN",
      description: "Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQK",
      transaction_id: "MnAGBrL3K",
      is_modified: true,
      types: ["expire", "exchange_outflow", "cashback", "exchange_inflow", "topup", "payment"],
      from: "2022-01-01T09:42:20.000000+09:00",
      to: "2018-09-14T23:42:18.000000+09:00",
      next_page_cursor_id: "a7482ca0-6be5-4bc0-b589-cf19795b1067",
      prev_page_cursor_id: "58ac09f0-32f5-4ca1-87da-6f8961f1a80a",
      per_page: 209
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      organization_code: "-n2V",
      shop_id: "667248d6-1040-4042-a470-4957819b7d3a",
      terminal_id: "1a6d4861-5ecd-4017-8b66-15c8e601a360",
      customer_id: "a6b15714-06b3-4681-bbfc-18074635484f",
      customer_name: "lTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRT",
      description: "wqzVsahBGWwps3iARDJTRZkOOEQFC",
      transaction_id: "19Wtss2",
      is_modified: false,
      types: [],
      from: "2021-03-05T07:15:32.000000+09:00",
      to: "2021-08-31T05:41:04.000000+09:00",
      next_page_cursor_id: "c2bed1a4-556f-427a-ab5c-1465d75d99d9",
      prev_page_cursor_id: "522a064a-5211-4e9c-a36a-d4150f829256",
      per_page: 925
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      private_money_id: "08fe0e30-5423-43b2-94f9-8ca08195aa85",
      organization_code: "P0b54-WAzlGJ-T8sA--5jb-qW8z03kXh",
      shop_id: "ca0c4553-9604-4fe7-a8c4-202b85b15d28",
      terminal_id: "e6e68094-5943-425f-b731-5a249797c287",
      customer_id: "00aa78af-22d5-49ee-b71a-56ee1477e95e",
      customer_name: "naTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5Q",
      description: "HSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scU",
      transaction_id: "ryj4",
      is_modified: false,
      types: ["expire", "cashback", "exchange_inflow", "exchange_outflow", "payment", "topup"],
      from: "2019-07-31T03:05:38.000000+09:00",
      to: "2019-05-12T09:53:03.000000+09:00",
      next_page_cursor_id: "661dbbd4-fd04-4762-847a-a8c172eb3c2c",
      prev_page_cursor_id: "4e318c93-ff56-4413-a54b-ef93ee90f458",
      per_page: 782
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      request_id: "1cf531ea-0e3f-449f-9b83-9564f05825e1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      metadata: "{\"key\":\"value\"}",
      request_id: "c287d7f7-a20f-44e6-bc81-a88d360cba0d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      description: "bjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t5",
      metadata: "{\"key\":\"value\"}",
      request_id: "a539ea1e-6227-448c-bc0e-4f8455cddc35"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      point_expires_at: "2025-03-16T17:45:29.000000+09:00",
      description: "AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3v",
      metadata: "{\"key\":\"value\"}",
      request_id: "0cf4435a-5bf7-4246-8bd2-d4c6f4976d3b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      point_amount: 1591,
      point_expires_at: "2021-07-18T16:02:00.000000+09:00",
      description: "lclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz4",
      metadata: "{\"key\":\"value\"}",
      request_id: "ec88c98d-3119-4a37-8838-28767dafce26"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      money_amount: 1333,
      point_amount: 1743,
      point_expires_at: "2022-04-17T16:35:45.000000+09:00",
      description: "2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghi",
      metadata: "{\"key\":\"value\"}",
      request_id: "d997c8cd-3f6e-4632-b3fc-714a0641499e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "c09068d6-07fb-4ad4-b94e-f6d2807c14fb",
      customer_id: "5ee007f5-c176-4a4e-8129-34107ba21bd5",
      private_money_id: "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
      bear_point_shop_id: "63a04897-b8ea-4040-af2f-fe9ed9503656",
      money_amount: 6271,
      point_amount: 7694,
      point_expires_at: "2019-08-23T08:27:51.000000+09:00",
      description: "bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIe",
      metadata: "{\"key\":\"value\"}",
      request_id: "a986f22b-8a8d-452f-bea9-d2c2747555b4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "734d5322-af29-4a31-99a2-3433799b06c3",
      customer_id: "9a949211-80be-4420-b885-4123e7da18fa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
      customer_id: "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
      private_money_id: "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
      amount: 5707
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
      customer_id: "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
      private_money_id: "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
      amount: 5707,
      request_id: "6a4d1551-1551-4901-8bc8-2f62ddc93afc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
      customer_id: "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
      private_money_id: "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
      amount: 5707,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "3d69c636-5ce6-4ae9-aba7-11aebf9290dd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
      customer_id: "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
      private_money_id: "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
      amount: 5707,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "c61a43e7-f138-43d5-abbe-9db39bd42f58"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
      customer_id: "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
      private_money_id: "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
      amount: 5707,
      description: "igR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa",
      metadata: "{\"key\":\"value\"}",
      products: [],
      request_id: "65ad82b5-601e-4eb4-a198-e961c7cbc9a2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "ttROZcBbejZS9wdnnNKINI",
      shop_id: "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
      amount: 1336.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "ttROZcBbejZS9wdnnNKINI",
      shop_id: "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
      amount: 1336.0,
      request_id: "02df57f1-b0fc-4ac5-848c-010637a40950"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "ttROZcBbejZS9wdnnNKINI",
      shop_id: "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
      amount: 1336.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "3e83fc64-62ca-41b8-8e4a-c46be14f1a83"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "ttROZcBbejZS9wdnnNKINI",
      shop_id: "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
      amount: 1336.0,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "83ea744b-2e24-4e1d-b466-01bc66f4fa62"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "ttROZcBbejZS9wdnnNKINI",
      shop_id: "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
      amount: 1336.0,
      description: "UtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfY",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "2d0a4134-83b8-41b2-931f-7d0cc93529a3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "81545536-e76f-4801-8846-e273070af7da",
      receiver_id: "edbcd2a3-931e-488c-a839-19ac559a0dbe",
      private_money_id: "4e5dc0eb-2bad-4bbd-af86-d5148cdec5ac",
      amount: 7027.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "81545536-e76f-4801-8846-e273070af7da",
      receiver_id: "edbcd2a3-931e-488c-a839-19ac559a0dbe",
      private_money_id: "4e5dc0eb-2bad-4bbd-af86-d5148cdec5ac",
      amount: 7027.0,
      request_id: "4bce89ee-8920-4e96-8d01-54f1cde92354"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "81545536-e76f-4801-8846-e273070af7da",
      receiver_id: "edbcd2a3-931e-488c-a839-19ac559a0dbe",
      private_money_id: "4e5dc0eb-2bad-4bbd-af86-d5148cdec5ac",
      amount: 7027.0,
      description: "QYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnN",
      request_id: "22c761e3-fc61-4dc9-b6b4-468bdb26513a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "81545536-e76f-4801-8846-e273070af7da",
      receiver_id: "edbcd2a3-931e-488c-a839-19ac559a0dbe",
      private_money_id: "4e5dc0eb-2bad-4bbd-af86-d5148cdec5ac",
      amount: 7027.0,
      metadata: "{\"key\":\"value\"}",
      description: "Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJ",
      request_id: "781f9ad4-bdf6-491f-b244-06a7b533eedc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "98a442a3-312c-492a-9fd5-c763b100611b",
      sender_private_money_id: "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
      receiver_private_money_id: "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
      amount: 4411.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "98a442a3-312c-492a-9fd5-c763b100611b",
      sender_private_money_id: "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
      receiver_private_money_id: "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
      amount: 4411.0,
      request_id: "473e070e-a1e6-4467-8c88-5408de0e9a56"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "98a442a3-312c-492a-9fd5-c763b100611b",
      sender_private_money_id: "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
      receiver_private_money_id: "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
      amount: 4411.0,
      description: "lOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CR",
      request_id: "4ee1cfef-643a-49b8-91ee-f1f9375b689a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "O9Y3f9djMgk",
      content: "8QSZw",
      request_id: "J1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "O9Y3f9djMgk",
      content: "8QSZw",
      request_id: "J1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN",
      description: "3QYDG6CZS1PVe5L"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransaction({
      transaction_id: "96a1ef3d-a47c-4faf-8c0c-1919e2392b5a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "7d58adfc-e78a-4f25-bffa-91e9d54f3e5f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "7d58adfc-e78a-4f25-bffa-91e9d54f3e5f",
      returning_point_expires_at: "2024-08-02T18:38:47.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "7d58adfc-e78a-4f25-bffa-91e9d54f3e5f",
      description: "mWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYd",
      returning_point_expires_at: "2024-07-09T11:25:15.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransactionByRequestId({
      request_id: "0dd1c06c-8bdc-4501-86c9-eb2e75225c94"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "4cfd12a1-1f95-479b-88e6-90531851f0fe",
      customer_id: "327658c2-3c42-4c4b-8931-55cba718dc90",
      private_money_id: "c57936d1-a76c-428d-b463-d14b893099a9",
      amount: 5430
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "4cfd12a1-1f95-479b-88e6-90531851f0fe",
      customer_id: "327658c2-3c42-4c4b-8931-55cba718dc90",
      private_money_id: "c57936d1-a76c-428d-b463-d14b893099a9",
      amount: 5430,
      request_id: "8916b399-6cc8-444c-9ca6-55e561e552f3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "4cfd12a1-1f95-479b-88e6-90531851f0fe",
      customer_id: "327658c2-3c42-4c4b-8931-55cba718dc90",
      private_money_id: "c57936d1-a76c-428d-b463-d14b893099a9",
      amount: 5430,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "30a914ef-6aa3-4bce-b79f-1d41ef555887"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "4cfd12a1-1f95-479b-88e6-90531851f0fe",
      customer_id: "327658c2-3c42-4c4b-8931-55cba718dc90",
      private_money_id: "c57936d1-a76c-428d-b463-d14b893099a9",
      amount: 5430,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "d935f829-8181-4914-b86a-b99a1316a71d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new CreateExternalTransaction({
      shop_id: "4cfd12a1-1f95-479b-88e6-90531851f0fe",
      customer_id: "327658c2-3c42-4c4b-8931-55cba718dc90",
      private_money_id: "c57936d1-a76c-428d-b463-d14b893099a9",
      amount: 5430,
      description: "aX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjj",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "d048137f-1f4a-4e70-991a-617ab7c0b41e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new RefundExternalTransaction({
      event_id: "b05051d3-b62e-4405-98cb-1fd08900daa5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransaction> = await client.send(new RefundExternalTransaction({
      event_id: "b05051d3-b62e-4405-98cb-1fd08900daa5",
      description: "RMVYMVxniANdM0yy6srRZNC9bYJUFWp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["expire", "transfer", "campaign", "topup", "exchange", "coupon", "payment", "cashback"],
      description: "nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["exchange", "cashback", "transfer", "payment", "topup", "expire"],
      transfer_types: ["exchange", "topup", "expire", "payment", "cashback", "campaign"],
      description: "jGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: ["transfer", "cashback", "topup", "payment", "exchange", "expire"],
      transfer_types: ["coupon", "topup", "transfer", "exchange", "campaign", "expire"],
      description: "7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "e93a2f5d-53e9-42ce-96b4-e08de78dc0d9",
      is_modified: true,
      transaction_types: ["exchange", "topup", "cashback", "transfer"],
      transfer_types: ["cashback", "payment"],
      description: "6tzaZ3sbYKCNybmAlkaNJiOvuR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "b39bbba2-797b-4b84-9c8f-a2f3ac30cf0d",
      private_money_id: "096e4cf7-1e09-41dd-b7d1-51d33507deed",
      is_modified: false,
      transaction_types: ["transfer", "exchange", "expire"],
      transfer_types: [],
      description: "ENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "VmnwZ1",
      transaction_id: "9cd26194-99d9-48d1-88a6-4dfbb6cfc3e0",
      private_money_id: "ef22dfc1-9074-4766-82a0-052717dfe500",
      is_modified: true,
      transaction_types: ["topup", "payment", "exchange", "cashback", "transfer"],
      transfer_types: ["exchange", "expire", "transfer", "campaign"],
      description: "TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "bd35fe0b-ca6b-423e-aaf4-363a09039aeb",
      customer_name: "1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYs",
      transaction_id: "3167a6a2-2de5-4121-8f1b-68f45bda2f80",
      private_money_id: "659d3e8b-b46c-47b3-bb0d-d4695ff73e81",
      is_modified: true,
      transaction_types: ["topup", "payment", "exchange", "transfer", "expire", "cashback"],
      transfer_types: ["cashback", "exchange", "transfer", "coupon"],
      description: "UkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "19KhFrkxiVRAQ6FFjz1wnjIRjO9Mofq",
      customer_id: "92c5f2ca-5100-4304-9eca-287dc877ea6e",
      customer_name: "cHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsF",
      transaction_id: "9be264f3-1157-4907-a2ef-64b7792b9e62",
      private_money_id: "027386ab-1513-4b0e-b0d1-42928dfba6f1",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["topup", "coupon", "campaign", "cashback", "transfer", "exchange"],
      description: "335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "6c4258ff-1c10-41bf-884c-e2a432ad195b",
      shop_name: "waZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI2",
      customer_id: "ee977cfb-babf-4630-8c84-291c01b63fd2",
      customer_name: "qU84wWVej7KjR",
      transaction_id: "2f4efeb7-ef50-460b-8fbd-4e1a7e8998fe",
      private_money_id: "93f2da19-5eb7-4d03-a1b9-f459900a0bcf",
      is_modified: false,
      transaction_types: ["topup", "cashback"],
      transfer_types: ["exchange", "cashback"],
      description: "vKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 7252,
      shop_id: "e31715ae-98d6-46f8-980c-79dd8586615f",
      shop_name: "YiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2Id",
      customer_id: "8765ff4c-2a65-4805-83fb-a022773927ca",
      customer_name: "DTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf",
      transaction_id: "bd08085d-e3b8-4bf0-afc8-4a36b5efe435",
      private_money_id: "065916e7-5f14-4a8c-9146-a2a01706821b",
      is_modified: false,
      transaction_types: ["exchange"],
      transfer_types: ["cashback", "topup", "payment", "campaign"],
      description: "b3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9C"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 8658,
      per_page: 1696,
      shop_id: "5a50a42a-9206-4910-93bb-f8807fd03a17",
      shop_name: "v6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLI",
      customer_id: "9ddd9b06-80f3-4ed8-b44c-5205c27f0685",
      customer_name: "zc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwf",
      transaction_id: "69ab5306-29e0-402c-b52a-ece49b886a9a",
      private_money_id: "cba03964-6284-443c-9c30-422f4617c1ba",
      is_modified: false,
      transaction_types: ["exchange", "expire"],
      transfer_types: ["expire", "exchange", "topup", "payment", "campaign", "transfer", "cashback", "coupon"],
      description: "EZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2021-12-19T03:16:18.000000+09:00",
      page: 280,
      per_page: 1243,
      shop_id: "c490d97e-9c58-403b-876d-f316065f1303",
      shop_name: "oGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbd",
      customer_id: "6142096e-4e57-46b1-afbe-5e99aa748b5d",
      customer_name: "oZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu",
      transaction_id: "0e6f489b-1334-4594-ac77-5b2e8abb7738",
      private_money_id: "f3036497-49da-4278-8c26-ae35b274686f",
      is_modified: false,
      transaction_types: ["payment", "exchange", "topup"],
      transfer_types: ["campaign", "expire", "topup", "exchange", "payment", "cashback", "coupon", "transfer"],
      description: "lOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2021-07-10T20:30:02.000000+09:00",
      to: "2017-06-01T17:00:22.000000+09:00",
      page: 283,
      per_page: 7293,
      shop_id: "242198be-0bae-4866-9ba4-2e8840a5479e",
      shop_name: "hFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NP",
      customer_id: "7ec6ff5b-191f-4b60-a1a9-fc63750546fe",
      customer_name: "gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOm",
      transaction_id: "1ed84f6a-c0ab-4450-9485-e4d133301dea",
      private_money_id: "447e5ac3-604a-42c9-aff1-eb64ead8c902",
      is_modified: false,
      transaction_types: ["topup", "transfer"],
      transfer_types: ["cashback", "expire"],
      description: "MnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      to: "2018-07-29T14:39:04.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      from: "2023-05-21T10:42:46.000000+09:00",
      to: "2022-03-29T02:09:03.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      description: "ve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI",
      from: "2023-11-26T14:20:58.000000+09:00",
      to: "2024-12-29T15:09:59.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transfer_types: ["cashback", "campaign", "transfer", "exchange", "coupon", "topup", "expire", "payment"],
      description: "6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jV",
      from: "2023-02-26T09:19:44.000000+09:00",
      to: "2024-06-05T02:20:32.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      per_page: 233,
      transfer_types: ["coupon", "transfer", "expire", "exchange"],
      description: "SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGG",
      from: "2016-03-04T20:09:00.000000+09:00",
      to: "2019-10-16T21:14:59.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      prev_page_cursor_id: "16adceb0-6164-439c-b4c2-8a245d38423f",
      per_page: 677,
      transfer_types: ["campaign", "coupon", "payment", "topup"],
      description: "e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFos",
      from: "2019-07-26T02:46:25.000000+09:00",
      to: "2024-02-27T01:15:09.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      next_page_cursor_id: "9acac45d-2bc8-4be0-b1fb-145948e8f195",
      prev_page_cursor_id: "74278779-3825-421f-8b15-54b8c7222cc7",
      per_page: 772,
      transfer_types: ["payment", "exchange"],
      description: "U45uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQ",
      from: "2019-08-18T18:40:58.000000+09:00",
      to: "2016-03-11T03:29:42.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_types: ["cashback", "payment", "transfer", "topup"],
      next_page_cursor_id: "f4d7fcc9-e61e-4d42-908c-740cbfe4fb55",
      prev_page_cursor_id: "645d5f93-703f-4572-adf6-5cf084b5ae65",
      per_page: 267,
      transfer_types: ["cashback", "topup", "exchange", "campaign"],
      description: "46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K",
      from: "2018-09-06T02:46:48.000000+09:00",
      to: "2016-06-03T22:47:56.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      is_modified: false,
      transaction_types: ["payment", "cashback", "expire", "transfer"],
      next_page_cursor_id: "9519f2fa-4206-464f-9ece-910374d25e36",
      prev_page_cursor_id: "9d37e5ec-9473-4da7-880e-0f5ba8d68ccb",
      per_page: 413,
      transfer_types: [],
      description: "k07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKd",
      from: "2022-04-17T08:58:27.000000+09:00",
      to: "2024-07-31T20:57:39.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      private_money_id: "5571078c-1b3d-460a-a4f5-c225c3963f38",
      is_modified: false,
      transaction_types: [],
      next_page_cursor_id: "540724a1-9e21-446e-92c7-be62910d30c0",
      prev_page_cursor_id: "956e7ee4-5609-43f0-a200-74cd2cde8f04",
      per_page: 938,
      transfer_types: ["cashback", "transfer", "coupon"],
      description: "aiDroY6Q3IK7BQ6AmswdAM",
      from: "2021-05-29T14:16:16.000000+09:00",
      to: "2018-07-10T01:56:57.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_id: "8d8c83c9-134a-42f2-af77-70d6ac0fd2e2",
      private_money_id: "d8fe9573-a8b9-4370-8df8-9ce6ad6d4501",
      is_modified: false,
      transaction_types: ["exchange"],
      next_page_cursor_id: "b3d7d3fd-6bf6-44bb-b124-78e1020de332",
      prev_page_cursor_id: "ed960745-0e16-4045-8846-d36d60840aae",
      per_page: 668,
      transfer_types: ["campaign", "exchange", "cashback", "topup", "expire", "transfer"],
      description: "aAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9",
      from: "2021-10-18T13:08:22.000000+09:00",
      to: "2015-12-03T10:57:05.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_name: "TcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1",
      transaction_id: "e8c3744b-5799-44c7-a8e5-df2dd5fb0b2d",
      private_money_id: "679b8e8e-abfb-41a2-94fb-eab33ee51354",
      is_modified: false,
      transaction_types: ["cashback", "payment", "topup", "expire", "exchange"],
      next_page_cursor_id: "4490ba4b-8261-441b-bf08-d86359004cfe",
      prev_page_cursor_id: "02e39337-039b-457f-83d3-7b31e6c82a1a",
      per_page: 480,
      transfer_types: ["coupon", "topup"],
      description: "3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaH",
      from: "2018-04-25T11:33:22.000000+09:00",
      to: "2024-03-09T19:10:21.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_id: "17b3873f-3a77-4eb6-afc0-84203986c30d",
      customer_name: "EFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZm",
      transaction_id: "a37db225-daca-431c-8c87-f008cd2af7bc",
      private_money_id: "f5323506-b1de-4fa9-8380-6f5a8e60c377",
      is_modified: false,
      transaction_types: ["cashback", "expire"],
      next_page_cursor_id: "9cebb134-a477-4303-9c39-82d201d1086b",
      prev_page_cursor_id: "498b2027-e919-4f2e-b6e1-d88e5203f467",
      per_page: 314,
      transfer_types: ["topup", "coupon"],
      description: "IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53",
      from: "2017-02-12T17:02:56.000000+09:00",
      to: "2021-07-25T11:21:21.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_name: "cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sI",
      customer_id: "2a68b26a-cd4c-4780-bf53-7a565e9fecfa",
      customer_name: "CspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uojwDmQd",
      transaction_id: "9755d74c-db4e-404f-8bad-b55c96ad063e",
      private_money_id: "2f0aeeab-ba9f-4f3d-881e-3bc98af349ec",
      is_modified: true,
      transaction_types: ["cashback"],
      next_page_cursor_id: "78f874bc-624f-4668-adbe-24878c43c7b7",
      prev_page_cursor_id: "a9a64dc0-6723-4238-9e5c-04d18430285c",
      per_page: 743,
      transfer_types: ["coupon", "payment", "exchange", "transfer"],
      description: "3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKK",
      from: "2025-03-05T13:52:26.000000+09:00",
      to: "2018-01-28T16:47:24.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_id: "33424b02-016d-49a5-84fd-b341e1cdeb48",
      shop_name: "SYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swt",
      customer_id: "2fbcc373-045c-4e67-9bb2-3d06d825f0ce",
      customer_name: "JBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42",
      transaction_id: "a935ccce-0592-4d20-bbce-9598bb026337",
      private_money_id: "c02f2f1f-cbea-4ee0-bf10-38d7b41b802b",
      is_modified: true,
      transaction_types: ["transfer", "expire", "topup"],
      next_page_cursor_id: "bb05d5b8-baf3-4385-a88d-cdd4124977b9",
      prev_page_cursor_id: "58b9028c-33c3-48dc-aa22-de596aac285d",
      per_page: 772,
      transfer_types: ["coupon", "topup", "exchange", "payment"],
      description: "WhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wN",
      from: "2023-01-14T16:17:12.000000+09:00",
      to: "2022-07-01T09:59:21.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      contact_name: "qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_account_holder_name: "B",
      contact_name: "cjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12MUV2d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_account: "",
      bank_account_holder_name: "ｦ",
      contact_name: "28zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_account_type: "saving",
      bank_account: "394463",
      bank_account_holder_name: ".",
      contact_name: "TiWLEN2pEb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_branch_code: "752",
      bank_account_type: "other",
      bank_account: "",
      bank_account_holder_name: ")",
      contact_name: "9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_branch_name: "6ApR",
      bank_branch_code: "",
      bank_account_type: "saving",
      bank_account: "676",
      bank_account_holder_name: "ｦ",
      contact_name: "5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_code: "",
      bank_branch_name: "jEtMliIf7wKoPmNQWU6zl",
      bank_branch_code: "380",
      bank_account_type: "other",
      bank_account: "4599",
      bank_account_holder_name: "-",
      contact_name: "EbaRlpdhTTQpQo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "jN28QfQLnQ9Qr2gs4rA",
      name: "yEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt",
      private_money_ids: ["9c111359-e26e-4da4-973e-c40b7e75b4f3", "3a599482-a775-4703-84a2-4bb07be4f416", "bd2bb82f-1dcc-4849-b490-971c39efeb21", "01c9e654-72b7-4ba5-b0ec-e10e2cf23551", "e6508477-0542-4109-b4b5-5695db668cbe", "d2cfde19-a0b3-4d0c-af59-04ac82127b70", "2899f9fd-9a86-413a-8f4b-f3affe19e708", "6d7cd324-3a39-4236-856f-1ca65c818bc6", "8e5f9fc7-0c78-45d6-9b4a-f9aca2f6c400", "0f13b18f-f82f-4d0e-bddb-f97f92b4e81b"],
      issuer_admin_user_email: "NTeRlFM4Xw@2Yne.com",
      member_admin_user_email: "FRtau24yc1@kusN.com",
      bank_name: "RT6b0IY83jSy9CLjq8yj",
      bank_code: "8943",
      bank_branch_name: "nLV",
      bank_branch_code: "558",
      bank_account_type: "current",
      bank_account: "9992",
      bank_account_holder_name: "V",
      contact_name: "tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6uXM4yE9kd7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGsPPbvQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 8891
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 8068,
      per_page: 5308
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "YkAPBJ7wmgCWNKDP1enxAKZBD",
      page: 563,
      per_page: 9449
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "NoFZKIbAgS@oRCK.com",
      external_id: "EWQZO",
      page: 1403,
      per_page: 6581
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "024-885780",
      email: "S7UaVHpVi4@pZYZ.com",
      external_id: "GKLSewvJuaN97ObU",
      page: 7335,
      per_page: 7446
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "QZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQz",
      tel: "02779796227",
      email: "fsBnFuG56t@OVY8.com",
      external_id: "9Z9lrbTGfh4Qb",
      page: 9214,
      per_page: 4005
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "1030485",
      address: "fLew9jsvLcXjFRqAsdyU0EjzFGdoCE",
      tel: "06609-2649",
      email: "TlHcxkp2hd@iJWs.com",
      external_id: "83eoAqvgg01zZW75gRDgWRTNwobRsB1",
      page: 994,
      per_page: 5401
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "R1aePdc9fGHLcwyelAg5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLloM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwhy5RIJGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4Gx21zM7WIQG",
      postal_code: "430-6846",
      address: "yAShBlCJPjtVj6RA58jW",
      tel: "0289720280",
      email: "yHKQAP2bBe@ZkmI.com",
      external_id: "h2UeN7Z047tEp9MnaMKkPTTOh4",
      page: 7917,
      per_page: 1479
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "47ddda58-844b-4696-9c04-d004f2546e67",
      name: "tixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yIlHOt0XiM6Qkur8SbZd3wcuCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7",
      postal_code: "461-5192",
      address: "ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtCHCm7yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57y",
      tel: "040230442",
      email: "J9dqwKn5NS@HIJ7.com",
      external_id: "c5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FR",
      page: 7768,
      per_page: 2206
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "--v-uf---1wmH-IyrgJ-j9",
      private_money_id: "fc0d0f06-0438-422d-9d60-a902eb87820d",
      name: "4vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEg",
      postal_code: "399-8326",
      address: "N0T80a",
      tel: "062169480603",
      email: "VT4AzeoZEO@Yuu1.com",
      external_id: "yqlWwyCNVezTDDCUN00",
      page: 1816,
      per_page: 6934
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      organization_code: ""
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      shop_external_id: "nnO4t",
      organization_code: "tu-738Dd2s1F6gBF-e-V-3G--x-59"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      shop_email: "qkYPGTd8wI@LW6U.com",
      shop_external_id: "ji6nDVo6kwtt0eE996vZBp0zzwPN5DIhcy9",
      organization_code: "nP-Yx--7Lw-HR09g---0--6REw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      shop_tel: "0314-5455-1165",
      shop_email: "DSTN7FZ8Y8@t8MI.com",
      shop_external_id: "7GdyM50XmxAy",
      organization_code: "zsAKb7Rx-U9Y69aUZz-3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      shop_address: "dORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqwdkkgvqZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv1",
      shop_tel: "06098670724",
      shop_email: "r0aXml0I8A@7sPY.com",
      shop_external_id: "Ws9GrfkcGFxl",
      organization_code: "jcx-tLZ-wKu---DPHLH40"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7Cyctlh",
      shop_postal_code: "506-0034",
      shop_address: "XLGdI4BQeMKNjNC6v4LdJ9q0nifAUuGHUnCvc4A5HlCo2a7",
      shop_tel: "02737-9106",
      shop_email: "Iyu0AtoOYT@3d8x.com",
      shop_external_id: "XDGe31wijgcuuWSuu",
      organization_code: "Tm92-I6KEzXENgsq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      can_topup_private_money_ids: ["37acd32b-97e6-495a-8bfd-4d237d474223", "49ac488b-319d-48d5-9474-2768b53ad86a"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      private_money_ids: ["4c84905d-0c04-4ec3-bd54-fba60c4faa8a", "00425f9a-510d-4464-907d-a377fedc012f", "47758a6b-10fc-442b-820b-0fb298a4c4af", "23977be7-6d37-4dfe-bbc4-8e5c7603a95d", "293576d9-4e68-48c6-b5d8-9e578dfe6aa3", "6452ed7d-771f-422b-b4db-411e0bd40561", "7a988178-2632-428d-bce7-e848a02c1b7f", "0e46fa5e-f837-40dd-8eed-04ef5edf0123", "7f908923-ae14-4173-9183-c2ff455ef5a3"],
      can_topup_private_money_ids: ["8eb0751f-b859-45c1-bb96-fd7fdab65e67", "3108c453-f89b-426a-a405-69216b7d1e31", "ead7771a-cb4c-445d-9675-6eb484288e3e", "c2b0754e-4eb1-452b-be47-1b3ab2d61b97"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      organization_code: "3zk9G2r-F-RiV-tm-7-0-V---s",
      private_money_ids: ["056bedf3-4fc4-4e43-9701-7fa8b5c6ddee", "aab8490e-31a4-49ba-b399-0fbe87d9d189", "8402dc12-cab6-426e-9d5f-5b3da0649b24", "7110fb39-3e32-47cc-8aac-b3ef3b8a2994", "0fa6e242-296e-495d-9ef8-a456c0825957", "d24ca541-35b0-4c3b-82ed-3af83650d330", "ff2d7cd0-5433-4473-93e8-bb898342edb5", "21e8c732-8a3f-4564-aaab-66c430369978", "ecd612b2-0ec5-42a9-b871-0132b31b2f2a"],
      can_topup_private_money_ids: ["dcaaf254-676c-45a9-b00c-cf36d9360749", "5c64449d-a893-4f56-ba1e-4759dab59415", "a3b757f7-f734-4f9a-a97a-8d8d8ea01fdd"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      external_id: "7KKLj26g9D4jd9Fi73fT2ekfbMypSoZArmv",
      organization_code: "10S7NJ-u-h9D0B7",
      private_money_ids: ["f126ea13-6b4b-4519-a6dd-e99b0d6c678e", "479053d1-6e43-4947-8240-b4c65181e13b", "9d48b177-85ae-40dd-a371-4d95861c82bc", "6986356e-e03d-436a-8b5c-16f475df21d8", "6c83d82b-6013-43a3-bbd3-2b350b1a243f", "d9fddfe3-6b3f-47f4-a2b0-7173542c9029", "3d7f5d55-2444-47e1-ad7d-f88c9288b851", "b52faae9-1826-464a-8626-87e18f4ee4dd", "15714ef6-f366-49c9-bc07-5c6c914de2f3", "46c0679d-c151-4987-aaf3-7bb10306f755"],
      can_topup_private_money_ids: ["3accf840-8c76-48c0-b980-52dcc94e3afb", "f82b8118-1638-4275-89a4-e66f2b15ef88", "fd8688a7-d11f-41fe-87f8-48dea16e1561", "376a57ab-07a3-4339-9f63-9ee65f06b9a6", "1056962c-088c-4471-a4c2-f7ba499a318a", "05967cda-dc5e-4d8d-827e-40535a82633b", "cd694353-3001-4279-a5f5-62bbf527cf15", "277988d0-c840-4173-8c67-d6638b4d4eb1"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      email: "4jRH1daAJW@kWpe.com",
      external_id: "Vt7BTtK3",
      organization_code: "l4vNb8vp5",
      private_money_ids: ["7b08b08d-7765-41e7-b7f7-14a143cfcb38", "3d029c08-055b-45e3-807d-6a13e164ea96", "20af6895-36fb-477d-a949-b0d5ae347108", "e53cb737-2e55-484b-a889-7b9d2ea119fc", "3b0bbf21-2bf8-4b4c-bd90-3e65f967b80d"],
      can_topup_private_money_ids: ["2b8cd094-197f-40c6-8d48-17ef25d6c568"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      tel: "01-65-949",
      email: "GNYlDyRk3a@GMps.com",
      external_id: "1HN2Oi",
      organization_code: "",
      private_money_ids: ["51028903-eccd-4857-be9a-d33beaf794a1", "798bb391-451c-44f4-a187-a77648c2b041", "e4a307cf-f164-4306-b115-d86314484f8d", "e1c80ab6-1df4-4c34-82b6-19dd457366e2", "ca668e0a-2fb4-4210-a8c5-b4e7ca1bba9a"],
      can_topup_private_money_ids: ["b5086449-fdba-40f0-8244-4dd62099b1e0", "c16ccaeb-f51d-4c8a-b287-5fbc3b126215", "0d4191dd-840a-4e73-85a6-c5408e2820f1", "323d699f-e0a2-425b-9168-e5eca680000b", "31bea4a0-7e0f-4441-954e-b80b6a7c429e", "a3146fc6-8f30-404b-bc5d-ac013155e9f2"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      address: "6ekdB7WSGlsT24mzzvf0uixfzgMS7DAxRVXjpoYOkLYbJM46YGKDJVQANtfUdHVcsouxX3xI9CHdZGkENDSkRyfWKAxjQWjCB8nFcqmENfDor1zgwF9x3xZsR5bLJPhH",
      tel: "0751-34872106",
      email: "U4cD6smAeq@ngif.com",
      external_id: "ikqDE3OudXpYhNw",
      organization_code: "ZA7BK-",
      private_money_ids: ["fc8dcc34-a8a4-47e7-94ce-213913029686", "e1c79326-2633-4023-a748-32cacb75dca2"],
      can_topup_private_money_ids: ["0277e741-90aa-497c-bb31-e99a0b3b8099", "24c73dc6-122c-49e6-ab06-446eb3fd0b21", "724c3582-f52b-4865-981f-34feeefa4c86", "d9a49ed9-a5d2-4656-8da2-2bb165148f46", "9e4226a5-2bc2-4075-b9db-36d63eebc5f1", "139192f7-56ed-4bcb-85b2-acdbf238309e", "3cda7088-ae21-4f51-8557-cffbe6fd3b27"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "y5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUO",
      postal_code: "751-0723",
      address: "f304AeRoMBnYRrC4cXtKQ0a4OPrt2tro65RM4SYyWPQ4b5EvFhF0JaiWpiphXqNgzf5XFTYAHJdFeGZi1JIa9NTrkMeAKNU2qNMrw4Jay2YBOfulEIFK5T7Dc8oOst1MM9PmjRDk75J779k3qO5Tt2uQGKACRqDnzgekX1v8dvD0ApeDNVXLZhDHmMPohPl8jvZE0kmWyBRnvtc",
      tel: "0816-5612-027",
      email: "VyEBxJxS2d@p5fO.com",
      external_id: "6g3h5b1QYmVCtk7",
      organization_code: "G-0NVI-2733a-8m-QHXyC-955F-D71RS",
      private_money_ids: ["d823dc21-98ba-4e0b-a129-296c120f770e", "1a70ac9e-99d6-4213-818b-fcdf52da9b0d", "c9fde57b-bae0-4578-88d5-7f78d4d6287e", "febb8891-8278-4bab-af4a-b9b39f2ca1ed", "58a44fb2-cc63-4c18-807e-95dc20bea24f", "c49fe4d9-fe46-4609-bca3-ef4e9b3236b3"],
      can_topup_private_money_ids: ["22b1d44a-d559-4305-9df7-d05dada2db16", "ef1990a6-6feb-4f8f-8c02-41db4a404569", "5f2d360e-7975-4ac0-a196-425e43c2df04", "03b6510f-533f-4ec0-a80b-fd81ecc5160b", "e53cfcf3-fa4e-4349-9833-9f5495980cd1", "84eedf34-d855-4ee2-a224-cfdf611eab14"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "f4ba4938-fb9c-4f40-a3d5-68bf3aae9a34"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      can_topup_private_money_ids: ["23fcab46-b119-460f-ba98-5dcd9268dba5", "dcd17b60-6b3a-4188-8c99-7456b9614651", "9d187f34-87ec-4ea9-99b9-d6d7f8a80de4", "1e49acde-42e6-4877-a09b-59ce28a82ec0", "1dbd11b1-7494-4611-872c-1a1420b9df3c"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      private_money_ids: ["2ba4bd3d-0b87-4658-b23b-39149291ec88", "343fff62-e2d3-41ae-955d-afc4609b64c9"],
      can_topup_private_money_ids: ["bcf9b896-de06-4dbe-9aa5-fb8eabfd3cdc", "aefbebec-2159-4c4c-8f69-171099de3e5e", "dab410af-56f3-4385-b5f3-a3aed33a160b", "f03781c2-67d2-4085-88fc-9956ec675b02", "e14e6afe-43df-4ab5-b00a-0627d894e1c5", "2eef5832-fd7d-4ca8-ba06-c33499f760b3", "7f504e4c-1fdb-415c-b4dd-14b70524dba9", "5ab55ad1-6f0c-4d9d-9714-7fb0d9507243", "a7d222eb-ee20-42a9-bf51-719a075d832e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      external_id: "GlHLmFUomkHrvNClWFSWTgMn5wd60p6",
      private_money_ids: ["cb60f696-b8ef-4a60-b2d2-421ca0dfc353"],
      can_topup_private_money_ids: ["3f4a09b9-b84e-4ada-81d4-088033e04bed", "550859e8-48f1-4094-af98-532618e0e49c", "3f15a22b-9657-4581-ade6-569c24f9b205", "9f4d1c40-5e9f-4851-aabf-d0e2fea50f13", "8dc93701-9754-4830-a080-3cad4c9ef639", "42b6983d-eecc-489b-b05d-0c361c0094b6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      email: "5rg0d7eGIT@tIkl.com",
      external_id: "kYFTO7OJe9dSEOG",
      private_money_ids: ["0ceae57e-fbde-4d7c-814c-39ce6f19d391", "caf69db8-f053-4a7c-9d2e-a7999cedbf5c"],
      can_topup_private_money_ids: ["8d288ade-80b7-427a-aaa8-bdb1c28b9bcb", "95da72a1-d246-4482-a23f-496fa8c539f2", "3722fedb-fcc9-4e09-9167-d75d534492f7", "53930cf8-7113-4e23-b86f-3deff057915d", "1043c491-d7fc-4cf3-8acc-fecbb246bab5", "fd1f6652-8971-45b6-a8be-d0b76f121e2a", "4bd1a5a9-4756-49ac-98d8-b24dab9fa905", "7f5454f0-bb18-4fda-8728-e2cd01a54553", "857aa692-a126-477a-bf37-fb86853ba86b", "c10796f6-0a4f-40cd-9b7f-be28b641d85b"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      tel: "08-9129-554",
      email: "y0nenwzHOa@IVwM.com",
      external_id: "TjPFMGevwVMeZt8",
      private_money_ids: ["b1806aa8-1f71-409b-9faf-227ee7d8abc9", "326fac9b-1e76-453e-898e-fa09cb96c892", "307a4679-3ff8-427c-b601-01fe223c80ec", "bca5126a-c4b5-424b-a1ec-768bfd2691f1", "220b3dbc-aff8-442c-8c24-b71858611a03"],
      can_topup_private_money_ids: ["33f65219-2a29-49fe-b748-56f526e1472a"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      address: "qvdSNveWzWI5L6stQvZvRJLln3CmVmPz2bcH2xVBHTbiOHYbzW7EYCf76ToHcl8dtzcqD6rqwGDVRdojGjigHpZl8InHQBhMIrdZJT9MnQgGfElkSct56tB3QvYjy8mUgDyXQYOSs",
      tel: "0890-5106100",
      email: "KjBHnAmdlK@iUj9.com",
      external_id: "qianI8FqIXq",
      private_money_ids: ["999c5565-9e89-4619-a1ec-1c820b465bc7", "d0a85d7e-c9be-4129-9a3b-75c475e93c4f", "5d81e904-fb87-4ace-95df-2025879f3f2c", "6bb56041-f8bd-492d-a64a-26208cb731e6", "d3d9be5e-74ec-4832-88cd-10f47969b5db", "ffb072a0-7a1f-456f-b779-f2619dcda18c", "3b2d6593-9601-4a57-b047-daebe29536f4", "38efd286-ccb1-4970-8f8f-01cf76094593", "14b8b70c-2bc2-4da4-9a81-38fb67363d17", "6608ae1e-43fb-40ba-8108-d1efdbb8fbfe"],
      can_topup_private_money_ids: ["dd12d0f8-b963-4f55-94df-2eb63ca01b7b", "626fa9d7-bf31-4d5e-bd76-5128a3889abb", "4f324bc6-b89b-4722-8d4b-bd2799ef0b4e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      postal_code: "980-7265",
      address: "Q3t63Wpysg20fNhPhFK8mUwq4sfxVOVqIgogobrlTBvrKruisPGcjRxKz0hnHtPEmOFzye10sMn1hLqgZ4Scflk2JdjznjOojFztU",
      tel: "0929953277",
      email: "yS9B5htgNI@DpUp.com",
      external_id: "zKyj3BEvYp1",
      private_money_ids: ["54ca673e-eadc-46d4-a21e-4f75c5afedf9", "438ce153-57c9-4840-a618-8d79f6b74001", "9bb9717d-0290-4139-b64d-0da8fc8f64e0", "45c6a3bd-830f-4426-a66a-b612f9e41001", "b818127d-38f3-4139-9253-495bd3641656", "6ff8c017-4d49-4d7c-b521-095277ad25db", "4a1e74cc-f8ca-4b61-a1ed-f9d53d8a0367"],
      can_topup_private_money_ids: ["592a9639-a176-4e4a-ace0-6f52be6b02cd", "80a1cee8-4335-4bec-975e-c2200c82a2e1", "1f8a3666-06c0-427f-b741-36e140d1b8bf", "af5ba96f-4003-454c-870a-b27479daba15"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "52155e4c-38ef-4795-879c-3c45a71af190",
      name: "pe6BC2Sel2QniqdOC9my1YOO8CjR0YFmv40UM5wZgue67e0YlrO8E3L7gW6pVOxZ4jRFNa6hoBOihdHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8FkE6WXDem2rgSzz35aQ4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2Zanh",
      postal_code: "2811336",
      address: "4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9T54l9EXWThBhNBtq0Hlr5VUDcRjPWhcWE5Ed0Dp6qm5enNIYlp4WuULLQB3hzZG357PPnWlMQlOO65IFrI1BJMiWPv5dAbUBWta68v79KNgsodWT1kP64chZLEzZTeXAsCUOeSILicKJugPM",
      tel: "03-7477048",
      email: "5lpizelx6Z@w3AN.com",
      external_id: "kreMSnigb4Yb3t6kmvyhjD7Y1lgzqI",
      private_money_ids: ["43250fe8-4cb5-444d-8c93-1e705efc32d5", "16c61370-cd41-4365-b590-c9529fa02f98"],
      can_topup_private_money_ids: ["ba929a21-5b18-4df1-9716-529db65ceddc", "02c7d9bd-3260-4b7b-986c-ec040706a33b", "0566fbad-b054-4c89-9b95-8f50b7eaf50d", "90d7e3c1-c7b3-442c-90c2-a24e0e87605b", "a78a956e-b91d-44d0-8a60-7bafd188a0ef", "820abc23-9d9d-48b0-bc43-91fc93ecc204", "6b3661c8-0960-41b1-ab15-1d305711bcc7", "4e9936d1-6b62-4a39-975f-c0364fdf18ca", "e73755fa-3863-455e-a57d-da1679da01e6", "52e812b7-d326-4c66-a0b3-45c8ec500426"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 9535
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 102,
      per_page: 1503
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "H-3-2f7yZ-n9----e-30kbsk2H-5J",
      page: 9536,
      per_page: 6615
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be",
      page: 6767
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be",
      per_page: 8597,
      page: 1535
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be",
      from: "2024-12-08T06:37:38.000000+09:00",
      to: "2020-07-16T06:50:03.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be",
      from: "2022-04-22T20:39:59.000000+09:00",
      to: "2024-11-03T15:43:37.000000+09:00",
      page: 3422
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "d131a915-2939-44d5-b344-449adb4679be",
      from: "2021-10-26T10:22:45.000000+09:00",
      to: "2018-11-01T03:17:05.000000+09:00",
      per_page: 4205,
      page: 9413
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b4a13703-72b5-48df-a681-fa2a8a01203f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b4a13703-72b5-48df-a681-fa2a8a01203f",
      to: "2018-07-15T00:33:11.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b4a13703-72b5-48df-a681-fa2a8a01203f",
      from: "2018-07-24T11:19:37.000000+09:00",
      to: "2023-01-31T09:07:02.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      per_page: 7343
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      page: 9552,
      per_page: 7609
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      to: "2024-09-20T10:53:55.000000+09:00",
      page: 5958,
      per_page: 1442
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      from: "2017-11-29T20:43:11.000000+09:00",
      to: "2020-05-30T15:52:42.000000+09:00",
      page: 1053,
      per_page: 3349
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      is_modified: true,
      from: "2025-02-24T04:54:25.000000+09:00",
      to: "2019-12-01T13:38:41.000000+09:00",
      page: 5983,
      per_page: 6393
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      type: "payment",
      is_modified: false,
      from: "2020-07-02T14:49:07.000000+09:00",
      to: "2019-08-29T20:35:46.000000+09:00",
      page: 7932,
      per_page: 5630
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      receiver_customer_id: "3993cd9a-11d3-4104-9fca-a2d88e375a31",
      type: "payment",
      is_modified: true,
      from: "2018-11-20T04:50:09.000000+09:00",
      to: "2016-06-28T12:28:35.000000+09:00",
      page: 5166,
      per_page: 3158
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "819bf434-af03-4a40-8804-5264b88b8484",
      sender_customer_id: "a787810d-87e2-4623-8a99-ec71932d38c8",
      receiver_customer_id: "9d76b908-ed3a-472c-9dd8-8d11e30abff5",
      type: "transfer",
      is_modified: false,
      from: "2016-12-09T06:48:17.000000+09:00",
      to: "2020-11-06T00:17:22.000000+09:00",
      page: 5123,
      per_page: 7722
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "7f57284c-0b6d-494d-b83e-485fd160e90b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "4ef2175d-7684-4097-b194-1ffa5d017726",
      shop_id: "1e245c99-43dc-473a-9eee-1c0b3c745dcb",
      amount: 9801.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "4ef2175d-7684-4097-b194-1ffa5d017726",
      shop_id: "1e245c99-43dc-473a-9eee-1c0b3c745dcb",
      amount: 9801.0,
      expires_in: 7279
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "4ef2175d-7684-4097-b194-1ffa5d017726",
      shop_id: "1e245c99-43dc-473a-9eee-1c0b3c745dcb",
      amount: 9801.0,
      description: "9uBoqN3XKkwmXFnLL0vhZmz7rucmF8n8VnjFo",
      expires_in: 3270
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "6d096d89-6d7d-4973-b5e6-5eaba6f343bf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "1cb4ca07-29ff-4a9e-b608-9714163d2bb4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7bff8809-3fed-4076-bcd8-094bdba92a0e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7bff8809-3fed-4076-bcd8-094bdba92a0e",
      expires_in: 958
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7bff8809-3fed-4076-bcd8-094bdba92a0e",
      description: "0yIYDrOmfZvcfCdES8HHJf50TC5y2HNrP34hD1uxIbudPgKcAH4LqtvnYdJrsgVxWy0PirB5ccKSjPsnaJy0xSUaUZ3KYipGveNp11WiSr08uCzB0JSt7hZNL6cvcqBnhGnyRs1ZbgEX46DL0EY9Dfg2K2KSBJ32yceHkpeJS53rQYrIERvl0KriuNlhP5RwfRsd",
      expires_in: 212
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7bff8809-3fed-4076-bcd8-094bdba92a0e",
      amount: 4590.0,
      description: "nsKFojcLOuuurZaaP5z",
      expires_in: 599
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      dest_private_money_id: "eca18a8b-ab81-43b3-8b6f-06e8656caf2b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      max_point_amount: 720,
      dest_private_money_id: "4f3768ae-22da-4313-b325-fe2d9c5bde41"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      exist_in_each_product_groups: false,
      max_point_amount: 4537,
      dest_private_money_id: "c6cc970d-bca9-4d9b-a5f0-766b76638e61"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      minimum_number_for_combination_purchase: 4593,
      exist_in_each_product_groups: true,
      max_point_amount: 4835,
      dest_private_money_id: "e8bb8040-b601-42e2-ab0f-2044f106eeee"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      applicable_shop_ids: ["6fbcfb5a-0299-4011-b292-c6a9da8eff1f"],
      minimum_number_for_combination_purchase: 208,
      exist_in_each_product_groups: false,
      max_point_amount: 4291,
      dest_private_money_id: "9367ec8d-e0e1-4b66-9394-5e081157169b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["e885454e-b1d4-47c2-91bd-9f87c6697a11", "74786b58-3349-41d6-bf91-02b1e48ef5f7", "2295443d-a283-4e9b-98ac-e9c7ed07dcfd", "0f86c909-1bf0-498a-b10c-733baf6135d2", "4d0c1886-94ee-4bb3-9508-d194404a7398", "8e671c3d-5c09-4621-b416-c4cb7286cf3e", "c19527d1-af73-428c-9faf-73af7a74f72b", "1edbcfc1-3a13-49ed-a4d6-0327770f5089", "c3bae418-3813-4c2a-a301-eed1af1c4822", "76e611a4-f13f-4b90-b20d-d355930b0fbd"],
      minimum_number_for_combination_purchase: 2079,
      exist_in_each_product_groups: false,
      max_point_amount: 4457,
      dest_private_money_id: "522fcd4e-faf5-4a32-a67f-860b501734a5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      applicable_days_of_week: [3, 3, 0, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: [],
      minimum_number_for_combination_purchase: 9527,
      exist_in_each_product_groups: false,
      max_point_amount: 4781,
      dest_private_money_id: "2206885a-c677-4e0a-8db3-1bd865ebcdfc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 1, 1, 5, 4, 2, 1, 1, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["5d4fca92-4a71-40e1-873b-56aaa6d7f92f", "3ee549b2-1070-4c39-81e9-b080a1caa772", "d95164d6-a80e-4ece-bea2-947e362d672b"],
      minimum_number_for_combination_purchase: 7080,
      exist_in_each_product_groups: false,
      max_point_amount: 7843,
      dest_private_money_id: "40ab8529-fb10-4f8d-bd4d-bc24e45032cf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 3, 5, 1, 5, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["cf7805a8-db81-46b2-a5f3-f29de22d4b9f", "d729c162-3a05-47be-8dfa-8a06f70d1735"],
      minimum_number_for_combination_purchase: 5064,
      exist_in_each_product_groups: false,
      max_point_amount: 9383,
      dest_private_money_id: "f7eff38e-9f80-44c7-8067-58ff460f0ba1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 3, 1, 4, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["2e039149-c5d0-4815-beaa-fd3c06950347"],
      minimum_number_for_combination_purchase: 791,
      exist_in_each_product_groups: true,
      max_point_amount: 9272,
      dest_private_money_id: "c7df64ca-2347-4c42-bec3-3b00e1548f9f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 2, 5, 0, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["08ae7609-c839-463e-b677-edbb9446e466", "ef4f316d-778a-40d6-b2d7-22f266970e4b", "99a0b664-64b8-4920-9ae3-9a6b5bb7156e"],
      minimum_number_for_combination_purchase: 5985,
      exist_in_each_product_groups: true,
      max_point_amount: 7832,
      dest_private_money_id: "d8ab7c50-6e6e-4a1c-b09e-001fbe9d0ab3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      point_expires_in_days: 2287,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["ee599681-43e5-44af-82ec-f8e5a34ee48e", "f262e4b3-ee70-451b-b0cf-8ca88ae07d62", "e11db238-b276-4022-bfcf-5bc19abb9c2a", "16010acc-3905-42e5-bd43-5461a3c3b49b"],
      minimum_number_for_combination_purchase: 1120,
      exist_in_each_product_groups: true,
      max_point_amount: 3334,
      dest_private_money_id: "40305cac-ce88-4586-8eda-18df08db3f1e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      point_expires_at: "2016-11-05T15:29:58.000000+09:00",
      point_expires_in_days: 5036,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0, 0, 1, 4, 6, 5, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["e538a9aa-51df-4293-b608-d65926f28329", "b923cd40-e006-4830-9759-12ebcaa38ce6", "75987f7c-0af1-4ac1-b2eb-71568f57ea06", "3371fe4f-5791-4c2c-803d-6efb8dcc96f8", "24ec43bf-e728-49f4-8806-3261a68e0251", "73c6d820-f50c-47e2-8ff1-baf2aeaf32e5", "3a1161eb-a878-42ea-aa20-f4b65978a1de"],
      minimum_number_for_combination_purchase: 7329,
      exist_in_each_product_groups: true,
      max_point_amount: 71,
      dest_private_money_id: "89f84ee2-b773-4c9d-9c1a-51c99f44bca4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      status: "disabled",
      point_expires_at: "2018-08-04T20:37:22.000000+09:00",
      point_expires_in_days: 4547,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5, 0, 3, 1, 1, 5, 0, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["de8e4292-6dcf-44f6-9c6e-afb3051aa853", "af29f425-4c7e-47c8-b716-1d8be8f18f6c", "ce4285ea-7620-4829-8c71-28076bf5b6c5"],
      minimum_number_for_combination_purchase: 1137,
      exist_in_each_product_groups: true,
      max_point_amount: 8456,
      dest_private_money_id: "cc8150aa-fd2a-4b71-8397-e2e3b61d89d0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      description: "OpWjivoOnvdw0Yvld3IeJyhTlRgTT2NxSiphZRlLoLjMm",
      status: "disabled",
      point_expires_at: "2021-08-03T13:36:06.000000+09:00",
      point_expires_in_days: 3234,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["6489e799-4914-43ad-a087-d11071c5e4c0", "8f0b6de8-8883-4465-b474-72c8c0df2283", "712e7150-2d3e-4508-9ce4-adec88ad02c0", "44110c76-40cb-4f60-b88d-a543a41e6b19"],
      minimum_number_for_combination_purchase: 3129,
      exist_in_each_product_groups: true,
      max_point_amount: 3601,
      dest_private_money_id: "ba37690c-f651-440f-aa7b-4a958ac39194"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "itJAWBnMTQrqQLb4F279GcsdDtM3uSEYbuaOy1AtJbZFvX4DTrnYj6rE9HuWGm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y2wPxWWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct5yQNjVn35rDh040vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdG",
      private_money_id: "d1aaf9c2-beff-41b4-9bdb-ce74be67a232",
      starts_at: "2020-10-04T07:43:01.000000+09:00",
      ends_at: "2020-10-14T13:43:20.000000+09:00",
      priority: 6480,
      event: "payment",
      bear_point_shop_id: "ab8c0140-83ef-4e02-aa08-c2ce125faca9",
      description: "N0zqICt7BPEIsHw9iaxaPzoaDv6U6SXLkHad9cOSRej1Twb2rvpiwJLSyhoqY6ZnwMWmZEdo3TtkAPfziyB2HYxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOo",
      status: "enabled",
      point_expires_at: "2022-11-01T05:35:52.000000+09:00",
      point_expires_in_days: 5639,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 5, 1, 2, 0, 0, 1, 1, 1, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: [],
      minimum_number_for_combination_purchase: 7599,
      exist_in_each_product_groups: true,
      max_point_amount: 4174,
      dest_private_money_id: "a1f74d90-c704-4f0c-af67-4615aaf6a586"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "24c988af-3705-4073-9568-4e0c889cfd0f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "24c988af-3705-4073-9568-4e0c889cfd0f",
      per_page: 5906
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "24c988af-3705-4073-9568-4e0c889cfd0f",
      page: 3530,
      per_page: 4625
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "24c988af-3705-4073-9568-4e0c889cfd0f",
      is_ongoing: false,
      page: 60,
      per_page: 5755
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new GetCampaign({
      campaign_id: "b4f01962-5588-4618-b5e3-fe6692368944"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      max_point_amount: 7493
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      exist_in_each_product_groups: true,
      max_point_amount: 3636
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      minimum_number_for_combination_purchase: 189,
      exist_in_each_product_groups: false,
      max_point_amount: 1906
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      applicable_shop_ids: ["2b936e9b-13bf-4b6d-ac6f-74034e06c412", "0a8a4537-790c-47ca-8dce-f60741d150a8", "0e9d266d-ef47-489b-9bd5-1465e3b9130a", "edf5229e-0415-4002-96bf-099358f64da9", "6cf89eb8-68df-468a-8af4-3cf1354910ef"],
      minimum_number_for_combination_purchase: 4711,
      exist_in_each_product_groups: false,
      max_point_amount: 5114
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["4893f3d7-1c5d-4b30-a055-8ff5291366db", "6c69519c-629e-42bf-a323-61b53531887b", "cac225f5-bae7-4c91-be95-a532bb7497d3"],
      minimum_number_for_combination_purchase: 3185,
      exist_in_each_product_groups: true,
      max_point_amount: 4805
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      applicable_days_of_week: [0, 2, 0, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["fc204909-3519-4d1e-bd35-8d5d3d169acf", "159ee39a-ee51-45d1-b925-4fc7dbd3f582", "1365dc6f-fa85-4a9f-92e5-2926fd531d68", "e06e2410-d2e1-4b1d-8089-759951d9f9d3", "12b6fb2b-6a0d-49b9-8ffe-67b20e76059c", "c9fc551c-2b2f-4401-a188-6809e97d96a6", "b2ba4994-39cd-411a-b3e6-b87388676ddb", "8cace26b-f9e0-418a-b158-03b8044562d7", "779fc197-313e-43e2-ab78-315fb6acb75d"],
      minimum_number_for_combination_purchase: 3467,
      exist_in_each_product_groups: true,
      max_point_amount: 1927
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [1, 3, 2, 1, 6, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["bf4ddf7c-702f-4a90-b958-e27eade269e0", "ce2d24a8-c4f5-407b-8d56-502cdec1c4fb"],
      minimum_number_for_combination_purchase: 9060,
      exist_in_each_product_groups: false,
      max_point_amount: 3475
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5, 1, 5, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["01e68ff7-3162-44bb-b5b1-57a56f0646ba", "6148651b-d07a-4155-84ea-8e81416eb166", "dcba48f9-1721-4e2a-8702-f470e38ce69f", "cc091380-7513-49ce-a6de-a46bc0796849", "3eed742b-e7e9-4302-9544-f75b3c2bfc98", "e531b5ae-1976-43f3-83ba-90ab8b9b1764", "889ba0a5-3e30-4037-bd4c-536961975b82", "ea40fb33-8dc7-49f9-bc99-89ad4f181a86", "bddc371e-a492-47a2-9245-5de40a36cb74", "4c533723-6fb6-4a47-8781-014a800c3331"],
      minimum_number_for_combination_purchase: 5027,
      exist_in_each_product_groups: true,
      max_point_amount: 7792
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      subject: "all",
      amount_based_point_rules: [],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5, 0, 4, 2, 5, 3, 0, 6, 0, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["bee2cf2d-d7ca-43aa-b51a-4ebe00997e53", "09acb4e3-2172-4145-87e3-bf592d5edcb5", "d8f5f049-d7b6-499d-b623-33feb27056bb", "b3792759-b3a1-4e7c-8aaa-f094c7667128", "b7053e7f-bf7c-4b71-85e3-e261ad76eeee", "9369ca73-8853-4b73-90b2-f3633f4f2aa3"],
      minimum_number_for_combination_purchase: 2184,
      exist_in_each_product_groups: false,
      max_point_amount: 5902
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 3, 5, 0, 1, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["80fa11ae-7cd9-4ee1-ae11-d56e68d4cf0f", "43ae0151-cce2-48d6-ba94-d4d1a26f68cd", "d7580739-a35a-4ab6-86d2-2ec70c3a1ab0", "914f49eb-8ebc-498f-8318-5b9805f68e73", "94213f14-5c26-41d0-a422-31ff4afc4e7a", "707704f7-0c90-4f45-b21d-ee7defd8da2c", "b462c8b5-da11-4b6d-9888-97081a5bfe2b"],
      minimum_number_for_combination_purchase: 703,
      exist_in_each_product_groups: false,
      max_point_amount: 7624
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      point_expires_in_days: 3067,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 6, 3, 6, 2, 1, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["f1094468-4949-49fb-ba2f-406f0e45d18f", "52fd75ea-5cd6-400f-9aef-50c1e88924f0", "2d046b65-3f30-470f-9663-6306f65a840e", "7b90fcc1-4358-47ba-8256-794a4a599929", "2d8c8fce-59a7-43fd-858a-e89b3b8bf004", "32acdb9c-1895-4493-81ce-c410ddc19920", "f28912b8-cf27-4cb1-89cc-f707fdbcc7c9", "a79caefb-cf8b-4234-afb4-837888d770a4", "009dc68d-1e27-4abb-bf4c-35b32154056d", "6e7e782d-5723-44a1-a628-49f2cabbf3c0"],
      minimum_number_for_combination_purchase: 7111,
      exist_in_each_product_groups: true,
      max_point_amount: 1745
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      point_expires_at: "2025-04-21T04:23:00.000000+09:00",
      point_expires_in_days: 8390,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [],
      applicable_time_ranges: [],
      applicable_shop_ids: ["3becf6fc-cb2b-4f3c-a1fa-0044dbeff543"],
      minimum_number_for_combination_purchase: 4223,
      exist_in_each_product_groups: false,
      max_point_amount: 1573
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      status: "enabled",
      point_expires_at: "2020-04-21T06:16:01.000000+09:00",
      point_expires_in_days: 7058,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["8f1f9d67-0929-45b5-ac91-bb80077cac13", "4a935051-af26-4e4b-bf13-978d36771f13", "e2d9a39d-4ebe-4be9-bb72-a8a47cfa3268", "f1f7cef2-a6be-4bc2-9fa0-a13d9391e0d1", "3aac7649-43ed-48c2-a281-73266bd27ebd"],
      minimum_number_for_combination_purchase: 4010,
      exist_in_each_product_groups: true,
      max_point_amount: 3015
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      description: "Gr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB",
      status: "disabled",
      point_expires_at: "2018-09-06T03:48:57.000000+09:00",
      point_expires_in_days: 9791,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5, 2, 1, 1, 2, 6, 3, 3, 5, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["7661bbe8-a8bd-4360-850c-24479f5b5086"],
      minimum_number_for_combination_purchase: 9149,
      exist_in_each_product_groups: true,
      max_point_amount: 6952
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      event: "payment",
      description: "kkP2VIP",
      status: "disabled",
      point_expires_at: "2023-09-19T22:15:38.000000+09:00",
      point_expires_in_days: 2872,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 5, 6, 5, 4, 0, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["d3beb8b9-c73a-4edd-a008-7bbc7537621f", "345c0d12-b142-4029-8228-74b1531a389e"],
      minimum_number_for_combination_purchase: 7449,
      exist_in_each_product_groups: false,
      max_point_amount: 2436
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      priority: 9964,
      event: "external-transaction",
      description: "0n87A30l6vspNWH9u8x4Yq2mxjIub5W9d4fa79SnOHSfjKkp3QkI11kPUOWIOCC9XRXSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ffYAe6kpXiCTiSBUIe5iqIMOcjyqBKlSFGLuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb",
      status: "disabled",
      point_expires_at: "2020-04-28T20:43:59.000000+09:00",
      point_expires_in_days: 6920,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 2, 2, 4, 4, 2, 4, 4, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["747fae14-af66-4921-a5c4-8a13c881f9fd", "9659d447-1459-45d1-a1a1-1a3d2cab8ddb", "1029f3a2-29b0-4851-9740-e009da5deadf", "0fbd8e50-f3c3-4943-a21c-73b6765dbe99", "203f0e30-43a4-4e94-84c8-4a549efacafc", "ac381fb3-40b9-48db-bd80-4b7b338e4908"],
      minimum_number_for_combination_purchase: 5040,
      exist_in_each_product_groups: true,
      max_point_amount: 8867
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      ends_at: "2025-06-07T02:14:33.000000+09:00",
      priority: 5021,
      event: "external-transaction",
      description: "oSQFYDUU0HuG332kYdREQC39nZBUv4F8J7UzyDYEv7bctcmIqdmvTV8RBzp0gixsKZWoUeORL98QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8HDe",
      status: "disabled",
      point_expires_at: "2016-05-07T19:29:26.000000+09:00",
      point_expires_in_days: 3380,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 4, 4, 1, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["d65cf7fb-5d82-405e-9120-8a9fc0c46d1f", "9e88ef95-1593-46a1-8f19-9a60092bc3f3"],
      minimum_number_for_combination_purchase: 3616,
      exist_in_each_product_groups: true,
      max_point_amount: 8953
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      starts_at: "2016-08-13T20:10:38.000000+09:00",
      ends_at: "2016-11-14T18:20:46.000000+09:00",
      priority: 9121,
      event: "external-transaction",
      description: "30oRsSLi4FAWjvNFlMGhO7MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A7Ast7GZKKewMQbpvWdRI",
      status: "enabled",
      point_expires_at: "2025-03-17T06:48:24.000000+09:00",
      point_expires_in_days: 8597,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0, 4, 1, 2, 3, 4, 4, 1, 6],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["046e6a7c-2f62-4722-ba81-b9d734c144f5", "3742069a-c681-4724-876a-4b15c1416b32", "8a03eb07-581e-408d-bedb-372624655338", "4a42f20d-59e2-4611-bf03-dafcb8d0486a", "63ff650f-b3fa-4b6f-8d60-6f0d69b492eb", "fb5f34d5-60e6-4151-82a5-49da0209ae79", "aa2fd1c7-6bae-4bb6-ba11-47f17ebbc2ec", "0e9bc339-1e6b-4c76-897e-89ba080ccf20", "8c6a32e3-c4b3-4d75-bb8a-4ee765eda1d1", "17faa682-3088-4515-af66-efd65a7ba503"],
      minimum_number_for_combination_purchase: 3684,
      exist_in_each_product_groups: false,
      max_point_amount: 8134
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "fe464f9b-7468-41c9-a492-9ea38bcc6f7b",
      name: "OAlMUYblAnOJUw5uYgLUj2",
      starts_at: "2021-08-24T06:17:07.000000+09:00",
      ends_at: "2018-05-04T02:02:25.000000+09:00",
      priority: 1197,
      event: "topup",
      description: "5Kh7Upt9fM2ThdFR4ZGmC3lYSdkRdIHlBo7iMGslQe",
      status: "enabled",
      point_expires_at: "2024-01-05T23:46:09.000000+09:00",
      point_expires_in_days: 1679,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [],
      applicable_days_of_week: [2, 2, 3, 5, 4, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: [],
      minimum_number_for_combination_purchase: 4588,
      exist_in_each_product_groups: false,
      max_point_amount: 8846
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

