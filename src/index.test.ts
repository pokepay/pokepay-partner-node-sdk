// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfers, PaginatedTransaction, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Transfer, AccountWithoutPrivateMoneyDetail, BulkTransaction, UserTransaction, ShopWithAccounts, ShopWithMetadata, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, Check, Bill, AccountBalance, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfers, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, CreateTransaction, ListTransactions, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "acDgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccounts> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "7c419418-aa59-4e5c-bbdc-7d8d6bf88c31"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_to: "2023-12-04T19:51:42.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      expires_at_from: "2023-01-15T03:20:22.000000+09:00",
      expires_at_to: "2016-07-18T17:09:40.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      per_page: 2394,
      expires_at_from: "2025-01-10T04:46:02.000000+09:00",
      expires_at_to: "2024-05-11T03:04:24.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "cc450cba-668f-4380-854c-2e6dae6d9426",
      page: 5477,
      per_page: 8394,
      expires_at_from: "2022-03-09T11:53:53.000000+09:00",
      expires_at_to: "2019-09-12T11:19:03.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_to: "2023-10-14T15:41:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      expires_at_from: "2016-02-07T23:51:43.000000+09:00",
      expires_at_to: "2023-06-26T07:13:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      per_page: 1280,
      expires_at_from: "2017-09-19T20:56:50.000000+09:00",
      expires_at_to: "2021-05-01T18:07:44.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "c3851eee-c081-4e48-9428-8ce6203ac303",
      page: 7954,
      per_page: 183,
      expires_at_from: "2017-07-15T07:24:12.000000+09:00",
      expires_at_to: "2018-02-11T05:24:08.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_to: "2023-02-11T07:47:16.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      created_at_from: "2020-01-01T12:00:03.000000+09:00",
      created_at_to: "2019-11-19T15:40:21.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      per_page: 834,
      created_at_from: "2018-07-13T05:22:58.000000+09:00",
      created_at_to: "2023-08-30T00:52:57.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "7f94c950-6ed6-47a1-b8d4-2c8895d41b68",
      page: 9263,
      per_page: 4380,
      created_at_from: "2024-01-01T10:34:58.000000+09:00",
      created_at_to: "2019-09-03T13:00:52.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda",
      account_name: "9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRtt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "fd0fc06a-a30a-44a4-af4a-a70303774cda",
      user_name: "S46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa6h6AAgB9jXehhbgsnyiHZ1n3qwk3r3QhfSXAhy6Q6NsE0G4ETHn0hBw4No1YXyGaN9eZjSIQORsTn19Lt83I",
      account_name: "Rfp6apsZzwHUgb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      created_at_to: "2017-05-02T07:13:19.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      created_at_from: "2019-05-07T16:43:54.000000+09:00",
      created_at_to: "2021-06-24T03:05:57.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      per_page: 758,
      created_at_from: "2019-07-01T07:29:17.000000+09:00",
      created_at_to: "2018-01-12T01:15:29.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "bf2c34bb-d803-4020-8e95-e32cf7071b23",
      page: 7453,
      per_page: 6265,
      created_at_from: "2023-03-02T16:53:14.000000+09:00",
      created_at_to: "2023-06-11T02:57:46.000000+09:00",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 8459,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 2642,
      upper_limit_amount: 4412,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "c5a081b5-2306-4dd5-9066-8fa43128c503",
      lower_limit_amount: 1373,
      upper_limit_amount: 612,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "KJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCbHnT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl",
      shop_id: "0e8432df-1229-4cb5-b6c3-68412cf8a548",
      lower_limit_amount: 8572,
      upper_limit_amount: 1896,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2024-10-18T17:18:17.000000+09:00",
      shop_name: "5u0YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlnsa7zuy1tusdwen7Z1wrrgdxWfKkMLwrBpORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36l34SSSOxW72gqSjd8QPzbjt0rt7UmerReZGbvGgvAZbyLJ1Lea6an4P1AnQALadFsAzgfKjbtuXgZDed",
      shop_id: "59cc8126-a2c9-44a8-a02e-662887d7527f",
      lower_limit_amount: 9162,
      upper_limit_amount: 7252,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2017-08-03T19:43:38.000000+09:00",
      created_to: "2018-08-22T12:36:17.000000+09:00",
      shop_name: "nOhGiwZBj5AvHdO2AtfcLabY2vDzXzQx3sP8V6IT9VFC5bo0KXfPASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exA",
      shop_id: "3a09933c-d79a-4c61-b223-697af9fa436c",
      lower_limit_amount: 7262,
      upper_limit_amount: 9879,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "rgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1wTnktL",
      created_from: "2020-10-13T07:39:34.000000+09:00",
      created_to: "2018-01-11T09:13:19.000000+09:00",
      shop_name: "BvD7caRgncONv8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47",
      shop_id: "fca68fdf-e379-4a07-a60b-6dc76fca1bef",
      lower_limit_amount: 9975,
      upper_limit_amount: 9191,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "0-NI-25d2-CwW",
      description: "JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy",
      created_from: "2023-08-21T17:45:32.000000+09:00",
      created_to: "2018-01-16T12:49:02.000000+09:00",
      shop_name: "5w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO",
      shop_id: "6d2c30b7-cb67-416b-87cf-29045c2afe97",
      lower_limit_amount: 796,
      upper_limit_amount: 915,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "05d0f501-30fb-4b6a-82ab-c4c34b5e2792",
      organization_code: "-Z10sqS2Z-V79-dtNkY7ifIRY",
      description: "BryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi",
      created_from: "2016-09-12T12:15:14.000000+09:00",
      created_to: "2025-03-18T03:16:46.000000+09:00",
      shop_name: "2IzWH9emhQ0",
      shop_id: "8dd978fb-fe7f-423d-8394-80f1ffcb1b3e",
      lower_limit_amount: 1270,
      upper_limit_amount: 8733,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "rhy",
      private_money_id: "b31a1952-5467-492d-b978-26a57064bdf8",
      organization_code: "8dDncR81k54kQ2",
      description: "AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iS",
      created_from: "2024-04-06T22:53:16.000000+09:00",
      created_to: "2024-05-14T16:49:08.000000+09:00",
      shop_name: "ZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsb",
      shop_id: "c8ec16a7-378f-4e71-98ba-edebe6006f57",
      lower_limit_amount: 5083,
      upper_limit_amount: 3998,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 7054,
      bill_id: "hxkWkSb",
      private_money_id: "8af5ccc3-262b-402c-a389-6851123c6dd6",
      organization_code: "km04YsY96x1-RN-c-",
      description: "0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3",
      created_from: "2017-05-06T05:18:03.000000+09:00",
      created_to: "2020-10-04T07:13:15.000000+09:00",
      shop_name: "JFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8J",
      shop_id: "c5282a47-573e-4664-8f0d-c7ba5ae4df99",
      lower_limit_amount: 9663,
      upper_limit_amount: 1089,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 9506,
      per_page: 1260,
      bill_id: "94khcXRAw",
      private_money_id: "11816a9b-b96c-4d0b-8618-83e0e1dc665b",
      organization_code: "6-nbWsiw",
      description: "3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14",
      created_from: "2023-10-17T23:24:23.000000+09:00",
      created_to: "2022-02-13T15:40:56.000000+09:00",
      shop_name: "bs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KA",
      shop_id: "e1400ce0-47d7-451c-9618-89c8bbd88a9a",
      lower_limit_amount: 2172,
      upper_limit_amount: 8069,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e",
      description: "fQtgxVhq9RVZQG6j5A2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "facad46b-9b4d-4eca-a9fe-0e6128248fd1",
      shop_id: "66106f54-fb8f-4630-99fc-fed7cdc0a53e",
      amount: 862,
      description: "pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      description: "wXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVF",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "79d9eb1d-be19-451c-b5c0-095af6364562",
      amount: 9879,
      description: "b9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 5725
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 4848,
      description: "u3R9lJVdDaUu8gKI7uxlsX8tJTVN1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 2143,
      is_onetime: true,
      description: "4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9960,
      usage_limit: 3414,
      is_onetime: true,
      description: "S"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 3353,
      expires_at: "2022-08-21T17:25:16.000000+09:00",
      usage_limit: 9717,
      is_onetime: false,
      description: "KN3fmfJoVUvvyWz4acD4Y"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9626,
      point_expires_at: "2020-12-07T07:33:42.000000+09:00",
      expires_at: "2024-02-22T15:56:45.000000+09:00",
      usage_limit: 5305,
      is_onetime: true,
      description: "59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 994,
      point_expires_in_days: 292,
      point_expires_at: "2020-12-07T16:59:41.000000+09:00",
      expires_at: "2017-08-14T05:37:38.000000+09:00",
      usage_limit: 4493,
      is_onetime: true,
      description: "CDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9174,
      bear_point_account: "5627e643-9947-4ea3-90b4-9afbfb197d73",
      point_expires_in_days: 2389,
      point_expires_at: "2020-07-23T19:05:31.000000+09:00",
      expires_at: "2016-10-24T02:27:19.000000+09:00",
      usage_limit: 8199,
      is_onetime: false,
      description: "FwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7483,
      point_amount: 5088
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 5982,
      point_amount: 9304,
      description: "F6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 1545,
      point_amount: 9480,
      is_onetime: true,
      description: "LjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7750,
      point_amount: 8964,
      usage_limit: 2092,
      is_onetime: true,
      description: "1a7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 9289,
      point_amount: 4294,
      expires_at: "2023-06-15T23:07:14.000000+09:00",
      usage_limit: 5207,
      is_onetime: false,
      description: "PubyeqITUoc5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 7568,
      point_amount: 2074,
      point_expires_at: "2015-11-08T17:04:41.000000+09:00",
      expires_at: "2021-08-30T17:57:47.000000+09:00",
      usage_limit: 271,
      is_onetime: false,
      description: "WI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 3740,
      point_amount: 935,
      point_expires_in_days: 318,
      point_expires_at: "2020-08-29T15:11:20.000000+09:00",
      expires_at: "2021-08-02T14:38:07.000000+09:00",
      usage_limit: 4871,
      is_onetime: false,
      description: "UPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      money_amount: 2753,
      point_amount: 8697,
      bear_point_account: "acd953b8-2978-4cd9-965d-4be75d49686d",
      point_expires_in_days: 4312,
      point_expires_at: "2023-09-14T04:18:46.000000+09:00",
      expires_at: "2021-05-02T05:23:56.000000+09:00",
      usage_limit: 1700,
      is_onetime: true,
      description: "nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7896
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 5516,
      description: "fgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7473,
      is_onetime: false,
      description: "ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 2876,
      usage_limit: 5574,
      is_onetime: false,
      description: "l1xg8SX1voG8Gydqo4fQ7D47J36"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 4633,
      expires_at: "2016-01-15T08:47:29.000000+09:00",
      usage_limit: 3487,
      is_onetime: true,
      description: "f2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2H"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 7673,
      point_expires_at: "2016-04-22T11:52:10.000000+09:00",
      expires_at: "2016-03-11T15:22:48.000000+09:00",
      usage_limit: 1549,
      is_onetime: false,
      description: "rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 8169,
      point_expires_in_days: 3652,
      point_expires_at: "2018-12-31T16:31:21.000000+09:00",
      expires_at: "2022-01-28T23:09:55.000000+09:00",
      usage_limit: 8741,
      is_onetime: true,
      description: "R3czNdwQ9LziqjK5MdQ1lZMyARXVB9A"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
      point_amount: 9500,
      bear_point_account: "ecd3b933-7732-4883-a094-c845b821ae53",
      point_expires_in_days: 2034,
      point_expires_at: "2017-06-10T01:31:40.000000+09:00",
      expires_at: "2022-05-21T19:15:20.000000+09:00",
      usage_limit: 8277,
      is_onetime: false,
      description: "E1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "8fK7SBxethCuCr4dBSWzD3agM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["topup", "payment"],
      description: "CmtviHLHOBHoLHZ5Hyso5u9Osji"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: ["exchange_inflow"],
      description: "3o"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "37d793f6-50f7-450c-bbf0-c731e85e91d1",
      is_modified: true,
      types: [],
      description: "fTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "yBG23J4r5m-Y0T5RdV8-AWz7Z-arBk66",
      private_money_id: "5f7ece5d-8e1e-4c10-b46f-fd08df7f8bf6",
      is_modified: false,
      types: ["payment"],
      description: "f4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "ae278820-8bf0-4c66-a5d8-5300ae21310f",
      organization_code: "-551--RPEW--1N7-",
      private_money_id: "968c2e33-6349-4f80-b26b-a81b8f08e846",
      is_modified: false,
      types: [],
      description: "QksZB6ByT3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "a174c088-526c-457f-9f29-0056a8b8f410",
      transaction_id: "d426d352-c951-4284-be37-22cff830132c",
      organization_code: "XWH-t5u1mKvDD26-e3-S79wquImT32p-",
      private_money_id: "0661f61d-34e2-4d0f-b11a-52aa845f9d24",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "GNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "PB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2I",
      terminal_id: "30329426-2752-4a09-a73f-d2668d8cbc7c",
      transaction_id: "02a9c1fb-936c-4111-96f3-8ff6163f2377",
      organization_code: "-I3w-bd-7d-g-b6iS32WX",
      private_money_id: "071ac1fb-3260-47c6-acb0-f5d9cd7b4bcb",
      is_modified: true,
      types: ["exchange_inflow", "payment", "topup"],
      description: "lCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "49b9c7d9-e808-4cfd-92bb-c5a010426ee1",
      customer_name: "H9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbM",
      terminal_id: "9fbf7b94-f6ea-4580-a147-533d4b3050e2",
      transaction_id: "446f6428-e871-4ac3-8818-aa0a38ec41e1",
      organization_code: "78-b6-7---2-684SFIq7br65V897-n",
      private_money_id: "aa18e04d-f933-4694-b0ec-516759b065ca",
      is_modified: true,
      types: ["payment", "topup", "exchange_inflow", "exchange_outflow"],
      description: "wzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "50c2d693-1828-4a9c-bd16-ca4b87248a21",
      customer_id: "30780644-adf6-4d82-9ab2-30502a96acf5",
      customer_name: "FKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJg",
      terminal_id: "922c4767-6dc9-4ccd-be2f-d0ad93ed9227",
      transaction_id: "51cedb89-ff19-4723-813d-7b15eef5d3b5",
      organization_code: "--0-",
      private_money_id: "71cf1133-99bc-4378-a7d6-9da362ac564a",
      is_modified: true,
      types: ["topup", "exchange_outflow", "payment"],
      description: "FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 7134,
      shop_id: "39fe6fdf-9647-4f13-bf9f-6a06741869b5",
      customer_id: "138080e3-6634-4485-9be2-e3d390a6b5a6",
      customer_name: "VBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH",
      terminal_id: "4e399835-b206-493b-adb6-79e771a94b2d",
      transaction_id: "08afd9dd-0a6e-4a9f-b923-e11535092675",
      organization_code: "l---QRTs---lt858-8ZqO",
      private_money_id: "2c724c4d-7e84-4d3f-b074-3b73c1d4f0f0",
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "BqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 4023,
      per_page: 7995,
      shop_id: "97fac9da-4a1c-4622-8e33-18e40b07f190",
      customer_id: "94ddd3d0-2715-40c7-98ca-2a96176e14d9",
      customer_name: "ssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMP",
      terminal_id: "b93ff5ec-63d9-4a22-99c1-f0ff53003a39",
      transaction_id: "a8d1bb64-0bb2-4d89-b48f-d77b920a7de7",
      organization_code: "Z2-G-4-2-LzD--2Q1m7-mdp-X7--l-6Y",
      private_money_id: "7c2bd41a-f1d0-45bc-b1a1-02108c4685a4",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "A4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2025-03-30T13:25:34.000000+09:00",
      page: 8283,
      per_page: 2322,
      shop_id: "62737187-aaa4-4b01-be8c-a13936d4d681",
      customer_id: "14d5ce3b-6a7c-4462-9ff5-213cb8512173",
      customer_name: "52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaD",
      terminal_id: "228c24d5-1f4d-4423-a721-4c617b71e9b8",
      transaction_id: "dd54d9c8-b55e-4c3b-bd1f-f5bd256a4e50",
      organization_code: "J3--X--9E-G-E2P-um-sY",
      private_money_id: "3aa18985-00cd-4a46-a10d-b9eb1e45bba4",
      is_modified: true,
      types: ["payment", "exchange_inflow", "exchange_outflow", "topup"],
      description: "ttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2024-07-22T11:16:32.000000+09:00",
      to: "2015-12-03T06:29:54.000000+09:00",
      page: 4403,
      per_page: 8576,
      shop_id: "4f60ae8c-1cd2-42ba-bf73-13e77342e07d",
      customer_id: "1984da7e-6ced-49fe-b470-38fc5f3bd71d",
      customer_name: "zruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdz",
      terminal_id: "181cba89-bcc8-4914-ae2e-94d3f896a5bb",
      transaction_id: "e7ee55b5-4981-44cb-abc9-c338061b0497",
      organization_code: "160SXNVg5HI0E--M3of8uvT3y-R",
      private_money_id: "70558694-cc11-440e-8740-148cb4fceabf",
      is_modified: true,
      types: ["payment"],
      description: "Xt2RyxOmHZB8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      description: "VqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      point_expires_at: "2019-06-30T08:46:10.000000+09:00",
      description: "g4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      point_amount: 4444,
      point_expires_at: "2019-07-13T22:26:43.000000+09:00",
      description: "CYdf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransaction({
      shop_id: "8e25c7d9-f464-4db9-8626-69aa96cf69d4",
      customer_id: "fe189182-20d9-4bcc-9bb0-b61465bf9ee2",
      private_money_id: "78fd62fb-1a3c-4a6b-83ab-ae15c3d05781",
      money_amount: 2592,
      point_amount: 1096,
      point_expires_at: "2021-11-30T11:41:07.000000+09:00",
      description: "y6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      description: "l8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      point_expires_at: "2015-12-16T22:34:01.000000+09:00",
      description: "fMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      point_amount: 7978,
      point_expires_at: "2022-10-19T16:21:46.000000+09:00",
      description: "7eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      money_amount: 4243,
      point_amount: 8483,
      point_expires_at: "2020-01-11T13:01:56.000000+09:00",
      description: "Jqy1UyPaGHVkyMSdmemZcovbEU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransaction({
      shop_id: "fcb0bd16-6b06-4a4f-8301-fc15d32dcc20",
      customer_id: "c27ae896-6555-426e-8542-e1d6c261d77c",
      private_money_id: "a6ae709a-892a-4c04-b1c0-11777271002e",
      bear_point_shop_id: "69a5ab96-4de3-4596-b9d4-a369fe058105",
      money_amount: 2708,
      point_amount: 1492,
      point_expires_at: "2018-11-30T22:48:13.000000+09:00",
      description: "lo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "e49c0fa8-4e31-43d8-ae14-2b08babb729c",
      customer_id: "f60f1d6c-d953-4849-9694-3d8e5c033761"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "c886ca86-59bb-4598-bba9-8ba267d61a1c",
      customer_id: "6bad8b5b-d2df-46fc-83aa-f4d437b660c3",
      private_money_id: "e0845d6f-f797-48c2-91a1-fa7aab2b1c63",
      amount: 6275
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreatePaymentTransaction({
      shop_id: "c886ca86-59bb-4598-bba9-8ba267d61a1c",
      customer_id: "6bad8b5b-d2df-46fc-83aa-f4d437b660c3",
      private_money_id: "e0845d6f-f797-48c2-91a1-fa7aab2b1c63",
      amount: 6275,
      description: "PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "6c56e337-f4af-4f03-a3c8-e25cd9a48cbd",
      receiver_id: "98041a69-7551-4883-81ad-0de195cbc08d",
      private_money_id: "4691646a-8b29-49aa-98f0-7e5ee5bcd06c",
      amount: 5552
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateTransferTransaction({
      sender_id: "6c56e337-f4af-4f03-a3c8-e25cd9a48cbd",
      receiver_id: "98041a69-7551-4883-81ad-0de195cbc08d",
      private_money_id: "4691646a-8b29-49aa-98f0-7e5ee5bcd06c",
      amount: 5552,
      description: "9d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "be2c6fbc-56cb-4ae1-a64e-68313ab4ac47",
      sender_private_money_id: "be3fd11b-76d3-440a-822a-4b6b883a19af",
      receiver_private_money_id: "2c9179d4-da6d-4373-ae20-5e826ef29402",
      amount: 5919
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new CreateExchangeTransaction({
      user_id: "be2c6fbc-56cb-4ae1-a64e-68313ab4ac47",
      sender_private_money_id: "be3fd11b-76d3-440a-822a-4b6b883a19af",
      receiver_private_money_id: "2c9179d4-da6d-4373-ae20-5e826ef29402",
      amount: 5919,
      description: "ZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "vsg1mQveiZolVh",
      content: "KjCQVZw",
      request_id: "zstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "vsg1mQveiZolVh",
      content: "KjCQVZw",
      request_id: "zstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG",
      description: "3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transaction> = await client.send(new GetTransaction({
      transaction_id: "d673b109-a97d-42a0-880b-7799c72196d5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<Transfer> = await client.send(new RefundTransaction({
      transaction_id: "32d82dec-280c-42df-b6fc-ad496297d8b3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<Transfer> = await client.send(new RefundTransaction({
      transaction_id: "32d82dec-280c-42df-b6fc-ad496297d8b3",
      description: "LRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "XWwwPUfmYGEVrOM4dkj0diM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["transfer", "topup"],
      description: "xwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["exchange", "topup", "transfer"],
      transfer_types: ["transfer", "payment"],
      description: "SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: ["topup", "transfer", "payment", "exchange"],
      transfer_types: ["transfer", "topup", "payment", "exchange"],
      description: "EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8w"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "ea6e00bb-e650-431b-86e4-48cdaccbadc9",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["exchange"],
      description: "wTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "1b2af91f-9d53-438f-a17c-34dea813eab5",
      private_money_id: "0102373e-1571-4f09-a2d9-0c13d78081e6",
      is_modified: true,
      transaction_types: ["exchange", "payment"],
      transfer_types: ["transfer", "exchange"],
      description: "IZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "AciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpm",
      transaction_id: "fece7a94-33ac-43dd-8b1b-1ec60b163d4f",
      private_money_id: "4caa26ae-5ef7-4ec3-a49f-d4a4805d1b3f",
      is_modified: true,
      transaction_types: [],
      transfer_types: ["payment", "exchange", "topup"],
      description: "BZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62v"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "710e395a-f864-4e60-978f-ed0b8c83d089",
      customer_name: "zxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fC",
      transaction_id: "676dbd9a-40ba-4a2f-8293-7747082d2faa",
      private_money_id: "577226e6-b8dd-4754-bccd-4cfe7433a132",
      is_modified: false,
      transaction_types: ["exchange", "payment"],
      transfer_types: ["exchange", "topup"],
      description: "kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8",
      customer_id: "d2baf7ea-05f5-42ac-b914-2fb87d379458",
      customer_name: "f3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEt",
      transaction_id: "d7f70811-0013-4c1d-adb8-c7c12013eb06",
      private_money_id: "07885b2c-7ae1-4d49-a92e-5e042861b9bb",
      is_modified: false,
      transaction_types: [],
      transfer_types: ["transfer"],
      description: "HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "3e29469a-17b2-46b0-8943-ea20a9463aa8",
      shop_name: "cqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmk",
      customer_id: "a20d7914-8c73-4f41-b14d-9075cd7f7c57",
      customer_name: "1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb",
      transaction_id: "f63fd4bd-c680-4a17-9ea0-4f60a20aeb35",
      private_money_id: "67122ff5-72ef-4080-b8d6-acf957a3c8ec",
      is_modified: true,
      transaction_types: ["payment", "topup", "transfer"],
      transfer_types: ["payment", "topup", "transfer", "exchange"],
      description: "0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 4181,
      shop_id: "d497ca53-85db-4ac6-9f7e-130f60facc7e",
      shop_name: "zRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVr",
      customer_id: "1b0a6269-b223-452e-876d-d758078b1299",
      customer_name: "Qx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA",
      transaction_id: "566b69b3-b424-4f74-9db5-ea1e3a5e6227",
      private_money_id: "e5b0748c-37bc-4f0e-8435-9ab16d4fff98",
      is_modified: true,
      transaction_types: ["payment", "transfer"],
      transfer_types: [],
      description: "gIvudVQKM3ivlyVYA6fe68jt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 2961,
      per_page: 7112,
      shop_id: "574fa437-11ee-49c3-9520-e333596717bf",
      shop_name: "SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS",
      customer_id: "f5e2edb5-db1c-46c1-bebf-d6a4e02c5fe7",
      customer_name: "inlSJbgCOpN21EzYv53e",
      transaction_id: "9357db17-de38-4943-b6b8-512fcdf8e267",
      private_money_id: "0781f93a-c101-4b4c-b63a-02a93824185e",
      is_modified: true,
      transaction_types: [],
      transfer_types: ["transfer", "payment"],
      description: "A1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2022-08-08T04:12:51.000000+09:00",
      page: 7377,
      per_page: 5171,
      shop_id: "bf69ecd5-a5ad-4327-9b27-e24fd1a20650",
      shop_name: "HKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxo",
      customer_id: "b10311e0-7c66-4734-8f4e-08334e59aae0",
      customer_name: "X72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUe",
      transaction_id: "9cababac-1a2f-4644-b13e-9824e057bcf5",
      private_money_id: "1949d3e9-1810-4951-abdd-0a0a4ef7e10f",
      is_modified: true,
      transaction_types: ["topup", "transfer"],
      transfer_types: ["exchange", "topup", "transfer", "payment"],
      description: "WMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2019-08-31T20:27:30.000000+09:00",
      to: "2017-06-14T16:44:32.000000+09:00",
      page: 4999,
      per_page: 6917,
      shop_id: "e984207c-2e3b-443b-936c-c6fe85aee32a",
      shop_name: "2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6",
      customer_id: "d8a0e76f-f801-4848-8673-f7daedbcd2a3",
      customer_name: "h9ksnqTSKQYaLtgBF21Mao0iMx72Mcb",
      transaction_id: "da3f505d-479a-4109-8174-c10a5b6d35f5",
      private_money_id: "0011a1d1-db98-4fdb-a6e2-257726374750",
      is_modified: false,
      transaction_types: ["payment", "transfer", "exchange", "topup"],
      transfer_types: ["transfer", "exchange"],
      description: "Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      contact_name: "mH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_account_holder_name: ",",
      contact_name: "AHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_account: "6986",
      bank_account_holder_name: ")",
      contact_name: "oN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_account_type: "other",
      bank_account: "",
      bank_account_holder_name: "(",
      contact_name: "uv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "1220",
      bank_account_holder_name: " ",
      contact_name: "bqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1D"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_branch_name: "JRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRB",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "7021737",
      bank_account_holder_name: ",",
      contact_name: "ZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_code: "",
      bank_branch_name: "F",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "",
      bank_account_holder_name: "ｦ",
      contact_name: "zeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "yvcn732KUY",
      name: "pvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0m",
      private_money_ids: ["168a35c4-be7f-4452-87f1-46bf34566564", "a3e61a38-206a-4b97-9047-04e996067b68", "a4142ec6-e632-4329-925c-70faa15dc3ef", "55523aa6-cb80-4cb2-8719-bea3cbcdb6ce", "67b30b8e-90b3-419d-bb87-e6510d43c723", "6bb12cc0-4f59-4c44-9f7c-d49f0d28bf83", "700c66ad-49c7-4836-830d-46a63b39d228", "37d6948c-e143-45da-9331-c65bc0677810"],
      issuer_admin_user_email: "PVe5LZzi2N@mWBl.com",
      member_admin_user_email: "uHrzflOytN@d3RO.com",
      bank_name: "jv7EDkwXN76HyKk1SGbd2fzw9nBiK",
      bank_code: "",
      bank_branch_name: "YeHN7C4dOhcXyEVzhZku2OJwUM0kt",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "2",
      bank_account_holder_name: ".",
      contact_name: "hZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 1846
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 2730,
      per_page: 4373
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "ofYseOtl3ilNOPpy",
      page: 402,
      per_page: 6858
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "VjtUkLTSkO@Kux6.com",
      external_id: "3",
      page: 177,
      per_page: 7370
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "00-563879",
      email: "ECVvJsAnqj@el2l.com",
      external_id: "3rWWdK2ybDtXJiikZzBktm983ksDdKfbC9",
      page: 1079,
      per_page: 1405
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "BMvuC0QTfx8l2ZZBjyQqeO19KhFrkx",
      tel: "01-1277144",
      email: "6FFjz1wnjI@RjO9.com",
      external_id: "MofqJJncHBCR1qP1zId4mLJCzHpOgkhaa",
      page: 7668,
      per_page: 5056
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "763-0885",
      address: "LqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRo",
      tel: "0065-8160-1306",
      email: "QjwrUJDS6Q@IEgb.com",
      external_id: "GEOQG1PZp7fjd91zgh1RHHtL55R7Y",
      page: 7166,
      per_page: 8338
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "prC",
      postal_code: "9053661",
      address: "nLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceD",
      tel: "05227-725",
      email: "TtMe3p5Bru@F5QO.com",
      external_id: "x8zwWTQtwhg",
      page: 1688,
      per_page: 6025
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "e9873f9f-83c5-43ad-9802-64d5bb571351",
      name: "pqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxX",
      postal_code: "1991036",
      address: "2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4s",
      tel: "032067497",
      email: "CyIt3Gr6ub@UQRi.com",
      external_id: "cmsa",
      page: 8290,
      per_page: 6018
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "L2Uy-2q20--40B0IWUMW",
      private_money_id: "45838a95-47a0-4d4d-a589-4e265c21275d",
      name: "oBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6K",
      postal_code: "5815995",
      address: "Us7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO",
      tel: "08738225",
      email: "hCIHkbLQ7K@L6y3.com",
      external_id: "doxdn1tpYM1z5XMrmRY7",
      page: 8163,
      per_page: 466
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      organization_code: "--kU--R---1g"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      shop_external_id: "BXbwG5FfObbKUS2wO8",
      organization_code: "UWi--L8gwm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      shop_email: "zUTMMVxGv3@INa5.com",
      shop_external_id: "f54YI1Ph3OUBAsVaG6TxK3slQw2Vv",
      organization_code: "0o-RA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      shop_tel: "088459-2074",
      shop_email: "Bo28vDsYr2@EOFy.com",
      shop_external_id: "Kp",
      organization_code: "X--"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      shop_address: "UK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevn",
      shop_tel: "0971018355",
      shop_email: "l9aDgdNSfm@E5De.com",
      shop_external_id: "5bTvMyH",
      organization_code: "m-o--7u7o-O-Wqrm8Zzn72e4-Z-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "CW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQ",
      shop_postal_code: "5438676",
      shop_address: "DMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yN",
      shop_tel: "060256280",
      shop_email: "0rVCmpqdlL@HNNl.com",
      shop_external_id: "bd",
      organization_code: "5z4r-e-Tl--s-f-m5ymfF2-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      can_topup_private_money_ids: ["0e6f489b-1334-4594-ac77-5b2e8abb7738", "f3036497-49da-4278-8c26-ae35b274686f", "026fad6f-2381-441f-8291-40fe5b392afc", "922e5a43-20d5-4ca6-ab6d-8462be53428b", "6c5824e5-7f21-4ef8-88a6-069c1b3a3bec"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      private_money_ids: ["822fb74f-e83f-4159-907f-136459cb901d", "5433dea3-8052-4100-9fc4-d85234dafb58", "25052fe6-b163-467c-86c5-7acbd8aff9bd", "508eb429-557d-4965-8620-8362d7b90150", "dfc8163e-26c1-43c8-bba3-5f2dc12f0199"],
      can_topup_private_money_ids: ["8dabb798-9ebf-47e1-a08a-baf453f73dab", "a8a2b7e0-ba98-474b-92ed-01ccd2750b97", "22996abe-767f-457e-b701-91cb21a965b8", "3fcbc749-58a6-4523-8dca-4a49b7e07e29", "fe04abc2-a603-463b-91d7-a50d9b04bfa1", "cf0f8331-af28-4bf6-8dc2-501ebf726131", "b496bc52-acad-43a0-bdc3-db3847f29ebe", "110ef3d7-26d1-4425-a324-107c6047df0a", "79afb41b-6c37-4e29-81ae-1227ced97435"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      organization_code: "azH",
      private_money_ids: ["0f914add-112c-4dc1-899d-8cb6dbf260bc", "ce09e05b-797c-4187-8b4d-44f3c5d17887", "7433c307-2c5b-43d2-93c2-65067f7579bc", "5f0a42eb-d2fe-442f-a21f-340c4156811a", "22889c7c-98be-4bae-a6db-3aa470802e88", "40a5479e-6e4e-4b3c-a7e8-41c6e792aa77"],
      can_topup_private_money_ids: ["59ae21ea-fc06-4c53-9b53-5317633fdbdc", "ba359182-078b-4555-abdf-e1f130f09f16", "bcce510e-c785-41ef-b5c7-140b917037d6", "3d670012-cab2-433a-bdd5-d2cc00a5c92a", "d8693066-bd8d-46f4-8be6-edb38f41954b", "95edae7f-914c-4a94-a927-869c8232b32b", "78479f4f-e00f-4ded-b028-5df5655a43ff", "aedad902-cdb6-4bcf-a4d4-babd79dac213", "c5ae3ad9-3ff6-40d9-b188-94197e7a18d7", "e0a9e78c-b74d-4183-9be1-510f99f731c0"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      external_id: "MdH",
      organization_code: "ex-52FNQ6-rgMw-9o-2z00--bD7---ob",
      private_money_ids: ["485b95f2-d2e2-4c28-94e6-18c103903fd5", "dc55b08f-7081-426a-b65e-437b8e8722cd", "11e6a7c7-0714-4b09-b509-1fc40621bdae", "3cba20de-83c3-46bf-a7d1-edc09b6e87d2", "e8869567-7a07-4cac-bde2-9be2c4229bbe", "acf66eaa-c268-411d-8c19-0eb6730262a4"],
      can_topup_private_money_ids: ["fd6ecaa0-afc9-43e6-98a9-4a28b1952881", "fe05f98e-ff4f-4c1b-8ecf-502db63c13f1", "a4be4f64-5dc6-4976-93a8-56a58cd62005", "101decbd-5607-45e3-b6d4-d7203fdeed59", "a9dc1f17-bf3a-4aad-887f-82576733142a", "6d3e02e8-a902-4813-9ecd-81d3a2c0ae63", "595286b2-4194-4d4a-a3f4-813ae0d6a344", "534cda81-1a98-43d3-8375-702fcc2b41dd", "9c43695d-dcbb-413d-9cf8-e970f0a0b8d8"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      email: "IBKjX0wbEI@Ntuh.com",
      external_id: "WyJmxhctiEpL1KlL20SY28CEIpXvCz2",
      organization_code: "O5-5Mk---ta42K3--x",
      private_money_ids: ["1e9be219-1b86-4e61-be70-00be2900f515", "8a7d7a30-269c-476c-8ef3-9ae2daaeea9e", "9c457aa7-1d1f-4338-9c64-c1348a6c025c", "e4e7e4c4-3be3-4721-ba26-25357a60bb9f", "e7db8ff9-a510-41cd-a21a-543ab9ff6955", "d59e9431-15a1-4f54-944e-4e02a1dc8d30", "d8651879-e2d8-4d24-b687-def752387178", "85d6a4bb-230c-428e-99b6-c28fe2673b24", "a8f30ec9-cbd0-4aef-a005-8bd0ff608609", "cb3c3cf9-79c5-488a-b2b8-fcebccf28e04"],
      can_topup_private_money_ids: ["4f6f0966-98c7-4705-ab45-5eaaaa07f7f7", "45f2bb48-6c96-4542-af3a-e3128ef423d7", "2a0af400-1fdd-41cf-a91e-1602d8645271"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      tel: "004-391570",
      email: "yEzfF4ihEM@nqId.com",
      external_id: "LL8T5msTmgqj81R",
      organization_code: "qx9sqt--9bgY7E-6-b---K-j",
      private_money_ids: ["7f99c8e4-4e0e-4304-8af0-05c822058127", "67015b71-0558-4a92-aa3d-a308ec2823a0", "ecba8b3a-883d-422e-b157-ffb790ae42fe", "4c234cdb-ffc4-4b9c-9433-43feb7f1f175", "e797901f-45c3-4d47-bd43-f4094217cd64", "37e7f3a0-6f1a-45c5-a411-ee1ca472a898", "58526233-5ba9-41a9-9a37-096796740cc9", "96c157e3-e104-432a-be4c-3fd3922ca284", "3a590a3f-d6f5-44a9-bf12-a664b78e75d0", "b672036c-26b4-4e4a-8449-bb3c7ba034f2"],
      can_topup_private_money_ids: ["384adeed-2918-4c7e-8c8b-67469fc8efd7"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      address: "JxcGB9NLriuIsMTY",
      tel: "03-76-5199",
      email: "ZaUNPTMagD@SPeH.com",
      external_id: "LGCGYvgqbq",
      organization_code: "724",
      private_money_ids: ["dc46aacc-9db3-476d-9d7b-efd41f87438f", "f6f8bd66-27ca-4e68-94fb-d06a09c9e744", "392e8773-4dae-41b9-9163-c9389341b451", "c57ccb1c-e53f-42ce-8fd5-1d474278763a", "5e0ea876-80af-406e-a874-cd3ae6b1ceab", "8ef880b1-4e13-429e-9579-14631a40583f", "96c1df02-a5d6-4c64-9e68-2e3f0a5428f7", "3353ad6a-a280-4200-b11e-8800db6cdce5", "b2e7f6b7-3d98-4e52-b6e5-4431a35321b6", "231880dd-b6f1-48e5-b542-378dab17dbd5"],
      can_topup_private_money_ids: ["530c5761-b1ab-4fa4-ad3d-8a335203bd5f", "c1e35493-f3ba-496d-8e8f-511b82f717f2", "b4854b1e-df13-4c0f-9f1f-74f4ec44d2c3", "85fcc59c-95f8-4feb-96eb-2c745d4437cd", "c713697e-4662-48a9-ac00-cc0fb17193e4", "94a68ddf-12da-4030-9b2c-7646c8176166", "5b1dec1f-99b5-489c-a1ee-4903df5e429e", "197968e5-2a89-4c05-a9dc-002cb9abc7a5", "b03d8b62-44d2-47be-bd00-165ad044d28c", "d474e7c3-dcde-4389-a830-a5768912527f"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sD",
      postal_code: "495-6981",
      address: "XSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yq",
      tel: "0326004898",
      email: "0H5SsjBGi2@vt3I.com",
      external_id: "VLujfoeXIyA6Ao82",
      organization_code: "-2B4--8---sZwdi3--N--5E9",
      private_money_ids: ["b76dc0b0-76a5-4743-8c9f-cae315705c66", "abbc3d97-d63f-4f1c-af21-3a5f8ddef3d5", "d8d7d37e-734d-44c6-a20b-0b530caa09c9", "9cadd92f-eae4-4cad-854a-11cdb435cec7", "88e4a6fb-4099-4323-915c-eba9d4164eb9", "14c6a408-b42a-4f80-93b8-98fa8d39ca14", "ac472602-f0df-4f1b-838d-9a40f65c8136"],
      can_topup_private_money_ids: ["66ede823-92ef-4974-9397-530ce2972b86", "ea8ad670-5753-493b-8bf7-ea24a78c2f33", "3d610c12-124c-4a6e-a7f0-6d62eb02d47b", "713b18a1-e872-4350-a9bc-3613c21ebd11"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "ce20ca9a-d78f-4ca2-ab5a-fc9e49d54f6e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      can_topup_private_money_ids: ["e4c32796-5cac-49d7-8f0c-ace0a3e37cb5", "23097e7b-08b5-4711-9537-2c7efa4647a1", "a2066044-b953-4abd-a685-8ad95fb37133", "1aa2a04c-8012-41e7-bf3e-75d705f459b5", "8514e04d-b15e-46a6-b2c9-2e200c904040", "dcdf26f6-2ea4-4b52-b5dd-253aec051e32"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      private_money_ids: ["3508177b-d9c3-4b67-8993-bcc2057f9ca7", "4fc82894-5cf9-4d25-b388-8faf48df5765", "67604323-f67b-4187-8c95-04a14ef46154", "e6b165f9-2a73-4ba9-b1b2-6a9c01fc4302", "7f829dc8-a02d-478b-8f2a-00fd0e92bb2b", "dea1b9ba-d3c8-4590-8483-ab8f3bdadd46", "9fd33d1b-9519-4646-a5f1-1a01de1d3c4c", "4a28db5b-3c3f-4683-af27-a9d58a6d9374"],
      can_topup_private_money_ids: ["9e38166d-dfe6-4e4d-bc30-50df1ab71f58", "d63838cc-6c9c-41ab-9963-6de5580f0c22", "5cb7e001-fc60-4751-b8e8-6b3edbcd1975", "9fbb3c95-6b62-49d9-b3fe-beea672d3cd6", "64a0b0a8-5d1c-40d9-a8e2-5ce8d2e01834", "16a08f52-da8d-4aac-800c-6fd7a610f6a4", "247d36b4-6253-4c6a-8a93-9e8d1f5d381c", "ecc14663-4550-45fb-ba11-e902cb2525c8", "c8d9e640-ba75-4eb2-a7ab-2349b7c11470"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      external_id: "HlCgxYlFZzBuHZ8t",
      private_money_ids: ["cdd5fcba-2373-4a68-803e-9d36754cf938", "81d5edd3-5663-4add-bcda-5f845c0563aa", "aa05ebba-84e7-4533-bf61-85acf3669d14", "60a91509-d1c1-439c-8da0-e71bf308b2c5", "ed3df872-f1d0-41df-ade3-1e2c8a4a2bba", "df69343b-a0d6-4d1b-91aa-b9b9d118fb26", "4a5afa6f-5030-4754-8082-198502cd7763", "6e4fd8c7-07a7-484a-a460-45261f704607", "2c485deb-99c9-464a-a704-27035d837452", "cff630cd-7913-44e1-a10b-782770f635e8"],
      can_topup_private_money_ids: ["39aab013-ea07-46d4-aad9-20aae00ccf34", "ffcc2442-da38-49a1-b34b-3843cc6bc4e2", "0b4fa473-f573-4964-ae63-7e690e862142", "e219184b-5932-4398-b98f-6ccb6bf948d5"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      email: "yBpazsFHLy@PhoC.com",
      external_id: "WrzikH0DrThI9ndCARX9iZhU",
      private_money_ids: ["83673a77-0ad5-443d-b273-5b517775a689", "953bf0e0-b40e-4a9b-bb9d-26b8fc8ecf55", "d7d5c222-84e9-4c6a-9f05-390f483a3693", "c4fe4126-295e-4f6f-b58f-b12137b9c735", "b745fd91-9b3a-432e-a4f9-d5284d9b993b", "ae8c5709-9a3e-4469-a08a-53c2cdbe40f8", "34d08a58-f6e2-4a4b-9759-9e0da227ea06", "af78f8fd-d33a-4f68-acf1-c7c9d521ccd1", "e8f35163-9841-4644-a641-912ee649e923"],
      can_topup_private_money_ids: ["abff721a-a93c-40e8-97c6-5b7c3b9d9ff7", "1eae83a3-a13b-4341-86d3-0baaacd7da5b", "82165317-cd6c-4a6c-b268-18acbf8312fe", "bfa17847-bceb-4bbb-85fa-a31615a0beba", "cd06e73f-a7ea-4cde-a131-fea9d8050b0d", "c0efe1ff-7c4e-4fa9-bda1-a7853e30bb00", "e819296d-f851-4c85-a7c8-cc2e10fe717c", "5f79c8c3-037b-4ad5-81d4-d1c7e56cdcc7", "59fb1bfc-747a-4a7b-ac91-eb35f80476b9", "16adceb0-6164-439c-b4c2-8a245d38423f"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      tel: "05-4844-0217",
      email: "y80f2MmxJU@nd92.com",
      external_id: "rjDmsbpR1t9xme9U0GR",
      private_money_ids: ["4478ce60-f8b2-4ff0-bf87-1f529b6f3c98", "af225aab-5a3d-4976-9abb-06afe7b03481", "cd434e4e-be2f-4517-94f0-48a084d55680", "f1ed2f55-dacc-4bc5-8d6f-2c546bdd7972", "9848eaff-9336-4748-b5a0-5d19f4909570", "3b9a37b2-3dd9-4707-9d35-285934b866c2", "101f3ee1-b05d-419b-be14-46cfc91fa402", "a07ed6da-fe64-4694-93b1-e2ad76b3bf05", "d156808f-7ef3-472e-9920-731d8a63bebb"],
      can_topup_private_money_ids: ["e9e1806f-ce6c-4c4e-895f-63cc45b7fa1e", "0385a24e-05bd-4ea3-a2a1-348027840f08", "6fce7756-2b2f-4d2f-bbdf-258c2d8d7d23", "d2bf4d91-4c7b-45f0-9bde-57c6bb10eb8d", "ee5be500-89c7-45f6-ba5a-e5b3c60424ad"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      address: "4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSH",
      tel: "062-755-801",
      email: "YyK8GIOW0P@GU45.com",
      external_id: "uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQ",
      private_money_ids: ["a5be9cf0-b3ee-49d9-9def-61ddb0abff6d", "f51b3b22-b0ae-462e-942b-241aec023edd", "12302445-fa81-4aa9-8ddb-3032a7ac43e3", "6595e8bf-3f70-4d3e-9899-d21d7c5524c4", "fcf360de-3b1d-4f03-90b4-b7e36850c854", "a17954e8-6b24-4f6b-92c9-d24fddc62bae", "d60add4f-82b2-4ecc-9729-8b60a7502186"],
      can_topup_private_money_ids: ["116a3e30-bebb-402b-a594-99b32b33217c", "148b9706-b6c7-4688-b1f3-e21fb9ab8686", "ac0a1d9a-24d4-4f6d-bbba-6b2685cd9a8c", "76ad8229-316a-476a-8840-d563cbd49b1d", "d4345e4e-a98f-42b5-b787-fbda362280e2", "78439d0b-c32c-49c1-9269-fb99dcc780a0", "66b56cdc-f96b-494a-b2ef-08705fe906c7"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      postal_code: "9091135",
      address: "mve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46",
      tel: "077-389-820",
      email: "KTwWOYBSX4@Ezfs.com",
      external_id: "iIDCSxoowq",
      private_money_ids: ["34fea4ef-6762-4201-be90-9c126b730215", "f012cf4d-2fd2-4b6a-b491-ff4bed527938", "13c9de70-37a3-4a6c-8bf5-9481f41904eb", "9385a89b-4216-44ab-b4fa-4206e8b8464f", "6a5b739e-59ce-4103-b6ec-9473fa342da7", "53edaf88-c60e-4f5b-8b9c-1f5fcdb44304", "127ad82e-aec3-44fd-9841-3f6b390fe83d"],
      can_topup_private_money_ids: ["7de09510-1c8c-4aeb-b037-5a9036fbf6d1", "52f76e2c-af3c-4ab9-bf14-01d9ede1b291", "d0c82075-3ad6-48b2-b778-410c4ad48982", "d7189432-af5a-4885-bfda-9977cf20ef4a", "30d839ce-f629-449a-af50-19bd643c578c", "a189bf4a-8430-47bf-a1d8-d65ea3e2c326", "79159b0d-d522-4f48-9731-8df5f367cc52", "5e35aed7-782c-4bc3-99ad-fb73e56153f7", "3a4ea6df-3f85-4736-9652-edc26b2c0f95"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "6342224e-63ea-409f-a550-22ac41279b9b",
      name: "XAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1F",
      postal_code: "944-4455",
      address: "3N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMC",
      tel: "08614-565",
      email: "HFmQw4OmJs@XraA.com",
      external_id: "GliEBPmHrH76ocsr7yZptwOIMGRxZLk",
      private_money_ids: ["325d040b-35f4-4824-8c64-43d6ae6842b7", "da112f75-1105-4b97-94a1-27e90dc2a2a0"],
      can_topup_private_money_ids: ["40438761-18af-48f2-8672-538e21afc393", "d7285db5-6547-4ad0-8cb0-98f7c5ce1570", "6fcb410c-dc83-45b4-8fec-9db7171410b0", "3966e75a-48bf-4d73-8708-e0f988dbed50", "98816005-696c-4996-8ba4-0d0772fd22bd", "5efcac79-7a9c-4b0a-865a-bb594255c85b", "71750d40-aca8-4652-95be-b95216a21ce7"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 1494
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 766,
      per_page: 3070
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "017Lby1-35w-B7",
      page: 7530,
      per_page: 5456
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030",
      page: 9256
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030",
      per_page: 7027,
      page: 5888
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030",
      from: "2018-10-31T13:47:26.000000+09:00",
      to: "2018-11-14T03:58:20.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030",
      from: "2024-05-30T20:29:53.000000+09:00",
      to: "2017-09-30T20:15:42.000000+09:00",
      page: 1622
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "b68835d0-5a13-4929-8b8b-59d242755030",
      from: "2023-08-10T00:09:38.000000+09:00",
      to: "2020-03-15T03:12:13.000000+09:00",
      per_page: 8191,
      page: 481
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      per_page: 5064
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      page: 1347,
      per_page: 3974
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      to: "2021-01-20T13:42:04.000000+09:00",
      page: 6902,
      per_page: 1255
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      from: "2018-02-21T16:33:11.000000+09:00",
      to: "2022-12-23T09:50:02.000000+09:00",
      page: 3648,
      per_page: 8655
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      is_modified: false,
      from: "2016-11-13T21:18:26.000000+09:00",
      to: "2016-09-01T13:40:05.000000+09:00",
      page: 834,
      per_page: 1391
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      type: "fij6TH",
      is_modified: true,
      from: "2017-10-31T06:31:08.000000+09:00",
      to: "2018-10-16T18:50:12.000000+09:00",
      page: 2538,
      per_page: 5612
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      receiver_customer_id: "dfc5a242-9910-4e02-8acf-8107b715e8eb",
      type: "D3FvwnaI0",
      is_modified: false,
      from: "2017-08-06T21:12:03.000000+09:00",
      to: "2016-04-09T13:38:01.000000+09:00",
      page: 688,
      per_page: 1429
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
      sender_customer_id: "36c35690-a157-4c23-9214-cf5b523ae08d",
      receiver_customer_id: "af934892-343c-4a8a-90ed-9c6d61dbfaa8",
      type: "gc1KGh",
      is_modified: false,
      from: "2023-11-16T02:30:13.000000+09:00",
      to: "2024-02-20T03:41:55.000000+09:00",
      page: 1532,
      per_page: 4949
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "d9738699-5b94-4a3d-b8ee-8daa4083c781"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "9be27a75-ba4b-4261-9b7f-5c08c8f5d863",
      shop_id: "59004cfe-9337-439b-bf43-c4d3c4b07b31",
      amount: 6852
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "9be27a75-ba4b-4261-9b7f-5c08c8f5d863",
      shop_id: "59004cfe-9337-439b-bf43-c4d3c4b07b31",
      amount: 6852,
      expires_in: 4222
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "9be27a75-ba4b-4261-9b7f-5c08c8f5d863",
      shop_id: "59004cfe-9337-439b-bf43-c4d3c4b07b31",
      amount: 6852,
      description: "K4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1L",
      expires_in: 9887
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "93db0bc1-f240-4da3-8aaa-a3c936ec83e9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "c7fb400a-57bd-4f35-bd71-2ed9a8093154"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "5b075671-e598-4d9a-a5c9-1dcebd21f698"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "5b075671-e598-4d9a-a5c9-1dcebd21f698",
      expires_in: 875
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "5b075671-e598-4d9a-a5c9-1dcebd21f698",
      description: "ftsBTkZDKCnQigIBcgyeHE0tecR",
      expires_in: 499
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "5b075671-e598-4d9a-a5c9-1dcebd21f698",
      amount: 7769,
      description: "gXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w",
      expires_in: 4868
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

