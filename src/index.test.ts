// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, UserStatsOperationServiceUnavailable, UnpermittedAdminUser, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, PaginatedCoupons, CouponDetail, Coupon, PaginatedOrganizationWorkerTaskWebhook, OrganizationWorkerTaskWebhook, AccountTransferSummary, AccountTransferSummaryElement, PaginatedCampaigns, Campaign, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfersV2, PaginatedTransfers, PaginatedTransactionV2, PaginatedTransaction, Banks, Bank, BankRegisteringInfo, UserDevice, UserStatsOperation, PrivateMoneySummary, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransactionDetail, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, PaginatedBulkTransactionJob, BulkTransactionJob, BulkTransaction, ShopWithAccounts, ShopWithMetadata, TransactionDetail, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, PaginatedChecks, Check, Bill, AccountBalance, AccountDeleted, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, UpdateCoupon, GetCoupon, CreateCoupon, ListCoupons, CreateBankTopupTransaction, ListBanks, CreateBank, ActivateUserDevice, GetUserDevice, CreateUserDevice, DeleteWebhook, UpdateWebhook, ListWebhooks, CreateWebhook, RequestUserStats, UpdateCampaign, GetCampaign, ListCampaigns, CreateCampaign, UpdateCashtray, CancelCashtray, GetCashtray, CreateCashtray, ListBulkTransactionJobs, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneySummary, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListTransfersV2, ListTransfers, RefundExternalTransaction, CreateExternalTransaction, GetTransactionByRequestId, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateCpmTransaction, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, ListTransactionsV2, CreateTransaction, ListTransactions, GetCpmToken, UpdateCheck, GetCheck, ListChecks, CreateCheck, UpdateBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, GetAccountTransferSummary, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, DeleteAccount, UpdateAccount, GetAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "2I4fnoKP50"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "9237ca24-85c6-40bd-b140-587d269b8f85"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "9237ca24-85c6-40bd-b140-587d269b8f85",
      per_page: 9123
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "9237ca24-85c6-40bd-b140-587d269b8f85",
      page: 8240,
      per_page: 230
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "c550bdd9-8a02-494a-a4e8-1cb001284817",
      private_money_id: "3ddd9043-da4c-4551-890f-01a79e939cc6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "c550bdd9-8a02-494a-a4e8-1cb001284817",
      private_money_id: "3ddd9043-da4c-4551-890f-01a79e939cc6",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "c550bdd9-8a02-494a-a4e8-1cb001284817",
      private_money_id: "3ddd9043-da4c-4551-890f-01a79e939cc6",
      external_id: "4xh8SZDk3uknfOFwjIT8vJxTqKLZUSuvuEktwjD8Qf8",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "c550bdd9-8a02-494a-a4e8-1cb001284817",
      private_money_id: "3ddd9043-da4c-4551-890f-01a79e939cc6",
      name: "irQA2IqSmN0BObXd2oru3ItKrOYwfQAwMHVcuDxSdQ50NAV0uUOvjDhxPEs1ska7bBxCkK5cYUPaYimnr9okcTZJleSwQhbrBHMio3iWQBnPVpUjNyoPg9E5kDURuWYAC3ccKPUez85ecFWIA0IEC1fPgha4n2gN3nYh4Thm0PXWkpQTF7wi8uJyeY8",
      external_id: "EjM4LAz0K7vEHReIdEIpYEO8r3EybTZa",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "e2a5e9ab-1b03-4b0c-a530-9c724465bd88"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1a3c8706-e12d-42c7-8b95-085d438b0a89"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1a3c8706-e12d-42c7-8b95-085d438b0a89",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1a3c8706-e12d-42c7-8b95-085d438b0a89",
      status: "suspended",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "1a3c8706-e12d-42c7-8b95-085d438b0a89",
      is_suspended: true,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "d63a942b-e025-42cd-94d3-9b182eccd5f8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "d63a942b-e025-42cd-94d3-9b182eccd5f8",
      cashback: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591",
      expires_at_to: "2022-08-12T07:12:40.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591",
      expires_at_from: "2023-10-01T06:29:55.000000+09:00",
      expires_at_to: "2022-08-20T10:27:05.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591",
      per_page: 2459,
      expires_at_from: "2021-04-05T05:16:16.000000+09:00",
      expires_at_to: "2023-08-29T12:02:19.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "b67b7a82-9e5f-4387-9854-1e1a5ff5f591",
      page: 1462,
      per_page: 5639,
      expires_at_from: "2022-04-29T00:34:22.000000+09:00",
      expires_at_to: "2022-01-25T10:50:34.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b",
      expires_at_to: "2023-11-08T06:19:20.000000+09:00",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b",
      expires_at_from: "2021-02-06T15:22:46.000000+09:00",
      expires_at_to: "2022-11-10T03:11:22.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b",
      per_page: 4170,
      expires_at_from: "2020-06-02T05:22:19.000000+09:00",
      expires_at_to: "2022-07-01T16:41:57.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "ba078057-0c1d-44d8-a295-92360e72f00b",
      page: 555,
      per_page: 4506,
      expires_at_from: "2024-01-12T07:01:00.000000+09:00",
      expires_at_to: "2020-02-19T18:11:10.000000+09:00",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "87827540-efa9-4626-9de0-4c2505e8814b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "87827540-efa9-4626-9de0-4c2505e8814b",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "87827540-efa9-4626-9de0-4c2505e8814b",
      external_id: "m2bmqRO92LoQyoHsCELJUltAzuJtfXJgvhX",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "87827540-efa9-4626-9de0-4c2505e8814b",
      account_name: "281MKrI7coAhskxeerQUqKXBMUng4ENx0lEcF2DarnwjJXECaNfOajyQqVIit7Ukcj1EHjyftVVxiyXtwWJt72rskfYAlFB9jg01yzvU2Fd1J9Xsy6RgPEz8gJUGbgBbZ6u3oNlYI8VS1lykYURmAkBZc0Kk2F6DYScdYpPVWnR2oIqC04EZq1FVeoQ4SX238mDYXV8r",
      external_id: "CMRojXFt8B3H8HYPHvRHOfvvTOXq2g9XL5f6MIKl",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 4', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "87827540-efa9-4626-9de0-4c2505e8814b",
      status: "pre-closed",
      account_name: "iEbsUVKZenif7aRHN7qpCIT5roph2mIcfR3pynpRJcREqReJTil7iEBQSOogpbmcmTzIndqbByLP7sCzN6yWEGROJ3EwwIf1dx62BcTbJQFmpWyn7DGMwhzIFyDroELgUeZDz9iGA5hqfZM1nw2dtqa7W6mgYPilAtwCIGe6NeKMKfAe1eK6cqTaSd",
      external_id: "yEQ3JdIiIbi9JcatolyyY8jDW2wIFNpTuuFv74wv7",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "177f3d5a-3100-497a-829a-1a36f69d91a4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "177f3d5a-3100-497a-829a-1a36f69d91a4",
      transfer_types: ["campaign-topup", "use-coupon", "refund-topup", "refund-exchange-inflow", "refund-coupon", "refund-campaign"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "177f3d5a-3100-497a-829a-1a36f69d91a4",
      to: "2023-09-18T06:44:58.000000+09:00",
      transfer_types: ["refund-payment", "refund-exchange-outflow", "payment", "refund-topup", "refund-campaign", "exchange-outflow", "refund-coupon", "use-coupon", "refund-exchange-inflow", "campaign-topup", "exchange-inflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "177f3d5a-3100-497a-829a-1a36f69d91a4",
      from: "2021-06-23T21:15:18.000000+09:00",
      to: "2023-07-24T07:33:17.000000+09:00",
      transfer_types: ["exchange-inflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      email: "sgTJtt9b0S@Hd58.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      tel: "03972-8240",
      email: "7eLraOE0wR@jhg3.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      external_id: "ItV3jADGageeyHKOwECoIGZU5j3HQU2LPvbvDHGM6LNF",
      tel: "0950-651",
      email: "12hP5FFFF6@VyoN.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      status: "active",
      external_id: "lDoUQf5IzyN3d0qREqEQ1iA54NdX3mhkRF",
      tel: "015-71329",
      email: "9lRmoxFQKs@nLaL.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      is_suspended: true,
      status: "active",
      external_id: "PglUwzQEd",
      tel: "03-681839",
      email: "FTo71hLvY3@AjA2.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      created_at_to: "2021-01-01T12:07:37.000000+09:00",
      is_suspended: false,
      status: "pre-closed",
      external_id: "ifwlTd4uftbURvJpAIFdsy",
      tel: "0129-896398",
      email: "EOU8vlpHAe@sWAB.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      created_at_from: "2023-01-25T04:53:42.000000+09:00",
      created_at_to: "2022-07-14T00:35:04.000000+09:00",
      is_suspended: false,
      status: "suspended",
      external_id: "faRGDHN3gGiv4QFhMHT3Kf",
      tel: "0772-6673311",
      email: "p9NbWahfX3@IlE4.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      per_page: 9456,
      created_at_from: "2023-11-07T16:04:03.000000+09:00",
      created_at_to: "2023-01-08T22:38:51.000000+09:00",
      is_suspended: false,
      status: "active",
      external_id: "HrvjBAuuG847LOlvGyoE1VeUKTOQICKY9Vm3h",
      tel: "0256659-032",
      email: "azfY2iVzUI@TZXJ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "5f86d51f-8b41-49f0-886e-7ea8b9c9c1e8",
      page: 882,
      per_page: 1224,
      created_at_from: "2021-11-09T14:50:43.000000+09:00",
      created_at_to: "2020-06-20T21:59:45.000000+09:00",
      is_suspended: true,
      status: "active",
      external_id: "5vgcFWCn",
      tel: "0356-83723529",
      email: "AEYJjmnIjQ@e0RR.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "39e401a2-0c5a-49e5-9469-1622dd1355e9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "39e401a2-0c5a-49e5-9469-1622dd1355e9",
      external_id: "9RiBsWAU1POZerxi4yVgC3DLJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "39e401a2-0c5a-49e5-9469-1622dd1355e9",
      account_name: "XU7OcLNBL8E5ZFfjF",
      external_id: "VMbltHeFRWSnoqc1L0CxETFiBWrZsD0D8eKFs1tot7y2okc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "39e401a2-0c5a-49e5-9469-1622dd1355e9",
      user_name: "fbc2jYVeVGNfaF1e5yToinw9aop7xdnRoOktIwFrjXVxpnweBnMnGDaEFssXp6TWSngdAZpL1lbFl30lt8PE9rRZhwqiE5pziP8FEh",
      account_name: "G5s1lcU1i26ObO0SxJa1bFQUUDsvsrmLVJx5kyo3bTrHmhOyh9HftvyRtN4Cr8",
      external_id: "RNqt0prNATlUYTfGtCeGENB715jPqh4zDUp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc",
      created_at_to: "2022-10-10T22:22:22.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc",
      created_at_from: "2022-12-21T22:00:27.000000+09:00",
      created_at_to: "2022-04-08T18:51:01.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc",
      per_page: 3797,
      created_at_from: "2020-12-23T09:04:53.000000+09:00",
      created_at_to: "2021-12-24T12:03:31.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "3ed02453-9ee7-44c2-9133-423e2b9975dc",
      page: 3670,
      per_page: 7400,
      created_at_from: "2020-02-12T22:25:33.000000+09:00",
      created_at_to: "2022-12-17T06:38:14.000000+09:00",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 8277,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 9779,
      upper_limit_amount: 9683,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "6617f067-6efd-4027-99ac-0d8bf086d1de",
      lower_limit_amount: 3216,
      upper_limit_amount: 5908,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "eZqxKIp3Gq2cx6u59m45TAfwJI2rJgkxUIbItYaoDoQ4WBL5qpg24KrKr0LaVDheOBq",
      shop_id: "6e226228-36a1-4dc9-b479-6dd5efda5ca8",
      lower_limit_amount: 7502,
      upper_limit_amount: 9872,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2022-07-04T18:50:36.000000+09:00",
      shop_name: "Lsl3WDPyc8ZK27bUIekXFHPHWREuNUyCeh0zrnWGKZOqV5ZHP5SzalB7kDHNOTEfJgCmTDiP3dCYUB19JAPgCAWJJQoQVP5xPnmC8ttUizqwt6ffly1cPIpj3JRPzCeiFBuP3fbozIXwp3aTHn3bt6HBBjf76dwERetPYVvMOieUVruHe2Y9sCRBS76VGgjxis3",
      shop_id: "c2f33b87-5912-4ce8-8ece-ef2b3c4c45fe",
      lower_limit_amount: 7179,
      upper_limit_amount: 4645,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2020-08-14T10:44:32.000000+09:00",
      created_to: "2020-10-11T02:38:56.000000+09:00",
      shop_name: "0yJILObCBfywcVkUfQ",
      shop_id: "e6486d61-d0fa-4d27-991b-ee3d713100b5",
      lower_limit_amount: 8987,
      upper_limit_amount: 2644,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "WEscKqScktM37fZazhzo2rVyuTt0YgSvCqiNZifUqttycSKDdDAFv75Yj76dO8ByplRJvkQ",
      created_from: "2021-09-23T18:18:07.000000+09:00",
      created_to: "2020-09-01T04:45:57.000000+09:00",
      shop_name: "VQsy3djpI6OKsWBtAuwu07nqsi5uufrhQOmjEJqNbQRYWbiJ3sraEQwubZAzZK7SvDcKstkOzEoC0drgZxPMynqzwaKWuGCi0r66sFnb4EHhtpyHhydYrLvl0kK9EZIvCFyNgA88w7WgJYTO6su6qoaMRZmasHrki9vwkA7HyPdnBLklXsIbPVWFWz9qTrxNXvnjmpY5dLg1ArqPbNmvL5y9O",
      shop_id: "440d0eff-008b-402f-b7af-46c58824b0da",
      lower_limit_amount: 3254,
      upper_limit_amount: 7968,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "HGq-1f0P9-Bl7U27-q-7-c",
      description: "cxJycIkp3QiVAW0CZ4fK4wIriLXY7EWHeBz2kXjOJRloaGHqDMVjypNWifc5GoqwK0oW3BC90qeAtolOJthqJlGPYyzrdgyMTfPbTeRjlXfdNzBimf2h8leoKYGWUrBLmE9",
      created_from: "2023-07-24T05:02:44.000000+09:00",
      created_to: "2020-06-23T09:18:00.000000+09:00",
      shop_name: "zH5tUsC3iFP256HghUwetr29bxBs31TlnHtc74T9nqzSWeYIT4SuYpkOpB6p",
      shop_id: "d314fa53-9eed-4af9-bb30-c4f333613275",
      lower_limit_amount: 8977,
      upper_limit_amount: 921,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "497c9644-3372-498a-abeb-234e9a52532f",
      organization_code: "3Z--cH-15-D2oop-8",
      description: "ODsjNXUGeNtNLkTzHNcwv65JpK5jCJjJpeUu1HWsTfosmgjGy2XL893zTUjirZ1",
      created_from: "2023-11-04T23:12:03.000000+09:00",
      created_to: "2020-02-07T03:06:25.000000+09:00",
      shop_name: "ozTXiFpvPcP4seURVjkKZsf0y2T",
      shop_id: "a11efd99-e657-4616-a427-25c3a5e644d3",
      lower_limit_amount: 8285,
      upper_limit_amount: 8756,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "Ti",
      private_money_id: "9e5e8e3f-9981-406a-928d-f4aa28a39e83",
      organization_code: "SAR-29-6-jR3gim4UDoV835-Q5-CG",
      description: "IacQ1AyQrSPDO1MM35WEy8yVoigpvbXeoOQia5qbbDQVlHIzOE7wrLcPtiesvO6HBaRmsyMOLgQCuJHMpb5qG94stM1FLlWrur5uNkACOO3BotDxqlluxYKWpOtfmUzi0dZfpLK",
      created_from: "2021-10-19T02:33:30.000000+09:00",
      created_to: "2023-09-02T05:06:19.000000+09:00",
      shop_name: "jfcb4HAAh1mdWusGLMSRSUD0sAddhJiEvsCvYpluLDJm3ul08w8Ie6eJyFK46JFllRfuMr9FUmav4Lda3TOmdveMFwIXmq5gtPoAqpVuAq7iRsiSEhlLoK6ksxhBzd5KJrvYdK4fwu3YwJeLwqiF2DxpUMIOfTSnLTRTnMKY68q1uxbtphepeKNUyiOQXvla",
      shop_id: "59938657-f9a5-4e8f-b54b-f051ed4e5a86",
      lower_limit_amount: 8982,
      upper_limit_amount: 4114,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 4746,
      bill_id: "7",
      private_money_id: "4a4fb722-8c56-4e49-8c69-384fe0e41e44",
      organization_code: "q1N-smd-3-ADBl--b-p3-3y-",
      description: "ccN",
      created_from: "2020-06-11T05:09:28.000000+09:00",
      created_to: "2022-04-17T13:26:04.000000+09:00",
      shop_name: "MeBGHAXfpQJxxasnObhfq5hctRxKZQQVVZo5VKF8SorJ5JjsDKFrAsxwhuprKiwUEEeYYrfvbAsZE2BrGzumZlTu9ahoaxdxwc4DSZaWWHuMBIsTiysONpCH1IDOnkVBmUFVqRqrcvUZ67vP1jBK8pzKr54rDnCsAYHvmFEX1Hpi57LlnInAqvQixKvZ17LTHv6fuaNCKByQXgWkvnUpHfF35yzVWLcxgVkWRro3rzuzsiAmpzO6iCvjRNMIkbln",
      shop_id: "5ddbfa3b-4615-4fb1-b1de-d6fd3ca0bd5d",
      lower_limit_amount: 5981,
      upper_limit_amount: 6890,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 1967,
      per_page: 9528,
      bill_id: "v4yM",
      private_money_id: "f8cec3c4-3ab0-4c68-bbfc-d713132cd218",
      organization_code: "B-x-Mvp9-st-Vi464",
      description: "it7NPl9XOaWH26Sx",
      created_from: "2022-06-28T05:16:33.000000+09:00",
      created_to: "2021-08-04T20:11:52.000000+09:00",
      shop_name: "251Qsdw3DRjvwOwX4NpBQEIx6MRb8Sk9otpXuJzlvSUzNzaQsAvMXevorQZVn7jPJ08qmdWWjuSzEE1k604RadwGiZ94eFvFwdiOjpqL7k8GUq4rXr8fuTxoFxXxwjcI9oOxFyV5pMJ8VJE8KA0UoOVdkEegGNcPu0YB1sSUngfcq41pss37ujVdwBr3ajpz28W0auG3y1IKvoT5PZvXyFend4frXQz4TjJ0b0wyuZL2XXUa5hPn0nrtxD9NQOs",
      shop_id: "97fd623e-56eb-40c8-926a-f632678230d1",
      lower_limit_amount: 9417,
      upper_limit_amount: 4906,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "318584bc-d623-4959-b0b2-3048a0fa22a6",
      shop_id: "917fc992-9b41-470e-a900-52bd806f133d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "318584bc-d623-4959-b0b2-3048a0fa22a6",
      shop_id: "917fc992-9b41-470e-a900-52bd806f133d",
      description: "AXmKO3AJ5Qu5VLz8Gs3JkJzZP8stHvKuYuroX7qw2trj65GvSZrkmNm7yMTJdHgO4HxY68a0UvONfRQ1r4JccrB0H1pm6KJSAu3X5VJRpk7J71Wn4uuWMHec3w3sYmxxrvTnzOpeGyhVO9MNuXLho"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "318584bc-d623-4959-b0b2-3048a0fa22a6",
      shop_id: "917fc992-9b41-470e-a900-52bd806f133d",
      amount: 1333.0,
      description: "ymLrZPoaJifMw3t7iURf9V"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "67c54c6e-ced5-4cb7-aa91-58ac44ac1a4a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "67c54c6e-ced5-4cb7-aa91-58ac44ac1a4a",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "67c54c6e-ced5-4cb7-aa91-58ac44ac1a4a",
      description: "BQQFPVIvMfqBL5s1TMpTe3BUi9UFnbN1fThxFFYlK3FBGQGdsfmn0pZfqPT2W3PTeQqMnhcbYT6A8476dfQ1P7If60scrWj4JpZqVcM7zrsMm2XYesSdz4o8Xw1iVNO0M33NicMlmREEC82LMmncmfYZx2t2aSDBI4Esje3JsGq",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "67c54c6e-ced5-4cb7-aa91-58ac44ac1a4a",
      amount: 3088.0,
      description: "hysQsPAJZrJBYNZnfxaxkdcaGYQSvM98YXaQwAvlyT5XmYZGh9fMbKWPHjPBx3JQKyEjRwblk1ExxasF6dV1WZYjmH",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 1918.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 136.0,
      description: "OZCPJ1QxWeEf0LtrGOvLvEJ0OpNw0DESp7u50U9n5u0Q9EXZhguillzD1gnU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 8463.0,
      is_onetime: false,
      description: "xepA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 8684.0,
      usage_limit: 2674,
      is_onetime: false,
      description: "mgBXvoPSv70s7YntkW2qUf8FsDHWbi9dEOCn9T8kY0mM1z7lxT1dhYFwaiU6lahi1Lg72R8TzN8dsW0XofTUdfi0xHh43N3DArzwu6mv5LAc3dct"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 3663.0,
      expires_at: "2020-08-07T13:58:26.000000+09:00",
      usage_limit: 1461,
      is_onetime: true,
      description: "Vce3hUJft0ZxyuOHF0REMl09cf2C03WdLlm26GOSd3OVdN0trgBlF1VuIB6O8nf4B29EWY9VDohWEq1rpC4Tig4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 7948.0,
      point_expires_at: "2022-07-16T02:02:13.000000+09:00",
      expires_at: "2021-03-30T11:19:58.000000+09:00",
      usage_limit: 9820,
      is_onetime: true,
      description: "ZfApXM8hhj4EdEGE5UQG3tlIJDf8ybf2GCp6UbaKnqETknV84UKsDYmLusd9bsfaC2njJSXiKUxQIxBZ5jNUzCuAB2wTnWOPn8dCeOBvudyESMbboSzpuZzUdqW9K0s5EXqeR81shSgdnAW0YIP8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 5316.0,
      point_expires_in_days: 9207,
      point_expires_at: "2021-10-14T13:31:25.000000+09:00",
      expires_at: "2023-03-31T23:35:22.000000+09:00",
      usage_limit: 4201,
      is_onetime: true,
      description: "2pDfTU07RHwtipFJ2lX2QEekGSuf64qrrJ0Jjp6S6kbFUNcWMg3hH21cAwIH0iNkkDUKEYt6qnu8xYw2F86CiVwm5yr2ze1TFwk7VqrwV1p7aml3aNCKnMsoSaHuADw0q3VvSGhd5MYqANRO1khYRsLHo5n9OjEViw7NogmnS3W9IuaJrS83GYHpUHP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 9208.0,
      bear_point_account: "ca6b8e90-4fba-40f5-9cf8-09003895addc",
      point_expires_in_days: 2606,
      point_expires_at: "2020-11-20T20:12:54.000000+09:00",
      expires_at: "2021-07-31T05:37:50.000000+09:00",
      usage_limit: 6496,
      is_onetime: false,
      description: "ksZeRPZHmKRTJNmRVfk0prL92om8XgjHFAiAtXUWxVvufoZUSQ26OgZ2ZDcUulZavnzW6uZp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 9240.0,
      point_amount: 5253.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 4191.0,
      point_amount: 9982.0,
      description: "vJfFrBSDpDckuzyYQpI7cUJmNgnWwxjViA5NwByf893KnyiSCsJJnMrt8i6OczSvki6gj7G"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 9107.0,
      point_amount: 4508.0,
      is_onetime: true,
      description: "ySMumsrhEdl2E26NTIjWgtYQqRG9AIKYEVUy0bSLqJtgRGoaDNwVjOFGrWI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 5617.0,
      point_amount: 8168.0,
      usage_limit: 5738,
      is_onetime: false,
      description: "F1brjskVvlEM55VqYaXHIo5mLFGsW2H1sAO2q2LpSY5F6SBSr8j5QRbYyXIYgkaud2YpPFhM3JU4mrO1ed96TKflnCphZhI9Z6qFMZl0KrhuDNDFKVGn2GnfepRcggpxF7sOlePZLHKzOyD5sPeAg96VAk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 6827.0,
      point_amount: 3748.0,
      expires_at: "2022-07-06T07:46:06.000000+09:00",
      usage_limit: 9292,
      is_onetime: false,
      description: "CTx2YoIF3NENYhMqIejvK4LWNiukfgAbM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 9765.0,
      point_amount: 6319.0,
      point_expires_at: "2023-10-22T19:58:45.000000+09:00",
      expires_at: "2023-09-29T08:50:17.000000+09:00",
      usage_limit: 1,
      is_onetime: false,
      description: "6WEUKGBJKJLa8rpBpC5yzdd3AF1jRoFFF2fx5lenQ5QTUKF7jswMK7YmWtATwZ0elb7r5hIacg6eT8vKsxGIbM4J09vJ4YAt4dJx1Qijg15s03jBKvMsRsRjG1H2hBxou6WGvFiCsYN8gSdx97EhRzgI4YvPGjjVwZWDsvU6qakV8FPLxxi9joKjEJAQq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 9838.0,
      point_amount: 1169.0,
      point_expires_in_days: 1446,
      point_expires_at: "2020-06-24T15:46:04.000000+09:00",
      expires_at: "2020-07-12T08:10:48.000000+09:00",
      usage_limit: 9608,
      is_onetime: true,
      description: "Eawm3XUbihl0fqd2DUN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      money_amount: 7654.0,
      point_amount: 7655.0,
      bear_point_account: "5e97fe7d-2cf9-4ac5-806d-3890897a77ad",
      point_expires_in_days: 1914,
      point_expires_at: "2021-09-10T01:30:49.000000+09:00",
      expires_at: "2024-01-12T13:48:51.000000+09:00",
      usage_limit: 6275,
      is_onetime: true,
      description: "gVye71JINkn32RniCZ6CNeiEt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 1129.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 3042.0,
      description: "8dI6JIYcitTilE6WNx3CXIvQnX8SeYxecstrQKTR0QtZaJYpSyAYnPm3HZ8ommoMFLVa61B14oT7VvibCumM66k3I"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 6855.0,
      is_onetime: true,
      description: "sx1y1rIeRHJ5ibsi02MDsJO2PFcTf2sEp5NL7vfMiYXLqqrWBrOkcJm4MRgGEeUG94nxoVGx7cKev7QOwdNai41R"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 3458.0,
      usage_limit: 9568,
      is_onetime: false,
      description: "6CS3b2X7znN58zWejYeimthEYdVWpj8fdfN9XwEbM6kOnfDpm6EALIEIs5jWl4r7Y1CMTSgBIPkb7KMJLELjrqdtUL4gceIouNeeWnh960ZCXxbmZATcBcmF5snnFwXh3k9tuIiaNOcNnKwNxdq1Zz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 6754.0,
      expires_at: "2022-08-12T23:05:27.000000+09:00",
      usage_limit: 6855,
      is_onetime: false,
      description: "TWB1eU2GTulGGv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 204.0,
      point_expires_at: "2022-12-11T04:00:12.000000+09:00",
      expires_at: "2023-03-04T21:34:12.000000+09:00",
      usage_limit: 4514,
      is_onetime: false,
      description: "ZIGaYEaGJJhdzGq83l6YZ0q4HMrtgtgJx8lPYPnMJNsWPjGHC7BDZwiKbqPWJTjiF7cNyCQjSIAx1HkzmLpcV7aonkKPPXTOVbZw7s7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 8916.0,
      point_expires_in_days: 3538,
      point_expires_at: "2022-09-18T14:39:03.000000+09:00",
      expires_at: "2021-06-24T22:48:25.000000+09:00",
      usage_limit: 3882,
      is_onetime: true,
      description: "K7ot3uUU9OklSqzAOhLjPscVqsGoQIf4zwew3Hc0g1XhN8IFMaGHvkd0oLQkJKrYhBtLin5IlDwkRu8c8kPV0SYy9kwp5PjpjnyoMeZqhjCxoEb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "da00e926-ddde-4099-997b-cdc1152020ad",
      point_amount: 4808.0,
      bear_point_account: "cb92607e-c456-476a-9f5d-673d7839b514",
      point_expires_in_days: 284,
      point_expires_at: "2020-10-23T15:01:49.000000+09:00",
      expires_at: "2021-03-20T14:26:24.000000+09:00",
      usage_limit: 2718,
      is_onetime: true,
      description: "cWvqEauexEUNvP8kr7CYFQpiIqcLevFHiCx05L3tyCngwS7729ZtvaMZ805MqN6oEJ7fBJkuf7pnBTAIeaQ8hG9O2Q2lqTqDpMTdwFZuP67Ds8vV392W"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      description: "BCGo1",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      issuer_shop_id: "3e1db6b7-b604-4073-9f56-120f27bea65e",
      description: "m",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_to: "2021-08-19T01:25:27.000000+09:00",
      issuer_shop_id: "55ffb877-7be3-4f3b-a5c2-810d54b06363",
      description: "k4aRus",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_from: "2021-12-05T18:38:18.000000+09:00",
      created_to: "2022-08-19T23:05:43.000000+09:00",
      issuer_shop_id: "b6a6e151-e387-47c5-904f-701f67f6de6a",
      description: "qaTk",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_to: "2020-03-06T08:49:01.000000+09:00",
      created_from: "2023-01-15T17:17:11.000000+09:00",
      created_to: "2022-04-20T23:54:39.000000+09:00",
      issuer_shop_id: "8715d1d6-96f5-409a-8480-e7ca7846a31f",
      description: "1J6SGgBeg",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_from: "2021-02-03T03:51:34.000000+09:00",
      expires_to: "2023-11-13T21:26:16.000000+09:00",
      created_from: "2021-11-09T10:13:26.000000+09:00",
      created_to: "2024-01-18T15:48:50.000000+09:00",
      issuer_shop_id: "a05fb7d2-9c2d-434e-91ea-96b305e549da",
      description: "qJSkIh6cl",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      organization_code: "QLZcdsvnmbJqslgrZjom",
      expires_from: "2020-10-17T14:44:47.000000+09:00",
      expires_to: "2021-02-23T09:34:58.000000+09:00",
      created_from: "2021-10-14T06:05:24.000000+09:00",
      created_to: "2020-03-22T14:50:21.000000+09:00",
      issuer_shop_id: "cdab0e6b-1966-4e18-b783-1264b406ad19",
      description: "s5DwtLiqI",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      private_money_id: "ab478b57-766e-471f-b61a-062e47a48406",
      organization_code: "ccULaFKCmpbGMs",
      expires_from: "2021-04-08T07:14:15.000000+09:00",
      expires_to: "2022-10-26T09:34:56.000000+09:00",
      created_from: "2021-08-18T23:10:55.000000+09:00",
      created_to: "2021-12-16T01:34:21.000000+09:00",
      issuer_shop_id: "f0c433e2-951b-45d2-af52-77afb93d790e",
      description: "8WXjT",
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      per_page: 3067,
      private_money_id: "d0177cd1-a0c4-42d3-8cb4-f70cc724c339",
      organization_code: "tlzvb1QpF6kHRKXpufO5z",
      expires_from: "2020-04-06T06:06:28.000000+09:00",
      expires_to: "2022-02-04T20:33:06.000000+09:00",
      created_from: "2021-07-02T07:06:39.000000+09:00",
      created_to: "2023-04-22T12:06:32.000000+09:00",
      issuer_shop_id: "26c5a508-1c8c-43bb-80ae-3d2270de96cb",
      description: "1t",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      page: 4763,
      per_page: 8711,
      private_money_id: "a42ad103-8dee-4a9e-ab2e-3f0ff2dbc4c4",
      organization_code: "nDb7WpWAYPGA695pBV8QabRbtQzVzts9",
      expires_from: "2022-06-15T06:35:55.000000+09:00",
      expires_to: "2023-05-03T07:05:00.000000+09:00",
      created_from: "2020-02-03T07:24:16.000000+09:00",
      created_to: "2022-06-13T08:50:19.000000+09:00",
      issuer_shop_id: "6e7c6ff7-0911-409a-b83a-813ff5d64121",
      description: "em8Kf1",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new GetCheck({
      check_id: "0a5f9066-784d-43cd-9a38-4593d114f918"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      bear_point_account: "e040deae-a35c-4b0d-ae88-7b2c8cdefe26",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      point_expires_in_days: 3455,
      bear_point_account: "9458fc06-2f43-45ab-bcc5-abb33bfa12ec",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      point_expires_at: "2020-04-23T01:41:34.000000+09:00",
      point_expires_in_days: 3977,
      bear_point_account: "77288849-2c9a-44eb-af45-272f77c1abc5",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      expires_at: "2021-06-05T17:51:41.000000+09:00",
      point_expires_at: "2022-11-13T06:01:54.000000+09:00",
      point_expires_in_days: 7693,
      bear_point_account: "f457effe-9da5-4e4d-92d6-70c254dd24b8",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      usage_limit: 8864,
      expires_at: "2020-07-13T06:07:57.000000+09:00",
      point_expires_at: "2022-03-25T12:20:05.000000+09:00",
      point_expires_in_days: 5472,
      bear_point_account: "1e1efd15-01f5-4c10-8714-bc7141ec6130",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      is_onetime: true,
      usage_limit: 3330,
      expires_at: "2020-06-06T21:36:54.000000+09:00",
      point_expires_at: "2020-05-11T10:06:50.000000+09:00",
      point_expires_in_days: 4339,
      bear_point_account: "cdd3246f-be8c-41d4-9802-23640e838cce",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      description: "3b1ItpBsvY5Ywzq4OxbKqUIugRz",
      is_onetime: true,
      usage_limit: 9355,
      expires_at: "2020-04-11T16:03:29.000000+09:00",
      point_expires_at: "2020-02-18T01:48:23.000000+09:00",
      point_expires_in_days: 8934,
      bear_point_account: "33433c5c-8347-4110-956b-bd6f9d531dc1",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      point_amount: 3219.0,
      description: "GiJrKGkUhITZkTlyQ2M8Ehy5DJWLPDTbOi1n",
      is_onetime: false,
      usage_limit: 2118,
      expires_at: "2023-03-02T03:48:26.000000+09:00",
      point_expires_at: "2024-01-08T06:28:35.000000+09:00",
      point_expires_in_days: 8288,
      bear_point_account: "e1ed23c7-6c09-4a8d-a0d9-d03a44cd800a",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "0f848275-77c0-4616-b161-91646782036c",
      money_amount: 7984.0,
      point_amount: 5668.0,
      description: "SsLwTy6xdoA8vsD226CkNP4JNpDl6bDTfLzbqMMYcQvZiZ9Y5AN8WtxFI7GIEAkEaWTJuq0zwCveQezg8WVESGq6SqV14Q8WnrxmZUOdMDHiAwlxLCZDnBjIRvzGb",
      is_onetime: false,
      usage_limit: 2297,
      expires_at: "2021-03-23T18:54:06.000000+09:00",
      point_expires_at: "2022-09-02T10:31:22.000000+09:00",
      point_expires_in_days: 8217,
      bear_point_account: "9cceae21-9b84-4726-8f27-a320bf9c127d",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "AMuJX6OcLH5aN0IRPh2rFy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "T1jxg1KBM4N9C0QyMLRk6crUTwk1dvfWtZ0umzvWSmbl8esaZHvEfMJANGzvJcPWrohynusPtpr9rQto0O4J1qFB5TRlYJRlvZhpaQM9agrkOR1MOgIOsnGOJXaxIn3xzav0uVeV8XnVz56f6Bap2Nt"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["expire", "cashback", "topup"],
      description: "Kskt15bbSsLITcgwrm6r3u9SKEcZ0X0E16oHjQFfrmx56tytoB8f1uYLmSAbFJrVrXQ33hsd8VJBvCYKpaHgrp2KuEeL7Clfm5yZYyuAnRYBIZApI6gPk6fhrEf7gdWY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: false,
      types: ["cashback", "topup", "expire", "exchange_inflow", "payment", "exchange_outflow"],
      description: "miJe8IxlXU4JxStY9E4HJFvfhEhaisCSMqdxpMhjOIjxINR8jX5p4urTsA7FMN6g1JBlQtPKQxwsXxACQf7EVuTabaRRAvUGBIOoWoW6bAUAMefChDjcFCzMgJmiBdZEVhpoKCt10B3KmDOeLzfy96LfHkStWrCs0aRx5G3uMpWSlLL7qCMBn8m1guBcCnqY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "676d8075-7d0d-49a7-9729-0b96b68dd69c",
      is_modified: true,
      types: ["expire", "payment"],
      description: "BtMITKwY3bAIU9TltFD44pNvkhPr91spvBGrGNi7Tgd5qI9X12cSfzwLVSh10nnn347xfSagFUebPCUysijUo3s5pnIfUDa02k9IhTDbFJNZB2f9wWyG3KGumtXoLHYQM1wMLTIEGOPXL3n3hEJFgbXBKFDWhYZ34qwhmab"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "--5-9--z-2s",
      private_money_id: "b1a51bec-05f9-4c23-bccd-fad37c3b5b38",
      is_modified: true,
      types: ["exchange_outflow", "expire", "cashback", "payment", "exchange_inflow"],
      description: "jOiUDTaTqL42CNkJ0GNbPrRWetrLrF3d0VoBSKxqxmaXLUlVYJDA9M0pBWsoaOHGXKnpXYcStGe2MrhWVcEjWJtg9Y1rqcNsIr74nS1Pb9TW5uOsx82jJUzUfMpkdfaCQWs9Yr04BoJBqtQT6bSiCjDZqJCn6BvWdlY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "4Xg",
      organization_code: "mOxd1N9-l--Q---F-b5",
      private_money_id: "7a66e55b-a87d-4c30-951f-d602aaf3891f",
      is_modified: false,
      types: ["exchange_inflow"],
      description: "z6Oi8C3wxLT6AVvDCwgIe6eLskH5qXabVE5m49SCqYbcMOy4YyCqkI3aApooqufQjKu5wddy9eHjXy54R4kt1xqRtWZNUW3QaBirwdKzMjNHkwxg6omgbTg6jdYSyetz9ajExWLC1BvDvkancW0odCxZMH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "69c7b592-89a7-4278-9014-03cddc7cd9c3",
      transaction_id: "qaj4EI",
      organization_code: "",
      private_money_id: "18f56f73-054e-44cf-9485-b93948795b1c",
      is_modified: true,
      types: ["expire"],
      description: "ZWBuJY7pu9fQd5F3l3pvVhuhC66IOIGcvUSvRUTwwOm5MSg2nX2nhGTiT4hoTE0rhEoq7p5kmjRFwS6QVMjj1r4jlV7rU7OkQb2RG2Bc820Y"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "5FP9begkCu9GYrtNiI4gCeOWfZ0qyBuCQIDS8kEDM1U9Icl1NwjbgoePNhggy4sJ7HLhlhOHA7OqNj7QF34lARi366o8cRKUAec9eRiIAs9xcxLSugFRQ6QVlwTgx3531qKx476kn1KS5Kg7FO",
      terminal_id: "c8587444-704d-47b0-8e7f-ba3fa2fb894f",
      transaction_id: "pW9Ld",
      organization_code: "RJvu9-Dkp40J6q1",
      private_money_id: "403f490e-713e-4e4c-899e-eda5b2305740",
      is_modified: false,
      types: ["exchange_inflow"],
      description: "aHXWRoKgfRFGB5X"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "4a3e52fb-2cad-4f33-b450-471ef11e927f",
      customer_name: "qaufZjXxgGPgA4",
      terminal_id: "97f78a14-e556-48b0-b829-c8e977ec5f6d",
      transaction_id: "4i",
      organization_code: "-bH84X5PgFwD5",
      private_money_id: "36f3166a-01a6-4d6d-b607-f63de1f505b7",
      is_modified: false,
      types: ["exchange_inflow", "expire", "topup"],
      description: "yL2jcreEmRgEPu5Pa90spbMYlqldzC3DzlII3H12L6jHRqq8prqeWKk2G4PR82kugS1vx6Zp7HGDqehFJRkUVY95abP4ohUtEoow0i7vvjWSIJZ9B1rV0PvXIF7iMvdPdhcbyOIhXWZFdzjQfuiJnfX1X5NMGo4UV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "92170268-8eff-44fc-857e-cae373859532",
      customer_id: "f3391f8d-fbec-44b5-9eea-2de2efa8a329",
      customer_name: "qf8Wx4ig001r3CG3c1HlyFAhPS8VQHsuZRsQAClMEFtDPsKKB3ZVLDcrT9tDeRvIq8La4HxNiBjF4xJQQoJTnUMmEenzvuHFchJeG",
      terminal_id: "7a2f54b4-328c-4ff1-8f1e-9c92cf675ee2",
      transaction_id: "ef",
      organization_code: "O0--dKVL",
      private_money_id: "bc1908c4-1b86-4164-940e-4aaed053a278",
      is_modified: true,
      types: ["topup", "exchange_inflow"],
      description: "3ov3ajPoZTC4ohPrPei6Dv809xOIj8CKedqc8cCgNijMcT3L9cFmLGXiAzF34lm6ObWWA6UwwWDnJF6lRjAm5YufgtZS3z2ilKxUxugA4ZYcA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 7512,
      shop_id: "0ef724ee-54ba-4f85-b548-797ce7d46efe",
      customer_id: "edee1b69-e1f1-4ef0-b863-8fd72276893d",
      customer_name: "HvoscC6GaDo0iztJCUJ7w4oltpepMSCT6tQucc63yxGE8PawAtkGgIr3wkeWzayLnO9qZSiBxWgDHHhmcmkLAZnrTKxKZdSyjaGiUnuh3GPvZZnpW44Xst115lKNzlazJF2RIpBT6KfgPEVnkGE9ceRoQa0BKBsFXM4XzFLdDIYn6i1W5UcP70QB58LCPZkR1ec3IlNY8QAhoUOcZR5Oy7DUzPurO",
      terminal_id: "af67f16d-d4bf-4b78-9a62-761ca93fe7c6",
      transaction_id: "mx8kSpHg",
      organization_code: "--33NM5H-y6kdjwlb-6Wsj",
      private_money_id: "1a508811-9b54-48a6-be65-b73077fb1feb",
      is_modified: false,
      types: ["payment", "exchange_outflow", "expire", "topup", "exchange_inflow", "cashback"],
      description: "bsZzZoRz0YNP04X7Vj40Oczz3CGZfkLTPi91tVdZOgFqeNIA68sWdGwP2VtiV8EcSemA93XvpTTNZzCWPuOLwaFWjiQKZC9TbO1xCIyHPXInLp0iz5n4Ide8ZfRlZxsYUSFdBTflzRAdM53ZpXiXLZM4t0SipTXeJBPBqJvqOzS9uqoScwSxBE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 9466,
      per_page: 2422,
      shop_id: "70dc42ce-1bb4-4edc-842a-2deeddbb3d5a",
      customer_id: "e1bd1ca4-10ae-404b-b602-2d551b681fb5",
      customer_name: "QHnIR5S2FfA8jfV9lOt6BzHxmt5wRXFepnzpRLnhGQ4hgt7ZxJtz5tALM9vv8hqmtX1BEuQG3nNVBrVLBD4GfgWLvVQwgkEdNCsEFyrtf9hFGTTBZMrI64jzU9vlNAheTTyFZP6WzH4R5gGonasGxku2gNLYsMeUB9yxDSo08jgf6ZG8L3ApESlKga79tWPFFqP58uhDtnit8JLJOId",
      terminal_id: "7fe955a6-f3ac-46d1-a2a4-38bddcd2265c",
      transaction_id: "FHGVrU2V",
      organization_code: "-dbhe--U-j8F--T2-Y-E2LZBp4-",
      private_money_id: "f19f495d-3833-4792-aaa0-0cdb0b52cf1c",
      is_modified: true,
      types: ["topup"],
      description: "kJeT3YGeJCuR5VL13LxrLHCwXgwlQQa8vXjPn0LJdvAvBCixpsPEDLZ1I20tBNUjLu4HzNx44GV20NItDYZ40GkLR0NMsKM8fSuuEYQaow7oinDH1JkyF40xwBT1PpzJlcNz4aGtTS7lYHyGY6q"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2023-10-02T22:25:19.000000+09:00",
      page: 4611,
      per_page: 6267,
      shop_id: "6d0be41b-3174-4fe4-8517-4512a31e987c",
      customer_id: "9392194b-fc3c-4687-8d87-ee143b56a5d3",
      customer_name: "9VMdOeQdULpLCWMJHkJo2U3ZWtmdRnN1SjNA0wQA9ilRDCUoCIiRMstHInI56k7urxbQUFE2a2IvmosZ76npZfi6AToK2As7kWBncWVtjpnyTZU29EOHjwudHHMw5sV0scZapZ9lUSoDJ2LcDUDoLb6jmhKcqZf0NtYTYmdajaOgJgwfT12BIxRCYUe0FkjmFYEeKGpod09pKJu3qQHyLFX2k4UGNpzt1iGbtPm7Ht9oSFX",
      terminal_id: "80ba36b4-dea0-42b6-9645-ed8a875d3ece",
      transaction_id: "aq",
      organization_code: "wM2Z-nOY-nw---",
      private_money_id: "b2458436-8375-4f82-8efb-4c80976f9f06",
      is_modified: false,
      types: ["exchange_inflow", "topup"],
      description: "VgXbAJ0p9rdNnQcQWfOtVEusJoVVWHmEn106FNizEUXM9KovMvxYT5ankmcjvS7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2023-10-12T18:45:22.000000+09:00",
      to: "2023-11-04T04:46:12.000000+09:00",
      page: 8914,
      per_page: 6519,
      shop_id: "61e6d767-f17a-4220-a4cb-b36dcc711854",
      customer_id: "7247befa-a26d-49e7-960c-8f37af8d8c60",
      customer_name: "cNjwhkVIwM",
      terminal_id: "40c95fa1-6968-4269-a487-6796a0d06719",
      transaction_id: "sz",
      organization_code: "u7x1N8e-lE6N5k-Z-WU66-7-L9V1sRO",
      private_money_id: "42be7c43-ad1f-48bb-9860-818fe2349a3c",
      is_modified: false,
      types: ["expire"],
      description: "w835UWfBUHM9Jpvsf8sGPWo1g6k0agKQCWPZTSq4bdyRgp41O4bhfqym3DwP7L57inImctE2ZVQGDaJvpEB0JQm7aTj0V5aEV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "5d14792c-8588-4eab-9f12-59b874ab019b",
      customer_id: "66ca571a-2752-4522-b877-927687318a74",
      private_money_id: "284bda8c-f8cb-4bac-aef0-95a562a12f8e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "5d14792c-8588-4eab-9f12-59b874ab019b",
      customer_id: "66ca571a-2752-4522-b877-927687318a74",
      private_money_id: "284bda8c-f8cb-4bac-aef0-95a562a12f8e",
      description: "vTegW8lpfrGuEEYwjhnHYHcr8UCp1Ehl28relDkp5Yov6Kgm8PHINIt8irJ8eOpE59BlocdZLetXOekLoYVohu2ATCNK1hxipUAVW7t"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "5d14792c-8588-4eab-9f12-59b874ab019b",
      customer_id: "66ca571a-2752-4522-b877-927687318a74",
      private_money_id: "284bda8c-f8cb-4bac-aef0-95a562a12f8e",
      point_expires_at: "2020-10-02T10:08:55.000000+09:00",
      description: "RjMNiW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "5d14792c-8588-4eab-9f12-59b874ab019b",
      customer_id: "66ca571a-2752-4522-b877-927687318a74",
      private_money_id: "284bda8c-f8cb-4bac-aef0-95a562a12f8e",
      point_amount: 930,
      point_expires_at: "2023-04-27T11:42:42.000000+09:00",
      description: "X8QGsaTgy1g3eoFRll8Urf306ugZUxPtWWnljdqq0fnJ4kzw1PZWFyo0dEAmhwvFfxSHfPBsUDlReCAlXKxAL9nBGPMR5QDDYzxovW5hfSy7qWmuG6k1i1dBxroU3Sb7zxV8pimXDDC2HEtyezlxHZ29QI8X7nwQjFriIVf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "5d14792c-8588-4eab-9f12-59b874ab019b",
      customer_id: "66ca571a-2752-4522-b877-927687318a74",
      private_money_id: "284bda8c-f8cb-4bac-aef0-95a562a12f8e",
      money_amount: 9144,
      point_amount: 5298,
      point_expires_at: "2020-01-11T19:31:23.000000+09:00",
      description: "RRzBTGXpXTGmbYhqdFi30m2Xd6bS0c2tdolhczCxC0E3cuJuVJFI4rnfHyZlA0RUXUtZqDeRHXbhXbbxfX2BBO7yNhhYrMSyJ2IPz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      per_page: 931
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      prev_page_cursor_id: "0e491fbd-050b-4ef8-a47b-bf537b4788be",
      per_page: 812
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      next_page_cursor_id: "a6d36a70-a1ee-458b-9aae-c095d8b8f341",
      prev_page_cursor_id: "9efb5048-5dcf-4215-b775-48969ce3734e",
      per_page: 520
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      to: "2020-11-13T07:40:44.000000+09:00",
      next_page_cursor_id: "5af29f38-108f-4567-a582-549724c40294",
      prev_page_cursor_id: "09a688e1-5de5-4a54-bcbc-3ab029d21f4d",
      per_page: 13
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      from: "2020-01-10T09:25:46.000000+09:00",
      to: "2021-10-30T03:53:53.000000+09:00",
      next_page_cursor_id: "91f7c085-005a-4905-8078-61b4dab35cf6",
      prev_page_cursor_id: "da559234-910a-4fc0-a76c-1c03520fcea0",
      per_page: 25
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      types: ["topup", "expire", "payment", "exchange_inflow", "exchange_outflow"],
      from: "2021-07-31T16:46:37.000000+09:00",
      to: "2021-07-30T12:08:19.000000+09:00",
      next_page_cursor_id: "84caf3e6-9688-44a8-93e9-ea2dc3051f7b",
      prev_page_cursor_id: "3765c797-6bda-42db-9acb-7044a0806ba1",
      per_page: 80
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      is_modified: false,
      types: ["topup", "exchange_outflow", "expire"],
      from: "2020-06-12T07:15:47.000000+09:00",
      to: "2023-06-20T08:38:11.000000+09:00",
      next_page_cursor_id: "dc7307da-2a4f-4f0b-96e3-d394c89d7eb7",
      prev_page_cursor_id: "5e4a4139-6a0b-49b6-a529-96e71f5f883e",
      per_page: 105
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      transaction_id: "hXVAVA",
      is_modified: true,
      types: ["cashback", "topup", "exchange_inflow", "payment", "expire"],
      from: "2023-04-23T04:26:18.000000+09:00",
      to: "2021-02-04T22:56:57.000000+09:00",
      next_page_cursor_id: "5a6c8fcf-95ae-4747-8376-f121f6d2f479",
      prev_page_cursor_id: "b4c0b3b1-8784-4afb-9eef-287b2bfdd0b0",
      per_page: 559
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      description: "alFOmKCfhKyDVrjQWS5GVoPmQhmp6aRXvvgQs248ujLuP4LnkwpNMrmveaEu2Dp5UGcf",
      transaction_id: "sb2",
      is_modified: true,
      types: ["exchange_inflow", "topup", "payment"],
      from: "2023-12-16T22:35:22.000000+09:00",
      to: "2022-01-17T13:37:27.000000+09:00",
      next_page_cursor_id: "ae0866a4-7759-49db-a86e-1d7bdc61b515",
      prev_page_cursor_id: "b87734d2-3567-405f-af8c-d26cf91dd738",
      per_page: 309
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_name: "cEQMApQNfkgnCwMXAyfCE9vjgfvOBcVu4pTOKsB2OFUAviddhoGeECknXDEaWo3szXXcLrkqAVy7pN4K6YjG8VTBlyeOSbZ6ZxzeAtpolajnFsAnmZ257G4WscrX1ZPDo6s3Fsww3OXQr69hFMcSChJdmCZnd0rAlKlRF8UE4kJt5KBPcogPjvbgrYGt8bX49O2wp",
      description: "qFe0owZi9bKDKSIOJAxJioRR5DFNT0YxCoyjiD6ham0bTnozwMesPfUS1TxoWwg7pNtVdoFIoAD7ua1erS8tuV",
      transaction_id: "KwgXa",
      is_modified: false,
      types: ["expire", "exchange_inflow", "payment", "exchange_outflow"],
      from: "2020-06-23T18:54:25.000000+09:00",
      to: "2021-05-18T03:48:30.000000+09:00",
      next_page_cursor_id: "a5765065-668d-4db8-8feb-f5645dc90984",
      prev_page_cursor_id: "c04d12ce-7076-450a-af8e-d026933fd692",
      per_page: 482
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_id: "a1d8e0bd-5ded-440b-b433-73a628276829",
      customer_name: "bOQuJXRSJvY28JroEcbdEp9DcOI4zgsaInQt3CcIwvFtm22GyaOdppPByoIqC4WFkPFMhPw7RUnc9OpTDMs073sdUfmZXw6g3AsgnwR",
      description: "RkIc7XEpz034BX5WHNnITSPIE9OQh281XHhkSG08hdOp1dvJ5Nv4IrTZ09TrkmLZ1pJYzPYtA9QiB58jARwOJm4ujxBbbwEfrnvxnIydoy4RM2dJkX2kAFGfOH4pF4IpgBY2EVq4wxLYVetEaUneqpJyZnnop7XfmILm",
      transaction_id: "Wk1nbwgl",
      is_modified: false,
      types: ["cashback", "exchange_outflow"],
      from: "2023-01-13T22:20:08.000000+09:00",
      to: "2021-10-11T14:12:57.000000+09:00",
      next_page_cursor_id: "3260c56c-944a-4a4c-b816-aeefc4c2b876",
      prev_page_cursor_id: "039f3d9a-7a14-4baf-ae5f-20ba8982258b",
      per_page: 10
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      terminal_id: "c25dd3bb-a7de-44a1-97d3-7142353870a7",
      customer_id: "a518fdd4-f71b-4983-aed4-65d725b420ea",
      customer_name: "MmA7xlwDt59J4nL51ldyUEBejQOCPFsF1P9eLspgBLln5LkLU5oAwNI2qX3K",
      description: "NG9Y7kO6h6yOX5ASAfAYcdwaSEmhqypUeZEQWYzY0lOa6zfc2THmX8o2V4YtDrTdBvi63yahpoqf1s6atWa3ALeqx87ty2iwnkFDqKmgYgL6j3eGMbeHfkJrmCO8L6wiAv2cYziiCbV2Eju8RMbEbS6HQfe6z5kQfEzynq9EDlq3tBN1Vu08fMT3CLN2P",
      transaction_id: "ISN",
      is_modified: true,
      types: ["topup", "expire", "exchange_inflow", "cashback", "payment", "exchange_outflow"],
      from: "2024-01-08T16:42:31.000000+09:00",
      to: "2021-10-22T13:12:55.000000+09:00",
      next_page_cursor_id: "db59185e-cb89-4df2-b79a-2748b2012489",
      prev_page_cursor_id: "541cb040-b94d-4aa1-9b6b-610e19bb32d1",
      per_page: 411
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      shop_id: "62da7759-b494-40a1-af0f-84f8c1e1ba4b",
      terminal_id: "f43d708e-6bfa-46ca-a50d-59b758b24149",
      customer_id: "83ac424a-eaee-4cad-b655-a23bf50bca96",
      customer_name: "Btb8yjhzoeMlXiDLTP36kmx4YAs9u4CidBRCCXqSazEQBQcG2GPDT5gYuH63dqFb4z17jcxKcLlgRI5vdaAl2pWcUZPO0W1V4kRByp",
      description: "cEeAzRf3wQIZC7jaWZx8Hq1mK7ACeqsfUPvN4SVTe1MsAkKp9kSmhuuam0LLsMZanbhlcxMXKOA8HbU8LHaDcuRdDZkB8IhCyjj0ukPxsBfPLx53CP5tUtZh0Gz1TPMCnieDpv7iIestfYaFN6vAPd",
      transaction_id: "7Up",
      is_modified: false,
      types: ["exchange_inflow", "payment"],
      from: "2021-09-11T00:09:33.000000+09:00",
      to: "2023-04-15T07:00:34.000000+09:00",
      next_page_cursor_id: "85ffc130-94ea-4b35-873e-9d052bdaaf53",
      prev_page_cursor_id: "a1eab3c0-b2b1-435f-a443-6bba24744661",
      per_page: 115
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      organization_code: "b-9-0K-e8q1D53vR63od0hC7--32O-u",
      shop_id: "a5065c96-178b-44c9-afa5-33cfe7a34048",
      terminal_id: "59ccb49e-0428-4b92-b56c-8045691dfaf0",
      customer_id: "24381ef1-0cb4-45e4-83ba-5fbe21b4b9d3",
      customer_name: "ZwEopQGD7l8uVtno2AmuPWfKIPKefuOXBxp2f2rQW1iU1ASbqbY83VCRyxtTw2KVDJEVhD6cRDEQn6Ajrj7qcQgIrsMHhTKtTI96HBxQ71pZhJyRqGlgxfBAP6D5Sr82wo90EusFBiFGYYaIY9JtUIJzbFUfW75ahZIa3iZpTHZ05sR2UKTFK7H6fm02lz0pKybv9L3bNCvRRmSiMV2lq",
      description: "HL83NCkef3xLES7YbiZcoTvWHHYyU6wD7eqPoMjt5UzIIezB0YGd4wE7EYHU9Zppu",
      transaction_id: "aviCf",
      is_modified: false,
      types: ["exchange_outflow", "payment"],
      from: "2020-03-01T21:30:53.000000+09:00",
      to: "2020-03-04T07:26:10.000000+09:00",
      next_page_cursor_id: "312de70b-bad2-442f-8c4c-8c056ffe4591",
      prev_page_cursor_id: "0b954152-7050-4a8d-8a8b-64dd6871a68f",
      per_page: 583
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      private_money_id: "4650d448-dd54-4e3d-aebf-f90ad35dd633",
      organization_code: "d-0d",
      shop_id: "8f066385-becd-469b-8b28-50ddff1f6ce2",
      terminal_id: "5557e2e8-99ba-401c-8111-1adbf063a733",
      customer_id: "3f235a04-c7f4-4731-ada1-414e1a299145",
      customer_name: "3SoXFMAk8UdvblQveWE1LE8ZraATcITbo798HtpsYfVxp6l3lVg",
      description: "sKxwPwKyclWhD3Sb45YkZv4URq8H2tNwPudLiyGRF7t2d6",
      transaction_id: "6",
      is_modified: false,
      types: ["exchange_inflow"],
      from: "2020-10-09T21:37:08.000000+09:00",
      to: "2023-05-30T05:51:42.000000+09:00",
      next_page_cursor_id: "ac873aee-84b3-40b0-b1fa-d0e40753c671",
      prev_page_cursor_id: "40ac17f7-9902-454a-8e7e-f62deddd95e3",
      per_page: 734
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      request_id: "79af566a-4dcb-4b38-a236-369b8302fe39"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      metadata: "{\"key\":\"value\"}",
      request_id: "0e0de672-43ff-4469-ac62-7fa5cd2fc69a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      description: "AMY98gUbNPlzAAHdxyqNdgZpsPbq1DnQN60i9S7LRE03bq7bQtWAmZqBKUPnbi96tNmX5a8eD4zrlvTyhF0rXHiINizGYPa",
      metadata: "{\"key\":\"value\"}",
      request_id: "ca24e2d0-7eb3-4b18-8d49-09ff6dca9bed"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      point_expires_at: "2021-11-16T12:51:41.000000+09:00",
      description: "TTkCywKenV2B6PT9S3rqwXGK0t1qoEb8VYMVF3BJEGDGL6pKrLIdPo5IAljar6pC22F6rGzyvAn2kcbwX7CUh1zeIBeFt7Csw9yeLrZiHpecEbCoGV8rHt0iVaY4jm4RgTfGQulg0MuIPQw9l31",
      metadata: "{\"key\":\"value\"}",
      request_id: "1141426d-3fad-440f-a6f0-35376c24bdcb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      point_amount: 2234,
      point_expires_at: "2021-07-27T09:51:47.000000+09:00",
      description: "iBV8qh5vYXebjnbAar0kMK29t3XC4a3UkYagNVt09tDOdY5iu8jKSQkiSeTyWJdingY2TuRqgySZaZbRQJW0FxLoOyqZQlMfjTKRABAmQQiA2Ek0FFosh7KYssLUQxqDtGavgIQf9lTi10uvqWwQkUv3EWODMgwVtNQu9hhqNeyMG",
      metadata: "{\"key\":\"value\"}",
      request_id: "b8488d53-78f5-4a3b-83c6-ae83dc2cd562"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      money_amount: 8900,
      point_amount: 970,
      point_expires_at: "2020-01-24T11:02:59.000000+09:00",
      description: "vOoggTEqZJhTRC13cGT14WHqXIozkoJqtGP",
      metadata: "{\"key\":\"value\"}",
      request_id: "35537334-2dfe-4de7-9468-13027cd45238"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "40621f9b-7c8d-4097-ba8c-5b9fbba99a40",
      customer_id: "4727dd85-58d0-424e-bc0b-99b1dad883ba",
      private_money_id: "cdf6ba69-32f1-405c-bf07-db58532613af",
      bear_point_shop_id: "da210b85-22aa-475f-9914-c34d3433ff67",
      money_amount: 97,
      point_amount: 7737,
      point_expires_at: "2020-08-12T12:05:51.000000+09:00",
      description: "gTPbRDyMhmnr4YOHvPznwOwlEnNGE1p2k1zBvGBAL3GDgQaODwDnVVaAYlv3rxvTpmGDMPacbkM4OX51BRjNipW5AEpVt4aII1pyprbfjD60yre1ctZekFii7BrMt1bdKBuXdMrnqBW5BD7Zz8OI1m1OT5b3WxESMt8P6bymxjzqMgYnPGCbv0o",
      metadata: "{\"key\":\"value\"}",
      request_id: "fc27538f-c8bf-4339-a92e-57007adc20ac"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "e12a9a70-eb03-41db-9fc9-b75d151f61d2",
      customer_id: "18597c04-02f2-4a58-a50a-3aab76facb0c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "e12a9a70-eb03-41db-9fc9-b75d151f61d2",
      customer_id: "18597c04-02f2-4a58-a50a-3aab76facb0c",
      request_id: "ef49dca3-c86e-4ee3-8ec6-b75f094f9508"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "7ca1f8eb-e725-4f53-9f39-0a8a77418af0",
      customer_id: "5bdea2ad-6f81-4ba6-8ccd-03452b490466",
      private_money_id: "3427c3da-3f74-414f-8723-ee297974eaf5",
      amount: 9138
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "7ca1f8eb-e725-4f53-9f39-0a8a77418af0",
      customer_id: "5bdea2ad-6f81-4ba6-8ccd-03452b490466",
      private_money_id: "3427c3da-3f74-414f-8723-ee297974eaf5",
      amount: 9138,
      request_id: "c36cea39-14eb-4d0a-8505-22eaef86842d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "7ca1f8eb-e725-4f53-9f39-0a8a77418af0",
      customer_id: "5bdea2ad-6f81-4ba6-8ccd-03452b490466",
      private_money_id: "3427c3da-3f74-414f-8723-ee297974eaf5",
      amount: 9138,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "af168ab0-15ea-45c5-aab0-4b1dbc3bc307"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "7ca1f8eb-e725-4f53-9f39-0a8a77418af0",
      customer_id: "5bdea2ad-6f81-4ba6-8ccd-03452b490466",
      private_money_id: "3427c3da-3f74-414f-8723-ee297974eaf5",
      amount: 9138,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "5071be1f-2ace-4402-a8e1-4464978b9832"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "7ca1f8eb-e725-4f53-9f39-0a8a77418af0",
      customer_id: "5bdea2ad-6f81-4ba6-8ccd-03452b490466",
      private_money_id: "3427c3da-3f74-414f-8723-ee297974eaf5",
      amount: 9138,
      description: "Q9tVriNyLQkiMow5Xuiy9ZPV3dib0OASykigB0zdCx8sfnSiY4TTUiUwsYjmxbtJcvgfnOqUEnzibQ48HaDygptHyMqWEwqnKDYenFm2lhRJNXlSSrS2c3Pbp5dwMxIqIa0jDD",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "3cd1da33-f582-4ed5-a36b-c184e08b3530"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "1621EUatkZJEHT0YsEy3yc",
      shop_id: "208cabcd-907f-4359-a8de-43752e24cb6b",
      amount: 3815.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "1621EUatkZJEHT0YsEy3yc",
      shop_id: "208cabcd-907f-4359-a8de-43752e24cb6b",
      amount: 3815.0,
      request_id: "7c7b5fbd-e4b6-465d-9e7c-741c2360c7ef"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "1621EUatkZJEHT0YsEy3yc",
      shop_id: "208cabcd-907f-4359-a8de-43752e24cb6b",
      amount: 3815.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "69ef3c1e-3ed4-45c9-9a9f-094f1a79d020"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "1621EUatkZJEHT0YsEy3yc",
      shop_id: "208cabcd-907f-4359-a8de-43752e24cb6b",
      amount: 3815.0,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "13c86db1-07a1-4d3f-b1ac-6245d348f51c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "1621EUatkZJEHT0YsEy3yc",
      shop_id: "208cabcd-907f-4359-a8de-43752e24cb6b",
      amount: 3815.0,
      description: "RhIxU7VNgERbQdalDFJiAaiHhGv6sdKXl2i9muTHA4GjVYqUWfmcqXsCUScryYXZhpvAIL8KaOSs4EHNrlySqwKhjojH4HRGwGRgqYNrs0yF9HuNvcA9TxwHTRd2DWX86imrJpZ6AfL2",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "bf165c45-3a70-47c7-8d12-ea0450ec59ff"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "224f0bdb-6d49-4c9c-95e5-c5af051bc2c3",
      receiver_id: "c924e959-57d8-427a-b05c-ea717e721214",
      private_money_id: "4279f1a4-215b-4c93-83a9-a22d674d099c",
      amount: 1836.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "224f0bdb-6d49-4c9c-95e5-c5af051bc2c3",
      receiver_id: "c924e959-57d8-427a-b05c-ea717e721214",
      private_money_id: "4279f1a4-215b-4c93-83a9-a22d674d099c",
      amount: 1836.0,
      request_id: "76a5287b-daa8-4775-ac56-7b19a6ef2293"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "224f0bdb-6d49-4c9c-95e5-c5af051bc2c3",
      receiver_id: "c924e959-57d8-427a-b05c-ea717e721214",
      private_money_id: "4279f1a4-215b-4c93-83a9-a22d674d099c",
      amount: 1836.0,
      description: "Jd5umxa1AOVTGby1xapaOQkIQPhA1dfhoRyFberLkk9qDpzm4wjQvsZlTZJ73rZknOEWxWEBaC1usLdJ5cbbWFnvJmO7IdDvOzs8MOiqIhf8kdTfg21n8hiknktEcNy7lKyyE",
      request_id: "ac3aa26b-0217-4296-9071-0710d3fa7b08"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "224f0bdb-6d49-4c9c-95e5-c5af051bc2c3",
      receiver_id: "c924e959-57d8-427a-b05c-ea717e721214",
      private_money_id: "4279f1a4-215b-4c93-83a9-a22d674d099c",
      amount: 1836.0,
      metadata: "{\"key\":\"value\"}",
      description: "uHFWc1oBvl1jIjabx1irydPeDadCTWoxo4TZG1lOvEgbvYu46hcBnI1sQBC1fIYDWtC5MsrfIKo0dMOdQ8HvowbEMnHFtXUtw8ON57JF8efQ5X9WXH",
      request_id: "4750616d-4f00-4054-a730-2e306f6bfb1e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "3369b979-b1c4-4452-a116-543572c8b286",
      sender_private_money_id: "ddcd976f-0aec-43de-91ee-247e783d6914",
      receiver_private_money_id: "1ceffe39-1bfb-473b-9abe-aac938fe5702",
      amount: 3997
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "3369b979-b1c4-4452-a116-543572c8b286",
      sender_private_money_id: "ddcd976f-0aec-43de-91ee-247e783d6914",
      receiver_private_money_id: "1ceffe39-1bfb-473b-9abe-aac938fe5702",
      amount: 3997,
      request_id: "ef1e0394-06ad-43ba-bf0b-b2f857cea504"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "3369b979-b1c4-4452-a116-543572c8b286",
      sender_private_money_id: "ddcd976f-0aec-43de-91ee-247e783d6914",
      receiver_private_money_id: "1ceffe39-1bfb-473b-9abe-aac938fe5702",
      amount: 3997,
      description: "TpYqpfjG05J8QfbWlf2gFV81KrmBV7VW080UFrLI3puNHk2hgjQZwZqYyC8CSJJxk9FbVEoncB2Dvxp5vsNC69A5Tlxo6YcmvIh0uPJN0JGyTaCIQR4izXStIpRpHBQQrl6S7SUHZ2yfNBbUb3ILabV4n1cqvhsZ2nJhZpzSeJ4XdhY",
      request_id: "87f49b3a-b7a6-40aa-b26d-39e107eb50e3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zm",
      content: "MQGeajhP",
      request_id: "kfVuAkHvkYlTxnKm7rPRli3FZ63Ml0FFKfdR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zm",
      content: "MQGeajhP",
      request_id: "kfVuAkHvkYlTxnKm7rPRli3FZ63Ml0FFKfdR",
      private_money_id: "a5a9c0b3-8ed5-4f5b-a5f6-a8eaad5fcd7c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zm",
      content: "MQGeajhP",
      request_id: "kfVuAkHvkYlTxnKm7rPRli3FZ63Ml0FFKfdR",
      description: "UvoTpYou91wwlHuptF29AX",
      private_money_id: "b85f8cdc-f22e-42c6-b126-a8d06c46b642"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransaction({
      transaction_id: "24e916f3-1652-48ef-8635-6f31b0777cac"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "dae05054-a4e7-4e46-bae6-1cf865ab3f6c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "dae05054-a4e7-4e46-bae6-1cf865ab3f6c",
      returning_point_expires_at: "2023-05-14T05:21:59.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "dae05054-a4e7-4e46-bae6-1cf865ab3f6c",
      description: "FH9Zp2FJfz7UTnr",
      returning_point_expires_at: "2022-08-17T02:57:51.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransactionByRequestId({
      request_id: "fb5cabd6-71b6-411a-a2d0-f9757345f066"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "6ade8fce-0853-4d27-a62c-7fd18fa8996a",
      customer_id: "45b79fd5-cef1-427d-99e9-54d6cbdefc80",
      private_money_id: "86e61a0e-09d1-431c-b10d-d9c598622746",
      amount: 6215
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "6ade8fce-0853-4d27-a62c-7fd18fa8996a",
      customer_id: "45b79fd5-cef1-427d-99e9-54d6cbdefc80",
      private_money_id: "86e61a0e-09d1-431c-b10d-d9c598622746",
      amount: 6215,
      request_id: "8cea176b-c2da-4e07-806b-a2057a2743ba"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "6ade8fce-0853-4d27-a62c-7fd18fa8996a",
      customer_id: "45b79fd5-cef1-427d-99e9-54d6cbdefc80",
      private_money_id: "86e61a0e-09d1-431c-b10d-d9c598622746",
      amount: 6215,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "673f24a0-7ed2-498f-b38d-675a99399316"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "6ade8fce-0853-4d27-a62c-7fd18fa8996a",
      customer_id: "45b79fd5-cef1-427d-99e9-54d6cbdefc80",
      private_money_id: "86e61a0e-09d1-431c-b10d-d9c598622746",
      amount: 6215,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "85595c97-62fa-43e1-95cb-641e0342b3e7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "6ade8fce-0853-4d27-a62c-7fd18fa8996a",
      customer_id: "45b79fd5-cef1-427d-99e9-54d6cbdefc80",
      private_money_id: "86e61a0e-09d1-431c-b10d-d9c598622746",
      amount: 6215,
      description: "azUULpuzFVuLomwBVRJPmmPoPMcdtGC4bY7HIJcf6tSk7TBAUbpPPBQviKQwRrSdq8SKatQgIflg9T2kIBk0lMdDktOSQwGmFvYw",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "cf487aa5-13f1-439d-b39a-44ab52838bfa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "2bf80a57-ca6a-4e30-8a9e-1320ff589dae"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "2bf80a57-ca6a-4e30-8a9e-1320ff589dae",
      description: "KyM1lmpltm62iD80P2TiSC00tn9Y1Isvk7Eu3FwBnOIdwfInxd71QOjhOAJFn4O36zX6xjUE9Ci"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "QYTn3D7z4jqYR0MSlZTnC3MTEqdUQ4lS2fnRYZjMS2dfdfhk2atNYB3fLQMvktKmX2KptGPjoqXWFIzVuZCWViV64wbaw3aJmJleZNPzaGhSfUUl4f8lztKR0omyDDV7Fm3Yz1gWzk5nANaKKFxcwrKsIVbyIq9C0Lx5C9YOvMjhcTCCe4R9URgwkxFV5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["campaign", "topup", "exchange", "transfer", "expire", "coupon", "cashback"],
      description: "xxZYo6XudpVkQXhDUpKdYlTny2KkA1Nri5uGRilEnROA1uuriLHXNKspEc2NszddSskIWt3otUrAwp6VdkFnU0eyZDZ1cwLB4itb9CIdkOgyAnWmcIqYXpqboYhIIDTUB7JDZj6kOfHx3ktIYLUjCT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["expire", "exchange", "topup", "cashback", "transfer", "payment"],
      transfer_types: ["transfer", "payment", "expire", "cashback", "coupon", "topup", "campaign"],
      description: "0aXcvdlCKMmfToVhkNmhkfCX8ezqoHXrAwsXBpjWe5B3g1mDaRm0xVHPVom4s8iWdOnLFJdH5KO80sTtt1xsTsEEaQ6FfNukJiTzryzPz2wNdoVkDtULiJYA3UzV65A3wwG91dexvADBbwYYHPL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: true,
      transaction_types: ["topup", "transfer", "exchange", "cashback", "expire", "payment"],
      transfer_types: ["expire", "topup", "campaign"],
      description: "F0UENKJFUEEN1jcmG7EjrLotL4yoygA0Oh34LHbOrpARAOyA71nof6AGtbXFoU0iyu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "9af2f6a7-ab97-4c58-a05d-fd290a831230",
      is_modified: false,
      transaction_types: ["payment", "exchange", "transfer", "cashback"],
      transfer_types: ["coupon"],
      description: "80ViVK9H44Ls4Vxnzg4qBNUJYSTEm1Q7CLPOXHbjyuuMYp3rcfl8lfIFlB0K65y1QrLBmTvkSkBflzftoKqKSqMjNppRVqOi5kRaiRPzxRQpLC2N9nOOkQuxWP2F4ij5be7F6sop"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "7c40b393-2add-441b-85be-81ca9dc98874",
      private_money_id: "7ad7534d-bad4-4635-8f85-183458b693db",
      is_modified: false,
      transaction_types: ["transfer", "exchange", "cashback"],
      transfer_types: ["campaign", "payment", "coupon"],
      description: "ZVi0bERCMMoVlOkG1kQJqtYU3yDPxDGTd3sEXEti7CBG3EUKRmCMHDb6QdYEqTp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "q",
      transaction_id: "15e8edb4-13cf-43f5-ae93-4173b22f9d62",
      private_money_id: "5a880361-c0aa-49a4-bb87-55a8d5dd3257",
      is_modified: true,
      transaction_types: ["expire", "cashback", "transfer"],
      transfer_types: ["expire", "campaign", "exchange", "topup", "payment"],
      description: "GFtrsRsb2QRwjJZIuWUqqoTBPhlolXJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "b6878b4e-e21f-4e1e-8327-d95dfd4636c8",
      customer_name: "9DQz6kk5nwpao54N003XAoTkxTCSjdYbTF9sfL4CLLUYMvqCyQlBLdBweGDfFzPnMpirzCx1jHUZdaEpK1LaOWLMIQ1xQHYnGiRUA9gSPun1nxnPQOL2UkrPrbf9Ngh8Ofg5W9AROC9Lp7rduvu3heUbHYkYRDSOSAT4inN6YDASWpkwIf6Cxs8W5DDDxmPZ3Qic84GswY",
      transaction_id: "6a14265d-6a16-42e6-a626-1fff739bdb75",
      private_money_id: "b5447b54-e6d1-4dea-89ec-99a5550ec9b4",
      is_modified: false,
      transaction_types: ["topup", "cashback", "payment", "exchange", "transfer"],
      transfer_types: ["coupon", "cashback", "expire", "exchange"],
      description: "m7sO4gJ9RO0HwiSBUetme4XKe3vWNwAHnTxJbAmpudAPZZ3POx8rBEDuD8hYkXh3UyuhcpJrKhyYWNj14nLFf7E1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "R6X",
      customer_id: "83b5a3bd-f3fc-4b62-8368-9e552a546470",
      customer_name: "YDycbOuK61EStOMZ6t1Zd5PbINCsr8g04JcijbfYjxOsY88sqy5EKdhym8Zl3IiqyJxIhiHyukG51bu5WhOeSsnBnam02mNl1FlHV3Rzsa83wX",
      transaction_id: "d4847f0e-6d81-448f-9e50-dec9ff7212e9",
      private_money_id: "9579b722-f4c2-401c-b53e-1031d20afe39",
      is_modified: false,
      transaction_types: ["topup"],
      transfer_types: ["exchange", "campaign"],
      description: "ZtIfozT0ZP4eFZUYYcK79vgTyOQNy6KAnnMHfvtpTkfXoBmswDUwxweNF8cHceht5aTpwV5iMWjKoxurNoj36ObzdZsZBjI9XDCe5xlc2yhNy4on5QP3tpOOnngaBerKzpTPuswsmfPqv3r5ZSgWXgu6PJfUvIfUYSf5T3zw1tfrQt0PFvLYa0VHkM9c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "b7e6d064-8763-4fd2-83e4-a30991227af2",
      shop_name: "vx4NxWwgBnKfvUjh2YMntMuFlaK8k0cZWkFbQIG5hIV2xxUu4YPLJrJGiyn0zvVcSOWh25BndnyJOhOzWj1ucGESECmo9v09Hr80qyYRtL6aQpIc0YkyRFuG5ViGnwErAvPrT0MPvuFYe4dRS7mR8cwtUnaP52bfM0Yq5Dt3BSY1n2dHdGqCYxjeasTEjwMMEUzm00VNAMNzaex6D09wIfAt2X7DZrp7TUIokIaRcCTBa7oAHM8FgEU",
      customer_id: "5bcb0398-e198-4e52-915e-bca274219e3e",
      customer_name: "sxGn4jR8zNpr8lyYR8xoQy6NfyqfzbvTYC53OUPrl2FLhg1BaD9j3bGWz29AmT4E47Ekyr2UoJ5p",
      transaction_id: "d70ca239-c3c2-47b5-8a66-843048877644",
      private_money_id: "d06a2d2c-6363-445f-bd31-7b4f1805f056",
      is_modified: false,
      transaction_types: ["transfer"],
      transfer_types: ["cashback", "topup", "campaign", "transfer", "exchange", "payment"],
      description: "GxuC3hvWKxLTcxjyjaShNHmzem03OviYw8gQhFF1tZT5cLIByQrUkJIn018iDzHUB2OO2CCCr8HscYMaIpbDzA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 919,
      shop_id: "9383a45e-3d82-4d75-8f06-20b7955272ae",
      shop_name: "Ppp4PpAJ2xgECwDLKl7SmJ8OA6lpghPtMD94cUqNOsjdyt2vaF7A",
      customer_id: "17b6f4a8-735d-498c-9a2e-e2a09dceda86",
      customer_name: "JF5J8aBVKc4IBlhLfnknSr5VGwNwD1ygFumbkN28D9NkPoIeo9kmNQ3Rdh8d9MAmtwcgQ9M",
      transaction_id: "64bba744-3a59-4c8c-b30a-0686f12654f1",
      private_money_id: "034330f5-cd40-418a-9d72-fa05668a4279",
      is_modified: false,
      transaction_types: ["topup", "payment", "expire", "exchange"],
      transfer_types: ["transfer", "exchange", "coupon", "cashback", "topup", "expire", "payment", "campaign"],
      description: "O5ahE95bNb28GO06P9tsKn2rinPZsYYMEwlzdOyYd2S3fH4wi6DEPdYX5wyklzxJZrx4oL5ePm6yyktFJMJtJYrIaEg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 5220,
      per_page: 742,
      shop_id: "2e809e9d-0ecf-4db8-8457-fbe9fdaaf575",
      shop_name: "dOm8CBHVmca4vJ66L1Lqan7xoWIW2vYbO8JCGzs1wicglveC01xv2a6b6viBpn",
      customer_id: "86afd871-5c98-4d67-8857-b551d8b94388",
      customer_name: "5655uUDGNxTraoS1CNVzW9et7193Z9JwW50biBkLUOoNuu8kS0BDCtNyjEWumJAWyWV7TsjTfCKTmzOHy",
      transaction_id: "ad5b03ba-a472-4b65-b14a-3d97f93a8b70",
      private_money_id: "7b37a237-f93e-4358-8138-ea695f3b206c",
      is_modified: true,
      transaction_types: ["payment", "expire"],
      transfer_types: ["exchange", "topup", "campaign", "payment"],
      description: "bU6hKsravkBWqKZqCc9VPdRHrJhElvl1TuSoRc1wChkvEMLhM5ucRGVMKUk9zYfJ6tVPl6ySgypy7jQlTKp0IflRuWxjwQWBZO54Iz4X2VLVv8uK744kwbcxkTa18BoHVE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2020-11-19T19:39:09.000000+09:00",
      page: 8376,
      per_page: 8683,
      shop_id: "bad850b9-e61b-46cb-9ea8-23204f2aa0a6",
      shop_name: "s583QFhovPR8SLgYsK6ip4PVDK4REM3ZcA1o0K0jekbtRJ5ejA8yibklApdSjcJfTsqGemsJxLdUspF5O6xPyFjWh0jsaxXd22mo9CMbIKeDR4jQIohWs4A9cgo5xtCJN3dlo4JsbcWFrmS3syXMDrxb4NMerrfZiKipJ72fQoQmECbLrcz1mwdqWZWlP1YBhAVi7os3IVmESwTqG6F5jkciXEq9CrjEQYXlFeZ7g",
      customer_id: "bbaa7d2e-c5a5-444e-b99a-cff9ec29f953",
      customer_name: "9Zf1tV8jeDBOWm3rojubaFVYJPWzHADZSYoeizUhQBRR8XAAIiOurAmRU2lFPPhRoHAG9iYDDnZraE97P3KfyFT85jlKI7X",
      transaction_id: "90a6c0b4-b4ac-491f-9785-16ae15931f28",
      private_money_id: "977db650-37fd-4987-9d82-65ba3d378c5d",
      is_modified: false,
      transaction_types: ["expire", "cashback", "exchange", "payment", "transfer"],
      transfer_types: ["campaign", "topup", "exchange", "coupon"],
      description: "UeLbW3800fGuQMD7DhV7tUsy3I2g13vBVSZC5kRX8zipZl0ESgiRrzzJuUnPmnUV5ugHxhbwYN1h4moLdenL4cVC86XwtJ2iNmMkTP2WeYLb0FmsPfflfk7jzedHojQuzJ4xTw2bB31GjezSVkGOsYU7uK13hvkd9NhnxE1wCYTx0Gdn"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2020-02-05T06:25:10.000000+09:00",
      to: "2022-07-18T13:37:59.000000+09:00",
      page: 9065,
      per_page: 3733,
      shop_id: "6b8fd782-3c64-412b-ad4b-43105831e872",
      shop_name: "eeqiLQywghw2V223e3mcdoWZY3IXnIHp8GpTIxkPyglnwV46IJJH4Q9TBYYp8IWolbporEVZeN3iBMDY1aKicMP9ZxcxIstDPPqYl71EdneQRGPCZWWMpio2kMEkO",
      customer_id: "b9afef63-e8f8-4b73-9ad0-203430dc0559",
      customer_name: "lidEZqLShkTWjJmLX55eSzgElw81zpI8TzmVvxYPu5yvJu7b91oYODseQqdgS09R6djwj6a50BYGtUHTHWA2walpCY2aAqcZLtrmXu39gTUFYLLTvklqPsiBNbOR6NLJ7DynkFEZbamgdDgZJ8c94gsUwOizJ58b1uYAsClvyVU7pIygTFulr6S2pcQRq4Yr3vxROMtSd6vRlIfK95CdBEoN5bdy359qiepmt9wm7ex6P1O8Tkdf120zz7d",
      transaction_id: "ffcd1671-a23c-4054-a0a7-d5a2303f6235",
      private_money_id: "60378fa1-04a1-4f57-8a06-ac35e3bb3b72",
      is_modified: false,
      transaction_types: ["cashback", "transfer", "topup", "payment", "expire"],
      transfer_types: ["transfer", "cashback", "coupon", "exchange", "topup", "expire"],
      description: "eb4tlvBo8D2X4BItXpc2pmKD1ZxftQcaFh2ZQkZNvchyJxvDrw14NOpyAbJwn3pHggaVqDGWILrJKnhwasmtwpGyaTj4ouiWx8puf8Uh4e0npXsyPUbM5TYQJ3vCsaBFWD6XxUsoJF64UaJOc5DaWcN1CrSDQRzHVyOZWTRbZow3GnJmvDfJ3iKX9qT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      to: "2020-03-21T22:07:51.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      from: "2021-10-21T17:25:36.000000+09:00",
      to: "2023-02-23T14:32:03.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      description: "QDfI3ht9OfNmx3tI93FAIoe9z8UNthONuQ8klJpgUTLpklloYbXFYg63omKi7xUGjwwfihvjDaBT9sWBEjwB768D",
      from: "2022-05-02T02:00:31.000000+09:00",
      to: "2021-06-15T02:31:23.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transfer_types: ["transfer", "coupon", "exchange", "expire"],
      description: "xRISnTtkSIlivtvJdPL4RQ7MNMhplxKOpexvft99pyGJgz32GsbrQufojOq6SrTQtxCmQhbYxCdz1JFRBlETqxuVKmQXdJyozfWom1raG5pZkdCCppWD6qh2nHuEJ17hZcyq83xHNiG3rWd0b833WriKjHbcR6mxuiSyUxtt2FxBS",
      from: "2022-03-19T00:58:37.000000+09:00",
      to: "2020-10-15T02:10:08.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      per_page: 935,
      transfer_types: ["exchange", "payment", "campaign"],
      description: "rZg9cksokBxSC6ftOZouZ6C0w1qZpplNjZ1jyXfuvZzX4JSNMbLEwdXpqjykSs51oVdvFnsxWRzqiEvZzlrFLgINHuZIcchYQzfYIKOO5wLRytCkIfAnXH8MvNTRdHf3fpDUkXU4WzZ8OKPGY",
      from: "2020-01-24T18:48:22.000000+09:00",
      to: "2023-01-15T04:20:54.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      prev_page_cursor_id: "65c55f5a-3b39-41f9-a57b-7d2917568dbb",
      per_page: 595,
      transfer_types: ["payment", "expire", "transfer", "campaign", "exchange", "topup", "cashback"],
      description: "YibSM0EAVFoSuiLlqlb9Sz5cvSoKB1xfyy9dNjIl8P9NntxrmM0NwRPJqUeK1XXhDoBuxj6klkFqFHRkZpROCEHjfh3f8wxLqV1kjP2qbb3JItQRCt1tRXeQSrESCEP7cNnPle51Uq48LxoMxsQMJpVwKl7m",
      from: "2023-09-09T08:12:24.000000+09:00",
      to: "2024-01-17T04:41:35.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      next_page_cursor_id: "d60f789b-2221-4f82-94d6-f6944a329a33",
      prev_page_cursor_id: "f16ce9c4-8499-468b-b9f5-5e96707d9744",
      per_page: 146,
      transfer_types: ["payment", "coupon", "cashback", "topup", "campaign", "exchange", "transfer"],
      description: "3GUB580zT1aCznjz7JxkHDEjnULWi2lk8KB6qxjzrCXzojpRFEiDEcixmeKbbcwHXnehmVDGTe6sRC03U0zVbo36PgMaMqVa1FXGwrejInqO1D3gc2VptpvDlqk1vGNdk6PQTJmSwLsKBYJLbgxFVXWowsrlC6ieYNQV9EP3ZXhmWiHFHxc8QMFD70omlwHUM5CG59j",
      from: "2020-03-15T00:39:15.000000+09:00",
      to: "2023-01-04T07:38:20.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_types: ["payment", "cashback"],
      next_page_cursor_id: "47118c65-442f-4825-a69f-e5610b472229",
      prev_page_cursor_id: "0107def3-a09c-4d09-b224-186a35c4d0fa",
      per_page: 219,
      transfer_types: ["topup", "campaign", "transfer", "cashback", "expire", "exchange"],
      description: "Q1dpkllIwdr18t",
      from: "2021-01-20T21:48:40.000000+09:00",
      to: "2021-08-02T00:11:25.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      is_modified: false,
      transaction_types: ["topup", "expire"],
      next_page_cursor_id: "87fabdf8-82ac-48fa-ac38-bfd5771f6d04",
      prev_page_cursor_id: "6f781924-438e-4e27-96b7-6f628aadb08b",
      per_page: 856,
      transfer_types: ["transfer", "coupon", "payment", "expire", "campaign", "exchange"],
      description: "H03BsEGg4isip5LF0VhClKQJoSAH0tuBygiUGskqvgd3KFPUk1X5Is6dWGSPBl1ftY5xWZIBcQFNqzHTyDe9IKrqQB3vBO",
      from: "2020-08-20T16:40:57.000000+09:00",
      to: "2020-02-03T11:31:35.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      private_money_id: "4a0e541c-d14d-4bc5-a58f-5eeacdd9b67a",
      is_modified: true,
      transaction_types: ["exchange"],
      next_page_cursor_id: "7e50369e-d113-4f5d-8e6d-d6cd02dfe113",
      prev_page_cursor_id: "c785b9fd-d1ec-4cfb-b510-f09d79e8a56e",
      per_page: 458,
      transfer_types: ["coupon", "topup", "cashback", "payment", "campaign", "exchange", "transfer", "expire"],
      description: "iRAb3S4niNikg1dT41UHO9zmmBGpmP3wFrG82RlC0UByGdFv7h61b2A2c9DVwCMPmPeO7T2dnkvNdR7uyFqeZh2ZzuSVXlLc",
      from: "2021-08-10T09:34:10.000000+09:00",
      to: "2023-09-28T05:45:09.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_id: "90d998a3-dc74-43d1-9984-cf9650b52b45",
      private_money_id: "192e1175-44ca-42d1-a6d3-07582818a9da",
      is_modified: true,
      transaction_types: ["payment", "transfer", "topup"],
      next_page_cursor_id: "5c4bf9b2-95dd-48b6-82fd-1f1413d80791",
      prev_page_cursor_id: "d83eb20a-2ec8-41db-aec1-24213aa76bab",
      per_page: 692,
      transfer_types: ["campaign", "expire", "cashback", "coupon", "transfer", "topup"],
      description: "MzAXzflQ94PUOx27eMeDpCwEt7QFfGo1NtbpThvH1pbEQl38STV",
      from: "2022-05-19T12:46:43.000000+09:00",
      to: "2022-06-21T07:43:41.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_name: "9DFEgqBVPIZAldzoEDqyK",
      transaction_id: "e19d2f38-a9dc-47d8-8102-2119f29711a6",
      private_money_id: "928b0882-0f0a-426d-9d13-358ca1422b51",
      is_modified: false,
      transaction_types: ["expire", "transfer", "topup", "cashback"],
      next_page_cursor_id: "26938b3b-2f59-49b9-83bd-ae961d31074e",
      prev_page_cursor_id: "01403683-6222-4925-b6b6-b6f5b3b46688",
      per_page: 316,
      transfer_types: ["coupon", "payment", "transfer", "topup", "cashback", "expire", "exchange"],
      description: "neSyxy152XkrYF48bl4Z3DC1bgWa2qkLus3hvG7IljYR3XQKl4UUbKSEhnaRqyupJ",
      from: "2022-05-10T00:07:00.000000+09:00",
      to: "2020-01-16T20:49:05.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_id: "828de3b1-d2f7-409b-9233-490a6a4a3a70",
      customer_name: "A",
      transaction_id: "d876576a-60a6-4961-9272-1df47cfdb368",
      private_money_id: "425f06d0-b873-4d61-b7bf-027f1f321383",
      is_modified: true,
      transaction_types: ["cashback", "exchange", "expire"],
      next_page_cursor_id: "2fc259c0-12be-41e7-8990-71f3c4915cc9",
      prev_page_cursor_id: "82e203ad-af9f-4ae4-9e49-0c1a18d3003f",
      per_page: 483,
      transfer_types: ["exchange", "campaign", "cashback", "expire", "transfer", "topup", "coupon"],
      description: "1o85kVQ1J23oOL98EXHqkxE8cMILnngK9eV0OCRCVSwiKXkOJLrgmbfi2SCYd198xZSp9DbjSQK9eFJQN905moOLrlPktf0",
      from: "2023-07-10T00:06:41.000000+09:00",
      to: "2020-09-21T03:59:19.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_name: "CHBUBN6FNOXnGnbqTTlBP4PMdYNXpAmBwT5Uxm1VDSvs1t5krXLxeFRsjHeSaUP0V6eE9r1c5vtTxlfnn8ww20jJscfIdOL0JDCimcBjfDbGUUibfyKmD2DcSgyBzGb9OzLINmauLez0sljO1rigVKpK3m5Q20hUpTBgfzpsDmV4wz5MwkvHc9nxXZZZxanOgKEDLQutiDjs3IDrksZ0jxDvBH3aT0vvN",
      customer_id: "64b0afee-bbdc-46c4-9ed1-a9ca7370c830",
      customer_name: "UOQpKYD1f98OeyR3wjqhFK0LxCE6ucSRZ0JMDvjjcGghHcH4yu5cirNZFN3jkLiBGasmUnpxGdnhPTLa1aKCEeXtaf5oFdVGlM4ShV8xpEqtcXLtDL6M8R",
      transaction_id: "cf400700-c46d-4037-a785-03ec31daff29",
      private_money_id: "db2396eb-817d-4298-85e9-55a1b2805ce4",
      is_modified: false,
      transaction_types: ["transfer"],
      next_page_cursor_id: "7f1859b7-9fd1-4fe5-a525-6c466703d74e",
      prev_page_cursor_id: "6d78a2d0-3764-4d37-9931-5ae02aee6ec2",
      per_page: 461,
      transfer_types: ["transfer", "expire", "payment"],
      description: "PaGhm7cHPp10cZLqFgfPOtbnSZW5nmSM",
      from: "2021-01-19T04:15:16.000000+09:00",
      to: "2023-05-08T08:58:28.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_id: "fc39bdeb-c797-4d1d-9a94-4147fc5930cb",
      shop_name: "eXZl1vs30TQOjzrFRvh8dnc0MdMriFCH59ZAHIvNPiTChaCGv5jL7chrwoRbhkeem3pryLcKgQXTH5EMWVcbyNjCDagJn2iowcK8jR6Sj05x0YSmpLqyjwINPn0sOlVNw0kAsgQFOE40rgo8GZ3migOawGh5c3yaNHFONRjcGAFpOY3QfQS34fsLDHSYGKNnsIanodC1sIk349CA4A2LgI6FNMHkhLC4iFnD4lCTM",
      customer_id: "3e093230-a071-4a72-aca0-8768691fd6b2",
      customer_name: "AYTdFgBKYLeplrLMsvIpL1VefhbpS4gc3FvHp59umqSq6dmNPGhYyrdKiQmRJRoh1yMZDZucV9edzEEsMXicwtw02YyIQHU0J1X2A1gtPcdG1jLlCvkZcHe",
      transaction_id: "36ccd8cf-e61b-4a20-9dc3-f22a862437ea",
      private_money_id: "648ab1c3-8f78-4406-a619-0bea44d52b7b",
      is_modified: false,
      transaction_types: ["exchange"],
      next_page_cursor_id: "3d4f4374-d984-4028-9552-7e4a2ef89833",
      prev_page_cursor_id: "09e7cbc4-8d7b-43ff-92c6-51a465ec27d7",
      per_page: 582,
      transfer_types: ["cashback"],
      description: "IYrBsqglpwqHLSTVl3X1JoiKlvwqmLh3jJGwmVhT8pWw9UXP95txuvV1JXLHEoIESeg1k7mW8244ljimRlVpHrrsxFCbzaClAR9rpXnlLsQkwgzKd",
      from: "2022-08-16T06:16:12.000000+09:00",
      to: "2023-07-15T03:32:56.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      contact_name: "1gX3mwawX59tpTeSG2GNsbkXnIMTLGQyclEXRd0jX5JmV9yRZGXDG6C9VX2omr4CzDW3zaDFL68"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_account_holder_name: "8",
      contact_name: "MqALgKeRjDHkujzZAPhVNbz69G2hRYpLTXQ2LdCRJ17xoZCEP8piVDaev0AUoLzqBI1LISsduAuhLsaAenfn5R"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_account: "6788",
      bank_account_holder_name: "-",
      contact_name: "KNjOrz0gxcUfcmi1BMQ6dVPdIGhhsJZh6ejXiBdJYaP5PmOBPD3lzJwCGiP6cOR3BICO9DVNMwCQXhaQdcAkRn6kdQL86lRMvfY55f2e94n2eKzooeumaBqZMkd9X0YlS4LFTP5o1vNN16FUiLsbMNFQTQsFUdCoRG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_account_type: "saving",
      bank_account: "9524724",
      bank_account_holder_name: "ｦ",
      contact_name: "jiMy83Y3IJwAk6xoyWMy3toitppyhB9A9BTncJtbvl782gFZcrSGn139vFgU0XyTZZEi18zYJB1QVgFDgYH0DsU7Ub4tg3iu4HH9TSoLtxqPC0yIyM4uJAfLvzzFHhWWp6u9Db4wV3CF0NPHdcwD0eOvqjFVvCsDWSL45NwuJovtlHyfhcGPTYZ5qc6u9NgIkcxiUeB1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_branch_code: "584",
      bank_account_type: "other",
      bank_account: "17120",
      bank_account_holder_name: "ﾏ",
      contact_name: "a8ZPBb6fVm4sOYfI8hoxocpcbCo7XMPfGZy6HY3kbUlGw6K1jgYzkYYAOPgmryaoKDJqnKE5SvDzpeueSPLfOG1rD5oK25tXqmOF2Cph3QSVVio59TJB7t10bFCo7lrmTmc1JZ56NeREnkL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_branch_name: "YNlBKsnt9uaHXOPrAj4O6CtwNPjhx3QG1mB",
      bank_branch_code: "713",
      bank_account_type: "current",
      bank_account: "189235",
      bank_account_holder_name: "/",
      contact_name: "1QNihqZz4WvgpR20ZHFUM3DGbSwT908e7tgO8YmVqtJXdtJB3Rslmwm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_code: "1705",
      bank_branch_name: "LQX1RJHHqfRtnVUzKUrs9k0LiX",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "41",
      bank_account_holder_name: "｣",
      contact_name: "8sqJaKj0RDf2v2Wp4BeV3MwJHdT7CKEP1vmSuqqoy82X13x0Ir2USLnAlsi9J6FsIYXZSOGUPjquKcId3ykwVaLzdr5SYmKkZquRre1NyFIKJffMNG8Lc4w9gMNOVmqGpGhSKvQVBHL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "zehYDnIuCBNRn6XDSsGvsFmOCotqGDsB",
      name: "e9zmg8cGUcOt9g0p3QuvpTO8Qgf3HrErRsNlQSVW8oDZ0XEufLsiHNWKd50092mlAsZOcJMEYgyZPCLle81JD26dWbxxSlqUFzd4fv78yaXNEy1UMy3oEYADX5DUvcxQarkIaQ5aE1frfkzuZySIKzyDvkzaxe",
      private_money_ids: ["70cc4d82-75ad-48f5-87db-026452e60461", "0060da80-988d-4cbe-baee-1ee99f2712aa"],
      issuer_admin_user_email: "WbNpZRjGTO@I2in.com",
      member_admin_user_email: "S577AvMJ4z@LQp4.com",
      bank_name: "fIkmu8qfIzEeEhcY",
      bank_code: "1683",
      bank_branch_name: "pI",
      bank_branch_code: "",
      bank_account_type: "current",
      bank_account: "6",
      bank_account_holder_name: " ",
      contact_name: "C8Ffp4P6xbQOSPnFK7oPOgAK8bmMIOItx4QvrYtimKi7FnBoHkBcT026dK90rvRlzKDEC5KHvMZzmyFPgfWs9QLMzpctlY2phvjMjLTvuFBX7HwLXL2AaU0NrXlcEWrFPACFLZFRNGhLR13FXmk9Npjaz78viA1Up3VzZCI1ND12Jm3wweA7944GMMPgEM60Xje9N0S4e4vMNjtrZDCemy2rrqiariC0d6ktwrNtM37juRXv7DSCb7YJQ0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 9742
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 8873,
      per_page: 4237
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      with_disabled: false,
      page: 3313,
      per_page: 381
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "KahN1B8VyAU2JH6911enJLT5hyQ7g",
      with_disabled: true,
      page: 3022,
      per_page: 4396
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "VX8IV8CQs2@MDWJ.com",
      external_id: "UdLPRcZr7XtFL6tD",
      with_disabled: false,
      page: 2133,
      per_page: 3342
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "004-91596",
      email: "PHMlt1KgfW@bI9x.com",
      external_id: "aU7tNSO0L2wPJtaTGke",
      with_disabled: true,
      page: 5899,
      per_page: 7125
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "13y1AvfSlA94Aush0DwWYWtOgQF2rDDY0YXxPBqB3MhVc8aRo1cDN5",
      tel: "05-45-6613",
      email: "ay6i5CW6jt@kFLw.com",
      external_id: "ttTWQKNqLFMuHTtEoVhGx",
      with_disabled: true,
      page: 1159,
      per_page: 8988
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "661-6780",
      address: "KoT4TjIXXgD6EnJw0xZ2W6ZoG3FcijqsWvqyQK7vGyb1BwKTnsTiGWL7ubGnqy40gQKMMrBRYUOQ2YTVj3OIPrp7caaYuZzWI2OQ4nWAYFq9epORLOPS71GXnGNh6bRT5UGPwgPUchyOOnQEH1liDOyGdnlkfOCTTVmo4UBK3UNSDElScoSLh2O67BD6kbV6ytGQAhcnbPQxUb8eRDU602dS7h3RPzz94PwFL8JW1HA8lVE3HGdO",
      tel: "077-0943818",
      email: "0nKRTItM2B@gqaN.com",
      external_id: "y2xZftMtjU4lER7le",
      with_disabled: false,
      page: 942,
      per_page: 6798
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "xk51j70HhK7FuGp4bpnhxZFFtqYJqOm4v4x42UwwuyWkOXdXVRTlp0QDcoRDs8Xh7NRzLvKiGHJVPHc8vz5Su3g1ZSDAVOyBI2lkMODjSKlZwRDK3JZFFyAX95V",
      postal_code: "3701209",
      address: "WP1QHkgA7dh3azbhFXL4M8uopibIY4IEvQHWjy0TlIvUrUB6txHZTUd5OVjnWsQOiHoShok7PhicJbXCGX01TxiZo5RDUpug89bXZiPdTTKISoOoUdLhyWw7rBWYeVQ4ijeLibY5w8zTTJLQZGFnxEX8BcXTzw7zy6hU9QIf",
      tel: "06-652-820",
      email: "0DJKNLRTyV@YwNG.com",
      external_id: "6LmLNNpGNHsO5noG2Yt4A8TLtE3B1c",
      with_disabled: false,
      page: 5815,
      per_page: 3319
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "cff98f31-2597-42a6-9943-28b9a17d91a4",
      name: "XrSMtR897B65z9HtQTIhCJuTMD2sc1H3RR7F8xTH70wOoc8gmrJOpxdU0yHQOrEulSsLw1nt7A",
      postal_code: "2726490",
      address: "T1OUXTAgKEuftxFfpd3gO97vgrmzHKeTPpXNtbxALSX8Mpg6ggxKW79mPRzBf4iPuv7RJ",
      tel: "02161536-544",
      email: "0jdrKyytCO@dFe9.com",
      external_id: "kLST4HVIHwsYa2f9EAbNlfG",
      with_disabled: true,
      page: 1014,
      per_page: 8280
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "g44jYtU-864ag0TpS-m--gf-",
      private_money_id: "b6ed7c99-bf55-423a-b1c5-bbc2ce467cdf",
      name: "UexKKc3kb1QAXjGE",
      postal_code: "0078450",
      address: "zukG35cGiNFgU2PxasPDRY3rwrXdZgYb1ZREHcl1zLCJ4Lrs0oLQOp3JQWdmONqmoy3Si4ilQhsA9ldkDtvvarpVBdhJ9SIaqJdkgiwSfNwETCX04pvJWQC9Fi4MQPqNTlI0L1RZldUJ5bozwVVGv82Zqqnl5QnujMSKt6ITXVFz0VXiWr5JyknYBK666bxWdHj5TBap1mPUV4D7yepBcwPMHqVv1xUuJBe6TMXmu3kEOmcIkekwWyKEDZc5jT",
      tel: "05-4257-2851",
      email: "ujDdPlO8ve@n7Fv.com",
      external_id: "ySP6Y0",
      with_disabled: false,
      page: 969,
      per_page: 3214
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      organization_code: "Ieppk-0-F-2ftds-1-5Bv--3924"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      shop_external_id: "uzhOzvoUb3WdFLg82d9",
      organization_code: "D8m-F"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      shop_email: "rhuAdK8eUV@A0zD.com",
      shop_external_id: "RJZPqVdTFqYJ",
      organization_code: "7GR4-Lo--g-7f7X"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      shop_tel: "0033-7391-3261",
      shop_email: "9NXYlSaVlR@8r4p.com",
      shop_external_id: "5iOz",
      organization_code: "0H-x6A9A-t-3x5--3--2uZK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      shop_address: "LgIpPqcwB3hdujfWgAEy9LiCqba0FKVlIw0KDCUjTmbIWmfbtAe2CJ2jEQZFCyIFGteASZuYjuUEO8p7DZtE0oes11KPSgonsErD5XPMKh0lgXmbsdGVBbcgYCDa5zeKh2Q7LfuoWNjUILh8Z",
      shop_tel: "0539-9084103",
      shop_email: "mJ0hJQlFg4@WmvS.com",
      shop_external_id: "11CfdHR8SVv",
      organization_code: "-w-49mx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "F3EFKd74ytpZLFGHiTCsP9H3p2WtXH",
      shop_postal_code: "110-6518",
      shop_address: "PFM2k49j06L1m0G2LWaSiEvgyvtx0YzvCIPEnDOUaqXKtVrXTH0Te7ZYVAlugihNRQ2eHI30lf36Y3sFee0HQ71JzTxKGGATwFnNLHEx9rkz7sQdMVSsxgGHMHTNRzOfd4oOiqzCyauQ4YPN2RRt48TV0Evp",
      shop_tel: "0873-566-3022",
      shop_email: "v8cb47GDUM@KCiE.com",
      shop_external_id: "MVowY2l",
      organization_code: "6IsOU-O--f-N603Rg-8hmQJ7PtK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      private_money_ids: ["9346c983-7bd9-4600-8b93-5bce59e71ba5", "1824edaa-2a0d-4c92-833b-e798c9134f62", "019e8071-c6b6-4732-ac39-fbacf5ef6431", "9d555fb3-3290-4d64-bd9a-50d6cc422929", "c4049595-086f-4426-b3f1-ee8051bc199e", "5557ce81-b960-41cb-8b25-498168fa99ee", "2ec693af-c1f5-428a-a20e-5c0247ae830e", "80acb885-1d38-456d-9f36-9adf7741ae48"],
      can_topup_private_money_ids: ["bf8847f7-332c-4e5b-b2aa-ddc16fe1ba8c", "7720587a-ed5f-4840-b912-adb143edd1de", "e6625df5-f621-4624-bd3c-39ab04f0eab2", "0d91fcdd-7959-4f85-b3ac-8a2eaf96e998", "bbc8f156-d7dc-4958-96b1-9d5ae031da57", "6394211d-3ce3-44df-b765-2ac10111de48"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      organization_code: "Hsu-98--178-Q-F4--W-s7",
      private_money_ids: ["42c9f747-5801-4c8a-a3e4-de6548335f44", "305955c2-6c74-4517-a9dd-3515b3f28216"],
      can_topup_private_money_ids: ["ba2a2663-d29b-4900-9094-1901a66a4247", "108a830b-5ae4-498b-8869-56a00b680457", "c446ec03-9288-47a6-b2f6-7b6e6b38e3fa", "fba9fec8-1f70-425f-9c2c-4a071789be27", "4c23bf22-917b-4c43-9931-7b4ca45857a6", "4c76c23f-23aa-4852-91d6-3beb8081e0ce", "154c090d-8f47-4ff8-839a-23ba008953e4", "db95db95-32b0-4368-b244-093e7d69ae55"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      external_id: "cS3agUWoLV3orMtUuQp6G0um",
      organization_code: "-BRooIfd12",
      private_money_ids: ["c5ba9c52-5f8b-4598-8b58-8ac6ff6e2cd3"],
      can_topup_private_money_ids: ["60909420-0e65-48c0-ac89-eb6ddf6dc98d", "6559f19f-20d7-4819-bc81-34a0468538f5", "858e64a6-1fcf-4f33-9e8f-67e4fc1eb242", "f6397445-a806-4984-9e30-1d3544dc8798", "46718af1-ba1e-40d8-a151-7c28fc6f9247", "8139bc0e-984e-42aa-8576-e58ee1066976", "891be3e4-752a-424d-b173-669fea088a87", "b0199a78-4e25-4b09-8204-da53eb364a78"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      email: "yl47jWNBZf@kAuq.com",
      external_id: "JQTTfd1dbW6bJD7z",
      organization_code: "71G0-mEQ-Hbr",
      private_money_ids: ["bb017936-4f6c-4d00-ab63-bb0f3e922ccf", "39b6a80a-f02d-4010-8940-92e3feb29865", "f37678c0-6f57-449e-98e5-83608235ed38", "d9ebe9c1-e8dc-4e1e-b7f5-6101fa60211b", "6bf83bfc-7ac6-4c7b-a93d-ccb5fdab6d40", "0e47382c-e40a-4832-b344-13f3f814e0f5", "ddfdd86e-252f-48f0-ac08-df1044327d4f", "16735258-3500-4003-8767-ec6d5ca862fa", "456dde2a-6161-40ef-b26f-2201250901c0", "957c9961-3e4b-4886-9ac2-cc176269313e"],
      can_topup_private_money_ids: ["6bd3e28b-3c27-46a6-9dae-d7bb25920aa5", "cc0e3a20-baa7-4dbe-b544-9ea4b1488da0", "aa8ecfe7-3670-4966-943e-ff56da5d2689", "b5c103b4-3cd3-41da-966d-1965d1563b74", "7d8ea0ab-c20f-41eb-850d-9db2b69ffef2", "62347024-c6c9-451f-abc1-9453c844922c"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      tel: "04-729-6212",
      email: "5CpwFg2KQT@mr3J.com",
      external_id: "2lawaVIw83Q4dn4Gjg68dm0N4tmh4lpfVXC6",
      organization_code: "DD--g3-kv3g-v64-",
      private_money_ids: ["880188ef-350a-4a9a-af3d-4c8c63f1a9cb", "831a7067-bcc1-453c-9510-57e1c3eff872", "2bcd672c-73a1-441d-a08e-4b8dce6f84c7", "4b45a844-7c77-4a2a-a461-f68f8a991251", "d8ed8c7c-d032-4fe8-bb54-38202fd70878", "b71ecdda-65bc-41af-8c98-dddd103ff710", "d143dc71-ba20-4235-8807-aa89ffb0f7d1", "fcdf7477-11cc-4b4e-a3cc-5347edc883a9", "b5e9e724-d998-4bab-b6c6-d94f4aaad195", "f67f4ba7-5ed1-4edc-8910-10cc310ee6ac"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      address: "0aMpxa8FcBMCl47S3lHyJy8qBHEOc3rfFn95iCdOS5lFkpo8rM9fjoubt2g7OaNkMe2ORfgilVeS0Hoh0B63idTD7w0aw5BBTibfbh0",
      tel: "0344709-4756",
      email: "whTScnDduZ@REVd.com",
      external_id: "QC8DZrrRQdxUJqwxNb1ql0ma9qt86Fk1ev",
      organization_code: "0-Ji1yX",
      private_money_ids: ["cbffaccf-48be-466e-9d76-e74e10aeb862", "c4aca3af-c7de-4bb2-bd56-1f56ca164b81", "0c31a0e9-67d8-4c6a-a353-77c3ed81c11c"],
      can_topup_private_money_ids: ["4dbb82d6-df67-4ec5-be05-9db24465f3ea", "2616caca-2797-40b0-90c1-45c55a6691c9", "a89bd609-3159-4e3a-b515-5ce8d0d4f955"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "JJFec0o5k6UsTwT8kyEH2uhW1bEXwaNTQ6L1o68RLRdozkrON1WbvEGDzbUGuWX1BdjJu5Ft0XfU95nLZ6WeRnj66BKONycigJcHF9OUCMzFAkziAwZAkBoyI3KcVQxNCzBtFfjVNwiJBoiZpx9wcMA0OlJU3kMOjKltw8",
      postal_code: "8002175",
      address: "0vWEoPHktrR5OiydMoJH1w9ZCTDL6uEFmtLD5FuY59md4rf8vA1IBaBLdmGfBTv4rDUNBTs3rYpaUeE4ZVlrkTznlXNISuwAvQp",
      tel: "0789404248",
      email: "hwIlBP0r1C@MoRi.com",
      external_id: "oQnG6VMyr1zZQ2rpHhbVzCy73znMZmbCfq",
      organization_code: "HyT0U3",
      private_money_ids: ["d7dd60ac-05d5-4400-890b-a9cd32d72719", "70269b9f-80af-441a-88dc-f2f02f90e4be", "2f4e2950-df89-48db-8bdc-a4cb42c30c67", "e0f88c4f-1c10-49f0-b64b-6bfeddc93f2d", "74dafe8e-1945-45a3-bb1a-a43e3633c6bd", "9c0208d3-9f91-4cd2-9930-862b1e3303f4", "d6488c39-ecbd-4f48-a401-1c1e5b76ffc1", "0c043295-fa35-415e-b8dc-3e5c48c88541", "9e2e8989-a57b-4dc5-ad50-6e64639992e3", "24a81766-4eb6-4439-ab7c-16bf8a693a08"],
      can_topup_private_money_ids: ["fec0fe63-9c78-46f5-8605-553a562083c3", "16566126-41a8-4a15-a116-6bdb2c8fca8f", "62c2ff89-93b4-4c26-aef0-73974e6669bd", "d9eae5bc-ccbe-4082-96ce-3129c4e745af", "577177e1-fafa-4c36-860c-5ea6a1a8fcbb"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "8731f594-ccf8-4fc3-9add-ad7578a4a16b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      can_topup_private_money_ids: ["e99a6d5d-3ae3-4418-bcdd-c6b6d44d5cbe", "23caa299-f2ac-4707-a561-ab51fe92ae79", "07827d54-0cd3-407b-9067-6efad041b32f", "f87fe1c9-2ba7-4005-b283-57d0a62ceaca", "fdf1ec41-2730-4a6f-bf21-428565bbdb1b", "83e4d6db-ff6f-4e8d-8159-356931412ec4", "befa5342-dc7a-4c38-9008-fca02aeeeb8f", "ede64882-b6c4-4f76-ab06-89519e937e05"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      private_money_ids: ["12231b37-6a22-4f5a-9deb-68ff346c2f16", "647f9995-bb7c-41d3-8ebd-f7362d26ffef", "0e964329-d2f8-4a38-b620-2e9a644d42ab", "73d1453e-650f-4809-8d72-6bd0404e6055", "b6824eb9-1fe0-4b80-8aac-14eacf0cfa07", "b944484f-86cf-4533-bf05-acb0394129ee", "2314f759-c979-4050-88d2-36409a435445", "4bdff46a-ef7a-4d94-bde5-494120868144", "81f47a6e-399e-44cc-aa43-a62f91e38d31"],
      can_topup_private_money_ids: ["6d4ec633-7132-45f0-9a39-6aa849cb2b70", "25be6b06-870c-4153-bc9c-a3dd0495326c", "7c4dbc5e-38d1-47f0-9b3f-995315e2d9db", "c224d3c6-394c-4225-8c97-3104ad514d01"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      external_id: "CnnSF1arK4M",
      private_money_ids: ["f0551cd4-770b-4200-8b86-5a43e7a0ae82", "27bf6eb5-db57-4212-aa4f-6afc1aab1b32", "40920a60-cd5f-42fb-8219-4f358a165e24", "f6c34379-9888-466a-89a5-8ad66eef982d", "f914042b-02e7-4340-bbbb-9075b2c64661", "b4c371cd-4b0f-467f-8044-e67a75280a11", "965f1fe9-d6f6-4b42-b9e5-aac1ec70e35b", "bd580acc-f143-408a-9a32-8738b3896db1", "7245caa5-6955-43fe-9e72-d06c412669b0"],
      can_topup_private_money_ids: ["2f4f1221-a43c-4c66-9d3b-2cb7077e377b"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      email: "rcMcLiUFPD@rl7c.com",
      external_id: "2aDYLihrx7mySIAuINrvrxv8rJYstHg",
      private_money_ids: ["a9a0944e-165e-4778-9498-a71d0d460af6", "d7ff2456-77b5-4428-af7a-ea47f93fea25", "508eaf23-d158-4c65-8a9e-0f71d26f293b", "a837c12c-9675-4646-b59d-7d1670a58e73", "4422db0f-f929-4ead-8e04-a649b46b6b14", "b33f727b-93f2-4e89-ae5c-aee14540740f", "93f781aa-037b-4fea-a03d-ceb2c0d6bbd0", "aefe6de1-fd6e-4f13-8afd-9f272a49bc63", "fdf4c778-ba2b-430c-9b35-19f5cd2f5617", "47bbe588-9cd0-4276-8a8f-0362e7b5263e"],
      can_topup_private_money_ids: ["285cf192-074a-4f48-865a-b949c8600b0a", "0b4dfc77-383b-418a-b6ea-1235b3e38392"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      tel: "0694-548-501",
      email: "pMXufAdnkE@JISD.com",
      external_id: "rlUmjQ87iZmuDmGwrc3erl6DSU",
      private_money_ids: ["859b5d8a-6277-4d84-84e8-8701a5b88d1f", "84d1c8bf-f432-4a8c-9830-f88fcca617d2"],
      can_topup_private_money_ids: ["3220accd-d954-4951-8555-f92c9ed0eb90", "d15a353f-d4d2-4906-aaf9-456dd6c0e8f0", "f0aea883-3843-417f-bd02-efa6addf65e8", "3a7f01ee-e336-4984-b0cb-bed3e87fb588"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      address: "PK3aFlMh",
      tel: "0694-6291",
      email: "r2JkqPUNoa@gSs9.com",
      external_id: "YZCw9umMjYoK",
      private_money_ids: ["e218daea-8bb0-4958-83ce-b5ee7e9a8d81", "86036901-a198-4e4c-ba58-d60a2a7de263", "98ccec39-48c0-44a7-8b5d-f9b6007e1a9f", "56f2149f-5788-4659-b7e0-8a723b055afa", "6d8b0900-4973-44c4-bcce-6c3c23462e02", "8e0902d5-c5f5-427b-82b2-32dddab4b150", "f4419b7d-48f2-48ad-96bc-547d076f3440"],
      can_topup_private_money_ids: [],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      postal_code: "4749508",
      address: "mGFQrEtIUXE2oGbddWPPI5Xs1a8fZopfIa0NHBttgs5SJf3xoSobUizrVpEKEE09xEAszA1pvU",
      tel: "081319012",
      email: "PaBgvTfc85@pOZE.com",
      external_id: "pfTxtwFa1llNn",
      private_money_ids: ["6795ad94-4afa-4864-80c8-5bb1f73746f7", "4919c097-7409-4816-892a-faea99941f3a", "e16c97c0-1308-42e2-b5e9-1669bd0a6df9", "143ff3a9-13e5-4399-8278-707184427276", "be172652-1902-44a7-ba67-ab2eb2eb75d1", "5a6edf1f-1826-4e54-85d7-a99259ee6191", "98812d85-3b5e-4c57-9ede-c81289800138"],
      can_topup_private_money_ids: ["dec782c3-8723-4777-8422-0318ec2e8656"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 9', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "c3a48fb9-8a7d-42e6-9076-e1066f0656d6",
      name: "i6jkMHj3zFIQkRZ2iTHBDcRb07cSR8eDwncwv4R85uj33TYt5Z6Zu6Xa",
      postal_code: "2396543",
      address: "LVflXnZympICccftbll7zLwyV2BpiXcnqXLSaRTZPftWbAm5nSTAaZXkSqycOnkIDg3fE045g45lNUXKKrYGWZZU4faF8fCzCnwuBmNpUy7Pzkck1GIcGKKPLlf0cYGiN91gAx7PWVNLWptbbkty0bt8rffqkShtdbXaS4XuKy9cpsPwYsZrtlgR01mS7DnxKQV9UgIDUzIHNouF5Gp5WdYSBvhlviS9",
      tel: "0030990061",
      email: "gAWz1oBawU@yeP6.com",
      external_id: "g2IDwYA3n9hg",
      private_money_ids: ["146a9417-3e16-499b-addc-5ec4af73f621", "e8dfe294-626b-4b23-9fdc-bb5817d9bd63", "d6e238c3-ed43-4cac-afa5-67c6f3ad4c44", "1813c38c-1fa5-4fdd-8d57-59fae9373665", "ad1e510d-d7cf-4430-8e9d-c1b80af2928a", "ec313bc4-40ea-463c-8695-0d742a13493d", "23e49f78-702a-49a8-92f4-cec95a1ccbda", "0a29dd6c-1017-4c39-af6c-94146d001bbb"],
      can_topup_private_money_ids: ["c6129ef2-cde7-44b7-8f57-13590eeeb38d", "a0bf6952-57c8-4f61-91ee-365be74ea7b5", "6c7a2f6f-6dbb-4a3c-9b25-4043f6087324", "4c1d0a8b-32d1-45be-89c5-18084cfe1566"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 246
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 7777,
      per_page: 2631
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "EjECN0-sb-cpv-N",
      page: 4610,
      per_page: 5971
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8",
      page: 8169
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8",
      per_page: 3685,
      page: 8506
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8",
      from: "2023-02-01T14:23:17.000000+09:00",
      to: "2023-04-14T23:56:38.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8",
      from: "2022-04-09T02:13:39.000000+09:00",
      to: "2023-05-27T20:35:51.000000+09:00",
      page: 5261
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "223f316a-a7e6-4e56-b3ee-775d8bd158d8",
      from: "2020-07-16T22:59:26.000000+09:00",
      to: "2023-12-28T17:41:00.000000+09:00",
      per_page: 7262,
      page: 9360
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "72c1f9c7-7e5e-4017-8bab-684024039550"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "72c1f9c7-7e5e-4017-8bab-684024039550",
      to: "2022-08-25T15:55:28.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "72c1f9c7-7e5e-4017-8bab-684024039550",
      from: "2021-07-03T07:40:15.000000+09:00",
      to: "2022-04-07T08:15:09.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      per_page: 2427
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      page: 8166,
      per_page: 367
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      to: "2020-08-21T16:12:11.000000+09:00",
      page: 8108,
      per_page: 3100
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      from: "2021-08-19T13:30:01.000000+09:00",
      to: "2020-10-12T07:22:57.000000+09:00",
      page: 685,
      per_page: 8719
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      is_modified: false,
      from: "2023-11-19T20:55:57.000000+09:00",
      to: "2020-09-15T14:35:23.000000+09:00",
      page: 7937,
      per_page: 7582
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      type: "payment",
      is_modified: false,
      from: "2023-10-20T15:53:37.000000+09:00",
      to: "2020-06-24T06:31:11.000000+09:00",
      page: 2205,
      per_page: 9660
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      receiver_customer_id: "d7de226a-041b-481d-be75-17daa12c764c",
      type: "cashback",
      is_modified: false,
      from: "2023-03-27T23:42:26.000000+09:00",
      to: "2020-12-08T06:13:06.000000+09:00",
      page: 1112,
      per_page: 1058
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "d743b1ed-209e-44a7-909a-695ccb5c49fc",
      sender_customer_id: "6cfe66c9-bac5-4d56-a254-fb02ab78ed2a",
      receiver_customer_id: "70022d3d-e169-4ca2-b55e-fb3a07603cf1",
      type: "cashback",
      is_modified: false,
      from: "2023-10-17T16:09:46.000000+09:00",
      to: "2021-12-10T15:42:55.000000+09:00",
      page: 2423,
      per_page: 5919
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "6f7024d0-8471-45cc-b955-6bf8b45e6330"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "d6b55511-5007-4e5f-bd3a-3614d5dc9c9e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "d6b55511-5007-4e5f-bd3a-3614d5dc9c9e",
      per_page: 3172
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "d6b55511-5007-4e5f-bd3a-3614d5dc9c9e",
      page: 5576,
      per_page: 2248
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "e66f1344-aa91-4853-b8fb-10e1144e0f98",
      shop_id: "80d1d9e3-af35-434a-a2bc-da5ff46da46e",
      amount: 9589.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "e66f1344-aa91-4853-b8fb-10e1144e0f98",
      shop_id: "80d1d9e3-af35-434a-a2bc-da5ff46da46e",
      amount: 9589.0,
      expires_in: 3628
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "e66f1344-aa91-4853-b8fb-10e1144e0f98",
      shop_id: "80d1d9e3-af35-434a-a2bc-da5ff46da46e",
      amount: 9589.0,
      description: "Ucp1lSFqcNHrWdIfeuGHwYrLh2RuKm8gsPqgerdEeFqnuqS8Tv1t1xMzIspHwaOIkaUYPXJWoPxS43VWtkEUNX32BQJ5yICmSrHTww4QXdzlejDnmBAVNiXqoLoZtfYK4eRTti8RWRPTNnTXedq4fOV86FzJIZ",
      expires_in: 5568
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "07e308e3-e5e8-47f9-a547-235aef02bda9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "b06d9dd7-9793-4902-a583-b6c46f89cf40"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "c33060d0-f377-440d-ae48-8aee54115908"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "c33060d0-f377-440d-ae48-8aee54115908",
      expires_in: 4155
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "c33060d0-f377-440d-ae48-8aee54115908",
      description: "3UsUMN9k752X3IamXOnsezTKkIffP80Goq6wxp5cFvEuC1zehpEGCS0sVqClik6LmzxlJ0wuaxZoLHqfgSJclAgSl4CKW7IcfoiAW5TkqCqSKcAtdiqOZta4BV0vhwNZ",
      expires_in: 5391
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "c33060d0-f377-440d-ae48-8aee54115908",
      amount: 7736.0,
      description: "srxINRRx2ja4xxneD74OeTWCeVRMwYvk1muqsfIzksimXNabAh2CQizgG2lZaXboKl4r8k760WLOFQrdNkNK4M0lSANDfodY0H3VGKtse7",
      expires_in: 524
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      budget_caps_amount: 1848757326
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 649765120
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      dest_private_money_id: "e7706b9e-6878-4143-9f96-10469cdfc5ed",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1660621593
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      max_total_point_amount: 1926,
      dest_private_money_id: "9c8defa6-8271-49c3-bdbc-566cdc678335",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 896483639
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      max_point_amount: 8404,
      max_total_point_amount: 1742,
      dest_private_money_id: "6fb28e1b-c52d-46c5-9e9d-b415a34a78f2",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 191671408
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      exist_in_each_product_groups: true,
      max_point_amount: 1600,
      max_total_point_amount: 8051,
      dest_private_money_id: "e1b2a1e6-48aa-4c37-adc5-80998d3ee196",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 793344505
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      minimum_number_for_combination_purchase: 296,
      exist_in_each_product_groups: false,
      max_point_amount: 125,
      max_total_point_amount: 7179,
      dest_private_money_id: "beaff89a-e1ab-4f07-9865-5c70166e9a90",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1262024054
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      applicable_shop_ids: ["6101cc84-e1d0-483e-8998-2fadb5cc21ad", "bdc97368-14e4-4600-990d-a91e781a697f", "34f8458c-a2af-4c04-9454-1c7ffff92e4c"],
      minimum_number_for_combination_purchase: 4985,
      exist_in_each_product_groups: false,
      max_point_amount: 1240,
      max_total_point_amount: 3713,
      dest_private_money_id: "6d01afd7-6961-4f54-8b49-8e043b371a7e",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 207753284
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["1d402523-cb03-4a16-a5f2-68066c39339b", "28296421-ef47-416a-b8b1-7c34cd952895", "24df7139-9ee1-42a9-b045-df1e681791bf", "4c627668-c181-460b-85c9-811c47239f14", "f8d1c432-ece8-424f-9270-2b586652a023", "17531422-27fc-422e-82f9-0a9ebe0c6166", "99654d01-0fbe-4318-b324-7b8d6f7e1565"],
      minimum_number_for_combination_purchase: 5001,
      exist_in_each_product_groups: false,
      max_point_amount: 5541,
      max_total_point_amount: 2601,
      dest_private_money_id: "08908705-f525-4db3-9a9b-f4514e179ede",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 683480402
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      applicable_days_of_week: [4, 1, 1, 6, 0, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["dea32902-657f-410c-a7e5-c14c96586de2", "57d59a72-01e2-43dd-b3e1-90fdac21aca7", "430f561f-e27d-4dbf-b954-a0efd82bf04e", "131c544c-dc64-47df-b44c-d48af7ef1f97", "3a25bc51-c327-47d7-9e2f-a2fecae0151b", "2a3ea65e-0498-47a9-8c84-6372accd8009", "1ff964cc-6819-415f-a2c7-67219d75eab2", "996a6c0f-d101-4e5e-b87a-8b0e2d5d0add", "6a79ba16-b5fc-4b58-a91e-a982a8cf1f6e"],
      minimum_number_for_combination_purchase: 5099,
      exist_in_each_product_groups: true,
      max_point_amount: 404,
      max_total_point_amount: 3784,
      dest_private_money_id: "936e2376-7ef7-4766-a385-e8aea19ba269",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1669910184
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0, 2, 3, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["3572afff-7e1d-49c7-8341-26bd5601dc6f", "1bfbcac6-74b8-457e-aebe-47d1129a4c28", "e8a54f59-d331-4104-8822-38d1872f670a", "d44b0dad-24d9-49b2-b960-a14cc3c2a1fb"],
      minimum_number_for_combination_purchase: 6640,
      exist_in_each_product_groups: false,
      max_point_amount: 1702,
      max_total_point_amount: 6148,
      dest_private_money_id: "dd193744-8048-4dfe-90f6-ada85968b4f6",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 276576233
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 4, 4, 6, 0, 5, 2, 5, 1, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["d06f5e7e-9c30-444a-b98a-79362666a9c9", "a6f8d19f-f3f7-4f8c-889d-7d1fa56af60e", "657044f0-4715-4805-9a94-ca925392e50a"],
      minimum_number_for_combination_purchase: 103,
      exist_in_each_product_groups: false,
      max_point_amount: 1134,
      max_total_point_amount: 8466,
      dest_private_money_id: "fec7c459-1c12-49b3-b375-59c3ff4827d1",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 21702010
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 4, 6, 3, 5, 5, 0, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["32bcb7a8-dbdb-452d-993f-9945bd554a9a", "6a2fe323-f2af-4000-8111-97af21c459da"],
      minimum_number_for_combination_purchase: 4255,
      exist_in_each_product_groups: false,
      max_point_amount: 8569,
      max_total_point_amount: 8633,
      dest_private_money_id: "c2036712-06de-49b8-8911-2023145bea5c",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1167802548
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [1, 4, 2, 6, 0, 4, 4, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["ab770e6a-5c86-4c74-8a40-73f7f21048a4", "1c6d1ab3-141e-465d-bda7-873f6228918d", "001ec107-4522-488c-b664-88eeab271170", "956280d1-6137-40ea-989f-47ff3bb9e1be", "d07ea1a5-7470-43c2-8ea7-03fe3bf1f039", "dfccb9cf-4685-40b3-bd44-da651406c2e9", "3d284c45-0ce0-44fd-a194-bc55da745318", "07d7a892-2153-4ecb-b8d1-1f643185cfca"],
      minimum_number_for_combination_purchase: 4008,
      exist_in_each_product_groups: false,
      max_point_amount: 8130,
      max_total_point_amount: 9686,
      dest_private_money_id: "8c625e40-b430-4622-a39e-1b064c88044d",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1112380429
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      point_expires_in_days: 7924,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 2, 4, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["4b9610da-5c53-4622-824f-74899d1b26d7", "225cbe2e-bf5a-4bea-bf39-1a5843050742", "829d5a17-e32a-42b6-b260-7802b7b4088a", "31d5df79-28aa-4f0b-a1f2-84310e3579b8", "3de6ea7c-bcc4-4d8b-8113-4a71628112b5", "55ae4138-81c5-4778-a888-47fc885cd7ca", "fedf6216-d200-42cd-9ef5-fbc0eea6518f", "538c8d3b-b865-40b7-8a83-f9607bee912d"],
      minimum_number_for_combination_purchase: 473,
      exist_in_each_product_groups: true,
      max_point_amount: 3496,
      max_total_point_amount: 7062,
      dest_private_money_id: "0a0a8c49-67a3-4d2d-be4d-2e6b9d5b15d3",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 2143066245
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      point_expires_at: "2021-09-18T23:52:58.000000+09:00",
      point_expires_in_days: 6876,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [2, 1, 4, 1, 4, 5, 6, 5, 4, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["84de57ac-9d3d-41ce-8e9f-3110937dcab1", "55374ef0-81a4-4cde-a58e-f128091ab73f", "106ac15e-3cd1-44d0-ac16-d5352c4534ef", "2a89e1df-2402-45d6-8c8e-55bebb786fe3", "2239a694-0b72-483e-b121-cf77616cacd8", "9d198517-08fa-452c-ac40-79aae6e10555"],
      minimum_number_for_combination_purchase: 3503,
      exist_in_each_product_groups: true,
      max_point_amount: 2779,
      max_total_point_amount: 8874,
      dest_private_money_id: "52924207-8697-4bef-94ab-52f938ca9c45",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 938642171
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      status: "disabled",
      point_expires_at: "2023-09-27T17:36:10.000000+09:00",
      point_expires_in_days: 7603,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5, 5, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["87c99505-50bf-4d53-a1e1-0511473a2c74", "dca27ad7-ac77-47ec-8ce4-655cec89ba22", "05c8260e-efbd-4ac6-a8e1-61c8ec24a9aa", "13c12343-b058-41c2-b3cd-0e6967aeb712", "76d7a0c6-849e-410a-926f-bdffaf3ae116", "39c324eb-300a-4d65-b162-a89d644f0aa9", "0466b7b7-a1f9-4f05-9552-76716ef4557d", "83c8bd18-ae3b-4187-9cd5-f9ccc5e7c110", "7de01446-d3bf-4b24-aef8-366c86d09f6a"],
      minimum_number_for_combination_purchase: 3817,
      exist_in_each_product_groups: false,
      max_point_amount: 6364,
      max_total_point_amount: 737,
      dest_private_money_id: "cabae5a7-0f3c-45e2-bc71-74a9a0a4854b",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1457217177
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      description: "R7olYnk8k5Bb2G2oyOhVTd8kN5TcXpnbGgXKcquluxvgUTnylDlEHDMoyCRKJHZaveB7fzaxzFv0mex1L",
      status: "disabled",
      point_expires_at: "2022-01-28T04:29:57.000000+09:00",
      point_expires_in_days: 6157,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["e63a6bf1-2be6-47d6-8245-df02e8650fa5", "2e1985dd-c751-4d48-9658-114c7f07eed4", "3ae8e0ea-b363-49ff-881e-7acbfa5fb097", "45c8ce99-7045-40f8-9586-26ddb746de4b", "34a44ed3-3a17-4e5c-8b62-31e5ab41ddd2", "ed77b21a-b6f1-455b-8800-88da1e477df9", "e987c18e-43f1-4e72-afc6-d08e8aff1267"],
      minimum_number_for_combination_purchase: 7940,
      exist_in_each_product_groups: true,
      max_point_amount: 6399,
      max_total_point_amount: 5089,
      dest_private_money_id: "08f8e8d0-85e4-44a7-ab4f-839e8f193cfa",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1242257348
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "rMzcEVYiy8I70fYaRlbqy3FZ5xGpEIedA2KAk0bCDgrtL7qlucAwmFIfamNRuQAWJYVOIbKHItQmMZhbkbDtaRmsi9CGkgED2Fa8XQ2r4aXHfqWwTzTO3DLjILvZxqulcmZ18qb6Sutz02hAznkTeEi7cBvn5mhHGMbFUVC88LcCvHAGVC0NRJ2lN7I40OB5ya8f1KmbDQRpZiU9UnQMJQHZUY8nXEBeL9OItn",
      private_money_id: "ab0c906b-9684-4c46-8c45-8eb1fe17e44e",
      starts_at: "2022-05-16T05:42:23.000000+09:00",
      ends_at: "2024-01-01T12:21:56.000000+09:00",
      priority: 5155,
      event: "payment",
      bear_point_shop_id: "459000e0-c6ec-4223-8de3-019ea1329337",
      description: "jRfe1aCFbMcReoZYtw0DmdgCWwh9HOp92Wh3yFVzuHa3F0Lqby4r6YbLqTrZsnUOUiBC745mxLPvvjOsUh57iuVGhNdihHDh5Ri6ZYl5HGHUmSyhbOKu4vticrPlJswhpjbF65z23Mx1sb",
      status: "disabled",
      point_expires_at: "2022-09-18T13:43:32.000000+09:00",
      point_expires_in_days: 5485,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["69f76a80-4cd5-4864-9492-e62a9d6d5727", "21380ced-d1ed-48db-b846-53677131dea6", "6c16eabe-5d8f-4440-aa4d-ca253ee85715"],
      minimum_number_for_combination_purchase: 4052,
      exist_in_each_product_groups: false,
      max_point_amount: 5025,
      max_total_point_amount: 703,
      dest_private_money_id: "b759994e-36f1-4ba7-be0a-a4d6af59c9de",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 479979264
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987",
      per_page: 21
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987",
      page: 5858,
      per_page: 27
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987",
      available_to: "2022-06-23T10:24:31.000000+09:00",
      page: 7228,
      per_page: 6
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987",
      available_from: "2020-09-11T15:50:44.000000+09:00",
      available_to: "2021-07-12T22:54:34.000000+09:00",
      page: 4248,
      per_page: 12
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "6192b222-a805-4efe-9200-8dcc25cce987",
      is_ongoing: true,
      available_from: "2020-01-04T07:11:53.000000+09:00",
      available_to: "2022-10-23T16:22:13.000000+09:00",
      page: 939,
      per_page: 45
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new GetCampaign({
      campaign_id: "931b08bd-875f-4f7c-9418-e6692e38050b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      budget_caps_amount: 1703954068
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 998667432
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      max_total_point_amount: 1429,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 718099718
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      max_point_amount: 8669,
      max_total_point_amount: 5424,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1904673789
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      exist_in_each_product_groups: false,
      max_point_amount: 9503,
      max_total_point_amount: 8366,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 694760135
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      minimum_number_for_combination_purchase: 226,
      exist_in_each_product_groups: false,
      max_point_amount: 5030,
      max_total_point_amount: 9317,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 636073371
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      applicable_shop_ids: ["88e54a10-1232-457a-8044-981e1f32625d", "1f454424-f073-4d7b-9314-ec14a980a706", "0e38a191-f834-439f-90fa-f64771c9d838", "21e36788-cd56-4825-b945-e724a2ea40e2", "0ce048c8-e7d6-4483-bb84-7e26438dfda1"],
      minimum_number_for_combination_purchase: 324,
      exist_in_each_product_groups: false,
      max_point_amount: 367,
      max_total_point_amount: 5505,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1657547668
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["195e33f1-277f-4c34-b264-84946a5c334a", "b9de75ad-f26c-4ea5-b4bc-35ba2ea15954", "e59588b1-2c24-46a2-9a12-34c58195c309", "ba10db06-e6f9-4ec0-aa61-13b5dd0319ff", "c535e497-3169-40f5-a4c9-3b725e209e4e", "61b29e5e-d9fb-4ae5-956f-b08788f9e0d3", "9af34f89-e51a-4985-aa8d-2726d7c06dc6", "67429b65-c6b7-42bf-8135-153792d8ef9e", "6c8ac868-d3fd-48f5-8686-54c5291cf5be", "60a16e5c-7e6c-4ac3-9d06-947e1c341308"],
      minimum_number_for_combination_purchase: 1903,
      exist_in_each_product_groups: false,
      max_point_amount: 6871,
      max_total_point_amount: 8153,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 181113722
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      applicable_days_of_week: [1, 2, 5, 3],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["a98cca46-9f2b-4467-9619-c735578b6b5d", "50494765-1e7f-4310-96c5-641fb69b421b", "ba893da2-1095-4ba0-8a31-587c8c32dc65", "91334965-95f4-4c07-ba9f-4744cebecce6", "fc816ee1-0547-4b4c-959b-ac91d4b3e5e0", "6737ebf3-d9c7-405e-b9bc-2b67f459c28b"],
      minimum_number_for_combination_purchase: 3549,
      exist_in_each_product_groups: false,
      max_point_amount: 8775,
      max_total_point_amount: 8862,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1120464972
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [1, 5, 3, 4, 3, 3, 4, 0, 2, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["2c520a8a-f886-421b-b031-6434f6307ac6"],
      minimum_number_for_combination_purchase: 509,
      exist_in_each_product_groups: false,
      max_point_amount: 4528,
      max_total_point_amount: 2411,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1014216767
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 0, 1, 6, 6, 1, 4, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["173f749a-9095-4181-9056-d65625b60272", "e8569d4b-582d-47e6-81e2-7a4468483415", "5b75f678-6520-48f9-aab0-9f6b7471adf4"],
      minimum_number_for_combination_purchase: 632,
      exist_in_each_product_groups: false,
      max_point_amount: 2912,
      max_total_point_amount: 7983,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1413221944
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 2, 1],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["58e02b33-3132-4ce9-9a50-72fbd61181cc", "9254bb7c-a736-40b3-a548-9e5a6db309e1", "32821403-e9f3-43fc-86a5-4bce1c872196"],
      minimum_number_for_combination_purchase: 9986,
      exist_in_each_product_groups: true,
      max_point_amount: 6204,
      max_total_point_amount: 8966,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 204342643
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0, 0, 0, 0],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["8ba7833e-de98-4404-9e60-05413ced8a20", "ada746b6-3764-490b-813e-211736f2c6c4", "4fd6b936-4aec-47c0-bde7-835c77daa737"],
      minimum_number_for_combination_purchase: 1421,
      exist_in_each_product_groups: true,
      max_point_amount: 498,
      max_total_point_amount: 995,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 56986682
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      point_expires_in_days: 3958,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 6, 0, 6, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["73099a7c-77c4-4fc5-ba92-180a37cd1b0a", "e9bd5810-3316-4e94-adc7-34d23654b020", "9148195c-f211-4ef3-849a-d6d30e3b27a6", "e8204590-746d-45cf-81f7-113383af0065", "1fcc1aec-441b-4b88-b450-b23a92ba9c4e", "f69446e4-df0e-4e6f-b70c-d8f2fde3bf91", "74b946d3-0093-40d4-90b5-ea340fdfae49", "53bb4152-5d92-4119-bef5-e0c1e2df24e7", "c8483bb8-557c-4a6e-bb39-be9be02f56b9"],
      minimum_number_for_combination_purchase: 8109,
      exist_in_each_product_groups: false,
      max_point_amount: 3205,
      max_total_point_amount: 6324,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 150185105
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      point_expires_at: "2023-10-25T15:01:26.000000+09:00",
      point_expires_in_days: 1459,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["c3d47605-e1b5-4c43-bf4b-3df5762ac7c1", "b8d6a3dc-2426-4605-8083-3d3d545d33fb", "7d9902f3-89e2-423d-a8d1-c1a025a58380", "92e9af9d-4e64-43dc-beba-c576c9e2106b", "753a176d-a85f-46bf-b310-5c02a939859d", "6a3ed6a5-2aea-4687-b68d-1fef66e8eead", "6568c07c-5258-4ba2-bd73-4685482f2db3", "a59c91b5-76aa-42e8-a136-8c3561f23005", "d3599e4e-05b1-4be0-b562-01d29efbc8e5"],
      minimum_number_for_combination_purchase: 5872,
      exist_in_each_product_groups: true,
      max_point_amount: 4936,
      max_total_point_amount: 9698,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 2066274331
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      status: "disabled",
      point_expires_at: "2023-08-03T12:11:47.000000+09:00",
      point_expires_in_days: 2597,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 1, 2],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["10090cb2-046b-4f9e-b035-2d624175f0ee"],
      minimum_number_for_combination_purchase: 629,
      exist_in_each_product_groups: false,
      max_point_amount: 5323,
      max_total_point_amount: 5841,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1357068930
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      description: "UbX152QU2zBV3hOZHQTAHfKVsHE",
      status: "disabled",
      point_expires_at: "2021-05-29T22:09:18.000000+09:00",
      point_expires_in_days: 8120,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [1, 1, 2, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["6a5c532b-0103-42f0-9d7f-b5f3523c9a3e"],
      minimum_number_for_combination_purchase: 7514,
      exist_in_each_product_groups: true,
      max_point_amount: 6306,
      max_total_point_amount: 2017,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1588960881
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      event: "external-transaction",
      description: "X1iSv6rvUAXSLoDxLsgsojslaOXj5lbAyKrGE3D1e7TJApX39yyNWCvFIXQLsklhsRufn0fRYo0t6Om0kcIfE5QZ0CCnMxWUm1q5Yx1bIJSdJOrO",
      status: "disabled",
      point_expires_at: "2022-10-19T22:21:18.000000+09:00",
      point_expires_in_days: 2116,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4, 2, 5, 5, 6, 6, 3, 2, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["556f9cb7-ffc7-42f3-b1ce-cddd281ee036", "a7d313f1-f681-44a0-9016-163534730305", "055a14e0-1ee4-4375-abfd-3738cb4fa2f2", "1d3694de-60fb-4d71-9f8e-a104a421a851", "2a2de1ea-6822-4abe-9030-1aacfcd2884b", "57f990f3-96fd-4e3b-a55e-f3f0252d34a0", "01f9e98a-25a5-4450-a93c-116b7f217805", "d96e5b3c-56c5-4ea2-85dd-ffa7b2424461"],
      minimum_number_for_combination_purchase: 4012,
      exist_in_each_product_groups: false,
      max_point_amount: 5347,
      max_total_point_amount: 7527,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 846877258
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      priority: 5384,
      event: "topup",
      description: "d0A2q3gA2cQ6wwnJlxkvBqVS4t0nd6dUdl4DCbb0xgNKucDWNZTrFcD83kQm4GU4xE1t6qubJEVHXpo5wBjR4yJAUl0MqQ6ZsLsOSCrTHhA1d9S8A0yfqJGFJUi0F88l0PvVk7pQDUjdfU9e0BTy2WSj4kq5cCiVPj8XbRGAZSYGHElLFjrg3iEw4brmtM8",
      status: "disabled",
      point_expires_at: "2022-07-15T23:35:40.000000+09:00",
      point_expires_in_days: 5204,
      is_exclusive: true,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [0, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["30f3251b-022b-4d7f-8e5e-fba5f4c6e002"],
      minimum_number_for_combination_purchase: 6709,
      exist_in_each_product_groups: true,
      max_point_amount: 8386,
      max_total_point_amount: 2225,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 12299828
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      ends_at: "2023-11-03T15:05:17.000000+09:00",
      priority: 6669,
      event: "external-transaction",
      description: "SnVPZdVxQsJKG9uclEnPblE3c2DfDBRyVbWfdvumDvl5JRM9kFjy4QZbsGK0eTZ7zCz4ScbdbaWbvkxNhUffPN4zAFBU9BIRG90YuvUFXLsnz23qPNoRNQEhf8EWJUpmymfv95kagBNXdHP1teTNk1SZOp2xJz99CKzKOl",
      status: "disabled",
      point_expires_at: "2021-06-09T00:58:36.000000+09:00",
      point_expires_in_days: 5626,
      is_exclusive: false,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [6, 4, 1, 4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["8ec68c78-c732-4246-9f7c-d397d7993cf6", "71d16611-4693-40cb-b8f0-84c2c1c53977", "c689dd50-715d-4bb6-aba4-f800e93acf14", "298fcbae-0c2c-4d58-afd5-139abc36de32", "31eaaa12-2f9a-4090-b73a-4524434cc146", "86e85cd5-1672-403d-ac30-bdee98636c9d"],
      minimum_number_for_combination_purchase: 1967,
      exist_in_each_product_groups: true,
      max_point_amount: 8835,
      max_total_point_amount: 4433,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 739961541
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      starts_at: "2023-06-23T14:51:14.000000+09:00",
      ends_at: "2020-09-06T06:30:59.000000+09:00",
      priority: 4193,
      event: "external-transaction",
      description: "6PF7VIBmU0ABYGEdAWUsBAYP1okeD0MNtNt8Z8zKg5Vw6EuzzaxGMHDQCr8",
      status: "disabled",
      point_expires_at: "2022-03-16T01:14:13.000000+09:00",
      point_expires_in_days: 5312,
      is_exclusive: true,
      subject: "all",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [3, 3, 0, 3, 5],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["26ac956b-f5ba-48c4-b157-8ec10299f561", "75a2859b-5453-43a2-b7ab-58f868808b3d", "20d9d8bb-b44d-4a13-b143-6372668768f5", "e426bc16-f89e-4047-abca-584dbde69f7e", "40b2903c-2170-4330-82d1-0187f7824cb4", "369370df-294b-4d93-b753-fb4b9ab94514", "45670672-0d08-4acd-9525-31b3e721fa44", "cb613484-9eea-4094-8fca-0825a363f85b", "bbf9e9c0-75c5-4b1f-9638-297b85961f69"],
      minimum_number_for_combination_purchase: 3271,
      exist_in_each_product_groups: false,
      max_point_amount: 9317,
      max_total_point_amount: 2194,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 1815381033
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "4715502c-c8ca-4d03-8c17-b0d15764ed82",
      name: "lf3hZ7V5rTsI4qxlBakBJikAxoe9zdjy2f1o4bfILDHUlEp64QsNj1i3OYX6zFBdEkK0Nvaow9mKy5hGpoRoAAxoqJYt9DY3pTfcYPlgPWgHPLpGlGAmrS9pAWgFAhcK8WwHZ4E22Wj2IJ8OjPw9TZM2GGg8cjKPrhUM5UOWPFj2ILUEY5IJueMK8LmDvRdILyCGQxIqIVKQGx47gh1xkf1nqY2NZNhNoSpBKHVBQJUTOBygVOkAI",
      starts_at: "2020-12-26T20:10:59.000000+09:00",
      ends_at: "2020-04-10T03:06:33.000000+09:00",
      priority: 3086,
      event: "external-transaction",
      description: "t7NhOhO5O8UUyTETgT29VPSbi3ajeAA3sliuLJIWCQyJLobPomlaObIXsHIATcWWcagDCVRK7nF5wrIb2OB1oeKHdr6rlUsqgBBgeAEq8IE1OaAB5yMkpJsGpmKsdycWZoolTQI6yo9Zjz7",
      status: "enabled",
      point_expires_at: "2022-07-29T08:04:18.000000+09:00",
      point_expires_in_days: 193,
      is_exclusive: false,
      subject: "money",
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      applicable_days_of_week: [4],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_shop_ids: ["810085e6-99fe-46c5-8368-4b20eefa78ba"],
      minimum_number_for_combination_purchase: 515,
      exist_in_each_product_groups: false,
      max_point_amount: 1387,
      max_total_point_amount: 71,
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      budget_caps_amount: 457765375
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RequestUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new RequestUserStats({
      from: "2020-05-10T00:11:00.000000+09:00",
      to: "2023-03-14T17:38:51.000000+09:00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new CreateWebhook({
      task: "bulk_shops",
      url: "YS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      per_page: 553
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      page: 5924,
      per_page: 1125
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "d8e5d156-6825-4c01-afd9-17af55705832"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 1', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "d8e5d156-6825-4c01-afd9-17af55705832",
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 2', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "d8e5d156-6825-4c01-afd9-17af55705832",
      is_active: false,
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 3', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "d8e5d156-6825-4c01-afd9-17af55705832",
      url: "XrnWHO4",
      is_active: true,
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new DeleteWebhook({
      webhook_id: "97e36bed-8fab-4d74-93f8-3f401d224223"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "bd11aff8-6ddd-45e8-8354-0b810ccfad37"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 1', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "bd11aff8-6ddd-45e8-8354-0b810ccfad37",
      metadata: "{\"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new GetUserDevice({
      user_device_id: "a3bd214a-debc-4f3a-969f-7c164d8f8df9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ActivateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new ActivateUserDevice({
      user_device_id: "816ea7ae-d2c2-47cf-8be5-f5bb8494666c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "b6db4c33-26d7-465b-8187-7e08aa22e763",
      private_money_id: "373b9842-bca5-4d94-89c8-52421a1b67a3",
      callback_url: "9JdL6D8aes0bzhxOC7qYEixPwvcOVsTS7GxN0H9EDre5R0BNSrQqzGyNmuIPf7gNYXsKi2jS4B8KMSfxlPo1cmf0TyMAW1pYz1lKbCfO7aAFCH8tTJbggMAqiLUdgDvrGogqFAmMCEPyFzyYY5s8Km31dE6MapBydhZMtDdzOZh4feWf0ct1VeZ9CcybbpwHlPmHYK0k5EHT1YwVmyIzRZp6XH2URx9re4iTnNkoIsm",
      kana: "MSBIww"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 1', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "b6db4c33-26d7-465b-8187-7e08aa22e763",
      private_money_id: "373b9842-bca5-4d94-89c8-52421a1b67a3",
      callback_url: "9JdL6D8aes0bzhxOC7qYEixPwvcOVsTS7GxN0H9EDre5R0BNSrQqzGyNmuIPf7gNYXsKi2jS4B8KMSfxlPo1cmf0TyMAW1pYz1lKbCfO7aAFCH8tTJbggMAqiLUdgDvrGogqFAmMCEPyFzyYY5s8Km31dE6MapBydhZMtDdzOZh4feWf0ct1VeZ9CcybbpwHlPmHYK0k5EHT1YwVmyIzRZp6XH2URx9re4iTnNkoIsm",
      kana: "MSBIww",
      birthdate: "EZ0LK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 2', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "b6db4c33-26d7-465b-8187-7e08aa22e763",
      private_money_id: "373b9842-bca5-4d94-89c8-52421a1b67a3",
      callback_url: "9JdL6D8aes0bzhxOC7qYEixPwvcOVsTS7GxN0H9EDre5R0BNSrQqzGyNmuIPf7gNYXsKi2jS4B8KMSfxlPo1cmf0TyMAW1pYz1lKbCfO7aAFCH8tTJbggMAqiLUdgDvrGogqFAmMCEPyFzyYY5s8Km31dE6MapBydhZMtDdzOZh4feWf0ct1VeZ9CcybbpwHlPmHYK0k5EHT1YwVmyIzRZp6XH2URx9re4iTnNkoIsm",
      kana: "MSBIww",
      email: "sliUbIg4sc@DAxT.com",
      birthdate: "9lioQVs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 0', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "1c64da41-5430-4a6d-b7e4-ec952b1887a3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 1', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "1c64da41-5430-4a6d-b7e4-ec952b1887a3",
      private_money_id: "8ed8abb6-a269-4887-9759-ed7753f7e3c2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "2a56517e-c0a1-4b40-a9d6-64d84b9c4527",
      private_money_id: "e9c5e772-23bc-4186-ad56-96c8b0c98bb6",
      amount: 1258,
      bank_id: "a8fc7503-8f2c-49ab-bc5f-fc2060d9cb17",
      request_id: "f81e451a-7598-4851-b214-17ed9b90ac57"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      per_page: 7696
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      page: 2563,
      per_page: 8925
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      available_to: "2023-09-23T22:42:05.000000+09:00",
      page: 3430,
      per_page: 9321
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      available_from: "2021-03-17T05:16:21.000000+09:00",
      available_to: "2022-02-26T04:47:09.000000+09:00",
      page: 1750,
      per_page: 130
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      available_shop_name: "Nzft9pKK",
      available_from: "2021-06-02T00:38:40.000000+09:00",
      available_to: "2021-03-20T06:49:06.000000+09:00",
      page: 2593,
      per_page: 4205
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      issued_shop_name: "QJ6rLnmMZ",
      available_shop_name: "GLQ5a5Cnuq",
      available_from: "2023-02-25T17:31:05.000000+09:00",
      available_to: "2021-06-22T00:16:31.000000+09:00",
      page: 7168,
      per_page: 5732
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      coupon_name: "Id3v4ZaGi",
      issued_shop_name: "nLf8NAZD",
      available_shop_name: "rQkwi",
      available_from: "2023-06-23T20:56:50.000000+09:00",
      available_to: "2020-11-18T20:16:29.000000+09:00",
      page: 3466,
      per_page: 4874
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "922bc9d5-cca9-4999-8e1d-602a15231520",
      coupon_id: "2Oeteli5o",
      coupon_name: "zIuyNr",
      issued_shop_name: "yZGJPPpH",
      available_shop_name: "e4FmEPq",
      available_from: "2023-12-11T06:26:39.000000+09:00",
      available_to: "2023-10-31T22:41:44.000000+09:00",
      page: 2576,
      per_page: 5095
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 9784
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3228,
      storage_id: "934d4abd-aabc-4c66-8010-0b2e28ab7f91"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3812,
      min_amount: 5169,
      storage_id: "ad4b5f65-bc8c-4ad5-b6ba-efa01db8f13b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3909,
      usage_limit: 7743,
      min_amount: 1710,
      storage_id: "fbfb47cf-e9c8-49cb-a66d-19bb216e5b49"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 6042,
      code: "Q",
      usage_limit: 7140,
      min_amount: 3289,
      storage_id: "65fbfb48-2ee6-4538-b889-d8fe7086ad21"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 6781,
      is_public: false,
      code: "nwBcey",
      usage_limit: 7602,
      min_amount: 1492,
      storage_id: "1f457bd5-2ba4-4818-a28a-fe9e55570a95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 438,
      is_hidden: false,
      is_public: true,
      code: "NuDvvRQ",
      usage_limit: 880,
      min_amount: 2014,
      storage_id: "33271827-9c54-4306-b542-c6046e620bc4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 7600,
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "vJn579Nwc1",
      usage_limit: 2827,
      min_amount: 9448,
      storage_id: "7413d58f-295f-426b-b19b-8e17d3907d30"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3851,
      display_ends_at: "2020-12-10T00:14:30.000000+09:00",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "7Z",
      usage_limit: 7681,
      min_amount: 692,
      storage_id: "2fa3eeea-f524-4d5f-a879-2a38ec09dac9"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 7715,
      display_starts_at: "2020-03-27T04:48:44.000000+09:00",
      display_ends_at: "2023-06-17T14:58:57.000000+09:00",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "Ww0hjywcu",
      usage_limit: 869,
      min_amount: 3774,
      storage_id: "2770b8c5-6239-42f3-9f63-46f641cd11b7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 7550,
      discount_upper_limit: 6335,
      display_starts_at: "2022-07-01T21:41:53.000000+09:00",
      display_ends_at: "2022-04-01T03:58:01.000000+09:00",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "YSa5NS31Pw",
      usage_limit: 2664,
      min_amount: 2861,
      storage_id: "d76a7f71-223c-4773-a4c8-15c1189be186"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3539,
      description: "eAHCejgvvvb1KwdsWXnVLes6yYH10F6U4jIJHum",
      discount_upper_limit: 5036,
      display_starts_at: "2021-06-29T23:13:22.000000+09:00",
      display_ends_at: "2022-05-07T20:02:34.000000+09:00",
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "UsLYvR",
      usage_limit: 8323,
      min_amount: 8221,
      storage_id: "e7b7fa75-7bb6-4e37-b327-0250cd35069c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 7219,
      is_shop_specified: true,
      available_shop_ids: ["a1b5150e-fa5b-4920-b654-185a7a2f7814", "bcd88ed8-7a95-4569-8094-4e238cd1639e", "57cb072a-7a3f-4a55-b1af-bd0023d71b07", "0b5741f1-b857-4ada-9e29-bb1fa8929a89", "ee99d2d1-3817-4cf2-befa-7e9f53d4b153", "f9832194-0367-4b25-839a-a47dd1d3a43a", "11281277-8d15-4cd8-ac3e-170179b77d49", "08059f4d-4800-4b31-8c7e-11dd8f1d3347"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 4909,
      is_shop_specified: false,
      available_shop_ids: ["a317b7c0-cb62-45c6-b252-c5840eab3da0", "1fc28422-043a-4a0c-abeb-c7d657e8cd89", "c00c026a-139e-4b42-a860-23aeb83035e4", "2b20d90c-40ca-4761-9ee5-ae6a5087d4a8", "17db5c38-4ed5-4a5a-b030-c86faf97727a", "c6b9f524-54af-41c7-94f7-97909177d3af", "cd3299ff-ff79-4bcc-96e8-b0d1dbfd6a30", "aa126fd2-9616-4f30-bc9d-17626b1a9b7b", "18ec1d50-297a-4a79-a5e6-ec3e0329fee0", "468acf4d-e6e9-40db-9584-da8582e863a1"],
      storage_id: "48c21787-36c6-4e06-bc96-92ec0fcae632"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 4161,
      is_shop_specified: false,
      available_shop_ids: ["797f753c-94f1-4f9d-a017-75502d79263d", "bce56e2b-a088-4ae8-81e3-03d395b41355", "d2f73ba6-1058-407d-9be2-1b4d786de8c5", "182d0aa8-0ff6-4358-9fd1-f86cd1c1acef", "c41ff35b-2270-465e-a6ae-24663de2f03a", "6be33f4a-3faa-491d-b7b1-cb0941484102", "5e0bc643-555d-46a9-aad0-7137de4cb0ef", "a4dea0c2-1165-4095-80c9-7cf87f9b6b49", "2f77db48-0984-46d3-b3bf-fcd6ed4ef0d2"],
      min_amount: 2090,
      storage_id: "9eb52cdb-a9c2-4477-bc69-f9accef2a30c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 3851,
      is_shop_specified: false,
      available_shop_ids: ["8898c19e-fb5a-472c-8952-4fddb8d61595", "2323c54d-c728-488a-a4bd-0483821a0718", "d8444080-7d17-4b0a-96c2-2ea5ab8035a2", "54d93e2a-bb94-4c36-98db-9ee44f83fff3"],
      usage_limit: 5364,
      min_amount: 5856,
      storage_id: "45d70a38-600c-4ef2-9bec-682d27a2d4de"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 7213,
      is_shop_specified: false,
      available_shop_ids: ["dcab259c-2bf9-4f71-8a9a-f64f92921f94", "b58c29c2-ae1f-49b6-a3bd-31b68069c646", "768759a8-437f-46a6-af6b-890ac1f8d5be", "9567c049-2e89-4ac3-a199-b6fc8b9e21d8", "8874e40e-763a-4ac8-9626-12d1751386ee"],
      code: "x",
      usage_limit: 6191,
      min_amount: 7537,
      storage_id: "710ea60f-0acf-4ab3-a943-c88c51c576e5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 5203,
      is_shop_specified: true,
      available_shop_ids: ["3e828cc7-de71-4769-8d86-4ad7757c2db1", "fcf03e2c-a8cf-465a-9dd7-f7bf710f117c", "dfb86ae8-7c2b-4ee6-8dce-b0ec9240ee44"],
      is_public: true,
      code: "KnA",
      usage_limit: 920,
      min_amount: 4746,
      storage_id: "d17d8ec4-b38f-407e-89c1-ffb8ce18f0fd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 9577,
      is_shop_specified: true,
      available_shop_ids: ["4c52cb14-59a0-4e2d-ab16-137576c9dd4e", "f8d9c0eb-ba97-4571-a9f9-12a82912f169", "97e6fe44-f504-4217-9d2d-01f1dfc7ad93", "cd37c3a7-5e20-4413-8d7f-b95e4809b06e", "7ac70aa0-619b-48f5-9045-2c26e0b9b48d", "1c50eae4-4755-4009-a513-3102fd78bb78", "144b6cca-65e8-4f57-81aa-6fc30d290ef6", "db76f267-48c2-478d-af07-e1e38b930ccb"],
      is_hidden: false,
      is_public: true,
      code: "GlZz2us",
      usage_limit: 6371,
      min_amount: 2950,
      storage_id: "344901e8-4464-49ff-8e4a-f5a5222b020d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 9420,
      is_shop_specified: true,
      available_shop_ids: ["28b1ea68-1741-42c1-935b-62aa88ddf5e4", "25248487-8602-4c76-b873-64f55167e19f", "548a51c6-1ae6-4dd8-987d-708a5ac68423", "b407a74e-fc41-47d3-b576-53644c0920a1", "5d09ef3f-6666-435f-9597-0eb6397f6055"],
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "n5X",
      usage_limit: 5433,
      min_amount: 4422,
      storage_id: "c5f79b76-428d-4f9e-a92d-20f9d0c612bc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 8605,
      is_shop_specified: true,
      available_shop_ids: ["78900b53-ef0f-44a8-adbf-e4050f236a92", "0b28131b-713d-4221-8262-d48343153bde", "99b0f338-5b7a-4280-b867-3244688d1784", "3634f6da-9d14-437f-a66e-2b5cbdadffb8", "c597606a-6875-4309-a167-942f243ecc9e"],
      display_ends_at: "2023-04-25T19:50:31.000000+09:00",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "e",
      usage_limit: 9951,
      min_amount: 5502,
      storage_id: "b12b2c89-869b-4b22-8af5-b7fc65d2822e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 4347,
      is_shop_specified: false,
      available_shop_ids: ["e9778df6-0e75-4279-a6f7-99b4e27fe816", "f55e20b5-17ab-4691-bd82-36cc839c9752", "1dc0f352-de9b-4932-bc22-5e176d8d0ea7", "70648ddd-2b55-4b93-bd84-d1a8e1f4ed54", "20b16315-6bb7-41c3-b04f-689f5922ae44"],
      display_starts_at: "2023-02-05T04:06:06.000000+09:00",
      display_ends_at: "2020-05-09T00:41:26.000000+09:00",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "UFc",
      usage_limit: 6589,
      min_amount: 5040,
      storage_id: "85edf054-575c-41b7-89b7-d96de6603f4a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 1579,
      is_shop_specified: false,
      available_shop_ids: ["18cff945-7e0a-4c42-8098-9261bb27571f"],
      discount_upper_limit: 2927,
      display_starts_at: "2021-05-06T06:17:36.000000+09:00",
      display_ends_at: "2021-07-17T14:46:12.000000+09:00",
      is_disabled: false,
      is_hidden: false,
      is_public: false,
      code: "d",
      usage_limit: 5350,
      min_amount: 7614,
      storage_id: "500bf1cc-b69f-4211-ae4c-14aa5f8fe20a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_amount: 596,
      is_shop_specified: false,
      available_shop_ids: ["c08f3b1c-d9fe-4605-9802-e4c997f08f4d", "0007af0e-a0d6-4066-a864-73bbcba368ae", "2da7e885-83b7-42e7-996d-d25539a75fb6", "4a669417-e05d-4fdd-8733-2b56cbfc167c", "fdaf9110-518c-4472-ab66-d4621d4695a8", "2a3bfd55-85fa-4d92-a838-3fa33752b67d", "4256e579-3c5a-4c2d-8c0b-9fd13dcb2834", "3d4f4e0b-abbf-4b5f-b255-2751fa266fd2", "6a6dd7d1-1ab8-44ef-a726-13d2e195ce2f"],
      description: "ADuCM8ttgyVoaccapUKVY3xHUgqcQECVbG24XMPl80LF5QlZXnydU8v1TWpjNgTcUQynoJBOiM3rMKh4sC5xHd0Fzm8uZts1f9O8XY30LhZBSYkH8d3XMKu4yLVE7dSOiVXelHEEXQbqqUFIFKzbjKd3A4MNHPQCsG8rd4BLKJ9WqNVTw4hnpZsd62fuzLglbD4I5Ck9aFPeTUOFFpErdQW2T9MBoEYOtyUk3S3I4ks7gt",
      discount_upper_limit: 9802,
      display_starts_at: "2023-12-06T01:32:16.000000+09:00",
      display_ends_at: "2022-02-05T23:14:04.000000+09:00",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "7YjnGl",
      usage_limit: 2263,
      min_amount: 9334,
      storage_id: "e3378498-beed-4970-88f4-a6a93a5c266b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 8310.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 1312.0,
      storage_id: "32488048-9038-4067-be95-afac218456ff"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 8759.0,
      min_amount: 1248,
      storage_id: "0c881e40-4bcc-416b-a15e-f04184f0a340"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 2728.0,
      usage_limit: 6983,
      min_amount: 2189,
      storage_id: "45817a95-68a4-4cb9-9f83-97f5513079b7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 7215.0,
      code: "k",
      usage_limit: 2020,
      min_amount: 6320,
      storage_id: "ad33b988-ad02-4d48-b5c9-0c4cccc8cf3f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 2496.0,
      is_public: true,
      code: "8tSywEy",
      usage_limit: 3093,
      min_amount: 8371,
      storage_id: "cdb7394f-5d27-449e-9d06-97e06298e82c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 7837.0,
      is_hidden: false,
      is_public: false,
      code: "L9aMN",
      usage_limit: 9135,
      min_amount: 3098,
      storage_id: "94730db3-966c-4eb4-bc35-998ccc3778cd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 6428.0,
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "FjpgkzCB",
      usage_limit: 9360,
      min_amount: 7723,
      storage_id: "09c3b805-45af-422b-b12c-7bfd56269e9d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 4378.0,
      display_ends_at: "2021-08-23T20:19:38.000000+09:00",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "YywlvKxCz",
      usage_limit: 4011,
      min_amount: 7330,
      storage_id: "6bc58eb1-2614-492d-a871-5915471314db"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 4674.0,
      display_starts_at: "2020-07-15T03:49:54.000000+09:00",
      display_ends_at: "2022-06-24T06:28:31.000000+09:00",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "kq",
      usage_limit: 9911,
      min_amount: 7775,
      storage_id: "b35d5e69-52af-4fa9-8aab-dee060cfebcd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 1980.0,
      discount_upper_limit: 4269,
      display_starts_at: "2022-07-24T14:56:36.000000+09:00",
      display_ends_at: "2023-07-02T14:28:30.000000+09:00",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "IknBy59CsS",
      usage_limit: 6985,
      min_amount: 2579,
      storage_id: "d8bf4148-bd67-4906-9228-e53e908fff73"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 4881.0,
      description: "FPyHV34lXI0XeGaDhio37vqQEILLsD15X0FsycdchuftTYnn4mzVNkLP6kRHCnxOqzA80GhyHp6OPeqpdUHThk73N6Wbps2rHp06Q1TamO6QN9j5eABGgtWr2bMgsZNem4AmFq61qpB0pWnXmXSMRc0N64X3R4rMXyOYmFi9xdC7oDGZuGTPWMybT38nUBrgk6E7z4P9KtAPlWXiY5lh3sNmnYBxRl",
      discount_upper_limit: 9533,
      display_starts_at: "2021-02-16T15:44:52.000000+09:00",
      display_ends_at: "2021-03-19T02:58:36.000000+09:00",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "J",
      usage_limit: 6942,
      min_amount: 7148,
      storage_id: "cd703155-32ee-4708-80c6-a91fb0c4104f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 7193.0,
      is_shop_specified: false,
      available_shop_ids: ["3a26559d-bf07-4f30-828a-2fba9480d5f4", "cc1ad041-ed17-4e8d-bf6e-c032054ed519", "b4d3f3e7-683d-4410-bfaf-64376a25a158", "a9692676-40aa-4355-8b3a-2cf657d0006f", "46663c9e-2309-45c9-a852-bdeb9559ac55", "f99247df-6b98-40b5-86a0-5117452353ae"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 6529.0,
      is_shop_specified: true,
      available_shop_ids: ["0657bf93-b520-4642-a4b4-dbcb7e2ef3eb", "65c48b54-97e6-4b76-bb11-47db7ac5d8df", "68ea0399-6049-4e32-87ee-e78c111f1b02", "d24cb0bb-a12c-4cdd-b49f-00cb9e93f767", "e62f4d40-f848-43bc-bcd4-a4d63095c6f9", "356539e4-2d64-482e-8feb-f69a7ed985a7", "2296ac5c-c879-4893-aeaa-14418f68d4a2", "f8fe2508-1740-4964-8397-ab435b979ec3", "da5c6146-7638-41f7-b09b-4aa8e4ef2938", "96f88e87-c373-492b-b08b-11f1e3973409"],
      storage_id: "1504f217-f4bd-4332-ad30-5914ca944d65"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 186.0,
      is_shop_specified: true,
      available_shop_ids: ["9c8b5243-96ef-453d-90e8-eeb0d5ab453e", "9b9c73b9-386a-4478-a89f-42bc5cb0f667", "87e9e72a-7192-4224-8027-51941c50089e", "3fe48a63-8541-4f8e-93ef-7560634cc94a", "bcbed5c3-b99d-42a2-a423-4ebcf4e9572e", "be2e2f94-e790-4e16-91ae-7bdecbdf58f2", "c9f97668-93f1-4045-be3a-634a6675fa8e"],
      min_amount: 7205,
      storage_id: "087d54d4-b7eb-4989-a58b-d9bebe962923"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 5080.0,
      is_shop_specified: true,
      available_shop_ids: ["0e0f961b-e4de-4d9b-bd97-f6c46db052e4"],
      usage_limit: 1250,
      min_amount: 7301,
      storage_id: "8b76b4d9-30d7-40c5-8e95-d22bd2d70a74"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 4846.0,
      is_shop_specified: true,
      available_shop_ids: ["e4064ffd-cfb5-4f43-bccd-2b28c3146052", "c5475683-4513-4900-8c86-8d395bb4d735"],
      code: "xnn",
      usage_limit: 4624,
      min_amount: 264,
      storage_id: "dc00ff73-4c19-4302-96fc-f7009914587d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 921.0,
      is_shop_specified: false,
      available_shop_ids: ["a1b66a79-0516-4a3d-8220-5eb3edf26292", "2e4f42c0-a4e4-4e4a-9591-3ca3d97f1c2d", "e30ad804-f17c-4eb0-9099-2712d050d296"],
      is_public: false,
      code: "dpgQ",
      usage_limit: 7819,
      min_amount: 9636,
      storage_id: "41f788ea-78a2-4b63-b072-14256242486a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 43.0,
      is_shop_specified: true,
      available_shop_ids: ["0a891409-39a6-4a02-a02e-21650f232cf0", "bfea804b-c0b7-42d0-bacb-8a2ffddae281"],
      is_hidden: true,
      is_public: false,
      code: "GDv",
      usage_limit: 8015,
      min_amount: 3638,
      storage_id: "3ff74694-dee9-4599-be98-2231acef6162"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 3575.0,
      is_shop_specified: false,
      available_shop_ids: ["5e0d304e-b290-4c41-8d18-f39cecc813ad", "ad65742a-52b4-4a61-84fb-9f0689697819", "f1a0d313-ffcc-4e98-9f6a-60be9e027b51", "208824ab-1bd7-4555-87d7-81053dcab273", "5225f367-972d-4604-9964-a68c4d0420df", "051f6e25-92a9-4f70-8ed5-5a49db5fcf05"],
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "M",
      usage_limit: 5330,
      min_amount: 3596,
      storage_id: "abd49164-5765-43ac-b43b-355c7d842bdf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 628.0,
      is_shop_specified: true,
      available_shop_ids: ["c9d22ddb-20d7-4f3a-86b8-9ebadc86fe18"],
      display_ends_at: "2023-01-28T05:37:55.000000+09:00",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "bZ1B",
      usage_limit: 3263,
      min_amount: 8685,
      storage_id: "20802ebc-346e-42ed-aed8-c27011af4cf5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 3921.0,
      is_shop_specified: false,
      available_shop_ids: ["7b678436-0193-4a8d-91fe-5f8c73823274", "35c44878-24b5-4056-ac4b-b02fef6f8073", "f935e3d7-572c-483d-9443-75047d06d2bf"],
      display_starts_at: "2023-04-05T19:31:18.000000+09:00",
      display_ends_at: "2021-05-10T14:01:49.000000+09:00",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "qtFq",
      usage_limit: 6392,
      min_amount: 3734,
      storage_id: "82b252d3-30a3-4e9c-862e-6a6336eb2d4b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 8920.0,
      is_shop_specified: false,
      available_shop_ids: ["8961b99e-9ac3-4ff6-903a-247197d008e1", "94b13c92-3740-4f9c-ac6a-e40fe3ec263c", "1605d2b7-4c17-4125-8d62-eb0130b20450", "cfe9d4f8-f62e-40db-a6f4-4031e5768e58", "d42b2314-592a-4b02-9d3e-8e3f5993e51d"],
      discount_upper_limit: 2826,
      display_starts_at: "2020-11-14T01:13:42.000000+09:00",
      display_ends_at: "2023-11-19T22:33:12.000000+09:00",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "xouaEZ",
      usage_limit: 3477,
      min_amount: 9668,
      storage_id: "a09c5cc3-07c5-4329-aa0c-825f4cf186fe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "b52b0703-711f-49ab-aaa8-f36e31cc7dee",
      name: "KOsthlg7F5Inqq1RN8vGrywhP1vC7P0wcaCebiBtU4UKTpxiwtXRRusO472FhJBP4Qw",
      starts_at: "2022-09-03T10:10:38.000000+09:00",
      ends_at: "2020-02-07T10:49:40.000000+09:00",
      issued_shop_id: "904a77ef-dc44-4233-b8c6-8dcdce924af0",
      discount_percentage: 1967.0,
      is_shop_specified: false,
      available_shop_ids: ["903fbf3d-be4b-4390-907b-9cc0240ddfa4", "f2ccfb87-0276-4bdd-bdf7-3ca482de070f", "38ef27b8-34e3-448f-b408-9aea130af67b", "e010b7b0-c244-42da-931f-f0bb47abf433", "6e7f23ba-721a-466c-bdb7-51b9aaa5b2d8", "a5b8ed5b-667c-4222-a924-4b584786e139", "39b0eb73-cbc4-4b43-8d58-040209ec3b7e", "5e970ed9-4b1b-4118-9735-3c10eff8be69", "b6bb8c14-dd5c-4df5-a0bc-e2dfcb686ff0", "ec5058c8-6a28-442a-88d3-2565e048b577"],
      description: "XHDomEsVlWqbVOT5GNhAveXTfCQl5A3my6XI12ImAbXw7v16lwOmhUIc6siTZymQIO2UXDzcEmzEpAJMtBbxA1JcNV9zh8GOgODgiGLwk8uEUFAVz3cD3G",
      discount_upper_limit: 3261,
      display_starts_at: "2022-09-09T09:22:21.000000+09:00",
      display_ends_at: "2023-07-15T13:31:08.000000+09:00",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "hK",
      usage_limit: 2132,
      min_amount: 8144,
      storage_id: "92864ee1-973c-4041-a2db-70617be4d1e0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new GetCoupon({
      coupon_id: "219fd49b-5c3a-469a-a127-6b0073c7b4b1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 9918
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3326,
      name: "gNHP2iieidfPxIoIU7nRP9jynlxeURgU5pyU3o46"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 4223,
      description: "5qrvJocEGvOgikPFPtwcsdqsKhBHavrTCq73ySbvbkbu0DkgSMPQoaufjcGnDgnNCf8aX1h6zLvSzBDUKoxXxzjRn0woAHne9GyAtFIqNKqCsgRENmAYCjrKV8guJfOzaEMpjvH4jVifRXPoSrVyjSkg1eMwoiiWU6MsnJJAKIBj8mEk6fb5fNA5tQf2edPLC54bygpjbbamsDUKi90QiovZ7bVVuaEL65DLlhJxMBEF9KM5WGXe0mkj5P",
      name: "MayJS2NnQVuPSzz721uVD9Okknv20oHXYe4om6klMseX8yQroB2vC2cql5PMK92XvgWpv4PaqKMpurbxCRgcTjxAxvdBlfvBFtFN3qkhd3FIR0jes"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 556,
      discount_upper_limit: 373,
      description: "yRYDBMTmN6Kx7Y0YhwQwsgRQvAxTscXtte3bJiVcNXGv8E1KwXvzDqhmAHsEpJaJR3B5ayYjEBBfiu1Dkw5PI2jwHpQfpsOSlmJ",
      name: "ngZoUp4vdOlYgFQpPjM5BmVM8lSm0slbgI14t31ortarKnxnlRbmLsKVT6Fgu59dyEe90WHP8W8KiJsOPcByz5LgV0l75qefFqG5fHxEESEEGKTTvXxeNRF3Wp7zZpjO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 1604,
      starts_at: "2021-12-23T22:32:41.000000+09:00",
      discount_upper_limit: 2881,
      description: "Wk50GzqG2dja1eWBYsNB7ZICBijL84iLu2qATsZpA9WD0qCwy2wfTCJn7sW6vnsdPlGGHnvwYi5FxwBUOOOFwCJ0ebiWobfmoMxo5EMWMgnkfWwlyw5LSmcU3a2f9TmiLkAD2ott5O5x1lYbxjzwwrb2Q97tvVAfEjcHkHPclQW6xcsNz9QM",
      name: "pqtZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3531,
      ends_at: "2020-10-25T23:14:35.000000+09:00",
      starts_at: "2021-09-05T00:58:23.000000+09:00",
      discount_upper_limit: 6278,
      description: "FQ9p6LiyuWh9Id5nNEGMwQzx0GhoVmH8kyTM1M73w4sWWsAjxMuEasVZnbnPrtg",
      name: "XR6hnSKUiNEb7lr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 6642,
      display_starts_at: "2022-09-11T00:03:42.000000+09:00",
      ends_at: "2022-07-31T22:40:22.000000+09:00",
      starts_at: "2022-10-03T03:38:16.000000+09:00",
      discount_upper_limit: 7354,
      description: "rjhTNVdB0mG1LYSSxIfHgieTKYvgu36ZLhswIU7xdMPzhVyEDqXsYxsFw3E7OjsUJlH7XKLYoUxuQEaLjP4VqmU5DMuzPCAvcYQH76yI845CoyKs0QrbFpW2iBlCDOIUdtgQNhf84FspmexS8M3nC2QWRX9XE67mTnwNLgiZC3pzkxFgsoV0UngJMX60kRLXhJqQS2tjUVnVPG704qLUfKshqxWTdiFgju",
      name: "QBbEBgSrZ6Uxls7ZyXbNsmdPUxefMmVcJPyqVM4ASzQPq1UbdQT9LKXp5kWw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 1430,
      display_ends_at: "2021-11-10T09:29:41.000000+09:00",
      display_starts_at: "2021-05-14T09:06:43.000000+09:00",
      ends_at: "2022-09-28T09:59:37.000000+09:00",
      starts_at: "2021-03-26T18:33:40.000000+09:00",
      discount_upper_limit: 7029,
      description: "PufQ5azO4P1DGb8auhjk42zi1v4JpDpyMndyf2MVNyi44t3",
      name: "qgoIcD7AmJmNiBxLbyC2DahVi41bjBlDvseOZ1YSPgzqQZdEDyG7fqB0f2hXblx7lM7N35"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 9098,
      is_disabled: true,
      display_ends_at: "2020-07-08T13:34:07.000000+09:00",
      display_starts_at: "2022-03-10T02:12:17.000000+09:00",
      ends_at: "2020-06-25T00:05:10.000000+09:00",
      starts_at: "2020-01-26T09:32:57.000000+09:00",
      discount_upper_limit: 1105,
      description: "Xjq1XRqPF3VKl9JOIG2JEvppbYTtYRECcpWSpSiOR8MFKFJJ52WWm3KkMkZZI4Yrm5RkUkPwCFLraIySwRaIETd72atpBGoh",
      name: "iEs9RrtC19mXXVMAjNxRl9P0zFDVOB8n31S4x28pfPmhMoecKYdjUYfmzaozztfUg24Ib6bZ0YwncwDHfADUnnLwbvFJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3383,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2022-09-12T20:32:40.000000+09:00",
      display_starts_at: "2022-09-13T10:59:12.000000+09:00",
      ends_at: "2020-12-06T23:31:27.000000+09:00",
      starts_at: "2022-05-10T19:18:17.000000+09:00",
      discount_upper_limit: 8888,
      description: "U1SfTXomwmceDFcqDeGlQuzkeUaC7YVaR187CaSJ6pWtiAKPs68vZREuW0MWB4NIBM6vYbqTlKsoTPR3cfrKhDmUHJ5bOhjsIWFjm3mCNXG0mOPhdGHxq7o0wB",
      name: "BWBNfxowxsRyt9vw8gqEfBG"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 9334,
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-04-07T04:26:58.000000+09:00",
      display_starts_at: "2021-10-05T08:24:45.000000+09:00",
      ends_at: "2020-04-22T03:54:38.000000+09:00",
      starts_at: "2021-12-25T23:58:07.000000+09:00",
      discount_upper_limit: 2054,
      description: "Hm2fsgJXJwJgUDL9P7wau90rRa5xGBGyNb6eFE1eIbbtX3y0gnet5X8SkrGd09JU8uPVZW6gcB0FuMTLhsaB63o7IsxP6hgj9",
      name: "rbjDLmiykiLRPvdxvprprxk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 7529,
      code: "QF8lECZ",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-11-23T22:51:15.000000+09:00",
      display_starts_at: "2021-06-13T16:55:14.000000+09:00",
      ends_at: "2022-10-19T10:59:29.000000+09:00",
      starts_at: "2021-02-27T13:09:51.000000+09:00",
      discount_upper_limit: 9396,
      description: "8MGLF0dfA8DYPrk7VNPr8w",
      name: "oX9R6SscInXYa1rvA5sQHk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 874,
      usage_limit: 3897,
      code: "vx3p89Lb",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-09-07T11:34:22.000000+09:00",
      display_starts_at: "2021-08-14T13:11:01.000000+09:00",
      ends_at: "2023-08-23T16:55:26.000000+09:00",
      starts_at: "2022-08-23T13:39:47.000000+09:00",
      discount_upper_limit: 7779,
      description: "14ucT2OO751OIS7nyDY7NUDWOjWWi2fiKlgfd4ZY2FYRQv0df9xZjRRhO1VERkr7gGHSSSnXZ3Dn3h",
      name: "mldPiJscUrt99vmFtk0lWGXZG9majpOGzQCnuA0Ejbc2Pr3IzZKB2kIbCJZtxIsWruOei9JmLY4BtLqHY3P89eXzt4qWtyLDmu5mZihVQxk7X3fQ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3234,
      min_amount: 1101,
      usage_limit: 1617,
      code: "MdCH",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-06-28T14:10:41.000000+09:00",
      display_starts_at: "2020-08-05T09:58:00.000000+09:00",
      ends_at: "2020-02-12T09:34:22.000000+09:00",
      starts_at: "2021-09-03T19:00:38.000000+09:00",
      discount_upper_limit: 4261,
      description: "NfJ3mcciKtnxLoO1OyyZ9atZscuI82KkQJdafBddisGzP7m2sPrn6ipglP9qFJYqs4JcKbc9cUOIQ15GQEoZdajnxpQkXtNfv5YQbjVvCtlmpIAH3wAhwRiw3P9dQqxDfnPJeEfU7r",
      name: "c3JEoArHpO2Au39cqy8y1hiMsbxIc122MnzAnDLheZKtZoXxQMRhk1lcR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 2318,
      is_shop_specified: true,
      min_amount: 8338,
      usage_limit: 9032,
      code: "Z4PRiAIy1r",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2023-06-11T19:58:39.000000+09:00",
      display_starts_at: "2023-01-11T17:11:42.000000+09:00",
      ends_at: "2022-04-17T00:32:42.000000+09:00",
      starts_at: "2022-01-12T03:51:13.000000+09:00",
      discount_upper_limit: 7515,
      description: "8V6JD4tqN1ABzdjHiIbhVVIra5P7ARN8ay8azLXpgpMTt8BAqZ2wUvccCyZasbXBpPCAPlres8R88TeYkDo0Nd2UlJP2t1tLqHvhxU2",
      name: "TH7uU80JudVKekwmBBd0VjNdbgmzoowfCr6ULQ6l5HDUTZpfe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 6102,
      available_shop_ids: ["bf491b49-7148-4402-86ee-a3eb154121b3", "71d8f287-53aa-4194-b25c-bb192da802f9", "a7c12af1-4d90-47c2-a8e0-279edd05e14f", "90116f1c-ae38-4371-a25b-8ddbd293f23c", "15b780a6-fbf4-4710-b1c9-1ff21e559e12", "f2c3f23b-780f-4cbb-bc24-2c74da450404", "d07d88ff-96f2-478d-b6fe-1a0de5c6d95f"],
      is_shop_specified: false,
      min_amount: 545,
      usage_limit: 9935,
      code: "qB",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-06-30T08:57:50.000000+09:00",
      display_starts_at: "2024-01-06T09:07:41.000000+09:00",
      ends_at: "2022-01-13T12:29:24.000000+09:00",
      starts_at: "2022-06-25T22:08:55.000000+09:00",
      discount_upper_limit: 7971,
      description: "wnnQRKa9TWAOxA5Eq11tgr2empAFTuE9ZTWrxfcFFS1vQYq3Nhz6lDUeWmAnAprnvMW834c4ZRswWw8ZLVRayHE6yF8vgTJBROVeEPkS1CPV8fiJDK75Rxx2",
      name: "a8vR60Urz55K8I58LK9qWVawPdeBNVgKRwE9tW0WlhOEsHdmtYq05D9PVN46khViwD5h8AqWwXmdCkK93ETWx0PRt78"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 7113,
      storage_id: "90dffdc8-ae2c-446f-99a4-4a1185923d43",
      available_shop_ids: ["6ad0f7ee-2683-4f8a-8d4f-20c04dd47422", "36bd9d64-37df-4636-a075-d7600a36ee58", "b938d64a-b438-4700-8bfb-8dfcefa95364", "396c1f24-f306-4957-a80d-25013497d4e3", "373d3d14-8b8e-42d2-abd8-a3cf4fdf0a27", "3c7f44fe-793f-4889-b68d-2e1d23ad75ce", "9d32d850-5bdf-46e4-914a-4daf17e53a02", "a0be283c-8bed-4498-b59e-bf4aa32bc376", "ac323675-f215-4409-9359-478e0f3497a5"],
      is_shop_specified: false,
      min_amount: 6313,
      usage_limit: 7789,
      code: "RZ8ejd2",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-12-29T09:30:46.000000+09:00",
      display_starts_at: "2023-06-28T21:45:34.000000+09:00",
      ends_at: "2020-12-12T09:43:31.000000+09:00",
      starts_at: "2020-12-04T09:16:36.000000+09:00",
      discount_upper_limit: 2670,
      description: "J3y8kpaL2sEMVQXssbTM0le7hljc5q13iz2ogKq6XDLdaZluBwSk7oQ4jmVMCKQkuGYOSgxKQg0ReSqm28FYyAFt3lfkKPvzVF89gmWXVrvjdbBCj8ceIc70e3AftMFQRh9SLdV32Jr245Pd1USHHNPZUIe8TghFzfG6qQRm2X9xAMcvf9q11qztwtP8C1o6iNGhe6GONeXwdMltnh5ZZhfhKMtY5ceycU5x7Sw0",
      name: "Ro6brgRlh15ONQf8yJe5gquTdcJlGnJx1u260tjLjy563V2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 6613,
      discount_percentage: 6294.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 8453,
      discount_percentage: 2262.0,
      name: "QaB7T3eiD7LGtPtc9UxnBWqNMYgyODcbXFzgeUixpsw4O06olzUkGuPzvfZUf4Nj1Phx6OnFcDLgBDJuNmdEX13roYXIjDzvwUxulf19W"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 2361,
      discount_percentage: 1380.0,
      description: "3Z5JcgXJgXyGHZnJSK2SPHTAe4gm7bkiKptJKjdHf28jULgVcGjpoI4OjEVN5IwpoZD8mW6Mni6ow29R9E8x5WgPBFzhH5WQLGghJQwxwhu8VSW",
      name: "DMazkqUUI96hyXrgluncC8w1ta7lSx8lK27XLd36mOSjscobOtWqQ5qdsXFjggQXTKk9KDjVxdpIpOE9OBG5MczLhPcv07O5JywL4dj5DzwUN3qK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 42,
      discount_percentage: 5421.0,
      discount_upper_limit: 9010,
      description: "OGILeJW26nADuKcoOI73AlhpQkRSrUzYSmyYMKFBdYlzjfrPLQCZeVqIc24aFrOUqmhZJgi0TrqevFpFQa5jQ0qw0eAAkjrGghShQ1e1p2y6J0Efe1KT2zOV1t734Dt2AqS7AklKUaGoGjhKn8Gi4EyMXi5AZPY",
      name: "0NiBXcIrSc4WEBXct7EPULPZ8mjZDFBsUbGT2cGahCQZwn69GVl23CAw14P8Wqq6zvEGGihODa6IRUqKT4Gc5b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 9889,
      discount_percentage: 7645.0,
      starts_at: "2023-04-23T05:12:18.000000+09:00",
      discount_upper_limit: 8146,
      description: "4ujuwcF3yiBrPFgqqPbXO1kxNgwkiNVQViHPebqgX2Gdrm50Jp2Ktek0Zd2KrvCMX3e2wKNCZpbU3kDQjLXpXNo5ZTYa40mMoWtqLNPMxefMW9UoRuD63iQwRKBnrfXrBgx2VKXJUkaK6LYIUSlz0UnjO0euwz2aKDGxVrFoQjVHZKlmW7giS0U3HqzWuAIxmbMBaY7xNaD5mKek2y3G3fHvI",
      name: "IMZrr39yN4fooHyXmMtYL62TuMdrRCH1U6SnC10iUT9RVts31lJTM1tAIFIXyR1D2wr3gQJHyLESvERMPhGuxYJ38hJ8o"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3289,
      discount_percentage: 4514.0,
      ends_at: "2020-10-27T21:06:52.000000+09:00",
      starts_at: "2022-08-11T11:07:10.000000+09:00",
      discount_upper_limit: 4068,
      description: "Gxz8sHnfSviFfzaYiM5FekxpSC7XxJbevpaS3yDkAyCM18g",
      name: "B50099I9f07cDnsNf8RVCS4kUPDTI7sH5s0HWd6e2EiEczCsoftZGvMqm866ke"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 4761,
      discount_percentage: 1654.0,
      display_starts_at: "2020-12-26T12:55:30.000000+09:00",
      ends_at: "2022-10-16T21:52:24.000000+09:00",
      starts_at: "2021-11-14T05:41:45.000000+09:00",
      discount_upper_limit: 8529,
      description: "Hx7SFWkDonV9ORWa3Vf6GP",
      name: "XbdmY834ANvpIwiwGUfAAepu6Oi4gPT4CsMjSVDYDR95WIObJAmQSZo2TMQGwcZOlB2jN1del1TKHhNanLCJcj8H1GdCh4nAREB1Ls3lig1Jfdb6rdzl05iVapi9s"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 7250,
      discount_percentage: 2758.0,
      display_ends_at: "2023-04-17T16:33:42.000000+09:00",
      display_starts_at: "2023-01-12T06:14:33.000000+09:00",
      ends_at: "2022-11-25T20:11:25.000000+09:00",
      starts_at: "2021-07-29T17:05:48.000000+09:00",
      discount_upper_limit: 7137,
      description: "YSt3lpRaxglgDgXt",
      name: "Q1YY55fWlN5IEcyvL9OdFiSRfpsKvPQzGbA6g2YR2hQwUokjq4CNq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 4333,
      discount_percentage: 8116.0,
      is_disabled: false,
      display_ends_at: "2021-04-19T01:52:21.000000+09:00",
      display_starts_at: "2023-05-24T00:32:03.000000+09:00",
      ends_at: "2020-10-11T13:10:55.000000+09:00",
      starts_at: "2021-11-21T04:24:50.000000+09:00",
      discount_upper_limit: 660,
      description: "XWZICwiX8Vu8XTvPlsafW3tZSHCvl1FWSv5xufJiRfxQTxfgN8E",
      name: "y8uf2vig2tww3AigGthsy9FDSMyBr7l"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 4764,
      discount_percentage: 7733.0,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-07-16T13:47:01.000000+09:00",
      display_starts_at: "2023-10-07T13:06:31.000000+09:00",
      ends_at: "2023-10-13T02:26:37.000000+09:00",
      starts_at: "2020-08-30T08:16:18.000000+09:00",
      discount_upper_limit: 5923,
      description: "5EJZwR4APkXF8jZEmpaplXHrhF465A00Gz1MCpPYGLGIfkJkalVwd3AiZaxy5MrE5oHjCODqondVQYUFHHnJRWWmhXoGSYECxwtZKIfQ26X0AxuvQLEW078N1ZHbGcBAfb5h09hT0SwvP1DT4rS7F3fT",
      name: "9tBU54DHj731VP0fewLr0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 9456,
      discount_percentage: 9653.0,
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-08-06T05:00:06.000000+09:00",
      display_starts_at: "2022-10-06T19:00:13.000000+09:00",
      ends_at: "2020-07-27T20:09:43.000000+09:00",
      starts_at: "2022-12-10T23:40:15.000000+09:00",
      discount_upper_limit: 6650,
      description: "0waL5PltPkiqk3wLzTPwxYsbHNjKodUhtci9IzQOyLB7v3z8NVhHWsM133H7OrXKAzFuGERaY7oOfIo0Gjsz1KmjevqjL46StfZ3qeX9r2fBO1oAoLs5wUOxwhHXO851PNfWcBlDRKhxy4pv157nv85LgGNPM7hnc1C1o4pd2z5dmx5it3BLEiXoyGBcS2lOZpIxrP70RYDwx1scJGXnzi6qbevPKvddCaXPWaytE8Ae2kpxO",
      name: "lyTcN6PlMQpkWJwOJozNuAxiupw4CrKFIjBNV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3646,
      discount_percentage: 2607.0,
      code: "XXG",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2022-05-09T01:40:09.000000+09:00",
      display_starts_at: "2020-08-07T13:46:53.000000+09:00",
      ends_at: "2023-05-15T11:56:54.000000+09:00",
      starts_at: "2023-07-13T01:11:16.000000+09:00",
      discount_upper_limit: 3631,
      description: "ng4fFeGqGRq6f3ER82Rvrk8PtilQoMqnzQQPwEK2gLcqf3h7nX6OqwHO6zMy3skfKtM58HO4cJW0QI69C5aetn7tN2zLiBr3i7VrerxB1U8qsKevwf74MOSivcFUZJvXteulqtxcYPQ0C4rMvLnpp9poLt7r3tpLHaahFVpB",
      name: "aqZZmb79K2azh50GUUAov2jjqeaLs49pNlR9yVAidkEfqHrCywPVUfZnshwTW3MV1I"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 3466,
      discount_percentage: 4336.0,
      usage_limit: 5784,
      code: "qHOu",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-04-06T15:57:02.000000+09:00",
      display_starts_at: "2020-08-07T04:40:45.000000+09:00",
      ends_at: "2020-03-09T01:49:43.000000+09:00",
      starts_at: "2023-06-20T12:19:49.000000+09:00",
      discount_upper_limit: 9632,
      description: "gDM3KZGZESCUZ5zOe8mHPUAdCKqvPl04PwJDTFhCMRv5OzIXKC0MIu75",
      name: "oVQ3qafeC3qcgx0xN1NHs9CKMzyjcgFSAlteR85c0AtJh4fDB8wD0T"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 8485,
      discount_percentage: 387.0,
      min_amount: 2392,
      usage_limit: 8572,
      code: "wb",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-11-07T15:09:33.000000+09:00",
      display_starts_at: "2023-09-13T20:44:57.000000+09:00",
      ends_at: "2023-04-25T15:17:33.000000+09:00",
      starts_at: "2023-07-09T07:15:02.000000+09:00",
      discount_upper_limit: 6501,
      description: "OWNz55UcSSl8lGzueuvJgXARAQrLzMUPoRJABgAfunP4CQPGE6uFjikMywLfdPQOnKd57D7Dbs76e4SgXWeYTMkVgw9ImEdzHfkLGLS2Y30mybaRki05WoQfYwCc9LCZ7C83L4qquXmtfpYHXBMw4CmD3iKYRNZbhWLZKqjgpm3R9r7hQqMu82q7czV3hWB4N7U76i9WMakBHYQwuPLw4HFbbPWyiflLn625BIbhyzxSbe5fwqxJBr",
      name: "KLmOOh3WcEIWfXu4YNcSurT16fnQTxjtiU8qSnQv7IwYgTSO2eIHLe7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 1361,
      discount_percentage: 2468.0,
      is_shop_specified: true,
      min_amount: 4649,
      usage_limit: 3615,
      code: "QQJuktcDn",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-06-19T08:35:49.000000+09:00",
      display_starts_at: "2022-11-20T13:00:23.000000+09:00",
      ends_at: "2020-04-23T13:11:59.000000+09:00",
      starts_at: "2021-11-22T19:04:40.000000+09:00",
      discount_upper_limit: 5913,
      description: "8OPQkxQU24p0znEFIp2pM1QimIf5AbfzZCyvonoo29B7JMvI5FZt126j3sGZh201II9R6YV1VE4yVfuLi1IwOQB0wR6132YJ8apHSsFnRVMH",
      name: "KFAVyl3WC4ppfIwX02VNe4owz5LWOudegPltXzUQq3qYb25FgSZIIs5E0E"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 2980,
      discount_percentage: 7823.0,
      available_shop_ids: ["4d101fc3-93e6-46f8-b93e-2e56728fc6b5", "64c2ce65-bce6-448d-ba59-a1811727246e", "2e16eef4-3036-4d10-b8a9-dff1a209a0fa"],
      is_shop_specified: false,
      min_amount: 4231,
      usage_limit: 2365,
      code: "t6hdE",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-04-14T21:29:40.000000+09:00",
      display_starts_at: "2022-02-14T15:32:59.000000+09:00",
      ends_at: "2021-03-31T02:21:03.000000+09:00",
      starts_at: "2021-04-14T23:54:19.000000+09:00",
      discount_upper_limit: 3349,
      description: "gZLlTY86HUeN3QzdfLVtcnZZJFQGHkTv9Hv2xaZS5MEhN5OcngsVsw4ppTCfDoZSnClUeplIHeSRGoWr1QWyXisccfi6IpvEiWujYUIsguMYqQcxdEjL1jS2KAFsqgd5mpUXqZZM067Kg9wFupOzECB7KIlMDwlXveyi7Ys9g1OYsdM1E8RGCyY8UBm68zADdb6mvkVApcQ0maNBUpz3QF4scA3no5Fz8BA5",
      name: "Gx40DbDWUE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_amount: 8147,
      discount_percentage: 3899.0,
      storage_id: "5c7bf775-d62c-4458-9d14-a7486b37d5d2",
      available_shop_ids: ["04a7e4de-f790-4625-9ce4-92263f8355a4", "2abf4cfe-e2bb-4fec-b90c-b97f74c3e280", "301203f8-d724-4155-afd1-d0e458d7a459", "d662821c-9b7e-42df-889a-f75e2da81277", "7fa4763a-57a1-443c-be77-043f70027520", "85cb6893-2866-43c5-9997-03afbe480046", "709b3d72-300d-45c2-9793-e2905fbcfea4", "663c819b-b2cf-43f7-8a12-6f0fddc7ae33", "a4e93844-4e2d-44d8-b3b9-5f70475e6e63"],
      is_shop_specified: true,
      min_amount: 3325,
      usage_limit: 7096,
      code: "ACl",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-03-01T00:15:08.000000+09:00",
      display_starts_at: "2022-02-04T17:08:20.000000+09:00",
      ends_at: "2023-03-02T02:36:17.000000+09:00",
      starts_at: "2022-01-13T14:26:04.000000+09:00",
      discount_upper_limit: 7703,
      description: "yDoeYdPNTHBinKjzBt",
      name: "N12qbKgjDqiLMlAHZOfU5uqSyk9E4xIm004ufQLBEN9Iyx5TrGdQdyTsMnaqokvnjh5ljEIhmB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 5512.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 1213.0,
      name: "iZvJlZBX4mHN628myOtikKDRTfPPfzg2huvHkLNG9wHHFGU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 7756.0,
      description: "xyTTTSD6cVuJdIsg9pHkyZS2MuDvj5AvbcfbtoMjgxczzxQB4cNW9d2iBsZTVaBNcJmnxgQzA1cmrvBt5Y1FIJavmyW798hiL97cEOYpbQGD6y4DHGIi5DtZav5zFhZgxR2BJ45Ngjnfu9HYEU8WNwzqkfhzQVroFEroX8FLuFbAFVet5DzwF5xoXgZv0UzYyzyJke8wH4f",
      name: "p4FioC6hVmssJBZ5KjXblRSJkv6CI1C2JY2Ys2De6m3FRNbPPkkfVq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 2844.0,
      discount_upper_limit: 5069,
      description: "Wy1XRor4SKngEO24299nWhrei2iOYGNtwezIrNxS5H5dD3zetw0ss3RyAE9ntYcawEBBUI8t0VNV5Zpa8ATXYFaUFbNqmItfXOyV0CoNPkYFMcZTHLtjfYc4MQnumeNepoNVbge1PpOLkP8jLhqUiKP6t0gVXHn9YpSXwdVI51LkAfkNXc58E40Rm46E9pFYNPXsOP7sfcF6jS",
      name: "FXuefqaJKhMRs3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 6016.0,
      starts_at: "2021-08-17T08:41:33.000000+09:00",
      discount_upper_limit: 9388,
      description: "GvwgVS0sUYZfm0vW07qWBNi72C89j6VxSSEfntGB3VEhzvfBtRSg2UxGH5pa7lDaKh3tQu9RhkU6T5ZR4bBCwUooBETOL1Aqu89Od0rbXc2tNpIaBMJZJgli0YZfYqyQ",
      name: "jVdj1zAi3GOuMHiJNrNvxFCxfzFdcKc8Cr3BCWud80d88qif"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 4483.0,
      ends_at: "2022-11-19T22:36:42.000000+09:00",
      starts_at: "2022-06-29T04:22:30.000000+09:00",
      discount_upper_limit: 7318,
      description: "DAMu6dwhJFvAEuzm8Pq52WpVOVVaXLO6APYKijcWTZQ0Zg36llI87fVSEn0VVxDt5wSBZ3AECr4kBSBpt5qRY4OWKOLvCtNStP9JkzlxymACDEf",
      name: "qKdDvFjSHz6hqoOxc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 1959.0,
      display_starts_at: "2023-03-26T12:54:22.000000+09:00",
      ends_at: "2023-04-24T13:54:58.000000+09:00",
      starts_at: "2023-11-05T17:49:14.000000+09:00",
      discount_upper_limit: 5713,
      description: "4JpN2mrr7UnfoNKV8qNF5aOfavjA1QuOHfUwfGrQY1s119Tyq1fi26FH21hnxvjlL3R8CYia6FCN5RqMiWqNnW44z7DNrPzL81Tm5OXMHY3W0Q0O69lM4rIDgb8v6dDevyD3wfoY3HcBtDsuH2mDRb7JroDDumjAV0FWLnA5EgKN7AtJ7o1hqEFpV95nQLowhJke2PbTdTbYxhHf5dr5wiEGin3VM1tjZ24bOIlIt",
      name: "nLoeEm9DStGboKdKKQmDXVxXjiu5V6RvbHv3j9oyqS6xLrv6xjeZHmq6xhlJ3K6yrIFWwISPLyDapfCjwsYdtZsuyW4Q5kLnk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 8756.0,
      display_ends_at: "2021-04-12T07:12:28.000000+09:00",
      display_starts_at: "2021-03-19T11:36:39.000000+09:00",
      ends_at: "2021-06-08T12:16:16.000000+09:00",
      starts_at: "2020-12-24T07:50:50.000000+09:00",
      discount_upper_limit: 7882,
      description: "kScYLrbSEG46Q3tVhoOwmHDOEv12HWYJ1IojqUMOo08uqxZsaBIZ8jSc0bpwlRKOCxtfWR7IE4jkAG53J",
      name: "pLbdup0V6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 8823.0,
      is_disabled: false,
      display_ends_at: "2023-12-05T07:11:48.000000+09:00",
      display_starts_at: "2021-03-13T19:06:43.000000+09:00",
      ends_at: "2023-08-06T21:17:06.000000+09:00",
      starts_at: "2021-12-23T17:51:44.000000+09:00",
      discount_upper_limit: 225,
      description: "lsbRGXJ",
      name: "i0WnesRkKbo1HjxtbMFucLVXtD8PKWj4G7upJLYxqFUXzivFGXql5yVFmsc9kyKQEAE4TPblGY8HYbUBtwrcnyNXvLVB2eSO5zXUaj36J85IN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 559.0,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-05-06T04:46:03.000000+09:00",
      display_starts_at: "2022-03-22T22:58:27.000000+09:00",
      ends_at: "2021-04-05T03:59:07.000000+09:00",
      starts_at: "2022-10-20T07:02:12.000000+09:00",
      discount_upper_limit: 9888,
      description: "juCsryFdTHchzl5arm9INgr7w6z2U2YVZW0PZzYoqi0WLS4nWBVSqUjYfUFGfUHnc1RSnRqCJVny7oBLbWRRMxpkwDy5o99oLPWu9rjSj7KmNS22SUUmiBSL4kxSCYJ8IOgujiuhNEOrjXAOhXKshP3D2wnLse0v2FIciy6aPHLOYM54xDbjbor6slKspv5studLUxrpo7TqBZ4gLrbb7FBNiMOIuc5TDOlmHxHuyN5sxQsyYXX5tPa54rzRUCN",
      name: "7y8RvRV1ZfAK4VPrwY8YhSXPGSb4hlw0jDLo30Qufkgwoh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 7527.0,
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-06-14T14:52:07.000000+09:00",
      display_starts_at: "2021-01-07T19:07:35.000000+09:00",
      ends_at: "2021-07-13T01:16:41.000000+09:00",
      starts_at: "2023-09-05T13:52:57.000000+09:00",
      discount_upper_limit: 5185,
      description: "1EA5SAteT9vYGPU9eeZx2j6OpKroXh70oj9kzSAfLqll5HXTXzXq6kvU6BtMtia71iEuZR38I7afxMK0igELF4YmiElEmDjv1358dQoYTzFtHX6OY",
      name: "dRKVAKsY38ylaAsAcId2pvYZEqlgkqOk77DGBddieqi0hU1SII0szjK9lyAcxPnJCQybO7mXbNDfZVN1ZdnUsVfvYb625hnmm7c8d8bxbiJ3NlGjEfTN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 7485.0,
      code: "vWJU8",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-01-07T13:55:57.000000+09:00",
      display_starts_at: "2020-08-24T20:57:10.000000+09:00",
      ends_at: "2020-09-26T01:34:54.000000+09:00",
      starts_at: "2021-10-27T00:08:16.000000+09:00",
      discount_upper_limit: 4121,
      description: "vidrjCpV3rZQpCet0Lhst7J4usZ6Fs4Zi5qZwCF5wZzjWlc9OibGeTsJdmDy3zSzDqKQhcqdokakfyxFaIYcqXDWV0BN0d7jPyMmlmpMT6p17QHQuDscU81Pm3o0uATOfqcQyQ5kjfmaA66D0cQ0qMPZKMXe0BIGmBLhD7EQeydr",
      name: "uLm3XldEPO8NuMG7J68iHjcOOqgBfDJ0n2Qt9nvGQqw148gPBpfnjqXqSSHt2n06QIah6aqCm0QK0w5eR428HiBinqatjLecBvyeGl9d3Y4rHDX2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 1695.0,
      usage_limit: 6630,
      code: "ipiSZNGB3S",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-11-25T17:32:43.000000+09:00",
      display_starts_at: "2022-04-19T19:48:33.000000+09:00",
      ends_at: "2023-10-10T20:16:30.000000+09:00",
      starts_at: "2022-11-04T07:54:39.000000+09:00",
      discount_upper_limit: 7089,
      description: "5Zy7YzmNYpYzJ9FnqGXjcySxoRJkjhXqSUSPt2c1qgrdczXx48VwL433lw8FjXi0p2DzlkB28GiGoVLjZu253Z82E8YUeqCddXnYZTRuOSMjnO41HnZrn7c",
      name: "aenzT0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 9654.0,
      min_amount: 6507,
      usage_limit: 9885,
      code: "wKx3",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2021-12-17T05:52:55.000000+09:00",
      display_starts_at: "2022-02-22T08:17:50.000000+09:00",
      ends_at: "2022-01-16T14:10:38.000000+09:00",
      starts_at: "2023-03-30T16:19:36.000000+09:00",
      discount_upper_limit: 4488,
      description: "DPJCy3sfz4W4N01mVDakinUo0tSXbSlPeyDBo3FeGeRDlqMbwLm3jFreRIFPlNFbnwUIqfHsY7pd0CO8XiIvGVny6baMJIG3NQZhU325g03aXsaTRD29C2FNEmxfklowla8Mzpu49yr6bnkkf8TCwf3Qf3p7i6azQ4BzZg25bHmxuPmsRzDXB7AOLh5XncDTs8qkKTuOfm5YecLeQeae8j2JRSuDdbg7",
      name: "7Xrudh5poIjaWVWfMYxtpmwG3kg6uHFFsldojJ3un59gPBlSSlJBZ2KVB7UCxkjHSRrwj6nOqrFpzRSYZwtbD22ihXZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 48', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 1770.0,
      is_shop_specified: true,
      min_amount: 713,
      usage_limit: 4323,
      code: "B",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-01-21T11:59:23.000000+09:00",
      display_starts_at: "2022-05-10T22:45:22.000000+09:00",
      ends_at: "2021-06-03T17:38:17.000000+09:00",
      starts_at: "2023-11-02T13:51:54.000000+09:00",
      discount_upper_limit: 2168,
      description: "5fGh0rLLjql5kaM6xHPg2mrw84wIFS5SJEoglsQWXIBwtPOIo29aPqOUnHG8PgfxS3j6MdfjAp3Uv6qLPIfAJqUTLRHsb5KnSfN1kzk90rbef4FVOjd9XeEzu19OcdqyPgvTIYdwAuHJGkzXwdKA64iBMzObH9BKBMEzwvckSZpi7JReqaEEQnoMsfEwlJzJ1zgJ2YSmrfyVAM1xhpVIPFNR9X7qc3XwwESokNT7pzjL9fC7e9hd1SW79Bdhxf",
      name: "IerkXJwwg6LB718HeGGwcvY4gSUd60IoGSjUdURU1H940CZTp7JVLVcDWnEvp6hkbV2CxEwwTyFvr6iGKyXCJ0U3q5N56aTK7GiehScjXJ3wg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 49', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 2818.0,
      available_shop_ids: ["f1445071-6e3c-4f59-84ed-f0fb59619b3b", "54a6affa-8943-4a23-aad6-3c16626713af", "046a0e08-a54a-4e56-a7b9-3838ad9b161b", "0738b2ed-e8e5-480a-8779-4fe6887f6a03", "5dbf731b-2563-4dfb-b9b8-74d29c617566", "3d359cb0-2bcf-4a68-9558-9fd9ec279e4d"],
      is_shop_specified: true,
      min_amount: 1224,
      usage_limit: 4797,
      code: "NOG",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2021-10-19T04:39:12.000000+09:00",
      display_starts_at: "2022-05-04T10:09:29.000000+09:00",
      ends_at: "2021-05-10T04:23:00.000000+09:00",
      starts_at: "2021-01-18T03:53:17.000000+09:00",
      discount_upper_limit: 8346,
      description: "NWUQn0vYe2h4PbeBSFgp7OEW5",
      name: "9iPAzfpRzB0DnswNFXJvp855OlmUv6iaT57c4c2TKskMPgmNiFkhToc5vDAugUXqKkV97F2UrcXGmIHbYPmix2lCucp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 50', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "ee6af336-6826-4a45-87a8-ee26bc07b1de",
      discount_percentage: 4309.0,
      storage_id: "67dd9d00-3d7c-4509-bd5f-e656c91c20d0",
      available_shop_ids: ["8c6afdc9-82a3-4416-8c26-4bb9a252908d", "d20eb53a-f855-4a37-a0de-9599b0dbd9b9", "42de3c57-0fbc-44ef-ab99-998322b3b4ab", "3e24afe0-280a-406b-90da-cda1c047f40e", "de9048d2-0147-4c82-a97d-d7c8c1220e1c", "d57559e7-bbfb-4568-aff8-1a3b677ace3a", "bddb4c4d-592b-4cfc-bf38-7bd9191c9344", "7e60143f-dfb5-417c-b5ab-c9bed9a66f85", "7a99ca3b-51bc-4844-8d48-cd28594c8d67", "e4983942-46ec-4ecc-b99e-e1013176729a"],
      is_shop_specified: true,
      min_amount: 1693,
      usage_limit: 1656,
      code: "aarDEu91",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-11-05T15:26:09.000000+09:00",
      display_starts_at: "2021-06-10T00:39:39.000000+09:00",
      ends_at: "2023-06-30T17:52:36.000000+09:00",
      starts_at: "2022-01-11T20:22:13.000000+09:00",
      discount_upper_limit: 5904,
      description: "7z2eAqGUMJ9YrGAAsroMjGxFb6dn7Cd5i3sI8CBSmT1DjMHXBdDSWMx3EFMl02oJ8cIHkazMdC9m3JAEplbv1rIXSB27LJXo6B1Ev5Np51udyvIkYWRE9VP5rwfxTyIG4NgFnG1jcnfMYyI9aAgmf9qqt4IuqcPbuDZn4MmFqQP",
      name: "0D70gOac4zFMlkgXPGipbNVujCkEdaZ2P99tJktYSgQEgRX5YFU59xMzbLO8b0VSvz1xy2V7JbWBwfLxMmIeEVd3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

