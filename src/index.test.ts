// DO NOT EDIT: File is generated by code generator.

import axios from 'axios';
import { Client, VERSION, Request, Method, Response, UserStatsOperationServiceUnavailable, UnpermittedAdminUser, InvalidParameters, PartnerRequestAlreadyDone, PartnerRequestExpired, PartnerDecryptionFailed, PartnerClientNotFound, BadRequest, SevenBankATMSession, PaginatedOrganizations, PaginatedCoupons, CouponDetail, Coupon, PaginatedOrganizationWorkerTaskWebhook, OrganizationWorkerTaskWebhook, AccountTransferSummary, AccountTransferSummaryElement, PaginatedCampaigns, Campaign, PaginatedPrivateMoneys, PaginatedBills, PaginatedShops, PaginatedAccountBalance, PaginatedAccountDetails, PaginatedAccountWithUsers, PaginatedAccounts, PaginatedTransfersV2, PaginatedTransfers, PaginatedBillTransaction, PaginatedTransactionV2, PaginatedTransaction, BankDeleted, Banks, Bank, BankRegisteringInfo, UserDevice, UserStatsOperation, PrivateMoneySummary, PaginatedPrivateMoneyOrganizationSummaries, PrivateMoneyOrganizationSummary, OrganizationSummary, Product, ExternalTransactionDetail, ExternalTransaction, Transfer, AccountWithoutPrivateMoneyDetail, PaginatedBulkTransactionJob, BulkTransactionJob, BulkTransaction, ShopWithAccounts, ShopWithMetadata, BillTransaction, TransactionDetail, Transaction, Organization, PrivateMoney, User, CashtrayAttempt, CashtrayWithResult, Cashtray, CpmToken, PaginatedChecks, Check, Bill, AccountBalance, AccountDeleted, ShopAccount, AccountDetail, AccountWithUser, Account, AdminUserWithShopsAndPrivateMoneys, Pagination, Echo, Pong, GetSevenBankATMSession, UpdateCoupon, GetCoupon, CreateCoupon, ListCoupons, CreateBankTopupTransaction, CreateBank, ListBanks, DeleteBank, ActivateUserDevice, GetUserDevice, CreateUserDevice, UpdateWebhook, DeleteWebhook, CreateWebhook, ListWebhooks, TerminateUserStats, RequestUserStats, UpdateCampaign, GetCampaign, CreateCampaign, ListCampaigns, UpdateCashtray, GetCashtray, CancelCashtray, CreateCashtray, ListBulkTransactionJobs, GetBulkTransaction, ListCustomerTransactions, GetPrivateMoneySummary, GetPrivateMoneyOrganizationSummaries, GetPrivateMoneys, UpdateShop, GetShop, CreateShopV2, CreateShop, ListShops, CreateOrganization, ListOrganizations, ListTransfersV2, ListTransfers, GetExternalTransactionByRequestId, RefundExternalTransaction, CreateExternalTransaction, GetTransactionByRequestId, RefundTransaction, GetTransaction, BulkCreateTransaction, CreateExchangeTransaction, CreateTransferTransaction, CreateTransactionWithCashtray, CreateCpmTransaction, CreatePaymentTransactionWithBill, CreatePaymentTransaction, CreateTopupTransactionWithCheck, CreateTopupTransaction, ListBillTransactions, ListTransactionsV2, CreateTransaction, ListTransactions, GetCpmToken, UpdateCheck, GetCheck, CreateCheck, ListChecks, UpdateBill, GetBill, CreateBill, ListBills, GetShopAccounts, CreateCustomerAccount, GetCustomerAccounts, GetAccountTransferSummary, UpdateCustomerAccount, ListAccountExpiredBalances, ListAccountBalances, UpdateAccount, GetAccount, DeleteAccount, CreateUserAccount, ListUserAccounts, GetUser, SendEcho, GetPing } from "./index";

const client = new Client("~/.pokepay/test-config.ini");

jest.setTimeout(30000);

test('Check VERSION', async () => {
  expect(VERSION).not.toBe(null);
});

test('Check GetPing | 0', async () => {
  let status = 400;
  try {
    const response: Response<Pong> = await client.send(new GetPing());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check SendEcho | 0', async () => {
  let status = 400;
  try {
    const response: Response<Echo> = await client.send(new SendEcho({
      message: "DgdY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUser | 0', async () => {
  let status = 400;
  try {
    const response: Response<AdminUserWithShopsAndPrivateMoneys> = await client.send(new GetUser());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      per_page: 5145
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListUserAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountDetails> = await client.send(new ListUserAccounts({
      user_id: "f7badafa-54a1-4511-b337-e4aa1c1fe652",
      page: 7996,
      per_page: 3122
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      external_id: "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new CreateUserAccount({
      user_id: "1cca797a-a4ae-4807-a9ad-4bab80f00988",
      private_money_id: "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
      name: "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
      external_id: "h6AAgB9jXehhbgs",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDeleted> = await client.send(new DeleteAccount({
      account_id: "ce348e12-e7ee-4579-a9c8-94dd3d6c2f3d",
      cashback: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new GetAccount({
      account_id: "e2f27231-d218-406e-b371-622b2afd45f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      status: "pre-closed",
      can_transfer_topup: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountDetail> = await client.send(new UpdateAccount({
      account_id: "f687016b-d0b3-46f2-8833-e8985291851f",
      is_suspended: true,
      status: "active",
      can_transfer_topup: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_to: "2020-10-07T18:59:38.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      expires_at_from: "2020-09-07T21:25:03.000000Z",
      expires_at_to: "2024-10-02T20:33:17.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      per_page: 5374,
      expires_at_from: "2021-01-13T03:58:59.000000Z",
      expires_at_to: "2024-09-16T05:40:45.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountBalances({
      account_id: "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
      page: 9044,
      per_page: 3584,
      expires_at_from: "2024-10-29T10:47:52.000000Z",
      expires_at_to: "2022-05-05T20:55:29.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      expires_at_to: "2020-10-21T06:08:14.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      expires_at_from: "2024-05-06T22:47:15.000000Z",
      expires_at_to: "2021-02-10T04:23:33.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      per_page: 9269,
      expires_at_from: "2022-07-27T12:24:37.000000Z",
      expires_at_to: "2020-03-19T18:01:03.000000Z",
      direction: "desc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListAccountExpiredBalances | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountBalance> = await client.send(new ListAccountExpiredBalances({
      account_id: "a4a782a4-76f9-4936-a8d1-35b63e8bbb60",
      page: 6531,
      per_page: 2579,
      expires_at_from: "2023-10-07T04:30:21.000000Z",
      expires_at_to: "2023-04-20T20:38:29.000000Z",
      direction: "asc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      external_id: "hBw4No1YXyGaN9eZjSIQORsTn19Lt83IRfp6apsZzwHUgb2qq",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      account_name: "rLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfd",
      external_id: "KJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCb",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCustomerAccount | 4', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new UpdateCustomerAccount({
      account_id: "86e1558d-113e-4ea6-8a48-226ea0c2dcab",
      status: "pre-closed",
      account_name: "nT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fc",
      external_id: "KmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUj",
      metadata: "{\"key1\":\"foo\",\"key2\":\"bar\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      transfer_types: ["exchange-outflow", "exchange-inflow", "refund-topup", "use-coupon", "refund-coupon", "payment", "refund-campaign", "campaign-topup", "refund-exchange-outflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      to: "2022-08-23T05:52:55.000000Z",
      transfer_types: ["exchange-outflow", "use-coupon", "refund-payment", "topup", "payment", "exchange-inflow", "refund-exchange-outflow"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetAccountTransferSummary | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountTransferSummary> = await client.send(new GetAccountTransferSummary({
      account_id: "d79ada44-2554-41d3-a753-5725590e9c63",
      from: "2024-08-01T20:42:17.000000Z",
      to: "2022-12-23T22:37:41.000000Z",
      transfer_types: ["refund-campaign", "refund-payment", "use-coupon", "refund-exchange-outflow", "exchange-inflow", "refund-topup"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      email: "cm0Sp2RluF@OAxJ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      tel: "07-0551-2657",
      email: "TcJlnsa7zu@y1tu.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      external_id: "dw",
      tel: "071-69745487",
      email: "fKkMLwrBpO@RQ9L.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      status: "suspended",
      external_id: "lnKRmCd4n",
      tel: "045-981479",
      email: "qpn3W7S36l@34SS.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      is_suspended: false,
      status: "active",
      external_id: "W72gqSjd8QPzbjt0rt7UmerReZGbvGgvA",
      tel: "09215911045",
      email: "P1AnQALadF@sAzg.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      created_at_to: "2022-07-27T22:59:50.000000Z",
      is_suspended: true,
      status: "pre-closed",
      external_id: "tuXgZDedIJqTHGgnOhGiwZBj5AvHdO2Atfc",
      tel: "0129-664-818",
      email: "3sP8V6IT9V@FC5b.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      created_at_from: "2021-03-24T19:42:09.000000Z",
      created_at_to: "2020-09-24T18:38:11.000000Z",
      is_suspended: true,
      status: "active",
      external_id: "PASw8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1F",
      tel: "002-97-992",
      email: "exAarzlUll@rgsQ.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      per_page: 6435,
      created_at_from: "2022-12-18T13:21:30.000000Z",
      created_at_to: "2025-06-21T23:46:25.000000Z",
      is_suspended: false,
      status: "pre-closed",
      external_id: "U",
      tel: "070-062-041",
      email: "uPYAKNLvTy@McIY.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCustomerAccounts | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetCustomerAccounts({
      private_money_id: "e981839f-7730-40a4-9991-3f49bc7c0625",
      page: 5613,
      per_page: 8339,
      created_at_from: "2025-02-04T14:45:59.000000Z",
      created_at_to: "2022-04-16T16:37:32.000000Z",
      is_suspended: false,
      status: "suspended",
      external_id: "Sz5j",
      tel: "084-00934",
      email: "Pyt1wTnktL@8AYk.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 0', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 1', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      external_id: "7caRg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 2', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      account_name: "ncONv8Kje2pUTWzADNDe87oiAkJDB6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycu",
      external_id: "n86BZW4IWD5G"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCustomerAccount | 3', async () => {
  let status = 400;
  try {
    const response: Response<AccountWithUser> = await client.send(new CreateCustomerAccount({
      private_money_id: "1bd95560-4dc2-4d80-a2f6-6688072d0b3f",
      user_name: "y4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONNAjBCYm4KWEpCDEdkn0OKxjITuRCVadPy2BbYSAUfNgtCT3aJmzxxuQUVBryDZD3LHlYNS",
      account_name: "3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iS",
      external_id: "TBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWx"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      created_at_to: "2024-07-25T03:44:04.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      created_at_from: "2023-03-19T21:52:50.000000Z",
      created_at_to: "2021-05-16T14:27:26.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      per_page: 2991,
      created_at_from: "2021-03-14T12:40:20.000000Z",
      created_at_to: "2023-05-24T08:19:28.000000Z",
      is_suspended: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShopAccounts | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedAccountWithUsers> = await client.send(new GetShopAccounts({
      private_money_id: "a6714648-ca18-4c6a-9ecb-b1f97ca44a38",
      page: 4106,
      per_page: 2378,
      created_at_from: "2020-07-23T05:33:11.000000Z",
      created_at_to: "2023-07-26T19:28:22.000000Z",
      is_suspended: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      upper_limit_amount: 3549,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      lower_limit_amount: 7634,
      upper_limit_amount: 4359,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_id: "0444cb55-e682-46a6-a9b9-ba047a7d4d84",
      lower_limit_amount: 1715,
      upper_limit_amount: 3003,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      shop_name: "ljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqN",
      shop_id: "487a51ce-007c-4246-8750-f801fe583563",
      lower_limit_amount: 2571,
      upper_limit_amount: 9230,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_to: "2023-04-06T21:01:03.000000Z",
      shop_name: "fJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n",
      shop_id: "07657833-0ba0-4226-9274-368c5525e408",
      lower_limit_amount: 8452,
      upper_limit_amount: 7282,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      created_from: "2024-10-26T06:23:56.000000Z",
      created_to: "2025-05-29T22:35:28.000000Z",
      shop_name: "bvzHyQJ1u",
      shop_id: "cbd78f88-c62f-4afc-b0a9-6ded7735a6dd",
      lower_limit_amount: 7338,
      upper_limit_amount: 5323,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      description: "rSXl5b4zk",
      created_from: "2024-10-25T21:23:14.000000Z",
      created_to: "2021-07-27T13:32:24.000000Z",
      shop_name: "XIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQ",
      shop_id: "a2c93ddf-40ba-4e47-8ee8-4f91a69b9fdc",
      lower_limit_amount: 2090,
      upper_limit_amount: 8705,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      organization_code: "Bc--7nl0IYap--9aa948FjB",
      description: "nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjob",
      created_from: "2020-06-04T23:01:23.000000Z",
      created_to: "2021-04-04T15:21:20.000000Z",
      shop_name: "KVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9",
      shop_id: "5d1946d2-630b-4321-a651-775bec6a8fe9",
      lower_limit_amount: 3067,
      upper_limit_amount: 6099,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      private_money_id: "bef68154-e22e-45d7-9a2a-320e11de6b72",
      organization_code: "f1-KE6-WX0z-64b50d-mzO5vzt-ZY-9",
      description: "GujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1",
      created_from: "2022-03-16T12:50:50.000000Z",
      created_to: "2025-02-24T06:36:12.000000Z",
      shop_name: "ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55o",
      shop_id: "2bd82cfc-e5e0-44ae-8149-1891e7317fbc",
      lower_limit_amount: 8500,
      upper_limit_amount: 9174,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      bill_id: "4sTwcYeF",
      private_money_id: "46734710-07a5-4f77-a350-74907f562620",
      organization_code: "",
      description: "0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20",
      created_from: "2025-10-19T03:58:28.000000Z",
      created_to: "2020-06-18T16:52:25.000000Z",
      shop_name: "uBp2e25agSXyEGickpeze5Yn7vyzhltNB5",
      shop_id: "636b46e5-41e4-4bea-b4b1-beffdcab5db5",
      lower_limit_amount: 4279,
      upper_limit_amount: 2323,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      per_page: 2817,
      bill_id: "8n6",
      private_money_id: "47f4d561-6a3f-4862-850c-1e915d12537c",
      organization_code: "-D-C-2",
      description: "RdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc",
      created_from: "2021-05-16T10:53:41.000000Z",
      created_to: "2022-10-21T16:42:55.000000Z",
      shop_name: "HWI6lY3NxA2Qq6LVyn2dOGJj5Bo",
      shop_id: "1945bb79-874c-4a31-8d27-426785715f6a",
      lower_limit_amount: 995,
      upper_limit_amount: 1524,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBills | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBills> = await client.send(new ListBills({
      page: 5149,
      per_page: 1412,
      bill_id: "sLuYo4aorO",
      private_money_id: "272f828f-a7a0-4ef7-86af-8b824979cc72",
      organization_code: "-7h9A-B04pr7qE03-8ErShQ--14--",
      description: "UPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOe",
      created_from: "2023-08-14T08:54:25.000000Z",
      created_to: "2024-06-11T09:49:29.000000Z",
      shop_name: "y8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5Eo",
      shop_id: "5c07b048-4156-49f5-8617-d59020c1b292",
      lower_limit_amount: 7661,
      upper_limit_amount: 5254,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "a3badfb1-acc0-442a-ba3e-36e9a08025cd",
      shop_id: "95184c9e-3c61-4be3-9374-78b3e33727f7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "a3badfb1-acc0-442a-ba3e-36e9a08025cd",
      shop_id: "95184c9e-3c61-4be3-9374-78b3e33727f7",
      description: "hWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new CreateBill({
      private_money_id: "a3badfb1-acc0-442a-ba3e-36e9a08025cd",
      shop_id: "95184c9e-3c61-4be3-9374-78b3e33727f7",
      amount: 6546.0,
      description: "zfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new GetBill({
      bill_id: "26289aee-1325-4265-af77-ba62cbcd9e59"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "3c2117e4-758e-4eb4-b2ce-015a80c60b4a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "3c2117e4-758e-4eb4-b2ce-015a80c60b4a",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "3c2117e4-758e-4eb4-b2ce-015a80c60b4a",
      description: "q7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3d",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<Bill> = await client.send(new UpdateBill({
      bill_id: "3c2117e4-758e-4eb4-b2ce-015a80c60b4a",
      amount: 3443.0,
      description: "SURUNaSg6OcHEm",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      is_onetime: false,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      description: "FO",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      issuer_shop_id: "3e4c4ccf-3d78-4693-b8f1-fc441b6844dd",
      description: "Q0YV",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_to: "2021-09-08T21:38:22.000000Z",
      issuer_shop_id: "c0ac44c3-ac9b-452a-96b6-8e05c80baf10",
      description: "SfrLsEgbwD",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      created_from: "2024-08-03T08:18:41.000000Z",
      created_to: "2021-09-09T23:51:39.000000Z",
      issuer_shop_id: "1682b03e-1b06-4b66-9e23-9d11b9f3fa27",
      description: "kU4qQWwEl9",
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_to: "2023-12-14T06:14:52.000000Z",
      created_from: "2022-01-10T04:31:00.000000Z",
      created_to: "2024-06-07T04:23:46.000000Z",
      issuer_shop_id: "e68be7c2-86e8-4ade-9bb7-04ca2b51b10a",
      description: "Q2",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      expires_from: "2021-12-12T05:27:32.000000Z",
      expires_to: "2020-07-20T08:54:28.000000Z",
      created_from: "2025-01-12T12:50:41.000000Z",
      created_to: "2025-05-28T13:20:42.000000Z",
      issuer_shop_id: "f38fe372-16b8-48e5-b6dd-52a6e2fed22c",
      description: "f8",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      organization_code: "SBxethCuCr4dBSWzD3agMTAv",
      expires_from: "2025-07-08T20:30:44.000000Z",
      expires_to: "2025-07-02T04:09:48.000000Z",
      created_from: "2021-11-23T21:45:55.000000Z",
      created_to: "2024-07-16T04:23:10.000000Z",
      issuer_shop_id: "63875ec3-bb3c-45ed-b4bb-b321d411d285",
      description: "iHLHOBH",
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      private_money_id: "efd64cc8-46da-4335-9748-2b175c0bab09",
      organization_code: "yso5u9Osjia9h3ovwp1QqOYhJfTJv9",
      expires_from: "2022-06-22T04:58:52.000000Z",
      expires_to: "2020-05-27T19:17:48.000000Z",
      created_from: "2023-10-19T23:15:56.000000Z",
      created_to: "2020-10-25T05:46:13.000000Z",
      issuer_shop_id: "fc757334-f0aa-42bb-beba-193bd9484a62",
      description: "n",
      is_onetime: false,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      per_page: 2492,
      private_money_id: "93925044-e279-40c8-8bac-b8a8e0d39367",
      organization_code: "jf7TRBDusrb62imeaN035TYh",
      expires_from: "2020-01-23T05:42:41.000000Z",
      expires_to: "2020-03-07T05:34:14.000000Z",
      created_from: "2020-05-04T12:00:20.000000Z",
      created_to: "2022-04-06T17:45:26.000000Z",
      issuer_shop_id: "8ba1a03e-a294-4e38-9fb9-47293d00edb7",
      description: "BIT98Ea3v",
      is_onetime: true,
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListChecks | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedChecks> = await client.send(new ListChecks({
      page: 5917,
      per_page: 4003,
      private_money_id: "9159f769-c0c8-48ee-8a62-7d0666015bc3",
      organization_code: "RzxMsGYTRQVbbDGQ3KFv",
      expires_from: "2021-02-12T12:07:54.000000Z",
      expires_to: "2025-04-19T00:30:14.000000Z",
      created_from: "2023-09-04T19:09:26.000000Z",
      created_to: "2023-02-15T14:06:42.000000Z",
      issuer_shop_id: "5bb86037-6af7-4c02-a463-ca82f5a73cd4",
      description: "qfZGa8VmM7",
      is_onetime: true,
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 6362.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 2074.0,
      description: "iZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 9458.0,
      is_onetime: true,
      description: "ILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5S"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 2842.0,
      usage_limit: 3756,
      is_onetime: true,
      description: "LuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onht"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 9766.0,
      expires_at: "2021-02-11T00:16:43.000000Z",
      usage_limit: 9631,
      is_onetime: true,
      description: "be1I3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 8447.0,
      point_expires_at: "2020-07-27T13:08:54.000000Z",
      expires_at: "2022-05-22T14:59:31.000000Z",
      usage_limit: 9276,
      is_onetime: false,
      description: "MpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 3805.0,
      point_expires_in_days: 4223,
      point_expires_at: "2025-09-19T19:40:34.000000Z",
      expires_at: "2020-03-05T03:01:41.000000Z",
      usage_limit: 6572,
      is_onetime: false,
      description: "RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9W"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 9916.0,
      bear_point_account: "fd9b0a5e-72a3-4cfa-a033-dff8b0be0f57",
      point_expires_in_days: 3783,
      point_expires_at: "2023-11-13T05:24:27.000000Z",
      expires_at: "2020-12-27T13:13:04.000000Z",
      usage_limit: 6580,
      is_onetime: true,
      description: "JVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 2203.0,
      point_amount: 1446.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 3328.0,
      point_amount: 5357.0,
      description: "0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 3882.0,
      point_amount: 2310.0,
      is_onetime: false,
      description: "MzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 11', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 2148.0,
      point_amount: 6835.0,
      usage_limit: 2807,
      is_onetime: false,
      description: "KLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 12', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 3957.0,
      point_amount: 1941.0,
      expires_at: "2024-07-04T08:24:40.000000Z",
      usage_limit: 9982,
      is_onetime: false,
      description: "7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 13', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 5277.0,
      point_amount: 224.0,
      point_expires_at: "2023-08-20T11:51:08.000000Z",
      expires_at: "2020-01-30T00:27:45.000000Z",
      usage_limit: 2056,
      is_onetime: true,
      description: "Btfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJgg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 14', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 3277.0,
      point_amount: 4269.0,
      point_expires_in_days: 4648,
      point_expires_at: "2020-12-17T02:03:53.000000Z",
      expires_at: "2021-09-05T15:19:53.000000Z",
      usage_limit: 577,
      is_onetime: false,
      description: "5wXB3CTdPu3I6Gb57N6Bfk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 15', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      money_amount: 5139.0,
      point_amount: 4791.0,
      bear_point_account: "6c6c2032-058f-46e0-b3bc-d378e18424e7",
      point_expires_in_days: 7588,
      point_expires_at: "2021-06-03T01:58:34.000000Z",
      expires_at: "2021-01-07T02:21:33.000000Z",
      usage_limit: 6371,
      is_onetime: true,
      description: "FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 16', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 1045.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 17', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 1982.0,
      description: "iJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 18', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 3545.0,
      is_onetime: false,
      description: "CUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 19', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 1067.0,
      usage_limit: 8569,
      is_onetime: true,
      description: "QYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5m"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 20', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 6593.0,
      expires_at: "2020-02-09T01:26:51.000000Z",
      usage_limit: 7567,
      is_onetime: true,
      description: "AIeN7EOzXnRCcbLOsMiN4tj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 21', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 5652.0,
      point_expires_at: "2025-01-28T10:26:55.000000Z",
      expires_at: "2021-02-21T06:43:04.000000Z",
      usage_limit: 9666,
      is_onetime: false,
      description: "ROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 22', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 3090.0,
      point_expires_in_days: 7553,
      point_expires_at: "2025-01-14T06:57:03.000000Z",
      expires_at: "2025-04-08T01:21:35.000000Z",
      usage_limit: 7782,
      is_onetime: true,
      description: "7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCheck | 23', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new CreateCheck({
      account_id: "06e05278-9019-4a61-a186-a806b61e7b92",
      point_amount: 5353.0,
      bear_point_account: "a1936755-6008-40ff-9b79-4a82207cd425",
      point_expires_in_days: 3991,
      point_expires_at: "2024-08-30T16:21:06.000000Z",
      expires_at: "2021-12-16T22:15:37.000000Z",
      usage_limit: 6374,
      is_onetime: true,
      description: "PlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new GetCheck({
      check_id: "588f723f-b8d0-4356-a138-15ece3046a56"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 2', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      bear_point_account: "5885fd4f-db4f-4e31-b732-dcc721d95a97",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 3', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      point_expires_in_days: 4841,
      bear_point_account: "c7e7a98b-f05b-431e-8d2e-858600e661d1",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 4', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      point_expires_at: "2020-01-13T20:28:00.000000Z",
      point_expires_in_days: 9661,
      bear_point_account: "fc1ff8b1-2ca1-4210-a4d8-41ce94510c1a",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 5', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      expires_at: "2023-10-13T18:59:36.000000Z",
      point_expires_at: "2024-06-25T23:18:12.000000Z",
      point_expires_in_days: 6773,
      bear_point_account: "24e5fb4d-2d13-400a-b76b-2819ab6dbd8d",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 6', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      usage_limit: 4419,
      expires_at: "2023-12-11T15:31:21.000000Z",
      point_expires_at: "2022-02-21T23:27:47.000000Z",
      point_expires_in_days: 9272,
      bear_point_account: "1743f53f-6150-41ac-bfa8-20356838fc2d",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 7', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      is_onetime: true,
      usage_limit: 7085,
      expires_at: "2021-03-17T18:40:28.000000Z",
      point_expires_at: "2024-06-16T11:20:37.000000Z",
      point_expires_in_days: 3606,
      bear_point_account: "3ef17a9c-9e94-47a6-916e-0438e1ed569f",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 8', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      description: "6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z4",
      is_onetime: false,
      usage_limit: 6801,
      expires_at: "2025-05-17T02:42:56.000000Z",
      point_expires_at: "2024-02-23T20:16:03.000000Z",
      point_expires_in_days: 4913,
      bear_point_account: "c7f261c2-0a40-4adc-bbdb-9fb96ef959ed",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 9', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      point_amount: 4131.0,
      description: "s2NjGqIbT9Ow",
      is_onetime: false,
      usage_limit: 16,
      expires_at: "2021-06-05T22:18:12.000000Z",
      point_expires_at: "2023-09-25T18:35:42.000000Z",
      point_expires_in_days: 8158,
      bear_point_account: "7b996ceb-e2e1-48d0-b02c-5cf7705995fd",
      is_disabled: false
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCheck | 10', async () => {
  let status = 400;
  try {
    const response: Response<Check> = await client.send(new UpdateCheck({
      check_id: "c18215a7-1387-458c-ac3c-d463426af580",
      money_amount: 521.0,
      point_amount: 8995.0,
      description: "yZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAk",
      is_onetime: true,
      usage_limit: 6535,
      expires_at: "2021-05-30T05:25:18.000000Z",
      point_expires_at: "2020-10-15T23:49:51.000000Z",
      point_expires_in_days: 6375,
      bear_point_account: "d4ba3201-9293-415e-b61d-db5c06dc5e31",
      is_disabled: true
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCpmToken | 0', async () => {
  let status = 400;
  try {
    const response: Response<CpmToken> = await client.send(new GetCpmToken({
      cpm_token: "h3SdKWf7Mk6qxlTgasH11Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      description: "ahWwt0KCw4FDQO05qLTqGD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      types: ["expire", "exchange_inflow"],
      description: "DuaFv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      is_modified: true,
      types: ["exchange_inflow", "cashback", "topup", "exchange_outflow", "expire", "payment"],
      description: "ga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBY"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      private_money_id: "d2aa515b-dc44-4043-b5c6-0cc3630f294d",
      is_modified: true,
      types: ["exchange_outflow"],
      description: "d28MFakoJp4st"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      organization_code: "k1SSX-r2arC-tY-3",
      private_money_id: "76d0ef9b-5818-4b57-8f7e-ba9b5516c97c",
      is_modified: true,
      types: ["topup", "exchange_inflow", "payment"],
      description: "ebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXs"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      transaction_id: "1h0a",
      organization_code: "D",
      private_money_id: "88182531-8dfe-41cf-b69d-2efb1b12cc32",
      is_modified: false,
      types: ["payment", "exchange_outflow"],
      description: "J63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      terminal_id: "4147edb9-f506-4826-aad4-9182ac9b20d9",
      transaction_id: "b",
      organization_code: "X32",
      private_money_id: "09d71d62-9a11-4203-8fcb-52f286231e5b",
      is_modified: false,
      types: ["expire", "payment", "cashback", "exchange_inflow"],
      description: "Lf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_name: "6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL",
      terminal_id: "15bae0b9-72f3-4766-b7d2-ffae34f7dca1",
      transaction_id: "iO",
      organization_code: "5W7ARlu-yf-08--6-v5D",
      private_money_id: "bd1c44e0-6e42-4b95-88eb-adfb7c49e831",
      is_modified: false,
      types: ["exchange_inflow"],
      description: "SZIPf7lUxpBEwOCUnBV1wl8i3xQfq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      customer_id: "dfd1264e-57a5-4487-953b-a60b4aab6e89",
      customer_name: "TjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3",
      terminal_id: "145087e5-0da8-4ff0-a78d-98f2f82496ad",
      transaction_id: "7ktZcH",
      organization_code: "k5-2satkD-E5--0r--5-8W5",
      private_money_id: "9dde7e48-e2e4-4774-b86d-04f6e077e6f3",
      is_modified: false,
      types: ["cashback"],
      description: "thVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      shop_id: "1b1ec565-60d5-4d53-8d09-ce781984e089",
      customer_id: "fa817a00-aacc-4651-9c71-65ef5334a25f",
      customer_name: "j9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebY",
      terminal_id: "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
      transaction_id: "bp",
      organization_code: "",
      private_money_id: "b89dc1d1-c5fa-4b0c-9cdb-20d01edd7a9d",
      is_modified: true,
      types: ["exchange_inflow", "exchange_outflow", "payment", "expire", "cashback"],
      description: "mp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      per_page: 7255,
      shop_id: "622545d9-7ece-4e1c-b885-06f419e2330f",
      customer_id: "911535a5-6b11-4b95-a146-801b8ef4fe9c",
      customer_name: "RiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLS",
      terminal_id: "1f31031b-166d-4a80-b83e-4a0020899196",
      transaction_id: "r0FU3D",
      organization_code: "-C5J-i9-wg-z-3--f-iW73r",
      private_money_id: "e098b3a2-1601-42b9-98fb-49bc1fd32461",
      is_modified: true,
      types: ["expire", "topup"],
      description: "2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      page: 4769,
      per_page: 9794,
      shop_id: "f53e5e49-5153-460c-a3e6-17f19e144bb8",
      customer_id: "3d11ccca-5e88-417e-82a4-24e279f64777",
      customer_name: "UjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLna",
      terminal_id: "33780446-cb24-49f0-88ab-f6b047374ee4",
      transaction_id: "NnYZXWwwP",
      organization_code: "pyXl2G1--ks2--np-w-Ox",
      private_money_id: "4c43fce4-8257-4731-8c1c-fbdeb0a81da5",
      is_modified: false,
      types: ["expire", "exchange_inflow", "exchange_outflow"],
      description: "cqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPym"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      to: "2021-02-07T20:13:25.000000Z",
      page: 6019,
      per_page: 1127,
      shop_id: "b413512e-f1a8-4fc6-814f-2148b5a95707",
      customer_id: "cca091fc-e9f3-46bd-9056-0c05eefe509e",
      customer_name: "jb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgT",
      terminal_id: "054b4b28-02f8-4a08-b25e-3e1af3bbafed",
      transaction_id: "P2c2b7Aqdq",
      organization_code: "--V1CT0---qC-V9Ps---Y3-u-72-t-",
      private_money_id: "29da4791-3cd2-4dbc-90aa-3189247f4a7f",
      is_modified: false,
      types: ["cashback", "payment", "exchange_inflow", "expire", "exchange_outflow", "topup"],
      description: "JVaYua2W"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListTransactions({
      from: "2022-07-14T08:19:16.000000Z",
      to: "2022-05-29T01:38:14.000000Z",
      page: 4354,
      per_page: 8145,
      shop_id: "31451448-a277-4324-b1d5-b19cd78b5654",
      customer_id: "38b97fea-258d-4466-b13a-a8a76663e69e",
      customer_name: "quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi",
      terminal_id: "ccdd12b0-cee5-4d55-ba95-4e343f986ef8",
      transaction_id: "H5OLhVoB1",
      organization_code: "u5Jec2Sq9",
      private_money_id: "e5765496-b9f4-4a3c-b6ae-7ccf355db2df",
      is_modified: false,
      types: ["expire", "topup"],
      description: "eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      customer_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      private_money_id: "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      customer_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      private_money_id: "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568",
      description: "YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      customer_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      private_money_id: "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568",
      point_expires_at: "2023-03-05T12:06:42.000000Z",
      description: "1u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      customer_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      private_money_id: "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568",
      point_amount: 2057,
      point_expires_at: "2024-06-04T22:20:16.000000Z",
      description: "3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransaction({
      shop_id: "9e97eeff-5fec-4b17-ae66-be15e72619ce",
      customer_id: "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
      private_money_id: "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568",
      money_amount: 4269,
      point_amount: 1828,
      point_expires_at: "2025-10-16T13:03:02.000000Z",
      description: "5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxce"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      per_page: 672
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      prev_page_cursor_id: "c44eac1e-b281-442f-a106-7170f5b43173",
      per_page: 852
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      next_page_cursor_id: "fa6a8cf3-e010-4ba8-a1e4-0e8ee5e510a5",
      prev_page_cursor_id: "6a0df75e-0165-45e3-b3f0-6985e1de09de",
      per_page: 198
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      to: "2022-06-11T19:12:13.000000Z",
      next_page_cursor_id: "cf8a14e3-7292-4ac8-b625-c07ad5798eaa",
      prev_page_cursor_id: "2aa71041-3949-4e4d-8be0-6280b6b3f6b8",
      per_page: 502
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      from: "2023-05-05T17:58:04.000000Z",
      to: "2023-10-09T14:10:01.000000Z",
      next_page_cursor_id: "f62c2e14-2fb8-4458-a67b-bee6ada018b3",
      prev_page_cursor_id: "6481f61a-2228-4de5-90c4-47010df61e71",
      per_page: 146
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      types: ["expire", "exchange_outflow"],
      from: "2020-08-23T01:14:15.000000Z",
      to: "2020-07-18T14:38:56.000000Z",
      next_page_cursor_id: "6b7636b7-9597-430a-9419-565220b5235d",
      prev_page_cursor_id: "cb57a87c-ff50-453d-b07b-eb0e8ea6097d",
      per_page: 869
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      is_modified: true,
      types: ["payment", "expire"],
      from: "2021-02-01T23:30:01.000000Z",
      to: "2025-10-14T12:33:29.000000Z",
      next_page_cursor_id: "7c205df2-fc58-49d3-8b8f-d36edd61016e",
      prev_page_cursor_id: "190bfb54-1249-4ce2-b72d-59b6c9fe2604",
      per_page: 251
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      transaction_id: "TEtm8AaIiu",
      is_modified: true,
      types: ["expire", "payment"],
      from: "2022-04-28T18:07:08.000000Z",
      to: "2024-03-11T17:47:52.000000Z",
      next_page_cursor_id: "5a8f5c98-c561-45ec-8fcd-77d5d5bc7f83",
      prev_page_cursor_id: "43f03935-8ef6-4a69-a77c-fa58d3e76ed8",
      per_page: 184
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      description: "Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDX",
      transaction_id: "mGq20Ccc",
      is_modified: false,
      types: ["payment", "expire"],
      from: "2022-12-21T20:34:48.000000Z",
      to: "2020-05-14T22:51:09.000000Z",
      next_page_cursor_id: "fa9de85f-d7a4-494d-8c9c-cb79c773cfb1",
      prev_page_cursor_id: "50482f66-ed9f-4b27-a4de-64536fe160a0",
      per_page: 499
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_name: "ZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZP",
      description: "hn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89r",
      transaction_id: "gV81h6",
      is_modified: true,
      types: ["exchange_outflow", "expire"],
      from: "2021-05-20T09:10:22.000000Z",
      to: "2020-08-05T10:22:10.000000Z",
      next_page_cursor_id: "9cbc03fe-4206-48e5-8156-199a56339ba3",
      prev_page_cursor_id: "9a6210a0-6627-4953-9598-192c2b21cba7",
      per_page: 77
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      customer_id: "b2e65638-6bcd-4e0b-aa50-fbe6207ce132",
      customer_name: "nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqz",
      description: "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISp",
      transaction_id: "Q3c",
      is_modified: true,
      types: ["expire", "topup", "exchange_inflow", "exchange_outflow"],
      from: "2023-05-08T12:40:28.000000Z",
      to: "2025-10-16T02:12:00.000000Z",
      next_page_cursor_id: "1e0c35c9-20dc-4d3a-b662-fe68aa868938",
      prev_page_cursor_id: "5c88a5d9-a572-4e60-96f3-5e94715b46aa",
      per_page: 930
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      terminal_id: "f8bce857-6328-4ac7-9304-efe702a48fe8",
      customer_id: "e23518c4-202b-4d28-9443-025fc1900b77",
      customer_name: "Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79",
      description: "bzapcrIrLur4lrA",
      transaction_id: "RY4qmYCD",
      is_modified: true,
      types: ["exchange_outflow", "payment", "cashback"],
      from: "2020-11-13T11:11:10.000000Z",
      to: "2021-07-17T05:16:25.000000Z",
      next_page_cursor_id: "c13d55f9-6e22-465c-bb37-5845aebb53f8",
      prev_page_cursor_id: "2b8b8db4-8c7a-4d26-9ccc-b0798d3a473f",
      per_page: 36
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      shop_id: "f7aa365e-0d2c-41fd-8cac-605c856148d9",
      terminal_id: "47d51d1c-7d7d-4eed-8f26-2a2b344a5456",
      customer_id: "58ef04fd-d975-4375-b71d-2c52ab07695a",
      customer_name: "nfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypE",
      description: "u4pqR",
      transaction_id: "KXyywxfAsv",
      is_modified: true,
      types: ["payment", "topup", "exchange_inflow", "exchange_outflow"],
      from: "2021-10-04T00:58:06.000000Z",
      to: "2022-06-09T11:49:57.000000Z",
      next_page_cursor_id: "a642911b-cd4e-4ed8-b7c0-f474be05a3bf",
      prev_page_cursor_id: "d43d7f2e-ff50-4b40-a627-801fbd785b3e",
      per_page: 460
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      organization_code: "ZgPolr77",
      shop_id: "b5151169-b7eb-4d40-b44d-f284f22b159d",
      terminal_id: "72885693-789f-428b-8bdf-87cba7fe9730",
      customer_id: "a9c7a746-ae9c-45c8-8cf9-0e4cee78db99",
      customer_name: "vzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uM",
      description: "WRziTXMumFeaEHdh8PePoMZwnAEmuU",
      transaction_id: "6p",
      is_modified: true,
      types: ["cashback"],
      from: "2024-05-28T06:33:55.000000Z",
      to: "2023-08-07T07:43:51.000000Z",
      next_page_cursor_id: "5a912ffa-51d4-4933-9e8a-d1a247a9e608",
      prev_page_cursor_id: "786dd1a6-ad7e-4197-aa0e-056d6e24073a",
      per_page: 315
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransactionsV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransactionV2> = await client.send(new ListTransactionsV2({
      private_money_id: "df0b090b-c303-485d-8e60-30c6064b1e33",
      organization_code: "v5U24s--7tQx3sNh6kDy-727",
      shop_id: "86746977-0637-4cf0-9e40-d06cbd28eb63",
      terminal_id: "658089af-4fec-4195-a33d-a357ce7bec1e",
      customer_id: "1d65d842-203f-4539-a2ce-0e0061bc8952",
      customer_name: "Q0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CH",
      description: "RNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjd",
      transaction_id: "x",
      is_modified: false,
      types: ["payment", "exchange_inflow", "topup", "expire", "cashback", "exchange_outflow"],
      from: "2021-03-06T21:37:34.000000Z",
      to: "2020-02-21T23:58:15.000000Z",
      next_page_cursor_id: "c4390188-56a5-4166-a8cd-e8909bad5eff",
      prev_page_cursor_id: "c90bb837-c45a-475f-9d13-d8706ccc3568",
      per_page: 582
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      per_page: 251
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      prev_page_cursor_id: "046ecadf-cff8-4325-8b36-3688c4b817b2",
      per_page: 926
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      next_page_cursor_id: "88872d66-8a04-4db8-86ce-d8240313967a",
      prev_page_cursor_id: "1405e00e-41dc-4d61-aa2e-c644530c2dde",
      per_page: 102
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      to: "2020-04-24T00:42:20.000000Z",
      next_page_cursor_id: "cb5638b7-35f2-4f19-af3e-dcff3655868e",
      prev_page_cursor_id: "b8a0577e-a297-41b4-ac7e-e19d11304099",
      per_page: 971
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      from: "2023-05-30T19:45:24.000000Z",
      to: "2024-03-09T17:23:43.000000Z",
      next_page_cursor_id: "0dbee5d8-8fd9-4b7b-8233-f43efbea5b14",
      prev_page_cursor_id: "fbbe5059-489d-4cb3-9584-c9917637f333",
      per_page: 646
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      is_modified: false,
      from: "2021-01-26T23:32:39.000000Z",
      to: "2021-04-10T03:58:29.000000Z",
      next_page_cursor_id: "1068ba0e-ffeb-44db-bafb-db0f25acd5b4",
      prev_page_cursor_id: "616664a7-590e-48a5-a680-3be15b55e700",
      per_page: 920
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      bill_id: "c38e1368-27f8-4e40-ad73-ba121ece97f2",
      is_modified: true,
      from: "2021-12-10T13:06:18.000000Z",
      to: "2024-10-16T22:54:17.000000Z",
      next_page_cursor_id: "e583c950-2126-4897-9c3e-a862bd666eb5",
      prev_page_cursor_id: "045c253c-dd42-4e03-b14b-1db97a90f05a",
      per_page: 205
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      transaction_id: "91e07a02-75ca-49fe-aaec-ea2538478551",
      bill_id: "52d09cfa-b872-47e3-8734-6ae30c2d7e46",
      is_modified: true,
      from: "2025-06-09T09:42:37.000000Z",
      to: "2022-07-27T21:59:21.000000Z",
      next_page_cursor_id: "b43f9739-b630-4f44-b59d-2ae787857385",
      prev_page_cursor_id: "6cda36ef-09b4-427e-a48d-fe0498f19e01",
      per_page: 323
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      description: "dUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKI",
      transaction_id: "b10db97b-a94e-4a9c-8937-4af636e755ea",
      bill_id: "fc3b965c-302b-4bc0-8fa4-853802df57f1",
      is_modified: true,
      from: "2022-07-11T04:49:09.000000Z",
      to: "2020-06-14T14:08:04.000000Z",
      next_page_cursor_id: "bdd6d88c-0106-4950-aff3-fc64433762ca",
      prev_page_cursor_id: "83ab91b8-a90e-4d4a-ab83-fa4c75d5f4b6",
      per_page: 76
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      terminal_id: "13882e24-4e1d-41b4-a6bc-fa629739e1a5",
      description: "tzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye",
      transaction_id: "d572948e-622e-4838-85bb-f7f8e1316024",
      bill_id: "6f90e1e9-9e23-4243-b074-9472a3a15640",
      is_modified: true,
      from: "2022-01-30T04:10:01.000000Z",
      to: "2023-11-14T17:24:08.000000Z",
      next_page_cursor_id: "1d65782b-e8a8-4958-9a14-4913d296a933",
      prev_page_cursor_id: "ff821423-1911-4cfe-8f21-c8d1b17cfe53",
      per_page: 549
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      customer_name: "s9cvMVMzYpf",
      terminal_id: "fbb99212-f945-4edd-9748-de27e191eb48",
      description: "q4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFs",
      transaction_id: "070af7da-d2a3-431e-8c68-ed39a53219ac",
      bill_id: "559a0dbe-c0eb-4bad-bdaf-42864a4ad514",
      is_modified: true,
      from: "2023-01-27T05:15:58.000000Z",
      to: "2020-09-26T16:19:44.000000Z",
      next_page_cursor_id: "77dc6e96-dd0d-4d01-b154-48d3d4379d4b",
      prev_page_cursor_id: "30465051-2efb-4fd9-a14c-7074857aec8f",
      per_page: 520
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      customer_id: "f11ae404-efe7-47fc-825f-20c66ca83432",
      customer_name: "1Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzS",
      terminal_id: "a16f420f-2ffc-43ed-8fba-c4dffcc846a9",
      description: "TPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zD",
      transaction_id: "590061a1-d44a-45db-b6a7-11cb18bed4da",
      bill_id: "be5427d4-2c23-4311-9bc5-4e6b0f3dd314",
      is_modified: true,
      from: "2023-04-01T05:20:08.000000Z",
      to: "2020-11-09T18:23:35.000000Z",
      next_page_cursor_id: "168a35c4-be7f-4452-87f1-46bf34566564",
      prev_page_cursor_id: "a3e61a38-206a-4b97-9047-04e996067b68",
      per_page: 711
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      shop_id: "0371e632-2329-4192-9cfa-c3ef55523aa6",
      customer_id: "36eecb80-acb2-42c7-99a3-b6ce67b30b8e",
      customer_name: "QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLes",
      terminal_id: "daaeae93-14ef-4aa3-8e37-569fe6361d41",
      description: "sxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6b",
      transaction_id: "c5e209c0-0700-4a43-aa9a-76f22a54117e",
      bill_id: "805e28c4-0e83-4ee0-a72c-66af1745b151",
      is_modified: false,
      from: "2020-08-06T20:55:48.000000Z",
      to: "2024-01-30T01:53:20.000000Z",
      next_page_cursor_id: "e06ee9e9-f3c2-487a-b8e8-a5e053dd6e8c",
      prev_page_cursor_id: "30b2daae-3fef-4970-baec-746557fbf3a8",
      per_page: 472
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      organization_code: "4-0T5lf-",
      shop_id: "0e45ff1e-39d2-4f5c-8385-d41f53e917ab",
      customer_id: "8013a725-4b4d-458c-96bf-ae19402967d9",
      customer_name: "MVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6Axi",
      terminal_id: "a24cb979-2ebb-468d-a249-5f551b90ab64",
      description: "JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0B",
      transaction_id: "2f6d392a-1915-4726-8597-07a29add4615",
      bill_id: "6576170d-512d-4450-a178-9706225dde5b",
      is_modified: false,
      from: "2022-01-25T18:09:00.000000Z",
      to: "2024-02-02T20:01:29.000000Z",
      next_page_cursor_id: "eaea0068-447a-4cb8-8184-f1f1d8eed3ac",
      prev_page_cursor_id: "7a87ea82-0af5-4548-b838-ed0e04639fe7",
      per_page: 669
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBillTransactions | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBillTransaction> = await client.send(new ListBillTransactions({
      private_money_id: "0828e659-df7e-4cf1-9c96-2cd1cabc2c27",
      organization_code: "8hH-9hZ-hjR--D-tC-4xRR",
      shop_id: "540d029f-7244-4b2e-8abf-6a8ea1b97f06",
      customer_id: "90ae7852-48ed-4e3d-97c3-e08827ab045d",
      customer_name: "XV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qm",
      terminal_id: "4fe8a8c3-cf18-4bde-bb0b-3bff4482c2c6",
      description: "zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB",
      transaction_id: "d7c3650e-903c-4a37-8ebb-b46eb003dee6",
      bill_id: "d089a704-45b3-4280-bab7-60a75789eafa",
      is_modified: false,
      from: "2020-06-10T06:18:31.000000Z",
      to: "2025-06-17T03:23:59.000000Z",
      next_page_cursor_id: "9d961e59-2271-454c-aada-7c29e1ff0268",
      prev_page_cursor_id: "b6b93de4-31ab-4e32-85d6-785d3d5d606d",
      per_page: 879
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      request_id: "1fa09f3e-e948-4e59-9be5-6c9c3f60a365"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      metadata: "{\"key\":\"value\"}",
      request_id: "44ff57ca-bed7-4016-a9ca-ffbf67947e4c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      description: "n1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXy",
      metadata: "{\"key\":\"value\"}",
      request_id: "d5777316-5b45-4656-ba5f-91e81a558c8f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      point_expires_at: "2020-02-19T04:07:07.000000Z",
      description: "2OJwUM0ktk1yse",
      metadata: "{\"key\":\"value\"}",
      request_id: "0a12dd2d-bb34-4fc3-aee4-0502dbfefb4e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      point_amount: 4747,
      point_expires_at: "2021-01-17T22:24:07.000000Z",
      description: "hZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcN",
      metadata: "{\"key\":\"value\"}",
      request_id: "4972ef25-bddd-4ac5-846c-579ba3aa113a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      money_amount: 275,
      point_amount: 3582,
      point_expires_at: "2021-09-11T04:09:06.000000Z",
      description: "x",
      metadata: "{\"key\":\"value\"}",
      request_id: "3a05f98e-a93f-4b9f-b44b-0db720e31d6f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransaction | 7', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransaction({
      shop_id: "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
      customer_id: "157ad3a6-4dfb-43e0-8174-37663bb26e02",
      private_money_id: "fb5859a0-0527-4500-b247-f1d09e5ac666",
      bear_point_shop_id: "98e4476d-ab81-40f0-8e84-07bed8a8f4fd",
      money_amount: 4638,
      point_amount: 8603,
      point_expires_at: "2024-02-09T08:48:33.000000Z",
      description: "BLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK",
      metadata: "{\"key\":\"value\"}",
      request_id: "fb7a439a-37b2-45f9-90e2-4499681094c4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "f52b980c-bd74-4458-8a69-dbe9aa6b66af",
      customer_id: "2f76de7b-4f9d-4d5e-abfc-61dafd933483"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTopupTransactionWithCheck | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTopupTransactionWithCheck({
      check_id: "f52b980c-bd74-4458-8a69-dbe9aa6b66af",
      customer_id: "2f76de7b-4f9d-4d5e-abfc-61dafd933483",
      request_id: "94fa0085-e27a-4bbe-8293-a96b2f2e76bc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      coupon_id: "1ea67a44-f240-435f-a98f-457c537aea1d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      strategy: "point-preferred",
      coupon_id: "d35331c2-123f-4aa5-8d88-18f6d85a6380"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      request_id: "076747f5-d9c3-4930-9cd1-df54bd7f365f",
      strategy: "point-preferred",
      coupon_id: "c58d1de6-ffbc-4fa2-9740-a278051eb982"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "10b6a96c-a5b2-45bb-9a9a-9a5a842f42a0",
      strategy: "point-preferred",
      coupon_id: "3c4b07bc-196a-4299-b93f-1ed1cb0b8d8d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "c8cc079d-7f65-4720-8f1e-090f9aeee731",
      strategy: "point-preferred",
      coupon_id: "c9734f2b-5a39-4d3f-8b68-039964f5b446"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransaction | 6', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransaction({
      shop_id: "3bd2bd97-7274-44ff-bd6d-83c0d0d273b9",
      customer_id: "aaad21b8-b033-48eb-b3c4-50643863fc4b",
      private_money_id: "65ec8a2b-d6e6-4d62-8390-f8a82864c239",
      amount: 1078,
      description: "xiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGS",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "8f05ec2d-a656-4d17-a7d6-e927e10b503b",
      strategy: "money-only",
      coupon_id: "02099884-2de3-46f3-b30f-eb4f88c39551"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "03f6104d-06e4-4248-b15a-224ce7192092",
      customer_id: "5cf0f56c-b000-4b76-b0b1-e186782db0bd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "03f6104d-06e4-4248-b15a-224ce7192092",
      customer_id: "5cf0f56c-b000-4b76-b0b1-e186782db0bd",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "03f6104d-06e4-4248-b15a-224ce7192092",
      customer_id: "5cf0f56c-b000-4b76-b0b1-e186782db0bd",
      request_id: "42b8b147-1196-4ea0-b182-68cf1063889f",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreatePaymentTransactionWithBill | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreatePaymentTransactionWithBill({
      bill_id: "03f6104d-06e4-4248-b15a-224ce7192092",
      customer_id: "5cf0f56c-b000-4b76-b0b1-e186782db0bd",
      metadata: "{\"key\":\"value\"}",
      request_id: "811a5d15-e4a7-4b98-9f8a-70256162186e",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0,
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0,
      request_id: "30d01c3e-e73c-4731-b488-e80e69aaa6b4",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "cde92489-820a-479d-a85d-78d9681ca673",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "96528069-3fc5-430e-94b8-fe3bd4971060",
      strategy: "money-only"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCpmTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateCpmTransaction({
      cpm_token: "jIsFsWbo7bpQq9anT6Pszk",
      shop_id: "ef7eb08c-4e4e-4b9a-86bc-db8730a560b3",
      amount: 9897.0,
      description: "8p",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "4a3bd1c0-c548-4def-a705-2214641effa6",
      strategy: "point-preferred"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dd04e86b-ab38-4b64-b820-1475cc94934b",
      customer_id: "1e05a79c-7385-4309-80e7-04a75e82aa9c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dd04e86b-ab38-4b64-b820-1475cc94934b",
      customer_id: "1e05a79c-7385-4309-80e7-04a75e82aa9c",
      request_id: "d375a943-ad0d-4246-8994-9f3d1b0065b0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransactionWithCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransactionWithCashtray({
      cashtray_id: "dd04e86b-ab38-4b64-b820-1475cc94934b",
      customer_id: "1e05a79c-7385-4309-80e7-04a75e82aa9c",
      strategy: "money-only",
      request_id: "bc1cfa3e-d776-4931-9ce2-af72ac04bb6e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "b9559c05-7838-460c-ac41-dc8d1a18f995",
      receiver_id: "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
      private_money_id: "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
      amount: 8057.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "b9559c05-7838-460c-ac41-dc8d1a18f995",
      receiver_id: "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
      private_money_id: "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
      amount: 8057.0,
      request_id: "6971a20c-3ad6-4a9f-842b-7941300c66f0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "b9559c05-7838-460c-ac41-dc8d1a18f995",
      receiver_id: "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
      private_money_id: "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
      amount: 8057.0,
      description: "kaDeYuOtBoCZgc4gwc8RSE7",
      request_id: "91641442-2fb5-4977-9d0b-b421e06ac073"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateTransferTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateTransferTransaction({
      sender_id: "b9559c05-7838-460c-ac41-dc8d1a18f995",
      receiver_id: "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
      private_money_id: "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
      amount: 8057.0,
      metadata: "{\"key\":\"value\"}",
      description: "fAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwa",
      request_id: "67d01e06-b05a-4602-b9f6-7dcf6d06ffee"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "1ba7be5e-39f6-4c36-b773-998144324a70",
      sender_private_money_id: "6a5a0bef-05d2-476f-8850-443c9e7e9011",
      receiver_private_money_id: "25c8bc0b-c8cb-4f55-a77e-302f23022409",
      amount: 1838
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "1ba7be5e-39f6-4c36-b773-998144324a70",
      sender_private_money_id: "6a5a0bef-05d2-476f-8850-443c9e7e9011",
      receiver_private_money_id: "25c8bc0b-c8cb-4f55-a77e-302f23022409",
      amount: 1838,
      request_id: "b8d75bab-d21b-4756-8513-3cbf3f1610dd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExchangeTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateExchangeTransaction({
      user_id: "1ba7be5e-39f6-4c36-b773-998144324a70",
      sender_private_money_id: "6a5a0bef-05d2-476f-8850-443c9e7e9011",
      receiver_private_money_id: "25c8bc0b-c8cb-4f55-a77e-302f23022409",
      amount: 1838,
      description: "a3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF",
      request_id: "ed596f8c-6135-49a3-96d1-88cf7f197bca"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zwWTQtwhgEUQrpqVtFI20RqU",
      content: "84w",
      request_id: "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zwWTQtwhgEUQrpqVtFI20RqU",
      content: "84w",
      request_id: "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO",
      callback_url: "L"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zwWTQtwhgEUQrpqVtFI20RqU",
      content: "84w",
      request_id: "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO",
      private_money_id: "75eada7d-140e-4d98-a0bd-73a8e125323a",
      callback_url: "BSZr2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check BulkCreateTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new BulkCreateTransaction({
      name: "8zwWTQtwhgEUQrpqVtFI20RqU",
      content: "84w",
      request_id: "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO",
      description: "20xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVCl",
      private_money_id: "c2881e59-c991-4d49-9ab6-29113a312142",
      callback_url: "4Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransaction({
      transaction_id: "f4301f43-99ed-4731-abb5-53b3f8bff1f0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "a10018c1-5477-48e9-9ee4-0073c832b9cb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "a10018c1-5477-48e9-9ee4-0073c832b9cb",
      returning_point_expires_at: "2020-03-16T06:40:13.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new RefundTransaction({
      transaction_id: "a10018c1-5477-48e9-9ee4-0073c832b9cb",
      description: "ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkj",
      returning_point_expires_at: "2022-11-10T16:01:07.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new GetTransactionByRequestId({
      request_id: "6e866063-e161-4767-bc03-44e7ed49b031"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032,
      done_at: "2024-02-04T18:10:05.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 2', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032,
      request_id: "76ff9e06-875d-45b7-ae10-d8d427061419",
      done_at: "2021-10-27T19:39:03.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 3', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032,
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "eb33f579-4dc9-4274-b347-6e8b9361b3f2",
      done_at: "2022-11-13T17:59:35.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 4', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032,
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}, {"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "2fb143d5-b993-43d1-920c-7769fd077b79",
      done_at: "2021-03-24T08:42:43.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateExternalTransaction | 5', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new CreateExternalTransaction({
      shop_id: "c2422778-97b0-4e25-92a1-4a4480f5d4c3",
      customer_id: "6631f3a6-4804-48f9-b43c-640d2ba2c473",
      private_money_id: "6b565268-6e58-4d83-ac82-58fcf8dd3dff",
      amount: 8032,
      description: "cmsaOa8T2aG0PP6tnqH",
      metadata: "{\"key\":\"value\"}",
      products: [{"jan_code":"abc",
     "name":"name1",
     "unit_price":100,
     "price": 100,
     "quantity": 1,
     "is_discounted": false,
     "other":"{}"}],
      request_id: "6c6f55ee-630a-4375-af9c-629341d52a55",
      done_at: "2024-07-09T01:56:25.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "35b13890-f5cc-4b0e-8f92-50e9da47ecfa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RefundExternalTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new RefundExternalTransaction({
      event_id: "35b13890-f5cc-4b0e-8f92-50e9da47ecfa",
      description: "vfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetExternalTransactionByRequestId | 0', async () => {
  let status = 400;
  try {
    const response: Response<ExternalTransactionDetail> = await client.send(new GetExternalTransactionByRequestId({
      request_id: "350c462f-a6ff-43a4-b943-97943212ad8b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      description: "ltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transfer_types: ["exchange", "coupon", "expire", "payment", "transfer", "cashback"],
      description: "54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoyS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_types: ["cashback"],
      transfer_types: ["campaign", "coupon", "expire", "topup"],
      description: "EWYebt4RUGRqT3wcuceySCabxrgTX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      is_modified: false,
      transaction_types: ["topup", "exchange", "expire", "transfer"],
      transfer_types: ["cashback", "payment", "transfer", "expire", "exchange", "topup", "coupon", "campaign"],
      description: "BS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMB"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      private_money_id: "ddefb486-a8d3-4e5b-80e8-a355ff26677e",
      is_modified: true,
      transaction_types: ["topup", "transfer", "cashback"],
      transfer_types: ["exchange", "transfer", "topup", "campaign", "expire", "cashback", "coupon", "payment"],
      description: "bIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      transaction_id: "cc4ff8ab-4dda-4b2d-8e4a-a118159c5ef4",
      private_money_id: "7c21e23c-b1e6-4704-b64c-54ac0686a0ba",
      is_modified: true,
      transaction_types: ["transfer", "payment", "topup", "cashback", "exchange", "expire"],
      transfer_types: ["campaign", "payment", "exchange", "topup", "cashback", "expire"],
      description: "xGv3INa5f54YI1Ph3OUBAsVaG6T"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_name: "K3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUru",
      transaction_id: "2e43c3ca-a8bd-47f8-a994-5fb1f32c6311",
      private_money_id: "a9e1a8d3-d6d4-41a2-b157-84d8df5c1374",
      is_modified: false,
      transaction_types: ["transfer", "payment", "cashback", "exchange"],
      transfer_types: ["campaign", "coupon", "transfer", "expire", "topup", "exchange", "cashback", "payment"],
      description: "q1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      customer_id: "c8014023-9e67-4e0a-944a-889b0f5b432e",
      customer_name: "ltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0Nmt",
      transaction_id: "3c24753d-b578-4372-a06f-62cbe1ec8109",
      private_money_id: "7e556056-8c3c-49dc-956b-fb26ab15433d",
      is_modified: true,
      transaction_types: ["exchange", "expire", "topup", "transfer", "cashback"],
      transfer_types: ["expire", "topup", "exchange", "campaign", "coupon", "transfer"],
      description: "oBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_name: "u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjngl",
      customer_id: "e1650d8c-4d4a-4ea3-8363-ef800cba2bd3",
      customer_name: "ZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVa",
      transaction_id: "e306998f-f253-4893-b94a-d83feae7dcc0",
      private_money_id: "fc0a3009-3e79-48e4-8e04-920a89c0e1f0",
      is_modified: true,
      transaction_types: ["payment"],
      transfer_types: ["topup", "transfer", "expire", "coupon", "exchange"],
      description: "3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0F"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      shop_id: "c8176166-ec1f-49b5-9c21-aeee25354903",
      shop_name: "ebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY",
      customer_id: "45e44cfb-6b8d-4d96-b0a5-c743d6b252cc",
      customer_name: "cfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcG",
      transaction_id: "fd6f07a7-b84a-4124-a026-46072c485deb",
      private_money_id: "ea4e99c9-764a-4667-8403-7452cff630cd",
      is_modified: false,
      transaction_types: ["payment", "transfer", "expire", "exchange"],
      transfer_types: ["expire"],
      description: "3KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      per_page: 3414,
      shop_id: "67654e3f-b9fd-4540-b005-67c7bdae0552",
      shop_name: "2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJe",
      customer_id: "9c7e72ce-9e99-46ce-8094-8676f95241d5",
      customer_name: "0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUr",
      transaction_id: "719a092d-0ef6-4cf0-a50a-22ceae10f8fd",
      private_money_id: "17f0c238-4c36-4907-9ae6-9e9ecd771016",
      is_modified: true,
      transaction_types: ["expire", "topup", "exchange", "payment", "transfer"],
      transfer_types: ["expire", "coupon"],
      description: "JZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      page: 4977,
      per_page: 4572,
      shop_id: "20b8f1e8-a5fa-426e-b471-3e62da165cd4",
      shop_name: "2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTc",
      customer_id: "6ecd20a6-a52b-44ee-843b-c4a1424ee89f",
      customer_name: "DBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFb",
      transaction_id: "ff9a9d4b-8138-4fae-b145-d0d21395defb",
      private_money_id: "9754a25e-8b3e-4fa7-b1cc-3d7b37f9f6fb",
      is_modified: true,
      transaction_types: ["payment", "topup"],
      transfer_types: ["payment"],
      description: "eIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2k"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      to: "2023-10-09T23:04:10.000000Z",
      page: 2708,
      per_page: 3530,
      shop_id: "c3cc3490-2e44-48c4-9093-40952934a934",
      shop_name: "LU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr",
      customer_id: "3875005c-50b0-4d62-94e2-a784306aeecf",
      customer_name: "79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhl",
      transaction_id: "769cc183-033d-4b3a-a213-ce71c2277561",
      private_money_id: "ffede34f-c0c5-4b89-986c-18f6d6dc6b3b",
      is_modified: false,
      transaction_types: ["payment", "expire", "cashback"],
      transfer_types: ["expire", "campaign", "coupon", "payment", "topup", "cashback", "exchange", "transfer"],
      description: "WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfers | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfers> = await client.send(new ListTransfers({
      from: "2024-03-30T14:29:20.000000Z",
      to: "2021-11-18T01:25:23.000000Z",
      page: 8601,
      per_page: 9889,
      shop_id: "c6bfc4f2-7bde-49c9-9542-c9b1d787b570",
      shop_name: "aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swt",
      customer_id: "2fbcc373-045c-4e67-9bb2-3d06d825f0ce",
      customer_name: "JBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42",
      transaction_id: "a935ccce-0592-4d20-bbce-9598bb026337",
      private_money_id: "c02f2f1f-cbea-4ee0-bf10-38d7b41b802b",
      is_modified: true,
      transaction_types: ["transfer", "expire", "topup", "cashback"],
      transfer_types: ["topup", "coupon", "expire", "transfer", "campaign"],
      description: "jYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZC"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      to: "2020-05-29T04:19:26.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      from: "2021-10-01T14:29:27.000000Z",
      to: "2021-05-18T07:31:38.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      description: "G6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yh",
      from: "2022-12-27T01:27:04.000000Z",
      to: "2023-07-28T15:04:59.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transfer_types: ["topup"],
      description: "NPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzL",
      from: "2020-10-10T17:42:36.000000Z",
      to: "2023-05-16T20:02:33.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      per_page: 585,
      transfer_types: ["coupon", "campaign", "topup"],
      description: "65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU",
      from: "2020-08-25T21:13:02.000000Z",
      to: "2021-03-18T22:30:25.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      prev_page_cursor_id: "7d0920f6-720f-4105-8162-394c7c4d68ba",
      per_page: 545,
      transfer_types: ["topup"],
      description: "5XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT6b0IY83jSy",
      from: "2020-10-12T14:22:33.000000Z",
      to: "2022-01-22T16:08:59.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      next_page_cursor_id: "54747b1a-7080-4539-8a90-8280fd0bd943",
      prev_page_cursor_id: "136b2406-c54c-449e-aaab-6471b72a5238",
      per_page: 378,
      transfer_types: ["coupon", "transfer", "topup", "payment", "campaign", "exchange", "cashback", "expire"],
      description: "oBnLVw5NxHP7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6uXM4yE9kd7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cH",
      from: "2020-03-09T18:52:48.000000Z",
      to: "2024-03-17T22:00:40.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_types: ["exchange"],
      next_page_cursor_id: "cc9cf376-5ab2-4abb-b764-29291e934448",
      prev_page_cursor_id: "44f02745-af2d-49b8-80f2-e5650fe93bdb",
      per_page: 617,
      transfer_types: ["exchange", "topup", "coupon", "cashback", "transfer", "expire"],
      description: "YS2",
      from: "2024-02-23T19:18:06.000000Z",
      to: "2023-10-31T04:25:41.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      is_modified: false,
      transaction_types: ["transfer"],
      next_page_cursor_id: "3b526462-ce07-4276-a3d1-e2baddddfa76",
      prev_page_cursor_id: "f7341f83-54bb-4e2f-987c-84d9f0501e6b",
      per_page: 66,
      transfer_types: ["topup"],
      description: "CWNKDP1enxAKZBD2FhNoF",
      from: "2021-04-25T16:39:23.000000Z",
      to: "2024-05-08T13:19:24.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      private_money_id: "13370493-74da-4d2f-8ccb-15c9c7709f16",
      is_modified: false,
      transaction_types: ["transfer", "topup", "expire", "exchange"],
      next_page_cursor_id: "947dda8a-d99d-459d-bb85-4d9ea7f687d2",
      prev_page_cursor_id: "86103ec3-e3cb-4678-b8c4-c245d021922f",
      per_page: 915,
      transfer_types: ["coupon", "topup", "cashback"],
      description: "yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObUNQZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9Z9lrbTGfh4QbdPS2DfLew9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcx",
      from: "2022-02-15T13:49:31.000000Z",
      to: "2023-06-20T09:27:12.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      transaction_id: "48edf62e-d67e-41b2-a800-d3646fd5f78d",
      private_money_id: "938cec69-ae12-4e4a-afd7-a82fb8d10273",
      is_modified: true,
      transaction_types: ["transfer", "payment", "cashback", "expire", "exchange", "topup"],
      next_page_cursor_id: "2f21bc1f-3fa7-448a-a529-5aefbe145b41",
      prev_page_cursor_id: "b6e10ff1-45f6-4967-8667-1e30ca09a488",
      per_page: 50,
      transfer_types: ["expire", "transfer"],
      description: "RTNwobRsB1baR1aePdc9fGHLcwyelAg5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLlo",
      from: "2023-10-03T06:27:25.000000Z",
      to: "2021-01-16T09:42:41.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 12', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_name: "4TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwh",
      transaction_id: "ecc0df79-3935-4684-8806-5a2ae4711910",
      private_money_id: "aef5cb52-fbc9-464a-8447-fb7f7ff8832f",
      is_modified: false,
      transaction_types: ["transfer", "cashback", "payment", "expire", "topup", "exchange"],
      next_page_cursor_id: "ff6e7971-b082-4855-b394-738cd2141f4c",
      prev_page_cursor_id: "717c1139-762b-448b-9b1b-4c6698c28df2",
      per_page: 901,
      transfer_types: ["topup", "exchange", "expire", "payment", "campaign"],
      description: "gz3O9wlyQ0TWfR4Gx21zM7WIQGDsPsJyAShBlCJPjtVj6RA58jW2j8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yI",
      from: "2022-07-08T09:10:52.000000Z",
      to: "2020-10-17T18:22:36.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 13', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      customer_id: "f54cf9ab-062a-4148-a0cf-c1f46a81e630",
      customer_name: "XiM6Qkur8SbZd3wcuCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtC",
      transaction_id: "a804d396-c0bd-4bc8-83fb-80edddd57010",
      private_money_id: "b47058a1-f720-4b83-b700-1b83dcc4cd16",
      is_modified: false,
      transaction_types: ["payment", "cashback", "exchange"],
      next_page_cursor_id: "7c7d68a8-376d-4437-8682-f62044e6a567",
      prev_page_cursor_id: "c86ea739-3b9b-4192-905c-f0b8ef7b1459",
      per_page: 1000,
      transfer_types: ["expire", "transfer", "coupon"],
      description: "GLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHI",
      from: "2023-11-27T07:31:22.000000Z",
      to: "2021-02-11T01:41:00.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 14', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_name: "mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FRWe6zLcwMHaeJGFXqwAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFU",
      customer_id: "b5dcd9ef-b402-4012-98b9-1f028b885ec2",
      customer_name: "hqQxq9FR8VF2gH7EAnlFEgMm",
      transaction_id: "7f98df29-acf9-48e9-b8ea-079a4bfcc7ed",
      private_money_id: "5aaff583-e5be-4ac2-9605-55604b33fb24",
      is_modified: false,
      transaction_types: ["topup"],
      next_page_cursor_id: "2f5b5517-4fe1-483a-8c2c-a7766d007d72",
      prev_page_cursor_id: "631887cb-cc5c-496f-a140-1fd26ecbd8f9",
      per_page: 925,
      transfer_types: ["cashback", "exchange", "topup", "transfer", "payment", "campaign", "coupon"],
      description: "VT4AzeoZEOYuu1RyqlWw",
      from: "2023-01-29T21:07:08.000000Z",
      to: "2020-02-27T08:03:08.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListTransfersV2 | 15', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransfersV2> = await client.send(new ListTransfersV2({
      shop_id: "2b649ca6-2385-42c3-9b1d-664eecd9a056",
      shop_name: "zTDDCUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0Yor",
      customer_id: "cf3440c4-92c8-440f-9e9c-4593e20fa8a0",
      customer_name: "LBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLqhFbA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd",
      transaction_id: "cd1d9809-2938-4389-b77e-12c91052581a",
      private_money_id: "f80cd24c-87d7-4cb6-953d-cb6272f31cea",
      is_modified: false,
      transaction_types: ["expire", "payment", "cashback", "topup", "exchange", "transfer"],
      next_page_cursor_id: "f2b6befd-7cee-4b44-94fe-be92233983a3",
      prev_page_cursor_id: "09c8bc56-c05f-4b6f-9fb6-e6eb3beaef77",
      per_page: 776,
      transfer_types: ["coupon"],
      description: "E996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0Y",
      from: "2024-04-25T05:22:52.000000Z",
      to: "2023-04-25T22:13:54.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "973b4b65-efd6-4cae-ab6b-1e899146a2a6"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "973b4b65-efd6-4cae-ab6b-1e899146a2a6",
      code: "LQLhc7hbuv"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "973b4b65-efd6-4cae-ab6b-1e899146a2a6",
      name: "B8S8",
      code: "H"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "973b4b65-efd6-4cae-ab6b-1e899146a2a6",
      per_page: 2236,
      name: "eqOx",
      code: "cOR3TFR9a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListOrganizations | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizations> = await client.send(new ListOrganizations({
      private_money_id: "973b4b65-efd6-4cae-ab6b-1e899146a2a6",
      page: 1190,
      per_page: 9401,
      name: "MUMtt7RdI",
      code: "KeKSc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 0', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 1', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      contact_name: "Cvc4A5HlCo2a7OllUlOCGYapVIyu0AtoOYT3d8xXDGe31wijgcuuWSuuP7qXIDVYzNjNiLWADYEWxDRpy5o7rEN4eiDqYJVEg5UZOhJAbHwNLgu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 2', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_account_holder_name: "｢",
      contact_name: "ky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 3', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_account: "37654",
      bank_account_holder_name: "7",
      contact_name: "JOyIcULWzrNeMACItmOkY1pUONfZUthj8CTdPwk2g7DYhFuXWtax2gH7mosTYAgSjd1Lu4N1G4DllEfWLsx2f1PjIk5LFEcZYZR1K1ULgGU5oSrsDCn36n92LJoBnxVWA0Bmx0P3sSh52djDx2E8q2Tl06IVYw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 4', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_account_type: "saving",
      bank_account: "12",
      bank_account_holder_name: "2",
      contact_name: "g9D4jd9Fi73fT2ekfbMypSoZArmvOOmVqy7LHITpCScM5po6zQrUB5yHtoGfycJYa2GIKQCGBFwcqnjKtXS5ctb0sUDamQiJFavfIlsQjs1Uxv98uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BTtK3VwbUSgXIGfDPEPwHED0KtmDzxL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 5', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_branch_code: "254",
      bank_account_type: "current",
      bank_account: "36599",
      bank_account_holder_name: "(",
      contact_name: "UKhxLe1FMHoh3041czvU7tiTGNYlDyRk3aGMps1HN2Oi8GzWre6yIHCg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 6', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_branch_name: "e3KvTMWtvAOdqc6t4",
      bank_branch_code: "",
      bank_account_type: "other",
      bank_account: "76902",
      bank_account_holder_name: " ",
      contact_name: "k2sqQhlAUNF0Kr6ekdB7WSGlsT24mzzvf0uixfzgMS7DAxRVXjpoYOkLYbJM46YGKDJVQANtfUdHVcsouxX3xI9CHdZGkENDSkRyfWKAxjQWjCB8nFcqmENfDor1zgwF9x3xZsR5bLJPhH3FEHzbfU4cD6smAeqngifjNikqDE3OudXpYhNwFWUAKOnWlhna0lYNQbEnbMVdbi9G5aE3q4g"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 7', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_code: "",
      bank_branch_name: "93gHJA1FfneXYRV",
      bank_branch_code: "216",
      bank_account_type: "current",
      bank_account: "52",
      bank_account_holder_name: "｣",
      contact_name: "WEkaIk3Nf304AeRoMBnYRrC4cXtKQ0a4OPrt2tro65RM4SYyWPQ4b5EvFhF0JaiWpiphXqNgzf5XFTYAHJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateOrganization | 8', async () => {
  let status = 400;
  try {
    const response: Response<Organization> = await client.send(new CreateOrganization({
      code: "qwdkkgvqZQ",
      name: "EwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHD",
      private_money_ids: ["ec95e83f-9d69-40a0-a220-13776af58397", "87e27238-66f3-4e09-8bf1-aa99bc7c37ff", "e6a64260-4416-4fcd-8a20-fb543b770c77", "48e6cb9b-588b-41b9-9c43-749d9c84f92f", "c814745d-3fc7-4b4d-ab85-1407592df606", "21d6af94-a0f2-4570-9d75-7a7055ec353e", "81a5986e-295a-48a6-9750-76408b8bd733", "f4fa202e-0174-4b2e-bb58-af4ce4becac7", "f6ae1f0c-88a3-472d-9fe4-882057442ac9"],
      issuer_admin_user_email: "4BQeMKNjNC@6v4L.com",
      member_admin_user_email: "dJ9q0nifAU@uGHU.com",
      bank_name: "FeGZi1JIa9NTrkMeAKNU2qNMrw4Jay2YBOful",
      bank_code: "5929",
      bank_branch_name: "FK5T7Dc8oOst1MM9PmjRD",
      bank_branch_code: "176",
      bank_account_type: "current",
      bank_account: "73",
      bank_account_holder_name: "1",
      contact_name: "O5Tt2uQGKACRqDnzgekX1v8dvD0ApeDNVXLZhDHmMPohPl8jvZE0kmWyBRnvtcRhoAfyfPvqbgkbgVyEBxJxS2dp5fON6g3h5b1QYmVCtk78JxdSgtNZkgpDcQrvPvYu9rBGsdWvnLspaw0X1BOuUcrgAIrlVAxUxxo"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      per_page: 9547
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      page: 8686,
      per_page: 4019
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      with_disabled: false,
      page: 7193,
      per_page: 3329
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      external_id: "OYFN3fJYwkLiuasNI3TQ4Ubb8U4Lo",
      with_disabled: false,
      page: 1552,
      per_page: 3451
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      email: "MVQ4l9Wdfw@N1GB.com",
      external_id: "XrbSDIYZ",
      with_disabled: false,
      page: 8538,
      per_page: 5482
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      tel: "03-225625",
      email: "0E243Lt7Q0@CkQG.com",
      external_id: "HLmFUomkHrvNClWFSWTgMn5wd60p6qorRSF",
      with_disabled: false,
      page: 3522,
      per_page: 2177
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      address: "hqoWmfQbT09Lp665rg0d7eGITtIklkYFTO7OJe9dSEOGALN8S7z1KForIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvRJLln3CmVmPz2bcH2xVBHTbiOHYbzW7EYCf76ToHcl8dtzcqD6rqwGDVRdojGjigHpZl8InH",
      tel: "0128-2449581",
      email: "gGfElkSct5@6tB3.com",
      external_id: "Q",
      with_disabled: true,
      page: 7745,
      per_page: 8410
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      postal_code: "198-5207",
      address: "yXQYOSshpGMCke10fApKjBHnAmdlKiUj9JqianI8FqIXqzelGZDONUAJfl2HMto7yaW0Gkt1pOBZosxcU6W1vFMKN952VUdQ3t63Wpysg20fNhPhFK8mUwq4sfxVOVqIgogobrlTBvrKruisPGcjRxKz0hnHtPEmOFzye10sMn1hLqgZ4Scflk2JdjznjOojFztUy",
      tel: "025-952-2770",
      email: "yS9B5htgNI@DpUp.com",
      external_id: "zKyj3BEvYp1",
      with_disabled: false,
      page: 5288,
      per_page: 9941
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 9', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      name: "uySIy9vMfjs9RSVIuRLJamUgod9vJRMh5laf7AaoLGt4pe6BC2Sel2QniqdOC9my1YOO8CjR0YFmv40UM5wZgue67e0YlrO8E3L7gW6pVOxZ4jRFNa6hoBOihdHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8FkE6WXDem2rgSzz35aQ4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL",
      postal_code: "816-1336",
      address: "4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9T54l9EXWThBhNBtq0Hlr5VUDcRjPWhcWE5Ed0Dp6qm5enNIYlp4WuULLQB3hzZG357PPnWlMQlOO65IFrI1BJMiWPv5dAbUBWta68v79KNgsodWT1kP64chZLEzZTeXAsCUOeSILicKJugPM",
      tel: "03-7477048",
      email: "5lpizelx6Z@w3AN.com",
      external_id: "kreMSnigb4Yb3t6kmvyhjD7Y1lgzqI",
      with_disabled: true,
      page: 4073,
      per_page: 3254
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 10', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      private_money_id: "c6a0544d-f3cc-4f93-b0d5-13702ef8cd41",
      name: "uRnJqWXlTPA3BNnPJo0CH10GQb96Jzcef7f3He1f0QYEkgJnc3iiJ3NDVFkNizSfk2HEbXxayxzM2cghdc2Ljaj2GsuiV9UsDnl2m8",
      postal_code: "7771898",
      address: "mlD5AgJ4dO8VEt3hyN01xWKpyfSJX1OiNUbqHXuSEWeM8VLmM8qznKIn9uBoqN3XKkwmXFnLL0vhZmz7rucmF8n8",
      tel: "0661-356-7684",
      email: "4mvXKC0yIY@DrOm.com",
      external_id: "Zvcf",
      with_disabled: true,
      page: 4898,
      per_page: 2854
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListShops | 11', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedShops> = await client.send(new ListShops({
      organization_code: "h-lirY-C-Aqh---Im1Jw",
      private_money_id: "3a74808e-7787-4882-ae59-c313abef69e4",
      name: "Jrs",
      postal_code: "768-7908",
      address: "irB5ccKSjPsnaJy0xSUaUZ3KYipGveNp11WiSr08uCzB0JSt7hZNL6cvcqBnhGnyRs1ZbgEX46DL0EY9D",
      tel: "02233029774",
      email: "ceHkpeJS53@rQYr.com",
      external_id: "ERvl0KriuN",
      with_disabled: true,
      page: 5046,
      per_page: 4051
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      organization_code: "-z-B-kU06azg5meu5-oZm02ZiT----M"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      shop_external_id: "xmBEPErY",
      organization_code: "iGnGU--B3g6CQRl-9w-J-4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      shop_email: "RvriMMqT8Y@2wPx.com",
      shop_external_id: "WWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct",
      organization_code: "1H-9-0vw--e2vqh0-"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      shop_tel: "0686588082",
      shop_email: "edAo6IB1Jw@I4Ht.com",
      shop_external_id: "HPlHFEuPGo3Gk",
      organization_code: "-sScpLT--l3-N"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      shop_address: "8epkaCTJpPbbkDn1ZrOBafUzNTBXIV1wGp1Rn3U4KQsAmdVQrUihNu2f4606Zw3XOf",
      shop_tel: "0179-11-332",
      shop_email: "qaG2p9irVN@MOOM.com",
      shop_external_id: "Eypf2sbMz5sG",
      organization_code: "-VsAf-Z6--674a3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<User> = await client.send(new CreateShop({
      shop_name: "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27",
      shop_postal_code: "046-0038",
      shop_address: "LoMele3ppOb8vOALeCaVZzJ21Wkjwh096vY0YkfqArkVOxtHaQbqrekxj6KVFbsIqYgBl99xXSIGv3Ovn3SH7ljqEdpqCcPOpWjivoOnvdw0Yvld3IeJyhTlRgTT2NxSiphZRlLoLjMmLSHQhe4tHPdlvKxC8QojNKN0zq",
      shop_tel: "0365-40-2058",
      shop_email: "IsHw9iaxaP@zoaD.com",
      shop_external_id: "v6U6SXLkHad9cOSRej1Twb2rvpiwJ",
      organization_code: "99s4-2d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      can_topup_private_money_ids: ["dcce315f-b75d-4d8a-a2d7-bf54d811acf0", "858c4786-e2b6-4fb6-af69-075bdbebcd47", "4218636a-1cb1-4b97-866c-28d26acc9652", "bf4ddf7c-702f-4a90-b958-e27eade269e0", "ce2d24a8-c4f5-407b-8d56-502cdec1c4fb", "b49877aa-e363-4ea5-b392-14b2f67f27bf", "b564977a-558b-48e5-85d1-67053a715351", "31671d62-0d7f-4dd1-9c2a-8ff74bbd3162"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      private_money_ids: ["a61be5b1-57a5-46ba-9b7a-11553dff8544", "c176bcea-8e81-4166-b921-ee2a0a670ec7", "07888f02-f470-469f-8013-09ceda0ab7a6", "9b808ede-a46b-4849-abe9-c302bb4d1e55", "be90d044-f75b-4c98-ae76-63f3a20de583", "02e384ba-90ab-4764-a530-6037edd0abbd"],
      can_topup_private_money_ids: ["61975b82-fb33-4dc7-b9bc-bc992baf89ad", "4f181a86-371e-4492-a212-914532d85de4", "0a36cb74-3723-4fb6-8747-b2815639014a", "800c3331-f2c7-43a2-986f-a535fed953e0", "3c81bd2e-0088-41ba-8fd5-9e50f857f684", "3e6f4da2-c72d-45ab-9f00-f606e6296a10", "5d819c26-09e9-41c6-adca-13aa72f645f5", "b025251a-4ebe-4e53-a372-e145caab20c7", "c74dc1e3-bf59-4cb5-89b6-599d5fe21176"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      organization_code: "-C4NW2-lp-y-ge7f5Nil9--5c",
      private_money_ids: ["53d9c527-dad7-4833-866b-9cd79641807f", "3added3e-959a-4469-8d39-acdaf1094468", "386e4949-19fb-4f3a-af6f-d18f52fd75ea", "246c5cd6-700f-4e5a-afc1-24f02d046b65", "21623f30-970f-4256-a306-840e7b90fcc1", "c2944358-17ba-4102-964a-99292d8c8fce"],
      can_topup_private_money_ids: ["429113fd-da05-438a-9b04-db9c2bcb1895", "7b87f493-5001-49ce-9020-12b83332cf27", "60a4fcb1-c009-4ccc-87c9-aefb536ecf8b", "37e0b234-92af-4cb4-b8a4-c68d0b751e27", "c2cc8abb-c67f-424c-b36d-782dda1c5723", "ace724a1-1ce6-4b28-b2c0-1bc63082dc0a", "609b06d0-549c-4110-b582-e0c5058bd53c"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      external_id: "OVKpPzDCyUBg3VaVg5lQKirhrBQImBbF",
      organization_code: "-qCy0-6Qi-2Eu-gw-HYu",
      private_money_ids: ["270f1533-b398-4c12-8bee-dfbdd5cc43ca", "918098f9-b1f9-4910-8e65-e0b793dc68df", "a5baeebe-17b4-4f51-9ca7-9215b4de44c0", "ab30f4b2-a297-4c18-bb90-4400a84f51e2", "c8b08476-c0a3-4cba-8526-83de622ce946"],
      can_topup_private_money_ids: ["99eed397-6ee0-4fc4-af81-bd6bc48a3601", "caaf65ae-3af5-4f25-af64-ba0c1156adfa", "68c06994-dfd0-4507-9fd3-38810804a9b7", "38b7981e-9550-460e-924a-67300ec6d1fd"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      email: "9whlF6CVlM@KFHk.com",
      external_id: "HEGRWUBVUZa1rmAxzFUF6",
      organization_code: "P-",
      private_money_ids: ["8c7d46d3-3f18-467f-a96a-4b8a600daa44", "ed8a4f16-96f8-4f74-b8f2-4267e97de3f3", "29784c37-bc2d-40e5-88fe-09307dbe535e", "90b4bce4-5312-4e1c-abe9-3edbe62b54c1", "69ed5fc1-f2e1-471a-b86a-81774aaaf1d8", "7095212f-e4b6-4c89-9da6-5929da76f9c6", "d197d8cc-b543-4942-9fdf-805b0b52ae31", "3edce63e-ad18-4858-86de-f4dd9016afec", "51201c76-217a-4605-8211-4461d2af427a", "2a1d33be-2e53-4fc3-8528-c23dc72335fb"],
      can_topup_private_money_ids: ["c2d4fb9f-b731-4be8-bd60-3ac523fc7c0c", "ef8f2447-5086-4da0-bcb2-db2780e079c5", "c3867c06-2791-476b-abdd-065e7e5e540c", "d15debd0-0532-4a0d-ae56-942545d41008", "a926f31d-6a49-4916-90f9-aa02547bc73e", "48a18b37-8d7b-4d48-be89-a085f1ee2557", "fde796b7-db24-4fc5-9ee5-91a70488dd5c", "cf62acb7-30a8-49a9-bef3-ba6b0eff43c2", "d3beb8b9-c73a-4edd-a008-7bbc7537621f", "345c0d12-b142-4029-8228-74b1531a389e"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      tel: "0335871",
      email: "30l6vspNWH@9u8x.com",
      external_id: "q2mxjIub5W9d4fa79SnOHSfjKk",
      organization_code: "0-L---u--n-6--ED9",
      private_money_ids: ["6fe2a41a-c9a5-4c85-9b51-1a56f3a4382a", "5a103506-7942-4106-8d06-e2b6b4616a82", "1ee4c331-8905-45b5-8253-3682b12dcacc", "ce27ae52-5154-4042-b49c-9ef0df91e49c"],
      can_topup_private_money_ids: ["9daa9bf0-836a-4f62-9e74-4c02af17e701", "8b5851b6-9517-429d-ab1d-b5d1cd633afd", "ea31d584-b21c-48ff-a0c8-5a17ba55870e", "cc0b6365-b4af-4a44-aea8-2b4b1de69cac", "e4b0b583-3981-4c78-9ed8-6296ac1c47e4", "b3ee081f-6bc5-4fe7-a68a-836029533db3", "ce16574f-c6ff-4d97-b8fb-c928745d48df", "a31d4647-846c-4ef3-9ae1-9d5661afcb24"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      address: "pjoQ6ffYAe6kpXiCTiSBUIe5iqIMOcjyqBKlSFGLuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb3ykYYV",
      tel: "044796154",
      email: "GYQa0QPCC6@0HT3.com",
      external_id: "9N8hkxoSQFYDUU0HuG332kYdREQC",
      organization_code: "7X3u--QRhnw-uws",
      private_money_ids: ["ff96f8fa-1aa3-4899-9a5f-dd7025556a15", "390ea6de-ee08-45b0-80e7-87aa0f144269", "14e7b178-3bf3-4304-8299-b24bd12b845a"],
      can_topup_private_money_ids: []
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateShopV2 | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new CreateShopV2({
      name: "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk",
      postal_code: "753-2948",
      address: "QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8HDeIrg38UDixRQOsOxJyiut30oRsSLi4FAWjvNFlMGhO7MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A7",
      tel: "047-0365719",
      email: "MQbpvWdRIf@0j2N.com",
      external_id: "Gpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvI",
      organization_code: "-kA-d-vVP24Hv5n4i--Ni-9-Jl-68--B",
      private_money_ids: ["5b22f3de-40f4-4db9-bee6-5bcd910fc4df"],
      can_topup_private_money_ids: ["4799467f-8c8e-4e32-94e8-ea642c57b6fd", "3e93a12c-0980-4397-861b-c6d2adad19ff", "deea532f-a234-4cdc-9a82-8eae337654c7", "bee6e6ed-b31d-49c3-b39c-fb6c375ec5d9", "bfd7fa9a-5453-46dc-a46b-a27e07ce50d2", "fd5eae2c-fde4-44bd-89c8-2e6c8c30a3c2", "61a7f96f-a5b7-4490-a95c-884da1852dc7"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new GetShop({
      shop_id: "94aa6ff3-6fa8-4397-ac2e-4191001a3a51"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 0', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 1', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 2', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      can_topup_private_money_ids: ["b31c69d0-dc36-4ee2-afca-703fa9e9afa3", "ad6ccbbd-0c2c-4518-93bc-d05f6be860e0", "bb84d1eb-9cc1-4ea4-8dbb-19cee0da1545"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 3', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      private_money_ids: ["fb4633d7-2a5a-43b0-b8bc-a0875a2fd7bd", "3bb16283-5c22-4a01-ab6f-3f9be2a19735", "4412ef2c-69ff-499f-a4f2-19a8adf5dbbf", "4edda3f4-b3d8-41e4-9f28-3feb1abe756a", "a2aaba43-cd0b-4c5a-b606-054bcfb0c6de", "4440448f-3794-4e15-9058-9114b64f66ad"],
      can_topup_private_money_ids: ["8ffb3e4d-86f8-44b1-ab7f-2f3d07e56a48", "6a29f496-ff14-47d4-963d-9b86bc6376e2", "840b2470-0b21-4eaf-92d2-0f85346dbca1", "64d68188-88f8-4e37-b909-0f87c1e8cd9f", "ff679cae-1a71-47ef-81c6-5ad45501dd2f", "5c144aaa-1e28-41d6-a9d7-22de755aecc7", "0a6d636b-ff0d-493b-a23f-6637f42d7b23", "8b362472-c602-43f3-8b11-631baa686ee7", "028cd575-fe40-4fb2-a9e8-f280168cb8ef"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 4', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      external_id: "xDsfU3TC1A8fV5nkzyaMo6HNFjN16Mt1N",
      private_money_ids: ["6fc69707-b9ce-4d2e-88de-a5fc1c20eaa4", "6e9bebfb-de86-4ad4-b092-bf978165ffcc", "01ee595b-0709-4396-93ee-8dd7ca20ee9b", "824328f9-a320-4fcc-8349-59e9208fa5e1", "ef731053-5c6d-45f8-82a1-46cf83be1e19", "00a528e9-c261-4ee2-b981-bdc3d4377e2c", "269db146-c9bd-40a6-9bc2-1e17d2144255"],
      can_topup_private_money_ids: ["1b60ec80-cc7e-44eb-8d4b-52aade32a909", "683c911c-e277-45cd-b6fa-0b10cf7582d2", "2be7f468-90a8-4f8f-aaae-2ffcd0a999bd", "6e5bfc40-8eae-48da-a4aa-c4ff7e0cda43", "976d8a9e-02b9-470c-90c9-7b8bd03331e2", "54a9d3f8-a79b-49ff-9249-1e6fea4a79eb", "97cb9e09-f43d-42ae-b215-85d34ab5b8cd", "81a1fdbe-d904-48ab-a3c1-a8aef698cc24", "b19369e5-a7b6-4e19-84dc-319178cce90c", "60b09bdf-e798-4e0b-89ac-c6cc52986970"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 5', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      email: "fhwjho9qAj@035e.com",
      external_id: "2B0e1zQxL4LWrEkUrKUADYaUMS4V1xY0z6",
      private_money_ids: ["d4d9610a-1ab9-4e52-bc6c-c7ffbd99782a"],
      can_topup_private_money_ids: ["c2e75275-db71-40cf-8229-3d7f24fc1449", "c6326dce-416d-43b4-9122-c73773e18737", "a59e9d5b-702f-4cc2-8a0d-b0286c51ea79", "743b7271-afe9-427b-aafa-abab8d23aa86", "1f840356-cfd1-4485-af16-7007d9dba665", "1d4d183e-d10e-433a-8632-9cdc6c751e60", "37dfec06-f6d8-42bd-b92a-4f012f95706d", "784d2a2b-7ed1-491e-8a4a-4069a0b84fc5", "a255d145-1a4c-432c-94d6-96fdac0a94ba"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 6', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      tel: "036-41810",
      email: "sn1Jp9ctBv@Xrxj.com",
      external_id: "g2Jofbfd8lI7ca3oyQQIsU",
      private_money_ids: ["229bccba-38f2-40c3-8d1f-a21f5cd5e904", "a826f0b2-1310-4020-85da-162b6c63e80e", "a931ac4d-b9f0-4ac5-b418-611599c53457"],
      can_topup_private_money_ids: ["e5aedc00-f9a5-4313-9bef-d972ebf5c9fb", "b6a3a834-21a2-40c9-8144-4e540c040048", "6eb08096-d58b-435f-a454-3ed0f92c5073", "9dbb2310-47ea-4a68-8d2d-885598824c24"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 7', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      address: "WbuhnbIUFlfvobOclFXKfvdQivs3hjtD1VYnThEQOLtlkRPIAeI3C1kLwoSJ0t0xwzgZ3SAsjpAuPQwOMExC1w6ifl9ZUstqj7jJ1Xazd0M0QE8si7WktomTSIs3sss0bSZ1cR5rMDg0iBD2et6R89vRehYIZbMh6MfShA8D4Ev7O7TGT70LQ2epxhXvfJrqwCwzvGv5tXB9341AdQSvr2jD2CPBEg6qDXhSH8hafJy0sDTnMPtA",
      tel: "06404524134",
      email: "8JZcqIcqZB@2nkh.com",
      external_id: "unnh29qWQZz14xB891rPV7F",
      private_money_ids: ["330fe064-7b87-4b21-8844-6a809ff31b65", "130e4012-1e10-42de-9bc2-feb651572531", "70117676-7163-41ff-ba24-80a231d2e4cf"],
      can_topup_private_money_ids: ["74275e60-7e9d-44b1-bc0a-aa757b9715bf", "98fa8dce-3f20-441c-8802-dc42f4eb1394", "4adcfca1-cd41-4064-b200-949b236a9dba", "da151a7c-775f-4236-9a0b-81fed1b625ec", "4aff2fbc-31ff-48e6-997a-416207c9ace6", "eebfc1f1-389d-40cb-ac6e-8bfffea59a73", "6abc231e-fd47-4eb4-bf2e-3e30873c1003", "1cd8f3ac-ecf7-45da-af82-823013980552", "df7d3e02-8d80-45db-9404-e6390aa62230", "152b702d-66ed-4dd4-b680-fe7c47425f39"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 8', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      postal_code: "9159696",
      address: "Bc0n5yxxXvKDa0c2v5NvERR1ovUoSMxuwois43hKOtAoX7opuae7lO58Ae6hTnrFSjbB1hiRjTNSU46DKPvyktKcWCyKm4tG2FzeWXxPN6RiMVhZmmGj0TMjPFLM0DLdwVX1nfPZtzGunVJbtCnsdFVcjFxpkr7nBijaa4uqZKlbpHQT4mZ",
      tel: "078-521940",
      email: "MJt8otXLMw@iqJK.com",
      external_id: "isPTXvJ9APWVf0",
      private_money_ids: ["92992ac0-d5a1-495c-8dee-f5eb89bf5f49", "63c3c6b2-8ae3-4c70-9be9-08da6506d272", "6b4fe55f-ca77-482f-a874-e8e0f93f1982", "10a8cb90-52fd-4930-9d8e-49a336045f1a", "d49d075e-133b-45fe-9ab2-03e421ce3a68"],
      can_topup_private_money_ids: ["f42f6a9c-3382-4873-8990-bf189801a753", "4286dffb-a63a-410c-b88f-69185e691ece", "69340d9f-d0ba-4dbd-bea2-27d828808784", "a51c2ea7-df42-4bf5-8089-f5e81acec04c"],
      status: "disabled"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateShop | 9', async () => {
  let status = 400;
  try {
    const response: Response<ShopWithAccounts> = await client.send(new UpdateShop({
      shop_id: "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846",
      name: "xPxLgPF7PH9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwNVNkX1wbtHq7h4XHkBbxR0",
      postal_code: "254-9276",
      address: "S2N5S6EEO5Bp0TaBrmndiCNxXXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11T",
      tel: "0803-6788748",
      email: "OxFwqhkpZV@aDhp.com",
      external_id: "Pp5bfKV",
      private_money_ids: ["5b916e74-2639-415d-aac4-85d01ac82bd9", "1adab1ca-759d-4941-ad03-88259ad990d6", "8a7edefa-7f56-4080-b69d-929559dfad03", "56554176-a4fc-4a79-898a-022549ecb082", "a6d07e10-80b6-48de-a493-7c114d74d5f9", "55cbfa77-bfe6-46fd-9d70-550fb0e357a9"],
      can_topup_private_money_ids: ["38663f4b-6c69-4f27-a3ec-14bd942323ea", "3d16e328-5cb5-45bd-a0fa-a53e1991dc67", "72e207b8-5670-46e0-aeb5-3cb7a367a504", "c86cee22-97eb-4aba-ad46-c1b011077316", "a443107f-c6bf-48a8-a8c4-6a0cbd15b459", "64681762-cfd0-4acc-988c-456a0cf82f01", "91708575-69db-4777-83f2-7970ec98f3a5", "c2a01f65-2c44-439d-bca2-89b084495808", "06e3e241-1aa1-4abe-b949-68c4bc615459"],
      status: "active"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      per_page: 6737
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      page: 8245,
      per_page: 5538
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneys | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneys> = await client.send(new GetPrivateMoneys({
      organization_code: "OTg-1wn4-v-Swg5-l",
      page: 2357,
      per_page: 2440
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2",
      page: 3575
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2",
      per_page: 786,
      page: 9388
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2",
      from: "2021-07-08T02:56:08.000000Z",
      to: "2023-06-06T23:02:57.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2",
      from: "2023-06-27T10:38:34.000000Z",
      to: "2022-11-02T13:31:55.000000Z",
      page: 2674
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedPrivateMoneyOrganizationSummaries> = await client.send(new GetPrivateMoneyOrganizationSummaries({
      private_money_id: "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2",
      from: "2025-05-13T01:22:33.000000Z",
      to: "2022-12-20T19:43:54.000000Z",
      per_page: 3692,
      page: 7864
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 0', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b0ef9f12-9460-4bbe-a922-37c750bbcd01"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 1', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b0ef9f12-9460-4bbe-a922-37c750bbcd01",
      to: "2023-05-17T04:25:38.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetPrivateMoneySummary | 2', async () => {
  let status = 400;
  try {
    const response: Response<PrivateMoneySummary> = await client.send(new GetPrivateMoneySummary({
      private_money_id: "b0ef9f12-9460-4bbe-a922-37c750bbcd01",
      from: "2022-12-18T18:44:19.000000Z",
      to: "2022-01-12T23:51:33.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      per_page: 5573
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      page: 4002,
      per_page: 511
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      to: "2020-09-10T16:31:38.000000Z",
      page: 3763,
      per_page: 629
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      from: "2022-11-21T17:05:06.000000Z",
      to: "2023-03-02T02:22:10.000000Z",
      page: 6317,
      per_page: 9415
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      is_modified: false,
      from: "2022-03-16T05:50:24.000000Z",
      to: "2024-02-11T01:48:16.000000Z",
      page: 7936,
      per_page: 5716
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      type: "expire",
      is_modified: true,
      from: "2021-05-08T23:32:39.000000Z",
      to: "2024-06-08T07:06:40.000000Z",
      page: 1203,
      per_page: 872
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      receiver_customer_id: "92bb9347-24bc-4fa2-a73e-87e17252b237",
      type: "topup",
      is_modified: false,
      from: "2024-02-29T07:56:24.000000Z",
      to: "2022-06-25T05:33:58.000000Z",
      page: 2353,
      per_page: 751
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCustomerTransactions | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedTransaction> = await client.send(new ListCustomerTransactions({
      private_money_id: "aefe4c7f-4a96-4b47-ba1f-4a2671763c7d",
      sender_customer_id: "9a6dcfed-834c-4c4d-9ae6-1adc720116ee",
      receiver_customer_id: "560b2307-d12b-4b49-af1c-e15962b842d4",
      type: "topup",
      is_modified: false,
      from: "2023-06-18T13:29:53.000000Z",
      to: "2022-08-22T01:14:12.000000Z",
      page: 9855,
      per_page: 7711
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetBulkTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<BulkTransaction> = await client.send(new GetBulkTransaction({
      bulk_transaction_id: "840450ba-1c9b-4ef1-9283-ccbcb58e551d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "a780f0c8-b100-407f-a44a-97da1094b925"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "a780f0c8-b100-407f-a44a-97da1094b925",
      per_page: 1496
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBulkTransactionJobs | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedBulkTransactionJob> = await client.send(new ListBulkTransactionJobs({
      bulk_transaction_id: "a780f0c8-b100-407f-a44a-97da1094b925",
      page: 6410,
      per_page: 6511
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "7c6ab6c0-0844-4b18-888f-53c54776f2bc",
      shop_id: "f65dabd6-35be-43a6-a601-c82787ab55dc",
      amount: 1225.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "7c6ab6c0-0844-4b18-888f-53c54776f2bc",
      shop_id: "f65dabd6-35be-43a6-a601-c82787ab55dc",
      amount: 1225.0,
      expires_in: 5673
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CreateCashtray({
      private_money_id: "7c6ab6c0-0844-4b18-888f-53c54776f2bc",
      shop_id: "f65dabd6-35be-43a6-a601-c82787ab55dc",
      amount: 1225.0,
      description: "BtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZRhGDMxuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1PUQiuV",
      expires_in: 3968
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CancelCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new CancelCashtray({
      cashtray_id: "a1e90ffa-b03a-4e8f-bc92-8264659cbd0d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<CashtrayWithResult> = await client.send(new GetCashtray({
      cashtray_id: "5de26254-9b80-4026-965b-ac60aac618a1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 0', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7a7615b2-7e06-4690-be59-d1d6f8b72656"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 1', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7a7615b2-7e06-4690-be59-d1d6f8b72656",
      expires_in: 7119
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 2', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7a7615b2-7e06-4690-be59-d1d6f8b72656",
      description: "gkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2ADoyNq2PW9ePZH1V16DlcE5mr4I9qCPq1klPYIi4fgZzpFf9vCRDU8J59OtcokEMMVhm",
      expires_in: 2764
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCashtray | 3', async () => {
  let status = 400;
  try {
    const response: Response<Cashtray> = await client.send(new UpdateCashtray({
      cashtray_id: "7a7615b2-7e06-4690-be59-d1d6f8b72656",
      amount: 8411.0,
      description: "iBoGU1OxUmIl7jlWxrfEKMQ8FCs062PLb59yfzniw8Z7TrjWh0BQdrr7bOC0AUfJnZnSogxeCWxbc4wl0P2Dqh3DSK23Mk8m6Cln0nexx5CEw583J2WEBiiOFuwneTfWH1pqqlIhFKkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQ",
      expires_in: 3132
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7",
      per_page: 48
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7",
      page: 2839,
      per_page: 34
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7",
      available_to: "2023-01-03T16:21:24.000000Z",
      page: 6621,
      per_page: 23
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7",
      available_from: "2023-08-15T08:17:07.000000Z",
      available_to: "2024-11-27T08:40:33.000000Z",
      page: 3440,
      per_page: 13
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCampaigns | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCampaigns> = await client.send(new ListCampaigns({
      private_money_id: "7ffc57dc-0aac-461e-9a16-7e94e74d21a7",
      is_ongoing: true,
      available_from: "2023-01-31T09:01:01.000000Z",
      available_to: "2022-10-02T08:15:52.000000Z",
      page: 4017,
      per_page: 25
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["29dda31b-b43f-4939-83cd-5730eea9c2af", "8c61658d-d0de-493c-886f-f5cc155a950c", "f88eda2f-f491-4613-9f36-f461f57277bf", "a3fdb404-ea20-44bb-beeb-54b4480d0db4", "05fc9ba6-23d6-4fbd-9d61-6d06d5ed2fe6"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["7317227d-aa42-4300-ac6b-f05188d36c45", "63d1f095-52bd-41f4-a1c5-6087b3248d0e", "45f542b8-c4f8-412e-8f62-4f19e93ceb54", "dcd5eb70-bbe4-473f-8530-c925fccedad0", "32bd9f29-8fe9-4849-a42f-b5de593018de"],
      bear_point_shop_id: "028f3a0f-900c-4877-9d9e-649b8b392453"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["450fcb3f-f834-47a1-97f1-a23611042d13", "4c53e1bc-2e36-4da9-a93f-871423cc2a0f", "69593e29-cb05-4c32-805c-ffeeade8d65d", "8944cf58-62d7-4dbf-bfeb-ef7cb219baf6", "66d24ce6-33a1-4a16-b580-cd73cec38da9", "b36f5521-4545-4bb3-8613-d985f663f4ed"],
      description: "agRZXBvYQN11diTIPMylP78XJI2fkoYuaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFs",
      bear_point_shop_id: "f1a22544-d9ac-4a32-979a-83ad45f163e2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["7939dda5-f381-499d-b05a-fd3f8a67b088", "05722098-5966-4839-ab4b-fd0f9b7054ed", "52ff85fa-a9f8-4e16-b2e3-ea533703e2f6", "35841963-fc12-4e73-a766-a070c2e5c332"],
      status: "enabled",
      description: "NPWqo6XqlqrR9lgptmz4nyVSUDS2rGPI8RxpE3teEPiaYEeN8ncoL5boSBHerEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdDg4emZxxvv3UzyZmkPPeL3QSeHsz",
      bear_point_shop_id: "ef7a2d4b-ce61-4b9c-acb8-5455a314714a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["6704b400-a16d-4e5f-b6ea-9b89404b4554", "d44effc6-43bb-4755-b077-6ad72abb12fc", "ace5ccc1-8dcd-4505-bff5-66a86e5b1db8", "8be34139-750a-496d-84b0-acbfd026f388", "bbeeaea8-de54-4af0-8abd-c6f849e70e5c", "71a724ae-3c25-43d7-a203-26e3c45d7efa", "e01e42a1-f5d1-4c80-9593-9d79f5dd6c98", "cb700fd7-9461-4256-a7c2-980bc083f061"],
      point_expires_at: "2025-04-25T23:13:29.000000Z",
      status: "disabled",
      description: "Wptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNoucyBbEpxFX7PDggrznNWBV0p9BBTTp6AGpMMO3btHYGiB4Qalu6",
      bear_point_shop_id: "cc88af03-f29c-4000-929e-426359670168"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["e9372fba-ec3b-4ca2-8417-5bd6a5e268b2", "880e6120-18d0-45e3-9aea-5a0d3513c814", "5836580c-8bdc-4ca4-9e01-13b234b7ce63", "f53038ff-1bf4-4691-b6ed-835aba2d3afa", "9e18b688-f22f-49bd-967b-6c75247c5717", "a4ee250d-9f47-4035-b32d-55f125e5dedd", "7cee915a-53d7-4dd4-80d9-b37ffdb0ea02", "eb80c67a-c302-4210-a047-bb215c85b113"],
      point_expires_in_days: 6945,
      point_expires_at: "2021-09-03T11:08:05.000000Z",
      status: "enabled",
      description: "uuBX6LUUUBENz9R18rNQjTARxcKWcb1nyLLVIf7PJ4P",
      bear_point_shop_id: "c064f2cb-38db-45c9-9997-f1d251891cc1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["ffa8685d-d955-4943-b5dc-f9936d30e5d1", "4cb2b17b-6b79-45e3-9767-c91862c78646"],
      is_exclusive: true,
      point_expires_in_days: 6492,
      point_expires_at: "2021-04-22T15:56:04.000000Z",
      status: "enabled",
      description: "dRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9nOtCiuSxp7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbipC8utokXPq016",
      bear_point_shop_id: "85545663-6f05-438a-afdd-9913895b01f1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["66e88466-a8bb-483e-a9c1-85936f579280", "d3f237a8-7713-455e-8ba9-1c29782607d5", "14eb34d7-8e06-4b27-9878-9e91f086b0ff", "29926623-5746-459d-9f2b-b9d2b6d8a27a", "4e481ea4-ae0f-4b3c-913f-c0cedd7ea3b5", "e5e90315-343d-498d-85e6-8fa85818fea4", "9dd3c46f-cdff-4ebc-ac14-677567749cbc", "7151ddba-3e9f-46a9-b1d6-1749a162cd9e"],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 5453,
      point_expires_at: "2025-09-03T06:59:57.000000Z",
      status: "enabled",
      description: "WFeGJqYbyf9xqeV",
      bear_point_shop_id: "2966deb9-ebcc-47aa-9ae7-ea24b2154984"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["b5f55ed4-2a34-4def-9297-c3efcc69f7d2", "b622fcf8-6b1c-4d4b-ab11-e4beac0173b5", "cc37bacb-269c-420c-a6de-31856874a152", "6012cd18-64f2-4ead-b329-85164c000228", "24af3d86-6a68-40fb-8eb8-40658a6fc467", "9ca7bb8e-bc46-46cd-9955-9890fb674bc3", "0dc0c2ce-86b7-4614-bad1-1abcf85f2a05"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 6816,
      point_expires_at: "2025-03-14T19:52:28.000000Z",
      status: "enabled",
      description: "WlqwtDL8",
      bear_point_shop_id: "20014838-dc61-4fcc-a63f-e8abd293a7db"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["b0104a2b-9e29-4043-942e-68a60a5e82e4", "780089b3-a2ac-4702-adf3-b1659bb9a28c", "2310b0cc-6751-43fd-a842-292c808ed124", "73b9a058-c049-4101-9ed5-25e9e6201585", "5dcd4bbf-ed59-4e08-b092-f60dffc51c5e", "6682e595-e39f-44d4-9b80-14761a3b91a5", "efc9de4e-6599-4411-86e7-12e6cdb178a0", "4c1ec3e1-f64b-4611-bcbf-0d1405cd51b3"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 4290,
      point_expires_at: "2023-05-26T09:08:08.000000Z",
      status: "disabled",
      description: "kfA31wXd04SY1O8gGOF1kRrye61uzmBIXdnENFs3jBlwZrD72DB3",
      bear_point_shop_id: "10a25e24-52e0-4a37-a613-4307875daac3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["34346fbc-eb00-4874-bbb8-155eebd3efd0", "75e2aca7-85bc-4e78-881f-a2e9ada790d0", "b91348fe-8f49-481a-b7c3-cabe1efb146c"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 3304,
      point_expires_at: "2023-03-02T15:46:13.000000Z",
      status: "enabled",
      description: "7Hu6WK5M7npguch6s2J670P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljHGXrpVSkS",
      bear_point_shop_id: "2b65a0e4-c02d-490c-9189-80af9d6f1a42"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["56128140-eeff-4b82-910f-139a2abe507c", "8a9333fa-9471-4558-88df-3cd7bf557f9f", "df1b6526-8443-4deb-b838-04dea85af68b", "c9baaa79-623e-48c1-bfa4-19e489ba0aeb", "c7088c2a-b37f-405c-8e20-9bc0d7a3012a"],
      applicable_days_of_week: [3, 3, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 8793,
      point_expires_at: "2020-11-22T17:12:42.000000Z",
      status: "enabled",
      description: "sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9CKN5yCsDMuuaWg6vjoZFJU5quwxFBXnJ5Eq6GcNPCEVPq46GdIPJm8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKP",
      bear_point_shop_id: "877fdbfc-0f3a-44c0-914c-dd3c9eade057"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["886e5bca-a4de-4941-af72-9bd0713be3f1", "88258c33-f59e-4e1a-b470-1faceb855a0f", "60ef3f9a-71e8-48a9-b105-c0e358d34f38", "adb2cbe7-694b-40a4-b7ba-c5615521aa64", "79b7e707-f1ce-4eee-80fb-f795ab6fc6de", "0886c6f7-89b5-42e5-a0c3-267fdc18f209"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 1728,
      point_expires_at: "2021-09-21T03:30:30.000000Z",
      status: "enabled",
      description: "OzbmWJa8YkV10V05hf",
      bear_point_shop_id: "531418b8-1d05-4929-97ac-a17f2e6f8af4"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["35f00e47-95aa-4bc8-a770-4dba82e0158c", "ef863a29-66f6-4c33-b8d0-8c51aedd58fa"],
      minimum_number_of_products: 593,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 6, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 5035,
      point_expires_at: "2022-09-29T12:01:20.000000Z",
      status: "enabled",
      description: "slTDHzq00PkzT3rjRscSaTDEUxwAJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0Vs",
      bear_point_shop_id: "6078ae63-a02f-4769-9a9c-47716c6db698"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["c0d00e0f-fd1a-4a67-b9c3-10a331cdead9", "55b23c7f-201b-452a-8d34-b8ca928264f9", "8c7ca482-6427-468b-b8bc-e2d5b550cb71", "33bcd701-a16d-42a1-b92a-45dcae35c3d1", "4a688cba-8f1c-4fd9-9d7c-669d94fcfbd8", "3cc05416-2fa9-4391-9f1c-df396940ade5", "fe27234f-fcba-4c22-92a1-ef26ab219330"],
      minimum_number_of_amount: 9171,
      minimum_number_of_products: 6225,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 1547,
      point_expires_at: "2020-12-16T05:35:03.000000Z",
      status: "enabled",
      description: "jexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOestfQFumGQVfUsw4hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1",
      bear_point_shop_id: "7fcfb2da-cf11-462f-87ae-782da38bcf7d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["a581fa65-a77f-4cb6-a753-a519a8a87998", "146464b6-d6fd-49a2-87f8-528259326d3e", "827a7531-e65b-49c4-b14d-74cf43c211f8", "bd8bb343-00dd-448d-bf3f-a8c7e05151be", "da143655-4b5c-4db3-9a66-69bd5f4f16ff", "7dbb5fb6-28ba-4541-8d89-105082197cae", "be89184a-c67e-4aee-820e-fb9975d20d00"],
      minimum_number_for_combination_purchase: 8447,
      minimum_number_of_amount: 7069,
      minimum_number_of_products: 6992,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 1, 0, 0, 2, 1, 1, 3, 0, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5346,
      point_expires_at: "2024-10-28T18:23:25.000000Z",
      status: "enabled",
      description: "7ZxbhLpAG3vIRMVqbJVgHdPhvPKwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6c1NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3PxozvlpngWpA6xbZMfc0uwp",
      bear_point_shop_id: "1ce413f0-c4c9-42a5-8eaf-a6f51cc4641d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["f6b85bdf-b961-4992-8365-6365c26a1f4d", "694e47e8-bb37-4613-8dbd-5877ca0a6d71", "8d5f94f1-c33f-4eba-a65a-42fce076c7a0", "5e3eea03-b0df-460b-85e0-4d86aff129af"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 1513,
      minimum_number_of_amount: 913,
      minimum_number_of_products: 3056,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 0, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 1710,
      point_expires_at: "2023-08-24T04:15:16.000000Z",
      status: "enabled",
      description: "aruulg11gUrgWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRllx603bU9utxlgE1LKaCgZVizYnvZve6T",
      bear_point_shop_id: "004b2e55-d057-451c-a3c6-fedf3e425120"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["eaad3e0f-38c8-4124-a5f9-ebbe011ee4a7", "ce80201b-37b2-4ae2-b556-3b2bd252a5f3", "56d50eb5-2467-4f50-b510-fb9e034401f6", "7dc6750d-2490-4fc8-9575-c47bf540d95d", "f1545885-7641-4435-88d7-0d5b7cd21e20", "9685e849-7e11-4df1-a8ce-4f080cd53803", "cb90775d-bea5-4822-95af-c76f8e2d2f4d", "74cd1405-3a08-4412-809a-af2e926387e9"],
      max_point_amount: 4538,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 3592,
      minimum_number_of_amount: 463,
      minimum_number_of_products: 7370,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 2, 0, 1, 0, 4, 2, 3, 2, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 456,
      point_expires_at: "2022-07-02T01:34:33.000000Z",
      status: "disabled",
      description: "Tk4B1PKHR2EWhPZSvV8nScTvJ4VHpUajLmD9cCimPwC97LHWaSOnICBJimGKiopraV9Fu47WiDgn9VJjED17kjNr295",
      bear_point_shop_id: "a8d53a6e-5d87-443d-8e7b-4afb542d294d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["6520b152-802f-4108-93ec-c3326bd068ab", "5bec6410-4c45-49c4-961b-4a8e7ae65f97", "92ac3af8-d5ca-4f6a-8349-76f3ea1d0ecc"],
      max_total_point_amount: 3066,
      max_point_amount: 8277,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 7516,
      minimum_number_of_amount: 5164,
      minimum_number_of_products: 6850,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 5, 4, 5, 0, 3, 4, 4, 6, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 3217,
      point_expires_at: "2022-07-19T03:11:20.000000Z",
      status: "disabled",
      description: "ss0ltmaJnxslaUL7RrxqbBxY5tCbxb35FzAfmkd3pduwUBkrqrvJ3GVs6GsJ8XiLApVwNY6zjKIEdqTZCuDots6oOpUnX5paeprWtPS",
      bear_point_shop_id: "37b31cc7-b4da-4772-8c39-463be719873f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["5f4abd24-e372-446d-8114-face24d66925", "555cca3a-c512-4202-9593-760c0e11d198", "9e3a20b3-33f6-4046-a75a-1eaa6ad77c9e", "1d8c0311-8736-4f18-8388-e9398c43f776", "a0b38e77-03d8-4ea5-9200-13c9a811e605", "e8ad3462-cb5f-46ca-ac60-37b7b0378779"],
      dest_private_money_id: "d094a5ac-0490-48e0-bb42-7411ae400132",
      max_total_point_amount: 2568,
      max_point_amount: 9008,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 1482,
      minimum_number_of_amount: 1509,
      minimum_number_of_products: 7389,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 4, 4, 1, 6, 0, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 5537,
      point_expires_at: "2021-07-23T19:07:15.000000Z",
      status: "enabled",
      description: "zmao0EWnRVCjlgZcfxXnQfXvfoocz3td7BZN78kqzJ0Us2fGrJyLKsRHFPpRHSTTSFxnvRwj3Oa3urFP8",
      bear_point_shop_id: "3e7b77d2-c6a9-4eb4-a5e2-621d76522a19"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["5ed2ee68-8292-43cf-a4e1-8ec25f1774a9", "c99b8a8c-32f7-43c7-8c00-86a102cde81b", "bf55398e-a68b-42d6-968e-11c8aaffc677", "0f8137f4-65ce-4833-9ac1-d746578e5b86"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "3a908d62-0fb2-40b0-84e8-b2ac6e6e0d56",
      max_total_point_amount: 2674,
      max_point_amount: 6564,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 5907,
      minimum_number_of_amount: 3544,
      minimum_number_of_products: 1374,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 3, 5, 0, 2, 3, 1, 6, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 6569,
      point_expires_at: "2021-04-12T06:50:55.000000Z",
      status: "enabled",
      description: "IqOFLqn2ZuLk5GF2FUuyDVUpZnC5UYez0zM0cPox",
      bear_point_shop_id: "80ff338b-bb65-4783-a186-0a30d214a57f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["ff7641dc-de47-40f1-b428-7fafb648b560", "5ff364e5-cf11-4f37-a584-0ca0f3e269db", "28731321-89fe-4ef7-a284-6d587ca1ed07", "e61e78cf-05cf-4956-a30a-81a7d7983206", "af353a14-93b8-4715-877f-0949bdf4c5f1"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "2df90da5-fd6a-48a1-b2b6-7e718496ed8d",
      max_total_point_amount: 8164,
      max_point_amount: 2997,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 9395,
      minimum_number_of_amount: 7220,
      minimum_number_of_products: 7888,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 2483,
      point_expires_at: "2024-07-02T02:48:53.000000Z",
      status: "disabled",
      description: "95eAaG4JW0HS70OJOUKjKLeGCgLyc",
      bear_point_shop_id: "cab177b3-e688-4a21-98ad-f99963da74e3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      applicable_shop_ids: ["6e4de225-2b46-4099-8f59-d7ad15dbd770", "7db664c1-76c1-46ac-8748-42817a95d5a9"],
      budget_caps_amount: 311781466,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "395d030d-a6d9-42cb-b97a-f886ac355137",
      max_total_point_amount: 1340,
      max_point_amount: 1670,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 9590,
      minimum_number_of_amount: 6469,
      minimum_number_of_products: 3965,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 1193,
      point_expires_at: "2021-05-31T17:20:25.000000Z",
      status: "enabled",
      description: "AnlJyQ4ogjQgbj8PRfNm4vkTJ8joyTSHmI2see5qGgNKlkv5v",
      bear_point_shop_id: "63e72045-d28f-4afd-862b-f9630b3861df"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["d4693cc5-0a6f-4922-8d06-9d6a6cf5f0ba", "990e733f-6962-4754-b456-c9d09fb838b8", "d7b5215d-786c-45da-86ad-c2b018825641", "0c511a68-d05b-40fb-891f-f2705d9a9275", "f26ad70e-0e53-4c68-af82-468ff756a358", "b7cedd43-6413-4016-ac8a-03f9e5a11137", "ef516539-59e6-4458-9dbf-c497f8701ed9", "2ef593fe-76e6-4d77-bc93-df3f620125ae", "a4558c35-b80a-490b-af85-82cca012e645", "5011f8bd-858c-4977-bb2a-705e63e8fa66"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 24', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["9f49ec99-139b-4cae-8e65-eeb5e3a4619a", "5a56bbe4-a320-4478-8339-a66ebcb22e8a", "a04f8427-f1c6-4c62-adb6-b0a03ab2e685"],
      bear_point_shop_id: "eb0d0ac5-726e-46d2-95b3-9037d49064a1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 25', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["c05fab0e-7d49-4337-a2ba-a8009c818c84", "a78ff8a1-0a21-4824-8030-51b9d32a532d", "6322f130-4857-40a7-a9c2-59f4ee6bc4d2", "7d8d0b5f-c27b-492d-aa68-c830506c48bc", "d04a2226-8961-4bdd-b6d7-e5ef5a6bf8ac", "011241ed-9e37-4e03-ae9b-36697259f353", "2eeaed92-fc25-418e-9c7c-eec6a7ccef9d", "5c316fc9-5081-49cf-b4f5-5f5aaf74d364", "0da3c890-c724-4774-8bca-d980e5d24b47"],
      description: "6HWLBVq7JKL8IsIw17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMcSPrmt0hjIJu43wB7scWlYirrj6XmXY",
      bear_point_shop_id: "af2454ef-6571-44a7-96c5-fbbeb9c90d9e"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 26', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["e3a1bf5e-2bcb-4b76-a5ae-94f778977b33", "7241d841-57e4-4ac5-b324-affbb550a20e", "aeac5935-4568-4c47-a114-5f842f6464c4", "5194a4cc-1089-4a7b-a075-819aeb378506", "c213b519-fa61-4c53-bef0-74863e5ee907", "559cc459-6d6c-46b1-9424-021d45703ac7", "2e158e7b-412b-4045-be9a-3a24df26be82"],
      status: "enabled",
      description: "iugglxJJBGt",
      bear_point_shop_id: "b0bcad30-0afc-4fe4-ace3-21509735c7e2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 27', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["597acb20-465c-488f-b451-b5866a657763", "18a70f0b-e834-4289-a8f5-40530d0484eb", "23110beb-c91b-4db2-82c0-d296ec8fcdb6", "553184f5-0a02-4cd3-92fc-08f7b3a3cd58", "c57cbb36-f240-4fd2-9e26-b57872739437", "5119de66-4089-42cf-85ef-2c46f2635e53", "96b01e9d-208d-478d-9116-d9692aa5c5c4", "03e1bb59-5bf0-4f8e-abd4-45c0f45f34bf", "99139508-bd3d-48d4-a7de-ee725cdf5588", "5cca8479-9980-4d14-b7a2-3e6bce3e3783"],
      point_expires_at: "2024-08-26T02:09:48.000000Z",
      status: "disabled",
      description: "VD4mEL",
      bear_point_shop_id: "98b930e5-a032-4865-9fbe-5bdb5e497a64"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 28', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["e5bd3da7-84e4-4b0a-9136-76a532f3793d", "1026a34d-df91-4977-bc5c-4597e04a6775"],
      point_expires_in_days: 8591,
      point_expires_at: "2023-02-19T03:24:05.000000Z",
      status: "disabled",
      description: "7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea3eTBlP1za1n7IcWMlrV1ey0F13qC7iArhwm76E35ql4XfUae14Wbt93t26LiQAMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGfq9ue8TvZwYbMntyIPzqAG",
      bear_point_shop_id: "c04254a4-219d-46e1-a88a-2e3fc69aac00"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 29', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["03ff9c2e-f48b-492d-a9dc-b008f21aa19b", "9919206a-c063-47b2-8bb2-28555b6e284a", "cb938a61-5a2a-4409-a085-f2e6d19fd0ef"],
      is_exclusive: false,
      point_expires_in_days: 5797,
      point_expires_at: "2020-11-11T12:36:13.000000Z",
      status: "disabled",
      description: "8",
      bear_point_shop_id: "5d5922ef-9b4d-4f1c-9eb8-ce29d5a7dc6f"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 30', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["0588080b-9013-4f2c-b689-41a43d00caa0", "1b2bee9e-e3a4-4f37-8103-4570b98bea53", "a7f860d5-c0ac-43ea-ae32-3329f55092a9", "1c639df6-3471-4597-b7e9-7975011f763c", "edb46131-86b4-4e91-8944-fad628a2cf09", "55588f3f-3248-433d-87a0-90cfd4cecef2", "40c750db-a7f3-4961-9913-cfa87c46eb2e", "1b6448c9-20cb-42bf-b351-3d3195bff4b1", "d238bf8f-bdd1-450e-aa2d-0cc1c697adb0"],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 8295,
      point_expires_at: "2025-02-17T04:42:39.000000Z",
      status: "disabled",
      description: "QFhEcKjjKztGRK6K9KAPEUIedziHih60rhQ",
      bear_point_shop_id: "7a7f15da-2a4f-4787-81fd-e037650b3cb8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 31', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["63bf39d9-afba-40f3-a196-153864896b94"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 7897,
      point_expires_at: "2024-08-11T18:32:16.000000Z",
      status: "disabled",
      description: "umcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3zE9qA6JlqvTos7SrIAldP5taDahvoqIf3H7H22Xm9qyhmrKIzglEahNrgMO9grD73ccOw2h3Fa222nHBaN6510bAHdVRRVqt",
      bear_point_shop_id: "15b36d4a-7862-4ab7-8cc7-139532d3194c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 32', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["5fcedd8b-d818-465f-b5ea-c886fb1a3ae5", "cc4c6912-39dd-4754-a886-5421c03558d7"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 9747,
      point_expires_at: "2024-08-28T04:00:50.000000Z",
      status: "enabled",
      description: "yEd4dXuL0rYsAz43Mmx6hv0Ug3INp6i2B7flubMg8I3PFzXHSWu8scihqWwWKLIsgxoxZCQ2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b8gICLPqqow4qG8fKRsijZT9ACbFhSbUnXdQpmPpnHFqiJvOHOlQFLdx",
      bear_point_shop_id: "0d772c4f-7b5b-48a7-ada9-1d927aea8131"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 33', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["4175f336-436f-4365-aa2e-44c9dc041f80", "b2b960dd-e039-4981-83a2-4d1cccea62ad", "e514859c-181a-4a82-839b-30091bf12864", "12eb39e1-ad5f-4c74-b143-c1ccf23ac27c", "ff3a57e7-bf7e-4382-8c51-4c0482391b2a", "f2ec9780-c206-4b6f-926c-a97ac8fababa", "06bd1375-ac26-485f-9ff9-c21cdaa5d9f8", "bd7dee08-4bc2-4018-9932-f45153e68447", "861391f2-45c3-40a9-be8e-a95081370bed"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 182,
      point_expires_at: "2023-09-21T13:48:53.000000Z",
      status: "enabled",
      description: "2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kI",
      bear_point_shop_id: "61c6259b-7b08-4f1e-839d-226d5f3d95cf"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 34', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["47cc4ce0-7110-4a3a-b96e-291bd9d094da", "4f9fd637-e62e-4c20-b39c-d354a19fdf27", "77a2b0a4-331b-467f-80f1-6c9c9cecbaa3", "af4389fb-eb3b-4753-8ca0-486b2476e04f", "d460c0d7-7701-4d8f-97c4-824cb158285f", "5b6cfd1f-1eda-4f6d-a9a4-060511452d79", "bc7eed84-2fd9-493b-9934-0497211073f1", "85263c2a-4d53-4344-8363-64e5de6c85b1"],
      applicable_days_of_week: [1, 6, 3, 4, 0, 4, 4, 3, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 8987,
      point_expires_at: "2025-02-21T21:02:51.000000Z",
      status: "enabled",
      description: "mk88yYjRj6ppJLnlec8JObXuRsPVeFJcsOCB9dZH0k0NKC7bYH6IQ",
      bear_point_shop_id: "ea331c8e-cf2d-488e-9c92-80e8ca1e8dd0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 35', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["47f6ccbe-1cd8-4288-b59a-80a0a0c640a9", "fd7d3eb2-5a0d-44bc-b24f-0deb4c90d8f0", "a21a9b72-0d2d-4568-bf5b-00885707f4f1", "0a23be99-44e8-47f7-b64e-498f8a348d01", "9207fff0-974d-4cdb-85cd-0c8c2ae5f6ac"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 4025,
      point_expires_at: "2025-02-22T19:42:50.000000Z",
      status: "enabled",
      description: "7SnJwOTksCozm6o1k9oepRB7yq0Oa1SzxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pUWjvsxF7sC23pAVbXiv",
      bear_point_shop_id: "5e4ee540-08c8-4bda-8d74-b1f25aca899b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 36', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["a6c1acc1-1d01-4c18-b950-eab36363b2c2", "00f202e0-92b3-4b0b-bc6e-c3ad4fcaa5b1", "84d267dd-4a09-423e-ad34-900aa425ff35", "90695db1-1282-4408-ad94-a70ebbbaf703", "e6225550-9382-429b-bb2e-8e550ffb33dd", "3f329bfe-4c38-4d64-ba54-2509f9dd7f44", "daf80fa6-28b7-4b96-90e2-3a3d1761ebee", "e57af3a2-bfbb-4f0f-9891-6908f5959431", "20c3d98d-9e72-4f38-966c-5f8122f2099d", "e69b1db3-0ffc-4868-83f7-ca3600862c11"],
      minimum_number_of_products: 7508,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 6, 1, 0, 0, 5, 6, 6, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 214,
      point_expires_at: "2022-05-02T22:15:04.000000Z",
      status: "disabled",
      description: "4lWYk1AXf6CZiEJmgnIHDOUd6m8hlpqS572AEF2Ig4ikrPHEQKtf",
      bear_point_shop_id: "6adec518-e2e8-4918-ae55-c9a3dc829d2b"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 37', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["8e5d4e88-b6e0-4a2b-8c7e-c4665a57b6eb", "59745290-ad21-4c2c-93c2-1e38081ef30b", "555d6ce8-8bd6-4dd6-92e8-b9a61933a15a", "932cf485-0f0a-42e7-9173-ea1886415a21", "3d10d3bf-822b-4686-b07b-02d33bbe0868", "cd415c44-9b25-40c1-b1a0-3591ca6492d4", "ce894394-449c-4926-9fac-21227de663be"],
      minimum_number_of_amount: 2668,
      minimum_number_of_products: 3337,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 0, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 15,
      point_expires_at: "2023-10-06T02:38:09.000000Z",
      status: "enabled",
      description: "0nxwzXXsopch",
      bear_point_shop_id: "96decffd-9ba3-4ef7-87dd-9d21735f6a51"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 38', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["42cafe18-73ea-44e0-87ea-e9c296628f05", "02785d38-1c18-42f0-aab2-61f39e46ec3a", "8d5cee56-1b28-4f29-ac16-98a404c18c63", "2c80b717-2331-4ac6-b741-485ca293a50d", "c530d395-0b6a-47cf-900d-19825d426137", "eba4f1e2-e44a-45f4-ad5d-74cf40654fb7", "0b6ccec4-e06e-4881-ae95-d93b7ce4b1e3"],
      minimum_number_for_combination_purchase: 6833,
      minimum_number_of_amount: 8066,
      minimum_number_of_products: 4924,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 4, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5983,
      point_expires_at: "2025-02-23T10:28:56.000000Z",
      status: "enabled",
      description: "yZ4zlX8tOl1gapEcvHpCxJHTvEJuFQdQk10O1BigovU99ROsTZK65zQOhilbvDcAlCpIpPo9knGna2qU0GmaUmeizgJ6BwqETnaq5BggeTTsT",
      bear_point_shop_id: "b13c7164-3358-4267-ac33-658ef321a591"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 39', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["1bdc4d00-bc89-4081-a167-f3f41c7b29d8", "593574a7-796c-44fb-8da1-4b3842d01913", "90c8df62-d404-4734-ae25-af83e8bb1784", "7600c2da-3acf-4b80-9a20-c9f393ee6cf2", "d593f62a-e831-4756-902e-33c2e0a56bea", "c61df8c0-7837-4c69-bf18-a67644138f3a", "4eb284f0-30b8-4f2f-a6ab-e2f505359565", "ccd4d85e-e725-45b6-8333-b524d627c676"],
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 6587,
      minimum_number_of_amount: 5420,
      minimum_number_of_products: 1788,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 2, 6, 3, 3, 0, 6, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 4203,
      point_expires_at: "2023-10-24T20:04:27.000000Z",
      status: "enabled",
      description: "XiCg0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZstFpjBFQy9bZmz7mGiFtXmRSje5IwYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKen",
      bear_point_shop_id: "54f0292b-f544-4ed7-aa5c-edccba3ae781"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 40', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["d77ba461-e961-45c2-aff3-308817f6eaa7", "9d07c57a-bac0-4a37-a09f-2661dc8332c2", "25840979-8eeb-404c-8d21-0101edd3fcc7", "c57c642f-7831-4d52-ba47-049fbf32f92d", "4a7125ba-4229-4006-8d7e-edbbfa991812"],
      max_point_amount: 4334,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 2025,
      minimum_number_of_amount: 5460,
      minimum_number_of_products: 5132,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 0, 2, 0, 3, 0, 3, 4, 5, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 395,
      point_expires_at: "2021-05-31T20:40:24.000000Z",
      status: "disabled",
      description: "Xi22Jw1idAxcQ9RQcA93jzkpVE1oN8GZytUXsp14vePeJl09h1SmSe7z9uXJe9aRBNGFiXbom9IOMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRIEnGneOjH6PTi68jf1Ll0O4t8yu2YY3amcbZRFCGWEF",
      bear_point_shop_id: "78147c2c-aaec-44ff-bb4d-184180cf13e8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 41', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["6785bef1-f504-4c1b-8ddf-c8e2c1286d9e", "26665709-ca66-4a6f-b1c8-e31be76d9042", "4838dc22-6eca-45bf-a000-e77d2ada366c", "cedabd8e-5a1f-450b-a73a-65e15018016f", "0d252eac-b58c-4bb6-8ce1-b1bc63cf5272", "28f0d1d7-49f4-4dfc-9799-c60aa5c6770f", "f20fb59c-ae32-4ecb-9ce6-a9897465f702", "0379ef1c-97b2-4c5f-a8e9-351c17ef5925"],
      max_total_point_amount: 8629,
      max_point_amount: 2309,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 5624,
      minimum_number_of_amount: 6226,
      minimum_number_of_products: 1643,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2540,
      point_expires_at: "2023-03-01T20:17:02.000000Z",
      status: "enabled",
      description: "I9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4kEKJ1Q7c8C0SZpOWKljojyXNatscwZjWuBesyFuc4sWKFJnLD7m3pQpjDhF5ByJUZoKtqULctVH6JYk9cBHdXfv4mxi0ybLSzTGhHvgOYEOxJ03xV3nSGPvtC19a5RpyBdhfDtmpMgxIW5ljI6yfgW8zOo",
      bear_point_shop_id: "e8787980-b861-49be-b5ec-71862b704329"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 42', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["9bdc1122-55c9-45d3-af4c-4ebbaa4370ec", "b640d35c-d447-4bba-bcd9-c871df56815d", "ff842fa8-3743-489a-a708-8915bcfde5ab", "49bbb919-2e6f-48d8-afa7-89bd21e3a685"],
      dest_private_money_id: "1b3ac9c7-9915-4541-bcad-6bf5a1d42302",
      max_total_point_amount: 3421,
      max_point_amount: 3829,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 6732,
      minimum_number_of_amount: 3578,
      minimum_number_of_products: 6831,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 4865,
      point_expires_at: "2023-01-12T06:00:03.000000Z",
      status: "enabled",
      description: "4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQmTjATi4FvTByqrSIzi26MGgpQ9DKPsTX2x6llLqyqxLBzmQKSHklP2GNjfKFk3xSPN2EauZcekm4uUHwCvLyAybYYI1PTnYt6AX3Z",
      bear_point_shop_id: "2032524d-5320-463b-b2dd-4da76e4e9aad"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 43', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["f13dc102-e107-4705-9a3d-4e4a42bfbe0c", "fbe902e0-9408-47e9-8c7f-f03c9e28ea48"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "6a0a7952-a17b-4fad-a64e-e4846f33dd7d",
      max_total_point_amount: 1571,
      max_point_amount: 6461,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 2654,
      minimum_number_of_amount: 3189,
      minimum_number_of_products: 5261,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 0, 5, 5, 6, 4, 3, 0, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 6330,
      point_expires_at: "2021-02-01T20:33:00.000000Z",
      status: "enabled",
      description: "qyaARxtZqgB5ft0k4jfS4r5kfrLJkZytv5gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt5gGSX2",
      bear_point_shop_id: "2bb3ca53-ce62-4f7c-970c-01c2a0c9c212"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 44', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["75a9c813-e350-4ee0-a861-c4d96b9fcc8f", "76bb6d65-7657-4f3f-b96e-576d5e1036a8", "e105c6a8-0d55-4bd1-9f3b-b76ba60ce9c7"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "47dec827-66da-4290-98cd-2cf2ab2664f4",
      max_total_point_amount: 1971,
      max_point_amount: 4150,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 9361,
      minimum_number_of_amount: 4824,
      minimum_number_of_products: 3074,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3, 4, 0, 2, 2, 2, 0, 5, 4, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 5754,
      point_expires_at: "2021-05-31T22:04:59.000000Z",
      status: "enabled",
      description: "5eAINi4DCh9E1p",
      bear_point_shop_id: "fabdc7e9-0b8d-4d6f-a890-976d9eb39105"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCampaign | 45', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new CreateCampaign({
      name: "jAnbL9pF2AijYf8ydTws4HIQ4An",
      private_money_id: "4bcf0869-a700-4112-9780-a7d006c7411f",
      starts_at: "2021-04-27T11:39:38.000000Z",
      ends_at: "2020-08-13T06:58:54.000000Z",
      priority: 529,
      event: "external-transaction",
      blacklisted_shop_ids: ["bdb54781-c926-4fbd-9ef6-ee1439973859", "a7ad1d81-1630-4af9-b0a5-cb19359c6889", "ce403e12-eb69-4a4c-a991-db67312bbb59", "d121e86d-1861-4168-a073-bfc59e68137c", "6ddf32e6-d6cc-41ad-bde1-606ac23bcd92", "d4b6b745-cab3-47ac-b897-024344e90653"],
      budget_caps_amount: 430771711,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      dest_private_money_id: "d6c44b69-30fa-4128-969b-b520275e7821",
      max_total_point_amount: 3479,
      max_point_amount: 1241,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 7305,
      minimum_number_of_amount: 5292,
      minimum_number_of_products: 4698,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 3, 2, 3, 6, 5, 5, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2458,
      point_expires_at: "2022-11-08T12:35:12.000000Z",
      status: "enabled",
      description: "Ci9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8KkZCOZQxeSP2z9qxNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4",
      bear_point_shop_id: "47bca605-6f6f-4d96-a5c2-879f20ba1f30"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new GetCampaign({
      campaign_id: "47d7b487-ca83-448c-a351-044b17f5156a"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 0', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["9f465be4-d2e7-4436-b7c3-f96e722a7d17"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 1', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["182851b4-35c6-4960-b0d0-50889989a827"],
      name: "Uy8JyZq3ofPUU0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 2', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["737057dc-0d10-46bf-b870-975394f21970"],
      starts_at: "2023-01-20T01:14:25.000000Z",
      name: "KLDrvgRvBVvAYQP0NP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 3', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["3eefdd35-896f-4f0d-8538-3c958d121f01", "a5a610dc-096f-4296-89dc-839971ca43e2", "2bb18ed1-c836-4f86-a292-506387d926f6", "2f9eb286-af54-4a9f-84c8-b1fdd153bc20", "d69f15b9-d386-41cb-8ec0-3e2a5923ecd2"],
      ends_at: "2025-01-28T16:56:07.000000Z",
      starts_at: "2024-03-19T16:03:56.000000Z",
      name: "q0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM2RajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyCoZoaTfbTmVX0XqqL2D"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 4', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["36347a7d-f3c4-4d43-a4ce-3f17d2d4cc47", "cb6b2e5c-5bf6-4f21-a1b9-a840e1027cd1", "cda4038f-8c61-4987-8e00-d67e440d254d", "04329ced-48f8-4b18-9832-8ed37972be11", "4506a732-0166-41d0-a65c-61e8e34e7e3b", "1be52299-1b36-48e6-9ca7-f88ed5a34379", "57aa95b1-e133-4f35-8149-453578c3c1c4", "ac96960a-9115-407d-88c7-1614ef163b7d", "9a904bc7-50e7-49e7-9f6e-06f6f493ef2b"],
      priority: 5099,
      ends_at: "2020-01-06T13:34:28.000000Z",
      starts_at: "2024-10-25T12:19:35.000000Z",
      name: "HaspAw5Vcp7CE78JSe44PvWgrDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 5', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["b379677f-f584-41e9-88fc-6bc6970cd6d3", "2333b114-2380-45ba-a46e-f50c5439e303", "71e5bb97-2bf9-4507-b272-36afd3582cd1", "a760a01b-9e53-4829-9b9e-3fff3e795fd0", "158cb1d5-5035-40a6-b426-0998f249503f", "c8f4e843-04ea-4756-bcf9-82b8fd5e0c43"],
      event: "external-transaction",
      priority: 1103,
      ends_at: "2023-04-04T19:52:31.000000Z",
      starts_at: "2022-11-15T12:42:20.000000Z",
      name: "fDZrZRHs0hjVGtY7fDHExM6iUcBW9LDUejJe4laTFkcJAyP9v3lR5fJ1SCFuFJ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 6', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["9c635b5e-7d5d-408e-94d6-8671be3af2c3", "80273963-9436-4023-bbbb-7313b0fdfd7d", "292ed000-62b2-4943-b34c-755621d94a01"],
      description: "YKPyOwySSjaFxy00IGCXmzsObY8JjUm17",
      event: "external-transaction",
      priority: 3661,
      ends_at: "2020-09-03T05:22:52.000000Z",
      starts_at: "2025-07-04T01:40:11.000000Z",
      name: "SejYJwKQkQhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2FF3HAzhtt18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL1U8vfTPgZQoGXL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 7', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["1f6affdc-4fba-47db-84be-0de21ef69189", "73a98db8-1068-4d54-bd35-320fa6906df6", "8f8b478c-772e-4c7a-a27f-a0db6988c3e2", "cc7793c6-9a79-49ab-b34c-9b8ab707f3d6", "9f2e97a1-0f00-4fa9-a057-353014dd365e", "098e6eb3-ead1-438f-beb8-caf306e65215"],
      status: "disabled",
      description: "wbt7bycdIa6s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhBLPIWgGXu2FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZrpJNYtglnu99Onqaf5iTxaKHt4HXx",
      event: "payment",
      priority: 3824,
      ends_at: "2023-05-27T03:32:29.000000Z",
      starts_at: "2020-10-02T05:56:56.000000Z",
      name: "5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSkvCAJURQ0xc8v3XGoxNYBzQF26RR"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 8', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["320852cd-66b2-4ff6-a140-7d2ad8dff86a"],
      point_expires_at: "2023-01-20T22:10:16.000000Z",
      status: "enabled",
      description: "k8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2",
      event: "payment",
      priority: 6282,
      ends_at: "2021-11-17T13:16:21.000000Z",
      starts_at: "2022-04-03T18:49:21.000000Z",
      name: "ISbJLQ2IGy7A4O5EuFDi3ep7E8KTwqzGZlqsrJTtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLgNEFPzTNAeMR2CvVgTRCY2rEPprVjpNe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 9', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["ea40d6af-7b3f-4c08-9159-f70e61ca749a", "4a5ab74a-0b58-4d44-863c-e9eed14e244e"],
      point_expires_in_days: 283,
      point_expires_at: "2020-01-23T12:42:29.000000Z",
      status: "enabled",
      description: "443TmOvQLPfQxkSjhKrHXePF1aNsQcGEPe2hgvk3yuDeTC8XzXR9jncya31KgghsgYe3TbLJN21a8hZtm5so8Mz8sE9uDmHdcukVhdalQqRPy",
      event: "topup",
      priority: 4771,
      ends_at: "2021-10-26T02:46:25.000000Z",
      starts_at: "2020-09-27T16:08:22.000000Z",
      name: "2tPeRbQcNODGa3IhebkRxi8kuGoSk8mmCPAG5TaOSJrFwT6IMSTQQD3aZSLuV5KvsCMKR5Eb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 10', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["02d500d4-842a-4657-96d6-f515da733d7c", "caaffb34-d89c-485c-9797-779f8d851dd7", "1fbe1cf3-c2a0-4152-b9dd-82ff6bd76a84", "c4488923-2c2c-4ad2-ab5b-0ad86655ede7", "a176f652-ab8c-442d-9bd9-13ad6eb18dc0", "020fb7bb-81d6-4b9e-84e7-b8b4dd2258a7", "82a448c3-e159-439d-8d8d-f4755706f07a", "4bebb853-6d03-400a-8257-8e94605371b4"],
      is_exclusive: false,
      point_expires_in_days: 8847,
      point_expires_at: "2024-06-14T01:06:38.000000Z",
      status: "enabled",
      description: "Pc7UXRyRiV8Pax53IDmwuQOCWjbIPmFGWkh7DMCSqp4SWi3zPKlO0ubMaaWt2sfRwBothNvTY3vFr4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyB",
      event: "topup",
      priority: 2577,
      ends_at: "2024-04-22T15:48:34.000000Z",
      starts_at: "2022-10-08T20:03:19.000000Z",
      name: "sSiJlXzLN5312aQsa3khCQuI0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgOCupwcIPxBzhbkfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 11', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["63a15714-66a8-425c-a910-dc98d027086e", "ee74dd0c-7025-48e3-a134-5c8032281633", "fd58a5b3-b333-4e5f-93d7-c1fcf9fa21ec", "6cf8df70-7134-4b7c-b309-13b796911b1a"],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 1118,
      point_expires_at: "2025-01-12T23:24:26.000000Z",
      status: "enabled",
      description: "jS5PtJzYsdA5qh",
      event: "topup",
      priority: 305,
      ends_at: "2020-04-17T11:09:59.000000Z",
      starts_at: "2024-07-11T11:29:16.000000Z",
      name: "GqEwjgkrGn0uAn0iqI2b5rxtzGOZhKJMKwzvYsbBzTdo6bpAqcWNJrNTsv2Llex1ejGQ2ugzGxu81Sx50Y"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 12', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["5803098c-65ff-4a5b-b28c-fc82cc98724d", "ad2e0bb7-c0a0-411e-a8af-7631f3732a86", "96f8b301-129f-41cd-b8fa-64c57ea462ab", "7fb8040e-a64e-4c0a-8fd3-41bedaf37bc7", "5d7c6d22-b01b-4aaa-9f86-2e9b3d4194ec", "a219da9f-cb7a-4655-acc4-e454f17d2ffa", "930dc4b3-463b-4933-8b15-3c904c87d05d"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 9651,
      point_expires_at: "2025-05-16T10:07:46.000000Z",
      status: "enabled",
      description: "4YHcAJKWHCf11oIN1lhxfCtQoWt3KCnkWzy38cC0E7gsSEITDe",
      event: "payment",
      priority: 3507,
      ends_at: "2024-10-25T12:07:21.000000Z",
      starts_at: "2024-02-02T14:55:11.000000Z",
      name: "B642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnNgPyTasq1IFexxHoOsY3XmfS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 13', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["f6f3d84d-e0cd-4ddb-80c9-ad0784569d30", "67e97cdc-3505-49e8-908a-f9fbc971063c", "58e93149-f9cf-4163-a670-ee1f36221aa7", "73a086ba-0774-4487-abc2-5eea8bd5f6af"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 8137,
      point_expires_at: "2025-04-19T09:43:53.000000Z",
      status: "disabled",
      description: "UEJ4zrJepcLNjePvmbsJ6aAodX3lOsSzeTfXuUhrzyKZN2IpvZDbUGNbf92zGejiy7b3srgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42wCpyAiBnUBLAV97",
      event: "payment",
      priority: 4340,
      ends_at: "2024-12-11T16:26:51.000000Z",
      starts_at: "2020-09-23T01:51:37.000000Z",
      name: "MpHhWMUK3SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8reI7vFyo7eM4dNHW25nKJYDvzM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 14', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["96201726-30b0-4f15-b4d1-b1e0b8209327"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 3558,
      point_expires_at: "2023-09-02T00:52:51.000000Z",
      status: "enabled",
      description: "oFJzr3brOZ5f3RQvkhtySJKYRUQ3NzIgBoxko0Q38viglT3j7uK9FEO8wpTMbUo34OhjcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gUnx8oHUCw9IDU8v5tebk72bnq5V1PYuyQsrCeZvlknHwyCYeoTGD6IV",
      event: "payment",
      priority: 3308,
      ends_at: "2022-07-21T02:10:12.000000Z",
      starts_at: "2020-09-19T05:35:45.000000Z",
      name: "xkQHIURZCUVG9E4BcH9vh8Qcd9Qr1jGxJh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 15', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["bea01c5b-fd9e-419d-a489-50b529c25ef3", "043ac265-db03-4254-bf7f-1024916f7132", "c96a4c4d-2fec-41ba-bb1a-2acde05bbf61", "13cb9673-499d-4619-9864-8bcaa87080c0", "80ca4e8b-2baa-4114-83d3-70e75ecea9da", "065fb4fd-3284-46aa-b410-0fee7c89daee", "67832eaf-66bc-4908-8231-2ca146687936", "001caa26-3a3e-4b17-81fc-34b0b405a212"],
      applicable_days_of_week: [0, 5, 5, 3, 5, 5, 2, 2, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 4920,
      point_expires_at: "2022-01-23T03:46:51.000000Z",
      status: "enabled",
      description: "ExdEHTNDtgEpdMlXJAKinvVKW5jNBic0lbP5i9pPDb3qItRRs3FY6lAlrydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT",
      event: "payment",
      priority: 1546,
      ends_at: "2023-03-15T01:34:05.000000Z",
      starts_at: "2022-02-04T01:16:16.000000Z",
      name: "Pr6H3Lr5Vqadi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wDsAO01hvmpIXnG4Vdq7gNAtqrqKm6uKQNQH3PDcRwUCecSBjOParYUfATbiJrkxUEwT3M91XjHrTG7fMCl81IJPQuSHXTmEReE1YV9ebnUBpzD7d9DsGnOvPtZOQ7wRQgMzlEQYhb78oA0LE9nGzsoBIqSCZEncCQxjIhrUeBMFsGSoFMs14cvovqZ6GQpcxkL1iW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 16', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["2127dfe9-336d-4f82-9c98-2d302c661d9c", "dfac20a4-d658-4af0-b9b9-1bd8d752ba89", "3c46e852-9052-4a34-a046-d906dc095181", "1c8ac28a-0d10-42c8-a271-3261e70d341b", "57d43079-3542-45e4-a1b9-2b194d55bed9", "e9bee295-bb10-41b6-9cee-e6fe3b65f92a", "cba66560-7f61-4916-84ee-48924cdc94a9", "7cb63cdb-7e43-4e96-a107-236ab2977631", "82410bfb-fa49-46f3-a068-80bc45e0e155"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 3, 4, 1, 3, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: true,
      point_expires_in_days: 8240,
      point_expires_at: "2024-07-28T05:29:35.000000Z",
      status: "disabled",
      description: "w0rIOalhSCHrt5J1YKxmhpIQaAHuF1XqBsQEc2YHzb0v51JNexx20BlobdlTY6n3LbK6V",
      event: "payment",
      priority: 8244,
      ends_at: "2020-12-17T23:30:39.000000Z",
      starts_at: "2023-04-27T05:38:53.000000Z",
      name: "rhE7PkEzPYVXfzwtjxI8n9Z0CQKMUdsLKbKLcaV6nH18WcZidvZ55mAgOE16AnmYbzCLHYWconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDwnUvtTuwE1P6w3jvuc6WVynWZlMwTGtLKHNv0GHMA8YNVctqn0HylBEa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 17', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["6b182546-82fd-4199-a92d-d87418980c4b", "67a0a9ed-6ba0-4747-8fbd-cf3cc28722f1", "beef7a24-fc08-408e-943e-10aa15c3164d", "ec650b5f-af08-423a-bfd2-2147deca1ba8", "48deda47-e929-46db-a8fd-8ca6d5e6b489", "d55ca44c-9dbe-4dcb-aea4-90b422335708", "1b64780d-c7ed-4fe4-a386-9f0ea4c3b138", "2d2062c3-b87c-4c3f-95f6-d9c4cf3f44a4"],
      minimum_number_of_products: 9023,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 3, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 8621,
      point_expires_at: "2020-03-09T08:37:30.000000Z",
      status: "disabled",
      description: "MUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoYYcgPPK3Dchqik562nQJ7JN9nEMDfH9ZULXMKOjFu2fGiShoySflnRPKvTH4Qb4HK1DE5zpHipftSBuuUyajKD4U",
      event: "payment",
      priority: 2481,
      ends_at: "2020-12-30T09:24:29.000000Z",
      starts_at: "2021-01-29T08:31:11.000000Z",
      name: "7nrik73QyiaNKms0iFYGrWxxlKwOlCibtq2e0nqtXLNITG9Gffmmox8hwq"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 18', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["b3f6d635-929e-49bd-b8b7-d58807275ce6", "57b71a1a-de51-4409-a0a5-cfda4b76e398", "1f25f55e-3a47-4f06-902a-80e05e63f706", "fd7d4c4d-ef2d-4c58-863a-4a96b0fbd2ef", "0b6becc0-ec36-4adf-9f88-4bef90dca8c9", "5888a11e-9e8f-45f6-9a1d-379793b9e9ab", "cc3cdc40-e0c7-489b-9178-215b43e68d55", "79876d2d-c3a7-4f97-9e4a-2514e66b3241", "789fd72b-5e94-4a41-a5a5-895b4bbcfec8"],
      minimum_number_of_amount: 9220,
      minimum_number_of_products: 5078,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 0, 5, 3, 6, 0, 1, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 1736,
      point_expires_at: "2022-12-29T01:44:57.000000Z",
      status: "enabled",
      description: "I8MUg6pkTJeF4LA5VGWmlO55tLRhXfPthFrTbvP80JDs4TLAvvWwguBec41EmwzzFrgc709a7P9KtTHr3zG8NnPjRfIRrqy3F",
      event: "topup",
      priority: 6797,
      ends_at: "2025-09-11T09:21:14.000000Z",
      starts_at: "2023-11-19T05:24:02.000000Z",
      name: "RiHbftN77E9sKP2LWTHQkvbYQTkmfSmGSFmTTeLGAy7h6m0YyagUC0Ij3N9K7EVH4f0IDf80jI5hMMqGagepFcb0C3pMeh"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 19', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["755f4f1a-5ec2-48cc-b789-3910e4133eb9", "97604202-4323-4411-9f20-4b95b8da8075", "e28ada85-7a3e-45e8-a75a-aba283fa8789", "ebdc2973-046c-4d83-b823-50ba41cb8f25", "35b83370-df1f-4b93-ab19-bd7f6bb86db6", "d84bc3fe-b521-493e-b5fa-872034b7d4f3", "4e4b2c19-648c-4d8a-8c01-a11f9fdbe34d", "5166ca4f-6661-4dd7-880e-2d26afe296cc"],
      minimum_number_for_combination_purchase: 6007,
      minimum_number_of_amount: 991,
      minimum_number_of_products: 4137,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 4, 5, 3, 1, 4, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 5299,
      point_expires_at: "2023-09-11T03:17:07.000000Z",
      status: "enabled",
      description: "vDDPPtMusem1WSPOdAkWLCHhP7q7jyjEo8V3Di9DtzhzAGKUtsDdhPal5eEvQkTNVI1DbDv2IC",
      event: "payment",
      priority: 870,
      ends_at: "2021-05-21T07:42:04.000000Z",
      starts_at: "2020-07-09T23:15:24.000000Z",
      name: "qeRzwnNnU8Hy7seU6TPp7YTcvCbmuWQvyjmdKhWFzroFJfg0zCih9qHu842U5SnX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 20', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["75d07ae9-81f0-4c89-a110-6393c10b62a3", "271d365d-069c-44cb-8dbc-3909c7790911"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 6148,
      minimum_number_of_amount: 4980,
      minimum_number_of_products: 1317,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5, 2, 6, 2, 1, 0, 3, 0, 5, 3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 8782,
      point_expires_at: "2022-12-12T17:22:30.000000Z",
      status: "disabled",
      description: "PZEq0xgguEtAXJ6WozfUGo1oVRA1PV2JD5SjzUvS2Jlq6P8",
      event: "payment",
      priority: 9887,
      ends_at: "2025-07-16T04:08:45.000000Z",
      starts_at: "2020-12-17T16:16:41.000000Z",
      name: "1PRe6ex8zQnoMXPxIs0d6X24reGHeQvAPqGMsA1rg"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 21', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["1cf9df50-231a-4920-bff5-3b3470a1ea83", "b4cb510f-91ef-4a24-ac5f-1d76f18714a7", "911dc498-723f-4643-b124-8b075f09eacb", "f9efb6c4-620f-4e44-ae45-eab1a3d90d98", "171644c7-d45d-4b16-b2bf-bba97acd78ed", "c5f319c7-ba05-4e55-b9a1-fd265fdaf59f", "d6c398d9-90e5-4544-9902-f5c824e323b5"],
      max_point_amount: 2685,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5626,
      minimum_number_of_amount: 7677,
      minimum_number_of_products: 6975,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7427,
      point_expires_at: "2020-06-16T07:48:24.000000Z",
      status: "enabled",
      description: "eqkSknjWS4aW80Xp5YCo9TXEMx6Q3N4lydCpBzThmgOIjIatpE7508LaYMNkxpSQqkfWLu8WbqqwjfwNPVeBo88egFulBO0tWJ93Y52C590AS7UiB0DiDGREmImyJDbbC2wEGBfcAGc0EsTxqnb80BRFYcLTC4xCABLekowD1pN0MSUSSu62wEl",
      event: "payment",
      priority: 8169,
      ends_at: "2022-05-03T17:23:28.000000Z",
      starts_at: "2021-03-10T18:10:35.000000Z",
      name: "UkIv4a2NsBAg7OoWmbOWXvcqkH6OCG8bjnFs6Wxag7kVTYLZtjqA6blCNXCxB23NKDv8dBki6rCZ5MRu3n3kWR611LhXRF1WjDXemYssWVQAa0S9OWEqIPoWhsZ81p0D8THD4dpuhxNvhxjPfdLCMpGSOhV764tKT9oHgjnPne51YZOU0zGq4PpZBc0rJPOstD7C9IM7suB5w40dZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 22', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["3a87ef54-05c0-44c0-b302-fe755087704b", "17c05515-e08b-415a-8773-602c3fd5dd46", "537fe6bf-513d-4cc5-acbe-74eda66cb851", "ed56fc06-e7f0-4f2f-8134-bcc08bf99252", "640c832c-e553-4f90-9354-c3e14c20a8d4", "8102293c-de20-4dec-8cde-a826d59c3f2f", "50dd61e1-75f1-49ec-abd5-4f3ed3b2adb4"],
      max_total_point_amount: 9018,
      max_point_amount: 9817,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 4078,
      minimum_number_of_amount: 1688,
      minimum_number_of_products: 2766,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 1, 3, 1, 5, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2551,
      point_expires_at: "2020-03-19T11:40:52.000000Z",
      status: "enabled",
      description: "YzwAtEksQWSl6Am3gCBrhM35EfmrtOFWMml5EKRiDsWg9ZcujQMFmb4vZ2HzNm8wdK6sB9HsuClaKx3AfzVa9lboQsNDBH1uzKMqlEF94aThPURq2Q4ZM2ZH2d8EggWOOiiO67HWQCePWkLnY7y5P2vTc2kTDF85U9g3",
      event: "payment",
      priority: 8316,
      ends_at: "2021-06-01T02:41:12.000000Z",
      starts_at: "2020-11-05T15:12:48.000000Z",
      name: "RLtjhMxgRT9FEddBtVan5HyW6Uan9MoYMbeeBKUXDDy014vqgIch5W6XuTL0vlIdvdIMbz7wUi6BXoKUl0tR07369wBiPR32MXZafz3jffpT8lgGERnFdcWhSdaJfJ60D0H2T0aK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 23', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["e8383d68-08ee-4a06-bdad-dc024522e04c", "d9564d96-bbdb-445d-8a04-13c098f8c55f", "abdb8dfc-4699-44b3-863a-8bec73286cee", "43f13bbe-e31c-4041-9da3-8a97e5aa4744", "01dca62f-6c38-46b2-9172-6bf030a4cdd9", "a8f53823-d897-4fe1-8b91-b71afc6765f5", "ff87a226-c7f3-400e-808e-b33eddf2576c", "1df1fba4-651e-4104-8e3b-aba654cad13c", "f65d6a87-0085-4a72-a110-cdcf5c4817e5", "ac32b625-6c15-4c18-a4f3-cf79b5a46f41"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 1898,
      max_point_amount: 4499,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 8319,
      minimum_number_of_amount: 258,
      minimum_number_of_products: 1624,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 3, 1, 3, 3, 6, 3, 6, 2, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 1644,
      point_expires_at: "2023-05-28T13:00:07.000000Z",
      status: "enabled",
      description: "hHFx3",
      event: "topup",
      priority: 7350,
      ends_at: "2023-10-14T20:16:03.000000Z",
      starts_at: "2020-10-14T09:18:48.000000Z",
      name: "FmxWAZtUSoiVrIFnb7w6ZClkoqVajvuG5cGcBP5"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 24', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["c56803a9-a8ae-4d07-b741-2ab962623c19"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 7297,
      max_point_amount: 3528,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 5168,
      minimum_number_of_amount: 9336,
      minimum_number_of_products: 8093,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 6, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 7502,
      point_expires_at: "2023-07-03T13:28:04.000000Z",
      status: "disabled",
      description: "FKERGvYa7vbD1cIywVpXocQ5N98CAVKuKRC5FLAIRiGKuI8CNBTqLCZ99AjVbK3l31NeAICSoLJdEVZoJB0H5I2jNmYRtpCMs9TezTj3A",
      event: "external-transaction",
      priority: 2488,
      ends_at: "2022-08-21T06:06:49.000000Z",
      starts_at: "2025-09-24T07:18:06.000000Z",
      name: "5hWQ3gdeDOWFExGORRYNLJdsZ6n3IGoF44i0499bTqwmusaHN4dAo0kcMwrj6lsuth9pSzmqVAxW3BZh2UFG0NdobuyCqKAyF8XBloHn7nUM7l934bPMQ7DIwFMXGuPCrmdUDxKggDFfFvOJkxhc8"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 25', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      applicable_shop_ids: ["85997250-4c8e-4e9a-a076-862fa85a451c", "c8c33dab-ad7c-4ef4-9dd1-03c48fc78396", "e8b125b4-4487-47bc-9178-623cdaf815a1", "c363b44e-55ed-4ab6-9c1a-3174c1a67ad8", "19ad8a15-3697-4f33-87f5-d27692eca8ad", "a59fe089-647f-480b-a26f-6f3e31f020b2", "2d6f925c-a8ad-4f9f-8e1f-e02badfe151d", "b16105bb-6294-44a0-b6c4-fcdf91cc934e", "62f0fde6-4689-4e0a-bf3e-da76c3bb94d1", "1b5497a4-4e9e-4d70-bb45-24890e8820ec"],
      budget_caps_amount: 2054658847,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 3698,
      max_point_amount: 5068,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 872,
      minimum_number_of_amount: 3834,
      minimum_number_of_products: 5695,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 0, 3, 5, 2, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 7298,
      point_expires_at: "2024-04-13T16:20:19.000000Z",
      status: "enabled",
      description: "iHqorIswPc2cBsLEwskU0m8hSr1melepO9LnwIsUcSmvb4GOUqCz9c",
      event: "topup",
      priority: 4130,
      ends_at: "2020-05-14T02:23:07.000000Z",
      starts_at: "2025-08-08T05:10:33.000000Z",
      name: "lPt52zP7YS2DWusWLcKpd2P335Nv6jpCTg7cImjgcPmkAEumRe3ajMg8VGC0KZL7VMaMEGv2NsNRGCHkqW6b190Xf2yHeAyBqIIySMiYLD3kq3Znz8pepfEmpSiLZTFdERWScAwFtubDUWmymMiDwFFfcNNLAfTp6G3m2S11HDiNC2T6Z1NRFWi9xNJqHv5TG4qAHZdsob31RGFcTjCHIRk6EOKDYDfh7IyYBfSv2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 26', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["14ffd9d6-6631-4114-9523-6e56eb8ecd34", "70da04df-cf95-4fba-bbef-0780276426d0", "3b0d8e5c-e866-4fc3-b4ac-b181a9bc701f", "0e89442c-6246-4ee1-992b-7759331b7389", "c29c4669-f6d7-4992-abd9-3a6554ccc24c", "c3e6ea70-c298-4570-83a8-b7bb0b84a1dc", "13d7b2ca-1aff-47b3-b3c3-25ebbd5fa5cd", "c7328ad8-6958-4390-864d-f64a5896d2e2", "eab7cba8-8347-4fd0-b19c-3ead4697257e", "319b7125-377b-4709-9100-5862f70a4f99"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 27', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["63c57e04-3fe7-4371-b2dd-b82b5d11d6bd", "57debfb9-522d-4c10-871c-c63cd4ee207a", "edbde70d-097a-42b5-bab9-575c0d0afe95", "5e3e920a-5e76-44d6-8ff6-82e9b2e8783f"],
      name: "5VZAtZIBDPoHNl5n64I544K0pgRwqKcwLRpyfhvSp3huvf9ISSZ1V5b6lHxDKXrcl2EVGtJV2Ntce9IqiVZ5m5eyekXLeKtBuImxNnX45R5ZNIi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 28', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["910b3969-3fbe-4789-8ceb-dde4985b8cf0", "8dfe1138-899d-4228-a377-85909e17b62b", "66d3da39-59cc-4ea1-977e-b75f5d7a779b", "9ee7b323-69ff-416c-a19e-c50cd0c938ff", "1af4fe6b-5472-4e3b-8d71-fa3b60cde727", "d14f79ae-9882-4d92-bad5-df3a4ba4d2a1"],
      starts_at: "2023-12-30T03:07:15.000000Z",
      name: "43dBm26Or7FE7oxXwqyeP95WFsrDTZsTHaLMAx4xhJmPNb2Vt3kMgTzAxm3nuCtm4tM4rQ7TMWwQQegAiqW5Gh3EedIVkoAN4R6PBgm1bgbkQVRY8MuhwDykulF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 29', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["4839896d-761d-4324-95c4-7f2a2ff9baf9", "5dbe7c17-64ca-40f7-b894-f756d8dc6e03", "47e3b928-d9b3-440f-98e1-433e4cdaa3d4", "9c64d8cf-7cad-4deb-8623-1799cfafe8c4", "50685cc6-0944-4a58-aa88-cc057f991d0b", "75fac35c-6828-47eb-a6a9-ac1765a70abc"],
      ends_at: "2025-09-16T09:24:13.000000Z",
      starts_at: "2020-06-22T10:42:35.000000Z",
      name: "RYuzmNrD0IPFMYcPpoEqcZqYNWKYupHW3vkZPbupwOmpLyfcnvR24ekndSEuijqLz34cJjz9WzS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 30', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["d4d2fa9d-7c23-4aad-9c58-08ff2c73c556", "7a144b29-7a32-4e77-a7e1-08c9e8a10b70", "d304a6bc-c68f-47ee-a214-5544a718380d", "41655045-fa81-4123-85ea-2d6e8690af13", "adb27e7e-1cd0-4cf5-8744-35151df60c7e", "bab68b24-46cf-498b-8c06-33f16eecbd73", "c9ad7698-26f9-4620-bfb4-8f027cce5f2f", "5f753b33-5625-4ec1-b457-7c79ea561454", "4907f21a-d6b6-452d-a8de-9f8fcbaa8bf9"],
      priority: 6522,
      ends_at: "2021-02-08T18:22:02.000000Z",
      starts_at: "2023-04-14T14:18:16.000000Z",
      name: "PIxdv4Vr2ADhNnBQ2AhJrtrRhEmEhncAz9T8Jn6tKv842hmKtJWGe0W2JoBVxOBG6QSEaMM6DcJjfAtdrmKAg3KBKDu0vlbYdVC6n9nVLo43cE33CQPF6kxIlI0uguDnziraNYM7VX5YLnlD8HOOCDlP4GZ7jbmXMO5zVMwfk3fyCehTHNb57OPgysrQCIrNbKg5EGtS1CRG8HTOfVnvp3qGXZFBsOSpPHbliv7UIdhU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 31', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["9b734b00-0f3f-48cd-ba05-8f24881b53cf"],
      event: "topup",
      priority: 4668,
      ends_at: "2024-07-14T10:33:59.000000Z",
      starts_at: "2024-03-29T15:20:31.000000Z",
      name: "JcG5btiH5rur7GsubMGTjIcOXKD9o8Kba3zToGBURahT5P9DvE8UV0j2YqC15yVJZpc8KVpHARBDgg1Gn2XcmC1vS6JUWIFuWHifSCeHqDX4OovF1kPsfFAfUD6hedBMnO5c5siBhPS0PdEUgltcrxJuLRpPyEyLzg5USUF0acnAYj9bCB7rUqwv3jfmweeo8gmjkrVbM4yoFbYRleOf9KO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 32', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["5e033aeb-1318-4271-b052-59a0cfbf88fc", "e117c946-fd7a-4a6a-8a96-4748ff13c8f7", "92e4fcd2-58c1-42f2-b6cf-62d5864fbbb8", "88e1b26b-fafc-43ef-ad9f-3d4addb4f4b1"],
      description: "Atk5RVlui7mGRMrDuzhgMwi2QEwxvEfxvbfoaYN92mmS964bSnGq9n7PpIOomMW",
      event: "external-transaction",
      priority: 5664,
      ends_at: "2023-01-05T14:35:00.000000Z",
      starts_at: "2024-05-21T14:24:13.000000Z",
      name: "P3IlH0kXmsTMdugDsmRtGnF7L4kFCWrbFqt27c2GHcIyayD2aKjXN0N"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 33', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["f09a5cd7-57f9-4e1e-9ee0-e2d4c5d07ddc", "e4cf0679-a8af-4fb0-b810-9d5fe7904887", "b8897c96-4443-46b6-8098-cfe2601890f9"],
      status: "disabled",
      description: "ToeZcV73t7vuEmirlewYMI5WNi6AMJzfUo3Mw8SUD48UFtXOBKAPivd5iJNrdqAuTxyB0A3WX2EcUb892jz3Nv10xFyFeM64iLpLDhctAZixWvzCjvZGuuLmpXAGJua2paAAkUgzb5zEsMY",
      event: "payment",
      priority: 8159,
      ends_at: "2023-08-15T16:25:46.000000Z",
      starts_at: "2020-01-05T05:31:23.000000Z",
      name: "bxzOIV2r2JtDEGxgzX90xQ1qEwnOjzBjMdE2ZgqC6g1ENWOPFMuygZod8nuff2bwE3RDjoGhPLmonziI8gPB410GLPQCeC7jS6W3DftZcdyglmNXEppEtAwequ8PJiYpSm0jL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 34', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["598d16a0-3de5-4dd6-bbe3-e15c7b7978b0", "67e293c9-d6c9-4199-8f3b-9bd0cad51f3e"],
      point_expires_at: "2024-04-03T01:54:37.000000Z",
      status: "enabled",
      description: "o",
      event: "payment",
      priority: 1277,
      ends_at: "2023-06-30T06:59:14.000000Z",
      starts_at: "2024-03-25T09:52:13.000000Z",
      name: "s9oEUXdmu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 35', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["075e89ab-f935-41c3-a819-c073990e2281", "599d28d8-ede5-4c1c-9541-58043f2ef567", "e0387d65-e21d-4956-98ed-dd87c4f26521", "29938f7a-0440-40b0-98e4-b3a508f4a642", "1d22e910-4927-46f1-8d76-7efaa6329a32", "ada9194c-f55a-4171-9320-8a6274feb294", "a77a5fb1-b4c3-4798-b2b9-1b47a141be05", "95a43992-6781-4976-a8ca-d1aac5d26084", "be322beb-4fb1-4d75-9836-059218dd654a", "e6df7bd6-686e-45e2-97a8-7d30dc02a88a"],
      point_expires_in_days: 5415,
      point_expires_at: "2022-03-07T01:47:32.000000Z",
      status: "enabled",
      description: "Qy4ktenk93ttYPJhOiPCYhnxitPJhteZ9v4lYIFrYpnV35pBMGKJEJkpn6Mlr99tmpLoTFQeHIPsIBBDhi4oQ1t1s3zE32Vk24Ceen1NSjytD",
      event: "payment",
      priority: 6665,
      ends_at: "2020-10-29T07:56:11.000000Z",
      starts_at: "2024-04-13T03:48:42.000000Z",
      name: "byZcFEPnIDVyEjs1xIVA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 36', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["d29a045d-83c7-45b7-9013-2e7b5338bf1c", "65c8af88-221a-4d22-bfca-d961aecd3f58", "d57c6786-3c8c-4a2d-adbe-c5ff8b4cfaf3", "6160a23e-4750-40a1-a306-8f760b05a76e", "574baf58-7825-4c79-a337-527bcaf2f2ca", "3128e74c-1cfc-49e0-912b-e9d03d48f35c", "6eee21d7-12d4-4a34-9017-b62c99b986a4", "c22c63cf-83ca-4e4b-a649-60cbac4bb5df", "9208349d-4408-4d5c-95c2-791bc444f34b"],
      is_exclusive: true,
      point_expires_in_days: 999,
      point_expires_at: "2020-09-21T22:30:14.000000Z",
      status: "disabled",
      description: "dAdVhR8qFWp5tCaOkj67zOOhzPjoLUnpes",
      event: "payment",
      priority: 3196,
      ends_at: "2021-08-12T13:20:47.000000Z",
      starts_at: "2022-01-05T17:52:58.000000Z",
      name: "mpVcy9ixDX4fCfbAE0AZjhFFPDiC5XgRDuJC7DFGXWJ1DsLyOnXTqwNlXWPSNst44xBM1tMMoOyWoAqWcD5ADFBS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 37', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["a261e82b-051e-45e8-9337-33145975f882"],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 3440,
      point_expires_at: "2025-01-23T04:40:18.000000Z",
      status: "enabled",
      description: "5sMNAQhF0HCoj9Dj4ZpJqp2buSHK5WKI86hTWo47qb9nSKNBR3LjzCdQo4GwTY7y2Am8",
      event: "external-transaction",
      priority: 2583,
      ends_at: "2021-02-21T21:49:14.000000Z",
      starts_at: "2025-07-19T21:23:47.000000Z",
      name: "Gh3BczuQ1HmAT4U7cCHORIBupKF2LGLWlWRqEU1R3HVfumJrkxA1RBhkJnrKn6T4UBYf7XzEp3cMOeoQItbJApNFNbizZqSEKvNBsiLTmRsG1pcvzPfSNlMjgy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 38', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["52e83f7b-60ed-4ae0-b397-3729f4e0ef6c", "10c02b94-76b3-4fb6-81ce-0e1947e2782e", "43f19ece-a2f5-431c-829c-acf97761b6db", "ddc0862b-a401-4f95-9496-eef9b32af3a7"],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 5478,
      point_expires_at: "2022-03-30T10:33:05.000000Z",
      status: "enabled",
      description: "ZiLS6lbj9JXoVWEOjNWcJ8Pqob8ZBDc2LIkAJFpX3tMiPvkskrBs7cZNQht6pUXt6QkeG9pRp1c5EcN6nLJcb0NEcuMnzKSDbJDSeKRyRniwPaN0afN8mRVY0r2kLaYAQQnNWq5gJk8ucSDE2uEYUD0C3IXLL4lH8T3KxBkSfE",
      event: "topup",
      priority: 4052,
      ends_at: "2021-12-11T02:08:55.000000Z",
      starts_at: "2023-08-12T07:27:10.000000Z",
      name: "eTYdP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 39', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["4b8cfa38-303d-401a-956a-d1dc4515bdc0", "cfb4cd59-8b98-4015-a339-03cfa8ff2c6c", "59e64c12-a522-4d73-846c-4d0490ab8a25", "02678085-5851-40d1-9ac9-4e8eff8ebcbf", "ae3c1a96-3cf1-4f37-8b21-897a6eb1cb8e", "376e6ad3-9e4f-48c5-8365-90d310d51cfa", "0fb16b88-5fbc-4513-a3fb-ad1056b6cea8", "af0a8a5f-43fa-48ea-b68b-b203fe9129cf", "74db2c62-9483-4893-a549-9e428ef48ce4", "0d0f1e26-3351-483e-b76d-744a978bbc1d"],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 2166,
      point_expires_at: "2022-05-26T19:28:02.000000Z",
      status: "disabled",
      description: "E6WRlyybO27figMsVRHKPW8EbdfuKdbyfcjYNDVx4A2ovqPMZA8irXJ9E6ZcMzkLyAqgwSoddiujWT",
      event: "external-transaction",
      priority: 8927,
      ends_at: "2023-12-05T02:57:08.000000Z",
      starts_at: "2024-01-11T20:14:32.000000Z",
      name: "11mpxaVIYgQo5GvBiHKw3I5f57jFE45d3P21Pzx2jnlKrw0LdNS4VtkXCDrt0LJOE3QgwrCcszhfH09Y5OthVwPmvHXBFS5mnHJDaN7ByqCBViT8YJSc5gafw5E7J"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 40', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["ec98d4f8-2a3a-41a3-bbd4-8376a7a84a97"],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 8957,
      point_expires_at: "2023-10-08T11:09:08.000000Z",
      status: "disabled",
      description: "EbGpCQn8B7l65BYMvNkhEwbRq7C0zj85JoEScisdzkhxnXFFT7CXS50vaovkROQbPFa2Q0QZFPxPWcwwu3uh9fDL3S3NHvBIxMXxVOS8aVOpiS1EeKe2EnvF9kW30yXFj5pEZQNOtIwcrR2Tap7tnXzfq",
      event: "external-transaction",
      priority: 5052,
      ends_at: "2021-11-30T08:14:16.000000Z",
      starts_at: "2022-01-14T04:17:39.000000Z",
      name: "ZZXkAjYTEO65NQtFJaRQvj5yyqZjpM3EGDvxc2vHpfKAFMK87o5EDfCnjGchqfzXJGnbGhZsKdVrETxLEt4GFvxAKZGN2hkrp4AuDVFN5fAvBVJFsjezB3YP3w02SjMN6p0E72qWtOk3QUVbESEWPtcFyu37V"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 41', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["18931c82-244d-40dc-8141-7b5fe8f712eb", "5c26e88a-0349-4732-b9a7-72eca3bb284f", "f773cba0-35d0-408b-86f4-7b461e0f0e93", "97da2a0d-f4d0-4ae6-9566-703c7d43a577", "54aaecb5-787e-43e3-9dce-aa51d9ea9f6c", "e42bf36d-fb59-4020-a939-feb822311d05"],
      applicable_days_of_week: [1, 5, 5, 5, 4, 5, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 7942,
      point_expires_at: "2021-09-23T01:05:52.000000Z",
      status: "disabled",
      description: "Ks0KWXhqcS1Ua3AEPfEflYFcCoy2dXgtWk5Skp4k9FjiQcyxviUOicaOZqLE3MkcTFrJK4NHPvl4VhqOdqyKHcIOPhbvogj2mEAT9kQkxX80ARofdpsoiXVeBxFuF7c05YcbHgR3SFdYgsuZbSsGmFYxkuLrQMChiww3RYCIbC9",
      event: "topup",
      priority: 6442,
      ends_at: "2025-06-16T07:57:54.000000Z",
      starts_at: "2023-05-11T17:22:35.000000Z",
      name: "f8Wzgm4choir96Zk4wBbHbRE9tWUhNPatHCNYgstx4oloda7k12vM37GlbZJKSAFS4eQAmyXqltVLiYXrByWE1iViSMuTkME7Xo3gZLzoJUOW0EXfGSkB9sMClBaFjZtZBNIprWMfHv0A"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 42', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["aab94be3-8da2-490b-aa3b-c2032ed6b5b0", "dc95a52d-de3a-49fe-8372-bc131de453b3", "e159361f-2051-4153-ba65-294a5985c44b", "a194509f-ea28-48db-9a80-54cb755ae1c8", "e802a4aa-7ed7-4fcf-8759-7ec47204b49a"],
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 6, 1, 1, 6, 1, 4, 2, 0],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 496,
      point_expires_at: "2023-06-21T21:40:59.000000Z",
      status: "disabled",
      description: "CkILHDjG2icoe",
      event: "topup",
      priority: 1826,
      ends_at: "2025-06-14T05:49:07.000000Z",
      starts_at: "2021-02-24T10:05:35.000000Z",
      name: "WNBFxzeu6Kj8LSmqtcTHfZNvkLrHlNhPf4I7mVEEqd8S9trsTY1RY9q3EI5KlF19OJHZirKKYCiI5WbqIsQYvdmHcE3kg67Mp0CzjOzftNuETzfXonmfKJhNI2H30SlKK1O1UKOiryeoJ2KHqioForPYYFDgWpGReS1ZkiP3jHymN76Njiv2bjGekXOVbuSOvVupSap"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 43', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["28c2ba8b-98f0-47b4-a635-549a6267805d", "c929802c-6fe5-468e-a6e7-d364491be80a", "60fbc37a-4528-4d09-b667-6c797ec60425", "efb3acdc-f5ac-4ebf-b00c-db31f72d5a5f", "050bd847-0b19-4317-a49c-6dac3b9332e3", "433b7f53-51b4-4127-8991-283ba536844e", "2c9615af-b3d5-44b5-a20c-00029841ebd3", "6e2059b5-4e2c-43d4-8c72-0b7a8f15aed8", "d308861a-b901-4f51-85c0-153bfa171a59"],
      minimum_number_of_products: 2958,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 6, 4, 2, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 8908,
      point_expires_at: "2022-05-18T17:42:07.000000Z",
      status: "enabled",
      description: "MgdRHskFZ317m16rSuV3GWqnvnIS00nrMnQNFRYYqQB2LOvvxaJWdM6RyNE08AoCyr23XqnSacLmBXCHDyWfJbD0iY7FmSIIJxWwKBqcUUGOv4rpZx",
      event: "topup",
      priority: 5591,
      ends_at: "2023-03-21T23:35:18.000000Z",
      starts_at: "2021-10-05T10:09:07.000000Z",
      name: "o0zvPKHwlN5cgpKhTDjrt62aO0gTJKvsFX8pCgUNdYXQChONhw"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 44', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["7a3e62c7-db48-47c4-a194-299aae7280d1", "cec2b9a6-b352-4a73-b485-6921dba10b3c", "effa1bbd-740d-4f05-baf9-17903c7b5166", "e4f1e3c3-2e4d-4aab-835b-1a2a911bc3b6", "6c4be372-dc34-49da-9ec9-c835165ab43a", "fddec67a-14af-4a67-89b9-aa16ceac21e2", "e72c2ffe-05c4-49ae-95ec-e198f0ab5255", "4509bcca-8fde-4a0f-82c2-21c9a2b6b1e7"],
      minimum_number_of_amount: 7773,
      minimum_number_of_products: 186,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [6, 2, 6, 6, 1],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: false,
      point_expires_in_days: 4476,
      point_expires_at: "2025-05-28T15:33:57.000000Z",
      status: "enabled",
      description: "4",
      event: "payment",
      priority: 3796,
      ends_at: "2022-09-01T12:32:26.000000Z",
      starts_at: "2021-10-04T14:19:21.000000Z",
      name: "OaWRsEnzqZ6lGrz0tQnP1Co4x4AXMvzQhY1JlrHqbdULcyqcFghqKIiyi3aAuGXWsNdhyWJyqrPAK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 45', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["ae8a75da-1f4a-4e4e-830a-b187602867b4", "cf866c6a-29ba-43ab-b261-34180316e15b", "d502bc07-ed7c-449c-95dc-25f79c0cc248", "6d564fd8-4e2d-42ec-9b2b-87ca6aadbeac", "a96ab246-1295-409f-a780-e5821ac42d39", "f9e7b741-f237-4389-a3f5-711c6e9b5418", "03c2523f-6a22-4428-890e-3db6b613f48b", "1c40559d-8b7e-40c1-af78-23a9aa36f2e6"],
      minimum_number_for_combination_purchase: 8071,
      minimum_number_of_amount: 5764,
      minimum_number_of_products: 5718,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2, 0, 1, 6, 6, 5, 4, 0, 5],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 1165,
      point_expires_at: "2022-07-22T08:02:51.000000Z",
      status: "disabled",
      description: "FWL9oU011XoGoCpelXPpOt9Y3msxtcs0WRQEq2AUltkkF5RV8aSNO9GQnDszD12NRIYvg8bbFQzPdXDpujuzOkg0dnSdALdNv5r8wM328xFuBm1H3xUdHsESYPWyVyErNbO9OH6RQgeafcESS",
      event: "payment",
      priority: 3078,
      ends_at: "2024-10-26T22:58:24.000000Z",
      starts_at: "2025-09-21T14:27:20.000000Z",
      name: "Z6h2XaPg728RkvVOUbcGA0kjIj9fnBbIK8dSJpAN6wIXIQbTWkewXW1RgDvxeuhtqc0lVuVevBpKZFsUJPsCckORoCtdXbeAqJmttYcSXDoCgwypQnQUsnWOKMZ3rJ8aRGwz6VDq2kLV7UR9Ys1BTbKj9QeM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 46', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["54ec41c7-9f57-4055-b4b6-126c8fd62e40", "c686dc31-89c0-48e5-b632-470bd34fe7b3", "858acc51-aedb-4c35-90df-67056f749edb", "3d12fdd4-9f8c-4aa1-8050-e1e7545687f4", "4b4a0792-542e-4a74-bd34-360616f2a80f", "5e947679-9d41-40c9-ba0f-b0432b2a45aa", "a5bebd3c-ffad-4b77-9c22-733fd8f0d850"],
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 219,
      minimum_number_of_amount: 7585,
      minimum_number_of_products: 280,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 8506,
      point_expires_at: "2023-05-31T13:34:11.000000Z",
      status: "enabled",
      description: "f0Q1pmhWH",
      event: "payment",
      priority: 9934,
      ends_at: "2024-02-24T17:29:31.000000Z",
      starts_at: "2020-11-20T10:30:34.000000Z",
      name: "vae7EjBkQNn9uWl9JunPyftwg9sZ6EO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 47', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["1214cf6d-a38e-4c1a-baae-f2cd57ef89f3", "7e7e3a4d-da93-4583-9605-84444da24be8", "4462aadf-a00d-4e62-a17a-3ebea76770dd", "7c36b1a7-f63e-43e6-86f6-ccd5156047ec", "00ea517d-ed33-48ac-95f4-51dd06b6b7cb", "dbcd3264-394e-41bb-9b50-3c8834340f92", "7cd537b5-eaa8-4154-8cd6-7a1dfdba341e", "a21fb910-df00-4768-a2e8-2abfeba258ec", "ee50cb5b-26c0-4e3d-ac1d-d40103d236b0"],
      max_point_amount: 1992,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 3741,
      minimum_number_of_amount: 6466,
      minimum_number_of_products: 4875,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [0, 6, 0, 3, 2, 4],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 7830,
      point_expires_at: "2025-03-16T03:18:26.000000Z",
      status: "disabled",
      description: "aGbLEuJCfBO4W1IV2UViZVHRWPkdj3cWX27LHxVCRXJ7RR9vhNIu31vkGd5KFMjSHWQR",
      event: "topup",
      priority: 2593,
      ends_at: "2023-06-03T21:32:49.000000Z",
      starts_at: "2023-11-11T17:15:03.000000Z",
      name: "A9E535lViSyzzCHjVEE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 48', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["7567fbb0-1587-4cba-bc2d-3a5314db8cf0", "a4d5748d-b6a7-4b59-bc5b-537b3ccced44", "509f1546-62a1-4ac6-8402-241823ffdc8d", "4de6bb16-1ed9-4d91-ad31-6ef1d5cde72d", "b5909af5-4c78-4d4e-ab95-842e6f399d53", "19e982c0-440b-419f-a3d3-88b1bb612c2e", "0b6db3f6-b5ed-4b1c-a11d-62439a17b828", "cab7e14c-ca4f-4455-acdd-452053bf7964"],
      max_total_point_amount: 7713,
      max_point_amount: 29,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 1720,
      minimum_number_of_amount: 4669,
      minimum_number_of_products: 1584,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 6, 5, 2, 3, 3, 2, 6],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 2335,
      point_expires_at: "2023-01-25T11:47:23.000000Z",
      status: "enabled",
      description: "QskJ4SJWYdnxMjsH9rlpcWw1Vg5A3jIY5TVDn7VAyGhf1a2i4Xb006Y5FN9bW9vksFBm8sMwbh1WFtpEmCrFqNwdLZ15QmFMvlNaa2goLZ5E9OE",
      event: "topup",
      priority: 7444,
      ends_at: "2022-10-24T01:54:02.000000Z",
      starts_at: "2021-01-19T15:47:15.000000Z",
      name: "vOUIiBwbJ5GuqfgOe9nV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 49', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["eef39c4f-06ae-468d-a65b-f03119fb075d", "823f036d-422a-4c0e-9e1e-83dd540918e3", "6b53a993-21e5-41d8-9fe2-ea3b034148a9"],
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 1998,
      max_point_amount: 5196,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 1902,
      minimum_number_of_amount: 5866,
      minimum_number_of_products: 2867,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [3],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 6596,
      point_expires_at: "2020-01-02T07:00:59.000000Z",
      status: "enabled",
      description: "npKAXXDxQv4bOJ9FCs7r9SIiPLZxhYcpGO5FAV5Tmz4fnzfWLRafbjHHiTlinfVLWJIyGq0eGZ3LjtgQn48RP8UioFkI4pFJl8a49K0SiRVrDmJ5TPkLuNgnu18c0Kn6PzJQm77hC3byYhnk9L6y5R4kNHRMXQTzW1iBiUI5JGbGoEyKdo0WvNvuZ2zOy",
      event: "external-transaction",
      priority: 2046,
      ends_at: "2020-02-17T19:22:12.000000Z",
      starts_at: "2020-07-05T20:05:17.000000Z",
      name: "6UzJ163lry8C4rDtJNzcEFdrvo427ISByum8MIrVugVBfTif3qpXYgZnZ3LJOu3iwipHdsS3ShjnA4Sr1gSN2PelpywqnkqJGFUWWcs7OK2a7LaTGiSi2nVCa3OWfS7AqwLlHPiOBI9qmFjO"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 50', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["242859c6-4fcd-40d9-9ed1-564c40718b11"],
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 1545,
      max_point_amount: 3148,
      exist_in_each_product_groups: false,
      minimum_number_for_combination_purchase: 9835,
      minimum_number_of_amount: 9312,
      minimum_number_of_products: 6002,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [1, 0, 5, 3, 0, 4, 1, 0, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "money",
      is_exclusive: true,
      point_expires_in_days: 3250,
      point_expires_at: "2020-05-16T10:47:43.000000Z",
      status: "disabled",
      description: "F89AbrhaWMPvJ4w9BbWGLWxTOnqHU20ukx1",
      event: "topup",
      priority: 4005,
      ends_at: "2021-03-03T12:19:29.000000Z",
      starts_at: "2020-01-25T17:57:34.000000Z",
      name: "Vqtvlq3pwtYNpqFJFhJ6HuYWnqyIUhAD4rpz6whWSFAXMqy8UduAdQ5IH0TK2HSat5A6ikNbGO6nv206MCoq10cKjOOAJZbMJkEXTJUvgYePqHLhUyWTkN1F8Xwl2rFV9LPEG0FsEHZ0zFFEN3CsRlByNyR64VEa3muyUE26kLnIwLEQafbBqwyhczkUDSv0LkIzcZbnCm3D96fkss4WwEMOvII6xukRoB486IcnSrXwZGPsD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCampaign | 51', async () => {
  let status = 400;
  try {
    const response: Response<Campaign> = await client.send(new UpdateCampaign({
      campaign_id: "42bdc88c-a4ea-40a9-96a2-dc5848b77e9c",
      blacklisted_shop_ids: ["2926cf04-1760-4185-bb99-1ebd9aa43566", "c3dc1886-9c7c-4d2c-a492-5c62903f9983", "b2f72b3e-a0e8-4e83-9116-daff03d0d1bc", "749a5a70-1b6a-4e27-839d-39efd15f14b6", "eee96981-3743-4ff6-9a2c-dded224651e9", "bf9d6874-ff5d-4726-92b6-f7735b210d47", "5d087832-9dc0-415d-8db2-223df9898c4c"],
      budget_caps_amount: 1315966269,
      applicable_transaction_metadata: {
      "key": "rank",
      "value": "bronze"
    },
      applicable_account_metadata: {
      "key": "sex",
      "value": "male"
    },
      max_total_point_amount: 6104,
      max_point_amount: 7567,
      exist_in_each_product_groups: true,
      minimum_number_for_combination_purchase: 3970,
      minimum_number_of_amount: 9841,
      minimum_number_of_products: 9227,
      applicable_time_ranges: [{
      "from": "12:00",
      "to": "23:59"
    }, {
      "from": "12:00",
      "to": "23:59"
    }],
      applicable_days_of_week: [4, 3, 0, 1, 1, 5, 3, 5, 2],
      blacklisted_product_rules: [{
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }, {
      "product_code": "4912345678904",
      "classification_code": "c123"
    }],
      product_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "product_code": "4912345678904",
      "is_multiply_by_count": true,
      "required_count": 2
    }],
      amount_based_point_rules: [{
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }, {
      "point_amount": 5,
      "point_amount_unit": "percent",
      "subject_more_than_or_equal": 1000,
      "subject_less_than": 5000
    }],
      subject: "all",
      is_exclusive: false,
      point_expires_in_days: 2170,
      point_expires_at: "2021-06-09T10:41:14.000000Z",
      status: "enabled",
      description: "p4Qp4t6WiXGIWU4TxH2FAjMtbi1KGeJyFNO2KrkgbsXcbEbgPoZFbPh9J838rL1gDfq3VsJIZMJTMvIMK26sORVFvF51NUOj8RI7n9XLkQqGxRAu4ClCzUyuIEYrXjU1Rl6vF7n9cWf5sF0ARyOKP3HCUhOEdj0FvKzWLO0X17seRboXyaTp5fxFISfu",
      event: "topup",
      priority: 2387,
      ends_at: "2025-01-09T16:17:50.000000Z",
      starts_at: "2025-09-05T18:31:30.000000Z",
      name: "R4g3InaFkgEEKedrMwdHukpCicHBj64f1DT6D6Mien3I4QpNgQKGBSiEs2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check RequestUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new RequestUserStats({
      from: "2021-07-16T16:19:18.000000Z",
      to: "2022-11-18T22:59:24.000000Z"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check TerminateUserStats | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserStatsOperation> = await client.send(new TerminateUserStats({
      operation_id: "ef4b8c0f-6d33-4acd-8777-7e8c8c5da122"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks());
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      per_page: 2536
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListWebhooks | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedOrganizationWorkerTaskWebhook> = await client.send(new ListWebhooks({
      page: 4416,
      per_page: 2765
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new CreateWebhook({
      task: "process_user_stats_operation",
      url: "e3TZFNm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new DeleteWebhook({
      webhook_id: "c479c2b4-fa53-47b8-a139-14853b1da397"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 0', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "f841fa09-5b89-4dbb-907b-391f2295a7e0"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 1', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "f841fa09-5b89-4dbb-907b-391f2295a7e0",
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 2', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "f841fa09-5b89-4dbb-907b-391f2295a7e0",
      is_active: false,
      task: "process_user_stats_operation"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateWebhook | 3', async () => {
  let status = 400;
  try {
    const response: Response<OrganizationWorkerTaskWebhook> = await client.send(new UpdateWebhook({
      webhook_id: "f841fa09-5b89-4dbb-907b-391f2295a7e0",
      url: "m3HE",
      is_active: false,
      task: "bulk_shops"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "33e7fcd6-248d-4296-a61d-0fd51162f7a1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateUserDevice | 1', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new CreateUserDevice({
      user_id: "33e7fcd6-248d-4296-a61d-0fd51162f7a1",
      metadata: "{\"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0\"}"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new GetUserDevice({
      user_device_id: "91154a53-3dac-46fb-8292-098475886a71"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ActivateUserDevice | 0', async () => {
  let status = 400;
  try {
    const response: Response<UserDevice> = await client.send(new ActivateUserDevice({
      user_device_id: "e96464f3-8f43-4ab3-8193-0a02c8db5e72"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check DeleteBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankDeleted> = await client.send(new DeleteBank({
      user_device_id: "3ff64769-4489-4cd3-b7ac-1009a695830c",
      bank_id: "36dfe143-ccc5-4bc2-83b0-c24b60350cdd"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 0', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "0a4abe9e-37a0-4912-a09a-4f0ed865b465"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListBanks | 1', async () => {
  let status = 400;
  try {
    const response: Response<Banks> = await client.send(new ListBanks({
      user_device_id: "0a4abe9e-37a0-4912-a09a-4f0ed865b465",
      private_money_id: "84ae8a1f-21f7-44b5-8594-dad55cb9ed1d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 0', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3da5f089-2705-47a8-a04c-d9cbfa171677",
      private_money_id: "f7595202-f76f-4d31-958b-74e494b87550",
      callback_url: "33Js1Kuu0UegnQjK5K12MWvCvA9DjpAvmSouPF8sEd3lBtNl0JB2dKxVrlXLEonC1KsoREeh2RXqHgFOF3b7VdwEdOPGXSe9OOoep5LkQDV7qJw1By6uFHkBHhurHoZlcvR7Q0TdgtR89zH4BRb4LxjYp1VFXi65IWH287FkS1AdoZmrqVFQp8fp9IpDGNT32XXjSeAsfsowmrnytFnDNPErJC0T6j8TSBN1GRIxfJ3UG",
      kana: "UM2jHDzbRjTfUU5d5AtOip"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 1', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3da5f089-2705-47a8-a04c-d9cbfa171677",
      private_money_id: "f7595202-f76f-4d31-958b-74e494b87550",
      callback_url: "33Js1Kuu0UegnQjK5K12MWvCvA9DjpAvmSouPF8sEd3lBtNl0JB2dKxVrlXLEonC1KsoREeh2RXqHgFOF3b7VdwEdOPGXSe9OOoep5LkQDV7qJw1By6uFHkBHhurHoZlcvR7Q0TdgtR89zH4BRb4LxjYp1VFXi65IWH287FkS1AdoZmrqVFQp8fp9IpDGNT32XXjSeAsfsowmrnytFnDNPErJC0T6j8TSBN1GRIxfJ3UG",
      kana: "UM2jHDzbRjTfUU5d5AtOip",
      birthdate: "E6L0lEe"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBank | 2', async () => {
  let status = 400;
  try {
    const response: Response<BankRegisteringInfo> = await client.send(new CreateBank({
      user_device_id: "3da5f089-2705-47a8-a04c-d9cbfa171677",
      private_money_id: "f7595202-f76f-4d31-958b-74e494b87550",
      callback_url: "33Js1Kuu0UegnQjK5K12MWvCvA9DjpAvmSouPF8sEd3lBtNl0JB2dKxVrlXLEonC1KsoREeh2RXqHgFOF3b7VdwEdOPGXSe9OOoep5LkQDV7qJw1By6uFHkBHhurHoZlcvR7Q0TdgtR89zH4BRb4LxjYp1VFXi65IWH287FkS1AdoZmrqVFQp8fp9IpDGNT32XXjSeAsfsowmrnytFnDNPErJC0T6j8TSBN1GRIxfJ3UG",
      kana: "UM2jHDzbRjTfUU5d5AtOip",
      email: "YXxSLgJV1G@wAOq.com",
      birthdate: "c8zzT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 0', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "88842b5b-6a50-404a-9b45-2a3f8188a366",
      private_money_id: "694712fb-010b-4192-8d04-e17f5d7d4ba7",
      amount: 5666,
      bank_id: "907267cd-9962-458d-a761-ec4b9c3c815b",
      request_id: "85224492-8704-41c9-853f-f72ea1ddab80"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateBankTopupTransaction | 1', async () => {
  let status = 400;
  try {
    const response: Response<TransactionDetail> = await client.send(new CreateBankTopupTransaction({
      user_device_id: "88842b5b-6a50-404a-9b45-2a3f8188a366",
      private_money_id: "694712fb-010b-4192-8d04-e17f5d7d4ba7",
      amount: 5666,
      bank_id: "907267cd-9962-458d-a761-ec4b9c3c815b",
      request_id: "85224492-8704-41c9-853f-f72ea1ddab80",
      receiver_user_id: "c98b0e95-3668-47af-a521-fdbac22ba88c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 0', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 1', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      per_page: 4071
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 2', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      page: 7255,
      per_page: 5285
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 3', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      available_to: "2022-04-08T05:33:18.000000Z",
      page: 5728,
      per_page: 1040
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 4', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      available_from: "2020-02-11T17:35:09.000000Z",
      available_to: "2021-09-01T00:43:32.000000Z",
      page: 8136,
      per_page: 7926
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 5', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      available_shop_name: "vyE",
      available_from: "2020-02-21T07:58:15.000000Z",
      available_to: "2021-09-22T01:13:16.000000Z",
      page: 6307,
      per_page: 4159
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 6', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      issued_shop_name: "ASr9",
      available_shop_name: "OsPHz4Zd6u",
      available_from: "2025-10-13T09:23:31.000000Z",
      available_to: "2020-06-05T00:51:10.000000Z",
      page: 2066,
      per_page: 4519
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 7', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      coupon_name: "hCBvnC8wC",
      issued_shop_name: "Dn",
      available_shop_name: "5TxePG",
      available_from: "2020-09-06T07:33:47.000000Z",
      available_to: "2024-05-15T18:09:01.000000Z",
      page: 9382,
      per_page: 1215
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check ListCoupons | 8', async () => {
  let status = 400;
  try {
    const response: Response<PaginatedCoupons> = await client.send(new ListCoupons({
      private_money_id: "13f2066e-51c2-49c8-8cdf-203ee0ae3b92",
      coupon_id: "c",
      coupon_name: "zq0vbsf",
      issued_shop_name: "AwCBSEw",
      available_shop_name: "Rfx0D",
      available_from: "2023-09-24T18:22:51.000000Z",
      available_to: "2023-04-09T02:08:58.000000Z",
      page: 8931,
      per_page: 3248
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 3434
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 1669,
      num_recipients_cap: 4256
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 6126,
      storage_id: "cf7007df-01a7-49ec-a0a3-3995ad7090d2",
      num_recipients_cap: 290
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 9018,
      min_amount: 406,
      storage_id: "7e6e99d3-ee3f-4ec7-918e-9debdf2c30fc",
      num_recipients_cap: 6733
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 9975,
      usage_limit: 1588,
      min_amount: 1397,
      storage_id: "90b669cf-2b9c-45d0-9237-9beaed31011f",
      num_recipients_cap: 9818
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 2951,
      code: "Ukie5R",
      usage_limit: 5805,
      min_amount: 5986,
      storage_id: "a9b2f7e4-44fd-4ae0-89ef-9a8593f6d10e",
      num_recipients_cap: 8869
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 8481,
      is_public: false,
      code: "3nbAQN",
      usage_limit: 1471,
      min_amount: 7563,
      storage_id: "a75424d2-4d61-42a2-b34a-6b6110d813f1",
      num_recipients_cap: 140
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 3516,
      is_hidden: false,
      is_public: false,
      code: "aFh0mP",
      usage_limit: 7560,
      min_amount: 4764,
      storage_id: "34c0f17f-7101-4289-a7c3-b90c916f7de9",
      num_recipients_cap: 3320
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 1839,
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "joV",
      usage_limit: 3571,
      min_amount: 6891,
      storage_id: "7bc955d5-08c8-437b-8dc9-eeadf3ccba20",
      num_recipients_cap: 9244
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 2546,
      display_ends_at: "2021-05-14T17:40:10.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "85stT5X2f",
      usage_limit: 4324,
      min_amount: 9897,
      storage_id: "2cdf9a85-dc54-4cf3-8109-0065d473b8e2",
      num_recipients_cap: 2721
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 8229,
      display_starts_at: "2022-01-31T18:48:31.000000Z",
      display_ends_at: "2020-12-24T06:25:22.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "Vb",
      usage_limit: 8058,
      min_amount: 4048,
      storage_id: "e4afddd5-62b8-415e-b287-950dbdaa03b1",
      num_recipients_cap: 7637
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 9774,
      discount_upper_limit: 831,
      display_starts_at: "2021-03-02T14:23:03.000000Z",
      display_ends_at: "2022-11-10T14:54:42.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "OhnrWk",
      usage_limit: 4670,
      min_amount: 8334,
      storage_id: "14cdc708-6b0e-463e-9cd6-61e824377c13",
      num_recipients_cap: 2233
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 118,
      description: "XFKeuF0FhTncNlMmgEuaHAHntz60OEH7JgjiAw3cGaLL5KHpinnRK5y0OzJ9Hvf2cVYRMoN8ciCbZWnzcDnK4LA4gWzsFxrE",
      discount_upper_limit: 2812,
      display_starts_at: "2022-06-03T06:44:39.000000Z",
      display_ends_at: "2021-05-01T16:11:51.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: false,
      code: "mI",
      usage_limit: 7455,
      min_amount: 6647,
      storage_id: "cb552f2e-2982-4ef1-b805-5ab03d21a281",
      num_recipients_cap: 9986
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 8135,
      is_shop_specified: true,
      available_shop_ids: ["c1fb2290-3659-41cf-83e4-517eed868114", "82adea71-dcab-4670-bcdb-d09c303c7cb3", "9e264890-7024-4abe-9161-955b123d6bcd", "3fb704a1-8a3e-47ba-a729-9c0ccc4df204", "13d35e77-d5fb-4199-80b4-04aa768b19c0", "ba22db87-feaf-428c-b51f-7152bdd0ed66", "a182fe08-c61d-4007-b410-2e90577521ee", "10d3fc98-b26c-4743-9a37-f138dce61058"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 2125,
      is_shop_specified: false,
      available_shop_ids: ["2c6d7a7c-9a5a-4388-a80e-69b0ffb8a90f", "26901695-b622-473e-834b-c5c11743271e"],
      num_recipients_cap: 8226
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 6317,
      is_shop_specified: true,
      available_shop_ids: ["85da6f45-98ce-4838-90a1-ff3cd84e2b2f", "1544d3b3-4355-4a7e-8bad-4220100d55b6", "3d58214b-ebca-4434-9d1b-36ab7f97cf07", "83f91fe0-c7a4-4021-b824-e9328f36ae23", "abb0a2a2-4f71-47cc-975a-42d547596f31", "3c8d9a3d-a1ec-4cff-94e7-735f92ea034a", "cdc6107d-2808-4d42-afc5-de7442956979"],
      storage_id: "b2e3079f-36ec-4e9c-9d41-1cb7d8e9ce4c",
      num_recipients_cap: 7133
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 4579,
      is_shop_specified: false,
      available_shop_ids: ["31053645-bb8f-45d9-be4e-69423ff49d7e", "f94dd988-9f84-4348-bf7b-1f87b46a7085", "240d8cb5-208a-494b-876b-fb1e45b1239d", "f5a36069-26d4-4d25-aee5-ab3a32f0f147", "06bf5a01-a5f2-4c58-816b-aa6416d92da2", "8d031dec-3c7c-457b-9106-35918f213c1c", "97f6525b-426d-4b7b-a2c4-71ff71b754f6"],
      min_amount: 6911,
      storage_id: "1cc6fd3d-d118-4d50-a378-7faf45e705e2",
      num_recipients_cap: 4189
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 592,
      is_shop_specified: true,
      available_shop_ids: ["e926530c-4aca-4c12-b751-bced9b55c770"],
      usage_limit: 1660,
      min_amount: 2625,
      storage_id: "63a444a3-5a25-4eb7-8de5-cb50797471f4",
      num_recipients_cap: 7828
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 4888,
      is_shop_specified: false,
      available_shop_ids: ["24f7411c-e821-4816-bb88-56d9e6730353"],
      code: "3L3WB",
      usage_limit: 4366,
      min_amount: 3603,
      storage_id: "b89cfc8a-f0be-4f84-aabd-e3d58a7d8b59",
      num_recipients_cap: 2457
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 1819,
      is_shop_specified: false,
      available_shop_ids: ["71360ead-7e08-4f4c-a1d8-79fea69650e8", "7c83a4f5-3fa5-42b0-84fc-4b76e8d4f0cd", "958450cc-aef8-4c91-b6f5-bb44abe0c26a", "92640082-b184-409a-8afb-c4de07db38e6", "64b0affb-66ca-4af8-a5e5-cb04cce9ac2b", "812ebf3a-25f3-4f3f-984b-d69aee82ef6b", "2a126677-17e2-40c5-8dc8-8c7844068aeb", "b03c66ce-63fb-42e9-a779-3ee3be44dae3"],
      is_public: true,
      code: "uXaxHAA",
      usage_limit: 1916,
      min_amount: 7052,
      storage_id: "5e421e90-3c7a-457e-b4eb-be664514726c",
      num_recipients_cap: 5001
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 7440,
      is_shop_specified: false,
      available_shop_ids: ["c90d1113-7272-4362-87a7-12d820c6dc94", "3e107aa8-7935-4fb0-b761-41abe0949aba", "547e45a5-f2e9-4074-b864-e2d4357f2e63", "10ae76d9-5616-43ea-aa43-838febc88740", "f34e894a-3a95-41d6-a27c-2194510d09e1", "404f413e-acac-45f4-98d7-b0b3d2b7983d", "426ccff3-e088-47dd-b3ed-2da124707eac", "06fbc962-735b-4cd7-aa09-476a42035861", "a65828ef-8a7e-4ba6-a390-d7dcc42a12cb", "416eb1ca-97d3-4eb9-8a26-1a5dbd35da92"],
      is_hidden: true,
      is_public: false,
      code: "FlJcsltj",
      usage_limit: 2154,
      min_amount: 959,
      storage_id: "5274ee9a-ceef-45e4-ae5e-3cbcacb1e521",
      num_recipients_cap: 8233
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 2500,
      is_shop_specified: false,
      available_shop_ids: ["b4377603-5945-4d2b-861e-dc0f3db694bb", "61184407-70d5-4506-93db-be022af4f978"],
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "v7DnSC5Rf",
      usage_limit: 885,
      min_amount: 48,
      storage_id: "8627ea81-0c5d-4e1e-8330-c9f595082217",
      num_recipients_cap: 6830
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 1042,
      is_shop_specified: false,
      available_shop_ids: ["201b2190-3321-4a77-ad70-8e50e41778eb", "71c431d0-3c3e-43ea-87e2-197ca645e26c", "64a50745-7389-42db-9d8a-7833036bf94b", "208d1017-34f8-4552-9fdb-6af284bbc955", "575f13d4-da05-4fc6-a084-7c8d0803b4a9", "568f169a-781b-4540-ae2a-d90ff45ac1d3", "e97556f0-481e-4f49-9485-18400442b85e"],
      display_ends_at: "2020-03-10T15:30:52.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "wJUUxrUc5Y",
      usage_limit: 6202,
      min_amount: 8024,
      storage_id: "ff1aff65-be6c-4e2b-9abe-e0dfb6f29432",
      num_recipients_cap: 578
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 9902,
      is_shop_specified: false,
      available_shop_ids: ["c6f7501e-8030-452a-8ce7-1facec1b7cbc"],
      display_starts_at: "2023-12-21T00:26:03.000000Z",
      display_ends_at: "2024-05-17T08:04:42.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: true,
      code: "6FxY",
      usage_limit: 2912,
      min_amount: 3109,
      storage_id: "d4174f8c-be57-4687-9abd-da773ee21f85",
      num_recipients_cap: 5163
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 2643,
      is_shop_specified: true,
      available_shop_ids: ["1e0f1683-0c60-4c20-9080-4ccd688b561b", "293f7f75-1843-484c-9373-7100f88b42fd", "914d8cff-22f7-42f8-8414-98d692d8a8b9", "0fb2ee9b-b9fc-4a64-b2e7-415229718b13"],
      discount_upper_limit: 8907,
      display_starts_at: "2023-02-06T16:39:04.000000Z",
      display_ends_at: "2023-04-03T17:33:28.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: true,
      code: "LSvZ2KQOR",
      usage_limit: 6904,
      min_amount: 205,
      storage_id: "70328b16-c6fc-487b-88f2-cf19193eba6f",
      num_recipients_cap: 7739
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_amount: 111,
      is_shop_specified: true,
      available_shop_ids: ["b4c8b6a5-d240-4022-bb4d-f6db16c5eb83"],
      description: "6W2y8KrZ8xMlNalvWasLjNh8s14cZJ7e4Q9GCUyL2v9u3mWzZwKqxzujrUlmkKRdRXeieY6AmMB38WCqGZQWNed5BL6m650n0RmhPNf1QdSFaslICN4xIeeSgcGsS3PA5BMU547lNJdN573CatnkU3QijXWL36Ne9BIyD0VsxUMLq2pynj2i9JS",
      discount_upper_limit: 1455,
      display_starts_at: "2024-11-18T00:08:08.000000Z",
      display_ends_at: "2020-06-09T02:32:40.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: false,
      code: "dpHbhmzm",
      usage_limit: 6212,
      min_amount: 4029,
      storage_id: "0c40c6be-8607-4df6-85f3-99400041be75",
      num_recipients_cap: 9112
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 100.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 3164.0,
      num_recipients_cap: 6866
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 8774.0,
      storage_id: "c3304020-5846-4583-b162-4f90c82ca202",
      num_recipients_cap: 5245
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 4806.0,
      min_amount: 4263,
      storage_id: "d5f312c6-1556-4553-945d-3c29906f7ffe",
      num_recipients_cap: 7929
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 7050.0,
      usage_limit: 5799,
      min_amount: 3969,
      storage_id: "32f30968-25ad-4628-995e-2bb3640dd194",
      num_recipients_cap: 9028
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 5756.0,
      code: "G383Fy",
      usage_limit: 9830,
      min_amount: 998,
      storage_id: "08ddde84-47a4-4921-bf30-ae47e8715c5e",
      num_recipients_cap: 429
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 599.0,
      is_public: false,
      code: "JQM5UqG",
      usage_limit: 4532,
      min_amount: 7847,
      storage_id: "5deec6d4-1994-4db5-9a17-9707b37b7ec0",
      num_recipients_cap: 7130
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 4649.0,
      is_hidden: false,
      is_public: false,
      code: "XeD7lp3hQ7",
      usage_limit: 8962,
      min_amount: 5531,
      storage_id: "aaa46969-d7d4-4d9a-95e4-dff4f0a14659",
      num_recipients_cap: 4140
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 5146.0,
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "ZtYN7NcCeD",
      usage_limit: 2558,
      min_amount: 9304,
      storage_id: "66f44500-83c9-4f25-84b0-7c95be302a31",
      num_recipients_cap: 913
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 4541.0,
      display_ends_at: "2021-10-01T23:16:12.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "oT6dE59eFW",
      usage_limit: 8933,
      min_amount: 2640,
      storage_id: "001e3cf8-2a48-4c90-9307-b20d0f1b414a",
      num_recipients_cap: 2492
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1896.0,
      display_starts_at: "2023-11-16T11:45:12.000000Z",
      display_ends_at: "2021-11-30T09:09:33.000000Z",
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "R",
      usage_limit: 3069,
      min_amount: 2074,
      storage_id: "88af51af-8162-4fbf-913a-5fa762805178",
      num_recipients_cap: 8574
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1.0,
      discount_upper_limit: 4202,
      display_starts_at: "2024-02-29T22:16:19.000000Z",
      display_ends_at: "2020-12-26T18:57:27.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "8El4HGgf",
      usage_limit: 2633,
      min_amount: 5723,
      storage_id: "4554bd6e-0555-465c-b5da-3a16931f3f9c",
      num_recipients_cap: 2262
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1754.0,
      description: "cdXJKlldoDuv9TA2XHRXocL0a2ENjq4YdkJGWgFmKTEIA1MAf2HgecIl74FyRST7ScfdaiXI0aphnQpmaEH46JpxMwBWB66twU",
      discount_upper_limit: 4100,
      display_starts_at: "2023-04-08T08:52:40.000000Z",
      display_ends_at: "2022-07-21T12:11:38.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "qx",
      usage_limit: 5166,
      min_amount: 6597,
      storage_id: "d2b820a5-d906-4d52-8584-53ea9a9de4fe",
      num_recipients_cap: 7612
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 6129.0,
      is_shop_specified: false,
      available_shop_ids: ["b71d8280-679e-4ca0-a7df-7da0b7ac8171", "5fb260ca-1c3b-4f92-abdb-d0c5febeff64", "ab2565e6-e382-486b-9ebf-2ed9faa51aa1", "99b05f8d-7cad-4720-a396-831a1eb855a7", "3f89c576-ba7c-45bc-9569-89a092e4d94d", "92631867-2286-4ba6-be42-f9708687f65a", "0a47aadc-41c1-45d9-82aa-1562dda1aae3", "38d4fc76-35d2-4a11-9b5a-4c7a3aabbd89", "17eabea4-4b61-4915-8933-dc8f3b417fb7", "87efc471-72eb-488c-b5bb-31a970bd77d1"]
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 2977.0,
      is_shop_specified: true,
      available_shop_ids: ["0a9de69c-65c7-4afa-a933-a47fd9d4dffe", "e3a73736-944e-475f-9ed1-7961e3dcab2a", "b00f9b98-be76-4503-9712-c75ac005791c", "b01599d8-311c-4f11-8dac-36a601f096d3", "eb288dc5-fabf-4bdd-b049-62f2e1652a4b", "0b8f9e64-5108-4fde-b0de-6cfa4e3abbb0"],
      num_recipients_cap: 7623
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1068.0,
      is_shop_specified: true,
      available_shop_ids: ["d35e2114-6e74-445e-be91-fcf7d5333319", "4ab9bfcc-d5bc-4500-b773-4928876f7850", "b101e6b6-217c-4650-a128-116c471caf76", "db763418-7c06-420f-b44b-4097d23625e6"],
      storage_id: "b3078853-95ae-4024-b719-cdbd51222e8a",
      num_recipients_cap: 9723
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 2027.0,
      is_shop_specified: true,
      available_shop_ids: ["df4620db-6a95-4328-a605-dbc03254d048", "4e22026f-3bfb-4f69-b0ef-122eb91b1d21", "cda21411-99e5-48c1-9428-0f9ae8313cb0"],
      min_amount: 6478,
      storage_id: "5503cd2f-9f7d-4b0e-9e3b-d957339de445",
      num_recipients_cap: 6027
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 4307.0,
      is_shop_specified: false,
      available_shop_ids: ["5fccfba4-0530-4b25-af56-a9a8a9512f01", "64edd760-7206-4f0d-ae2c-16c2fe8ec60f", "fb5d8479-ceb6-48e3-89f2-2eda64316ecb", "dabee1ee-2df6-4a03-b9a2-fd746ed6f12c", "a973d6ce-1767-4d39-b31d-317c76286fef"],
      usage_limit: 1625,
      min_amount: 2596,
      storage_id: "f4f1412d-a77e-427b-a04d-67e0c72078f2",
      num_recipients_cap: 8892
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 7936.0,
      is_shop_specified: true,
      available_shop_ids: ["850796e1-61c7-441a-8ea5-9ca8f3e8cfc6", "aa7398a0-95f1-42ae-9958-3733d0014d5d", "13f47af7-1f65-46dc-a067-73dfe92fb84c", "13bdfc2e-e053-474b-8e80-0947944970ba", "72e0639e-65fd-490f-92f0-ad0bd22802dc", "88188871-092c-410b-92d3-25a3feda7c45", "b6a67b75-3e1d-4083-bdf7-8ee00456ff90", "a26abf4c-b457-4bd4-9639-8aa15de4f5ba"],
      code: "7",
      usage_limit: 194,
      min_amount: 9144,
      storage_id: "34c9209e-f9c0-409c-a6b8-73bd7fceae23",
      num_recipients_cap: 4869
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1606.0,
      is_shop_specified: true,
      available_shop_ids: ["423cfde6-9cce-4315-9a01-44066b841e7a", "55290b1b-7c6e-4072-9263-10ccef63b57d", "f6945139-9da8-4a03-aebe-a8c1a32fdfd0", "cd3e5863-1913-4ba1-95a4-3dbfae7b3fc4", "3d72d4a4-3581-4c8e-a823-4594c402a646", "277e208f-f6d6-4bd8-9d3d-6ec92bf0ef6d"],
      is_public: false,
      code: "JBKStcO3wB",
      usage_limit: 6526,
      min_amount: 220,
      storage_id: "100d21b3-87b0-475c-b497-d04aa13a7299",
      num_recipients_cap: 238
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 7835.0,
      is_shop_specified: false,
      available_shop_ids: ["88900b68-9c26-4ee7-8ab0-14f2ce783b11", "3d5ade4e-2ce9-4f3e-904f-af063f3a60b7", "89ee3901-a041-4fad-ae26-d1a0e8dfe50a", "17715863-04df-4171-b3e2-8eb1999d5bbb", "3bc41758-c80e-4d2e-b8dc-3c2ede37751c", "93fc686f-5a1b-4d00-8e51-4dada6810e85"],
      is_hidden: true,
      is_public: true,
      code: "9wf9SU",
      usage_limit: 6808,
      min_amount: 2228,
      storage_id: "ffc51dd7-456a-4c4c-8b31-f7fd6c88063d",
      num_recipients_cap: 6817
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 7100.0,
      is_shop_specified: true,
      available_shop_ids: ["2fe49c00-c654-4e3a-bf00-4a9ae9b507b0", "c79b2932-c51e-4747-8544-25469d961b27", "6606c6ec-1380-4da9-9e6f-cffa383ebb30", "053c9b3e-431c-477d-b951-ea4b7b886416", "a42ea035-1255-4a2f-8b25-7ea3b6011104", "e515b7c6-53f5-4927-85aa-e9940bd0f827", "51652ec3-a51d-43fd-b5be-1f086fc78f4a", "525375d8-4bd2-4422-9661-e0f913abb4c6", "08242ce6-0d36-4d6f-88f9-b3029dca9e3e"],
      is_disabled: false,
      is_hidden: true,
      is_public: true,
      code: "56A1wW",
      usage_limit: 1046,
      min_amount: 2298,
      storage_id: "5ee5a94b-a716-42ba-94ae-5b54425afaf8",
      num_recipients_cap: 3344
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 48', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 6637.0,
      is_shop_specified: false,
      available_shop_ids: ["00a42a1a-6131-4994-a27f-ba2b4ce00d80"],
      display_ends_at: "2020-07-05T09:23:03.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: false,
      code: "HT3R75Hu8",
      usage_limit: 4006,
      min_amount: 9049,
      storage_id: "3217704a-834a-40ed-b339-59e89499a0b1",
      num_recipients_cap: 1368
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 49', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 1806.0,
      is_shop_specified: true,
      available_shop_ids: ["722bb680-11f4-463e-b595-607fe4a5e4d3", "badc4f8d-ae73-4c89-9b1b-e8f3225b11ba", "6b9651e9-a541-4a6a-98cb-0ed7f190738d", "81c15685-a58a-4ff9-ba31-bd82eb65fc16", "3e53629b-23c3-482b-b60a-e9ef675ff836"],
      display_starts_at: "2025-05-19T00:04:15.000000Z",
      display_ends_at: "2022-02-23T22:44:51.000000Z",
      is_disabled: true,
      is_hidden: true,
      is_public: false,
      code: "DQNsufaS",
      usage_limit: 2429,
      min_amount: 2056,
      storage_id: "b082592d-7299-4778-b219-2856bba992d6",
      num_recipients_cap: 8987
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 50', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 8385.0,
      is_shop_specified: false,
      available_shop_ids: ["17cd90d1-f3ff-4da3-b1e5-afbbd727b3ae", "ff980451-1c5f-4e55-8882-6501933c7602", "d5d48e8a-3fce-4ed1-acc3-ba06ad2aa7e9", "376763fe-5b03-4ede-b407-a40d7655cf35", "13476c79-321d-4ba0-b95d-1451b21ac3d4"],
      discount_upper_limit: 2240,
      display_starts_at: "2023-10-16T06:43:20.000000Z",
      display_ends_at: "2020-08-17T08:21:00.000000Z",
      is_disabled: true,
      is_hidden: false,
      is_public: false,
      code: "WmjZW",
      usage_limit: 976,
      min_amount: 1260,
      storage_id: "fa644d19-5da2-4757-9b73-3274489723ea",
      num_recipients_cap: 4716
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check CreateCoupon | 51', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new CreateCoupon({
      private_money_id: "29daf902-7069-407c-9a02-ff8232b982f9",
      name: "kOey7zjJ6OyJP83x3uL",
      starts_at: "2021-07-15T21:58:58.000000Z",
      ends_at: "2022-07-27T15:59:16.000000Z",
      issued_shop_id: "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6",
      discount_percentage: 3703.0,
      is_shop_specified: true,
      available_shop_ids: ["d4ad3797-dd7d-4236-9c6c-1e867c47ecec", "c11540a7-9335-4684-ba66-db6ae1c145fa", "df20e943-0b48-4a61-bf70-9784c9ceff52", "3eafc484-fd30-4f34-8041-cf5c1e48b5c4"],
      description: "EFmUehgiDu605XKZkJCbVsNuqqVdUDyaVdHFVHz0uIFKJoDWeoZQYdDyUkA8HMjkxTYcusA1RKieQ1ldipC3qoQ",
      discount_upper_limit: 6488,
      display_starts_at: "2023-10-27T16:23:19.000000Z",
      display_ends_at: "2022-01-05T15:57:00.000000Z",
      is_disabled: false,
      is_hidden: false,
      is_public: true,
      code: "sqZ3Z",
      usage_limit: 9274,
      min_amount: 9775,
      storage_id: "bbfdaf46-733e-41b3-a723-db1edc87a1b8",
      num_recipients_cap: 265
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new GetCoupon({
      coupon_id: "0cf6e693-1468-4c06-b6ba-a13212640169"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 0', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 5191
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 1', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 2959,
      name: "fIfeAIGZfO7OrSr8B2QPQ9Y2Rpsj0heI"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 2', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9777,
      description: "cWBx1T31cQtfbPCATbfETgM8KooCtS8z1fc4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6Bb",
      name: "dWS6JCIu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 3', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 2989,
      discount_upper_limit: 6293,
      description: "5OFNrZXER72QaNrZpzYfcTDxwidoKxhgH4IlA44068ievlutMBS788il7UEqSzLy9xJxJq4hHbOAXXYVgVjKzFhmxuYV64qe5o2B2OlLXdk5kJbuw4YuJbyUdwtweakDyg0TFsZujDlCiTABlfIhphFt9MZHKK4Bljx7sJ424DF7dkePprAJuqXJLC9DlGjqYc53kHtf9cD7bpNKlOmIqFEpEzlkbZXsHeK96",
      name: "7zZjofXop8q4Bfps6VchHwOSBaSPaNKxM4bPYPan8UYIRAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfT"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 4', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9558,
      starts_at: "2025-03-15T18:20:56.000000Z",
      discount_upper_limit: 8218,
      description: "MgJI5wZ1cKhV863o3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87GnzBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUtXBf9of2MaByNhkorzLzXS7sax7iYOPlAj5UlMDxo6iDarlMDzJC7wMAkFYNemkzZpvDvog0lglLv2T90aOF7qLZJG6mWFW8mYG8iBpA9wK7FerKmMDJDN9kjnEAtWkM10yTZC3mt5NbCfjtxFXhJHy",
      name: "Zxe38yvM1SEczLfO3bcMSuKdq3FslGbkH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 5', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7687,
      ends_at: "2024-05-09T02:17:10.000000Z",
      starts_at: "2022-02-20T18:19:01.000000Z",
      discount_upper_limit: 958,
      description: "hxbbT2umORVj1yDfkPqeu7VGzhCxzDjEPJsArCV0qEvJPpVoq77PuYo1FVSdDE8cTf3i5qFGBCHYpL8ODBvwgaMAc0JPVvhl1tkrYQHQhhRs2PIaofbMQ1Wyxx6iPX8wNVpCNUyiEzApKM66ZkEOto1oTpzcZyDOIWVw",
      name: "oFQcmGYbDKlivyrCrMwSNsOLmKdqXCCeTbwp9jz"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 6', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 65,
      display_starts_at: "2021-06-03T04:32:45.000000Z",
      ends_at: "2021-06-18T15:44:43.000000Z",
      starts_at: "2020-03-03T13:28:57.000000Z",
      discount_upper_limit: 4325,
      description: "ybVqp1YrzurkqIAwcJ63x2Wplk",
      name: "qrFdjX6CETl764u1bEUuZsZXEigsXHGq2ofRToY5BXgCj"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 7', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 3785,
      display_ends_at: "2024-11-13T20:09:29.000000Z",
      display_starts_at: "2020-12-08T07:46:34.000000Z",
      ends_at: "2022-05-18T05:31:53.000000Z",
      starts_at: "2020-05-07T19:52:35.000000Z",
      discount_upper_limit: 8590,
      description: "XmOEMtSXxzZokGYkRiArikW",
      name: "ZSvWA49o8HQUEwyp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 8', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 6721,
      is_disabled: true,
      display_ends_at: "2021-06-25T15:59:22.000000Z",
      display_starts_at: "2023-01-31T02:27:56.000000Z",
      ends_at: "2023-03-07T17:36:27.000000Z",
      starts_at: "2024-01-19T13:32:35.000000Z",
      discount_upper_limit: 6150,
      description: "gSDOAS6m6W4ycEKeHr4636lRXTr2iPpZt0j1CI3l6J30qBjXV2f99mPOolq1eiW9RuNHXLsbYmrfHwiW6AehvKLu9jSykyDMxjQhXvqsNkUwpnxOJbMzTMi5NaDqvIkEgkU1iGJo4Veu1nD62pEennAfXO8IbuWWi93UYO",
      name: "WoEzm8A2AGl9yivXZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iL"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 9', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 8236,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-02-18T15:51:40.000000Z",
      display_starts_at: "2023-05-25T13:25:27.000000Z",
      ends_at: "2022-12-25T17:05:32.000000Z",
      starts_at: "2025-10-19T18:16:29.000000Z",
      discount_upper_limit: 8163,
      description: "eRH09p3Djf3UXXM3TuFXvJTrk8Ursx5VM8uakcEIyxQz7D46SGfEdpD0URVkFLTmlxp8SI9cXescrmSD5nkp7THGlyH3t2HB4wHFbCGx0Xzqx2wtaKpu1qdmiKn22F3ctIsxTTV24W3iMjgCaf4v1F7zb24",
      name: "TvVYyzGoNYLIXxqonkMGqX"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 10', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 6892,
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2025-05-06T23:59:55.000000Z",
      display_starts_at: "2023-09-26T04:04:26.000000Z",
      ends_at: "2024-12-23T14:16:50.000000Z",
      starts_at: "2022-03-19T23:37:53.000000Z",
      discount_upper_limit: 6391,
      description: "p9nn9cv0p2uygmHKqGnnOeMtFto3ZtBMyDD0JldWFE85",
      name: "jbUaTENhmx5ChLqBvfWnrg6wEB880lMBDEtofOwuX4DmXscPUoeV1XH78h5Guqwmdx9H0OP7RXsy9p5y2A7XdzXIFXZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 11', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 5390,
      code: "bjsii",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-03-01T21:18:37.000000Z",
      display_starts_at: "2023-06-05T01:45:34.000000Z",
      ends_at: "2020-12-20T19:43:37.000000Z",
      starts_at: "2025-02-15T19:31:27.000000Z",
      discount_upper_limit: 5528,
      description: "XZ0lFTg0",
      name: "buQwKeaQ4HWfPuDn8vtLGTKy9baAXpUrNxQgJv2d"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 12', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7857,
      usage_limit: 6890,
      code: "Dvx",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-05-13T20:18:21.000000Z",
      display_starts_at: "2022-03-07T15:34:04.000000Z",
      ends_at: "2021-01-27T16:37:18.000000Z",
      starts_at: "2021-05-18T05:10:41.000000Z",
      discount_upper_limit: 9448,
      description: "M2eopmIlmvqzqnGOYbg6rdqjemTbEPE7it6nxw8VlzyCNbz8zcALV0qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmGiUoPteza9Foxx3GETJuunMNM7JUVu7YgDI0zSm6",
      name: "cU49za1QJALcpDZJ7YKoaGZqFQRMYj7eI0OiTgfPr68fP2A8RCqV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 13', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9225,
      min_amount: 5907,
      usage_limit: 7530,
      code: "MZulltZtjg",
      is_public: false,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2022-02-19T06:13:26.000000Z",
      display_starts_at: "2021-09-15T03:46:42.000000Z",
      ends_at: "2022-05-18T07:31:16.000000Z",
      starts_at: "2020-03-07T16:49:15.000000Z",
      discount_upper_limit: 1459,
      description: "QgsidEuf2NvBHeZX8hYKnrzJWptMhyWUi64YZ",
      name: "GeyCSFHt3mcrCB8tq8q2IVY2UPxEK8mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3v7wYe7b9HTOa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 14', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7829,
      is_shop_specified: true,
      min_amount: 4727,
      usage_limit: 428,
      code: "mOJ",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-07-14T04:13:02.000000Z",
      display_starts_at: "2020-01-21T11:29:07.000000Z",
      ends_at: "2023-08-16T09:10:21.000000Z",
      starts_at: "2021-02-28T20:31:09.000000Z",
      discount_upper_limit: 7154,
      description: "gVZwJO2xNcltqUbvpNyoJI0vqJ8n0oUjQYsKaRMsrJUacY2rYQO4gmGHCfbUV5BkcqYiSNlDYC6MEWefziiHI3EykNpjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3HttlG4eyiatMI7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2YLnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzM",
      name: "BL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8NITOunWJGeGMfsCgwJoSsvq0p2vMuqT6yOdp5xmnGGOh83wDY3YT1DlU5jqThl0v0LlAw1sxsypK"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 15', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 4754,
      available_shop_ids: ["7d1e645f-8497-48d0-94c0-043c92beb3d5"],
      is_shop_specified: true,
      min_amount: 4,
      usage_limit: 9533,
      code: "h1",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2023-10-18T22:04:27.000000Z",
      display_starts_at: "2020-06-25T04:58:35.000000Z",
      ends_at: "2020-07-02T22:32:01.000000Z",
      starts_at: "2020-06-17T11:07:30.000000Z",
      discount_upper_limit: 9150,
      description: "x9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSuhWGSp4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDnAJbsKD6b895iftqbY67Ut2zsAKH6lKT6gJXbaEKAddoUM0CRdaSDeoQ9lXXELG9oQdgpEse81VvpXr3HeuSevupI3Lg6cydG4CQY3zROLCcC3cDzGwCmJXH",
      name: "iF5C2"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 16', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9717,
      storage_id: "52b1e4fc-def0-4c67-b048-ac5ea5b94670",
      available_shop_ids: ["87b4b7b0-21a7-4f7d-85d5-b5438701e8db", "3d95741f-9140-445b-9729-26c21dbc8e65", "6ad79143-d344-4727-9e81-c8927bb7f194", "64cac04c-4259-446e-8536-26bb1ea692c8", "d7d5149b-6469-4d86-9689-7492a75eb858", "507e816f-1f40-4ca1-875b-c01ececb7cb0", "1a0bb43c-d539-4e69-a8f2-628818f7201c", "23e318d2-21ea-490b-b4e1-67e5aa91563e", "8679d6ea-ded7-40cd-b92b-62c5d201af04"],
      is_shop_specified: true,
      min_amount: 4475,
      usage_limit: 4774,
      code: "3X",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2024-07-15T02:38:58.000000Z",
      display_starts_at: "2022-03-23T10:34:39.000000Z",
      ends_at: "2020-07-26T08:52:20.000000Z",
      starts_at: "2020-11-20T12:43:36.000000Z",
      discount_upper_limit: 1824,
      description: "BJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6F3HhJclpvEl0kBLWjkC",
      name: "0Mj5I3Hqz506kx1IdZKDkCNCl989Inr9h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovtOnbZ68JstsOcxw5P"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 17', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9660,
      num_recipients_cap: 9968,
      storage_id: "be1efd61-d474-44be-a346-e09c35cac798",
      available_shop_ids: ["f3956cd4-a7d5-4fb5-9740-48a769426835"],
      is_shop_specified: false,
      min_amount: 9100,
      usage_limit: 9837,
      code: "YIqjF",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2025-07-03T10:01:08.000000Z",
      display_starts_at: "2024-06-06T09:10:54.000000Z",
      ends_at: "2020-11-12T09:01:13.000000Z",
      starts_at: "2022-10-10T02:03:17.000000Z",
      discount_upper_limit: 1031,
      description: "VX7m2aCCypluKCuWAlkVHsDkHFJvihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo4vEubGw6jVHah2jNyPqoWcQPdnYsCcbQIY2KFXsspdkpVkTBJa3OTrsXs88kJNoIZ",
      name: "azm0l"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 18', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 5847,
      discount_percentage: 7376.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 19', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9484,
      discount_percentage: 806.0,
      name: "Z7efHVp4Du6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLngmui2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 20', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 5578,
      discount_percentage: 3283.0,
      description: "3uI6YbNMb4YSuPWKo7xO0kav9UABs7zcSSckrHrP7zrKa6Deu24AbEENpv2mR4vcFbZYPGyrsGLqJFlRMGfDCisIe5qHDsMdG7wb",
      name: "KEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85Vn4l2htJKp8EeWwIb"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 21', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 1052,
      discount_percentage: 8852.0,
      discount_upper_limit: 2773,
      description: "73CECtq6YH4jk",
      name: "jZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5c"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 22', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 3061,
      discount_percentage: 6265.0,
      starts_at: "2023-04-03T14:06:46.000000Z",
      discount_upper_limit: 7489,
      description: "tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9",
      name: "WUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQmRuyNCM"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 23', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 4234,
      discount_percentage: 8072.0,
      ends_at: "2020-12-11T20:02:56.000000Z",
      starts_at: "2020-06-04T03:34:31.000000Z",
      discount_upper_limit: 5452,
      description: "UAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn158N5eaT1YQUtPEMBFK5RCvbOFISTKPBIbnB4IlVfzKQeAZtwqv4AGYkQ5YWzuO0mrMzlLTVYxU13omHKmdh2ng7xlmB0D7qlClsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccciqGzpCuGxgjotbAnDFm6nBFTBcp5MgKi6djde9q9Gx06zspIhW3",
      name: "gmaN6JcrvmX5G7cBGoNqTURH3hLLIVR7YcRrTeQOsLdvK2PUyIdpshyxjFJxJ7Fc"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 24', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7786,
      discount_percentage: 2743.0,
      display_starts_at: "2025-10-29T02:13:45.000000Z",
      ends_at: "2023-01-05T11:43:30.000000Z",
      starts_at: "2021-05-05T12:10:12.000000Z",
      discount_upper_limit: 8107,
      description: "0WRFS5iP8DHnWS95dKYCDWjMDqXUFGoRA4XvfiL62Wv2vl8qJafcw",
      name: "BDpLTRN1a0lar5cvmWk6HP3Edv56q9t5VGuIJJqB3hC6IgJljp1y8KOJgfu"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 25', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 6324,
      discount_percentage: 3718.0,
      display_ends_at: "2024-03-20T00:24:38.000000Z",
      display_starts_at: "2022-05-11T09:54:28.000000Z",
      ends_at: "2024-11-11T09:35:23.000000Z",
      starts_at: "2022-08-26T18:42:18.000000Z",
      discount_upper_limit: 5929,
      description: "sPLKGiMRgfz5jiMdvRW63Z9043h9SU3fTD5o4Kn6TQ5PsH9YtmnNiOZyV9AO3DnB1YRES4xlc6449ibwy8gDnWqdIP3eIh1PycrJFKeRKa6OogwkyZYeik5qw2qVOD7lJwoEqJ4uimGtF4vDevDABoV1497oKjyplK",
      name: "XUyjuZoAdZa"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 26', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 361,
      discount_percentage: 5122.0,
      is_disabled: true,
      display_ends_at: "2022-06-30T15:35:01.000000Z",
      display_starts_at: "2024-05-24T14:26:04.000000Z",
      ends_at: "2022-06-04T01:57:55.000000Z",
      starts_at: "2020-10-20T07:21:23.000000Z",
      discount_upper_limit: 4202,
      description: "KemD9IJVji3EhQ10nakJ4Xx7BosawhL51XW0ltZ8tyBqdUl09HCPEoMCgQwCdLCVxkfS7LC09h1a33P4feIw8rNkq1IJcIVXzbXoLITUciADNRcm8cr7h7uvpVmJgh2hspBOtxaFVpQwu69vaYb020lVhpK1ujAV4SIGQkIPmfa5YJsZSIV5H0hKFZRjFJsBJwxE5ymHkkfvwj75uGxXyxLiKvyAHQ0Cmh0GR2iNpQgbrTS2",
      name: "EffP70DHCUohTMu269OO6DIw88je3Px2M6UQ20lAXsAZIDxFXqpctZUoXMEwvfZIhfCcdWRRW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 27', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 8100,
      discount_percentage: 2800.0,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2024-09-15T22:21:06.000000Z",
      display_starts_at: "2020-12-23T14:30:03.000000Z",
      ends_at: "2020-07-20T16:22:11.000000Z",
      starts_at: "2023-05-31T14:14:35.000000Z",
      discount_upper_limit: 9313,
      description: "HDvn680BNVo61whu52VEWHzeXnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2sW9FitjutUJJsIkCXGENUTkzcX2ykkKJlN107OaiUpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZq",
      name: "ZQp71KYV2dqA"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 28', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7784,
      discount_percentage: 2688.0,
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2022-04-02T07:11:07.000000Z",
      display_starts_at: "2025-04-26T08:43:40.000000Z",
      ends_at: "2022-03-04T22:15:30.000000Z",
      starts_at: "2025-03-31T08:49:04.000000Z",
      discount_upper_limit: 5339,
      description: "aTj6CKr7da3Hc5MrDSrYQmTFD8MK4LhwIRladKEnUCUBMTsHjSLXQWZdqZHXOS9NchMxuvMOV5pE0ThIcNVnpd1n04FvafoOT5XflXygJfyBJl1nws6Ne3S7kdpHli9FCf9vj51iwXi5vVkai7fMidPllBkchJ2ELHNBkuEPtWGn6U1tknXv7iBjpuz8kXfTQVt",
      name: "q7nYSMGg6A5q48d0VvhbqvZRxaI0AVDH5phIrM988xOpACBuWehCLI5Ithzp"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 29', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 8065,
      discount_percentage: 4401.0,
      code: "sbw0fi8Tfl",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2024-03-22T21:42:53.000000Z",
      display_starts_at: "2023-02-25T00:54:22.000000Z",
      ends_at: "2021-08-10T18:56:58.000000Z",
      starts_at: "2024-12-07T02:52:09.000000Z",
      discount_upper_limit: 1397,
      description: "uDN5NO2HkiJUlQ4dKgR3uo3pyHQKCLEzAV2HW0T6wtgFowhjkpuax7inTCKJlAlkDX0z9k4WtlP60t1pGDCB7WpLioRLUylhwp3jBXylmnzTDYQPTQEhEDpiIl88uXhFr9tzNaCFLhrW7Qg",
      name: "63LOoyDRk2frbKYD"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 30', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 4980,
      discount_percentage: 8408.0,
      usage_limit: 5505,
      code: "RSpeSviFk",
      is_public: true,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2021-04-19T02:45:43.000000Z",
      display_starts_at: "2021-07-19T14:56:00.000000Z",
      ends_at: "2025-10-28T11:06:25.000000Z",
      starts_at: "2020-10-14T22:40:49.000000Z",
      discount_upper_limit: 6515,
      description: "LMcNwe8KEeqmGGreSt4nt1ybC0Ywm3a7y1jkUDzYlQVbUnnRBBQRDsGnvgO2bodBPeKpRFsQIEwGMkEBFs4OKbpkXgOJ3P1nM9riBWugVW8sRaEhx8aJkSJHuUfzU3cxqLSG8S4aP0CNMNfb6VowWUVfzovzP7VL5ebcijLtVhmlM6kBu7DCNg4aU7BlWsNECFWA4hHlvtcjGtIP",
      name: "dSKiVX8t6IuP7AfSh1iSdnomWlXA8y2vwAsTNYaeLyV7CWdrmk7DRyx2nAdRh4U2Gnj6HilrfsKlPIExrXeCFOu5KxrV4xhz7D"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 31', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7706,
      discount_percentage: 1426.0,
      min_amount: 3231,
      usage_limit: 633,
      code: "wKIci",
      is_public: false,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-07-26T01:22:08.000000Z",
      display_starts_at: "2024-01-15T06:13:31.000000Z",
      ends_at: "2021-11-03T08:36:35.000000Z",
      starts_at: "2020-09-12T13:10:36.000000Z",
      discount_upper_limit: 4113,
      description: "0uBHj0xIlmI7crwjgiJmBq8x2BMoiejWmPY8qwKCFWRUhTWJtrSHM5KvGCx3jvLeQXqJ7fOtRApW564YK0LvLN69VHlYJhXH6cUQL7XLfiXA0zUZ8WIiKSeWU9z6lAbD3wpFlmsWusC8RGaBKUJdHLf9kwaxRbmzAo5vzrqC43kvR5VzS4JSx7Qk5qYm8EJV1By6vGk0FuWZ3pt",
      name: "SyNBcc9paWacdvlF8sKq6M8TMch0t9MLsXgvG8EYKbsPpBkO0z5h9VDX3NEhsO0rjGagOIQ6x9sSfu0zX8zdCniT7rbp4RdF8jzLLX07kGwm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 32', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 9480,
      discount_percentage: 5594.0,
      is_shop_specified: true,
      min_amount: 1848,
      usage_limit: 185,
      code: "QJDye",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2022-07-02T17:59:10.000000Z",
      display_starts_at: "2023-02-17T22:34:24.000000Z",
      ends_at: "2024-04-22T23:39:24.000000Z",
      starts_at: "2025-06-10T13:56:49.000000Z",
      discount_upper_limit: 7302,
      description: "rhi7",
      name: "h3KP4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1SL4LwXctk2uyuazqzFpngLk90ZBFe71DIECbUavopCer6amUqWii2uDVrmTki6pqO0f8cnptMkBRjm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 33', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 4318,
      discount_percentage: 175.0,
      available_shop_ids: ["49dacaac-4d87-4495-ae2d-db62263e6165", "5214c343-0b8f-4467-b487-bb78273855f5"],
      is_shop_specified: false,
      min_amount: 40,
      usage_limit: 9069,
      code: "oxK",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-07-23T17:53:29.000000Z",
      display_starts_at: "2021-11-06T23:06:42.000000Z",
      ends_at: "2022-09-06T10:35:57.000000Z",
      starts_at: "2023-11-06T14:53:35.000000Z",
      discount_upper_limit: 9054,
      description: "T4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5hhBZBCZgSERTDaoK9IqITw9RXh5VLaBXSS3EzsrMpj8GBIyJaRyweuGKy2nXN4UBPwGQ9",
      name: "mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEzr"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 34', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 7547,
      discount_percentage: 3104.0,
      storage_id: "524fe6d7-f335-489f-9cc6-35c5ee40bf18",
      available_shop_ids: ["a5bdb8b6-6156-453e-b089-ba92fbe95997", "7dfb82d6-b3a8-4cf1-b5b1-7bc43ff6ba9e"],
      is_shop_specified: true,
      min_amount: 385,
      usage_limit: 654,
      code: "0JaBs",
      is_public: true,
      is_hidden: true,
      is_disabled: true,
      display_ends_at: "2020-10-23T06:23:01.000000Z",
      display_starts_at: "2021-08-29T15:21:57.000000Z",
      ends_at: "2024-09-30T12:43:36.000000Z",
      starts_at: "2025-10-18T13:06:59.000000Z",
      discount_upper_limit: 2510,
      description: "2R5bV74h6MclFLskpVJhF8OvhWGp3gTZC60RTw4fZ8zWBqSC3vDIMcnoo",
      name: "U2vsEkhFzbMP7H4x70jy8CyXSjsNQfhm4Jdi"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 35', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_amount: 2642,
      discount_percentage: 5291.0,
      num_recipients_cap: 530,
      storage_id: "d25d1755-061e-4e30-b341-9eaad8783178",
      available_shop_ids: ["0af94a3e-2f70-4fa5-85de-91cb93161b03", "f023c26f-020a-4c5d-b97e-2e50a6c64272", "6ff89cb8-6a74-40dd-86ee-c80439a12743", "6cce19d2-f534-4762-b356-56a8be2307d6", "3ca3ce0e-cce3-4d6e-aa40-74d2853edcb7", "c79828f9-59af-4cd3-a10a-79d42f6e8311", "60897fca-9c53-494c-95de-10baeba560d8"],
      is_shop_specified: false,
      min_amount: 978,
      usage_limit: 1066,
      code: "aOCY9HY",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2025-05-07T01:42:39.000000Z",
      display_starts_at: "2020-09-22T02:49:20.000000Z",
      ends_at: "2025-05-13T16:56:07.000000Z",
      starts_at: "2020-04-13T23:28:26.000000Z",
      discount_upper_limit: 921,
      description: "aJMcRsZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQafvlfkuyBchbjOVFfaAmwoPiUeFs2qGGZk77",
      name: "FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 36', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 1288.0
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 37', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 9257.0,
      name: "2j42XbKSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 38', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 8352.0,
      description: "BYQYTGkBMdZ9gxwOlUDOeBSRiyqeameMaY0bgN8gTUkelv3hkG",
      name: "mk4iWQZAVafOlabiOcE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 39', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 1900.0,
      discount_upper_limit: 1191,
      description: "oh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPrWNcD1BCJ2Q7A3yxMyBqUSnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3",
      name: "iuFQrrgeXzyNXNrNkeWa9hW"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 40', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 2675.0,
      starts_at: "2022-12-30T16:19:20.000000Z",
      discount_upper_limit: 1484,
      description: "o6RhlRrNdmMatyDW12s5SKsd06fYHa9pHdUJ2NkpD9XRln1g4q1AmzenaBAIYsPX5BEVEkSwN7Jl7UfMqNeI",
      name: "xDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5qnBpeG29h"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 41', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 9367.0,
      ends_at: "2025-02-08T16:22:47.000000Z",
      starts_at: "2020-04-18T22:19:14.000000Z",
      discount_upper_limit: 862,
      description: "NKIGuoyWD3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsiJ",
      name: "l1b2ESaJKCDCVaIjvXY9buv1PGDaqpxNAcB7XJ2PMH0HA7mMCxlziaJ1nphI9ySRxw6pdyrj7YEb5BIbPwZ"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 42', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 2647.0,
      display_starts_at: "2022-03-12T20:01:38.000000Z",
      ends_at: "2022-10-31T14:00:59.000000Z",
      starts_at: "2023-01-15T04:41:20.000000Z",
      discount_upper_limit: 6574,
      description: "tKeWMAfjTzhjO10bQwyTU6ZUhrOp80a47LYIcD579HHiyd",
      name: "wYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 43', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 8233.0,
      display_ends_at: "2025-04-07T10:49:08.000000Z",
      display_starts_at: "2023-01-26T06:20:22.000000Z",
      ends_at: "2021-12-18T10:47:06.000000Z",
      starts_at: "2024-01-11T17:03:52.000000Z",
      discount_upper_limit: 9405,
      description: "b2ZIYN08OgDDQYpUk9QvTpwbva3X3fUufQzzx2hzebS68SpNEGkfmS3Uyy5Zn41VzLKUg3om1YNfeeKoLdFE8Hmt9R8Bv1AJsBz3l6W699PQnfTErfIkmiU4i2bFcY",
      name: "t3zvnnQAgg6WKGNaTc3A08bOic61u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazS"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 44', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 3040.0,
      is_disabled: true,
      display_ends_at: "2024-02-07T16:32:44.000000Z",
      display_starts_at: "2025-10-15T21:04:32.000000Z",
      ends_at: "2023-03-04T12:41:37.000000Z",
      starts_at: "2025-07-21T03:07:06.000000Z",
      discount_upper_limit: 8648,
      description: "6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ8nedbEkL6VCbZlYCZFu0YjXrvick1kbCzvMElblaTUskxDWTi4syFdijXYZ6Fkp0v2rObj5KP7CaX5R9O7h",
      name: "OQMfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq2k3ETquM3SQujWFDE153B47G8gAIFr9zY1ABG4Q6S1AZ81ee9F1zaeUGprRtPpZgZzOhvm"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 45', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 1142.0,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2020-05-09T20:33:15.000000Z",
      display_starts_at: "2022-05-31T08:38:31.000000Z",
      ends_at: "2024-01-09T14:28:19.000000Z",
      starts_at: "2021-02-01T09:43:50.000000Z",
      discount_upper_limit: 1813,
      description: "e7aM7QiN4LuTtB8ZF5mN9clYyKl8cUsYw8CW8rHVcm",
      name: "ZsjKlFT0f7did2pSfVDNNjekhaUaqNZOry7pQcwkQvvHfTZTUiaSBniTvgiFcfFWfXoobW27D2zSsjxSJQCC2TKE"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 46', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 7038.0,
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2024-05-20T07:28:29.000000Z",
      display_starts_at: "2023-01-17T17:32:35.000000Z",
      ends_at: "2021-08-07T09:03:41.000000Z",
      starts_at: "2020-04-13T21:41:33.000000Z",
      discount_upper_limit: 2219,
      description: "0u0i2E7e3WCog3HknLhb4mGHjaX24jJAlJFQ82MhyQQoipgFNSux0jeobdQD1VXjUggH7qMtHhSfZdXUyjb1NxKa8yAWf3eI4rn2GKxT8MfsHveV88627AlMJYf8MI0c9iCp3raZonaiDazAfoVN5ZcNoMxEFE11voG9m7gWIlidcsFhnnSlOPQS",
      name: "KVW980GqQVfPuvUPiEFV6mDyiAjmPC8FhIFplNkUQpOFZAAuAkdYYYV8q02r77ePIgPu4dPH7ImSF7bIQ97lNoNEqqi11P4GN23Eb6NlDd7BTwpYu4Valw5xiIJ7Q1"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 47', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 6553.0,
      code: "ipp2",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-06-15T08:52:34.000000Z",
      display_starts_at: "2023-04-20T21:23:50.000000Z",
      ends_at: "2025-03-26T07:26:06.000000Z",
      starts_at: "2020-11-27T03:39:30.000000Z",
      discount_upper_limit: 610,
      description: "Pk0z0U5np6zSSSsJChBCfGVrTTzFEA3cEkuniAENmbJtM74yoK3yNaovdjb7urlPondGWEfVzKMwihh3UCJATPnnGfbSAjt8y1LpRX9w3aEMSDM7H6DKpMVCMs6AqPF1N4VGIihJYcZH1yqyLKdrb7VdvBferrdPPsgFTBp21GVpuNthlN8cTNxtClPPAh3ydu7juMaO7kqGjaASQkqyw2Q45pim16jWY8Li2",
      name: "yJuAILC9WmiQzTAP0hsvYk94ECXfwyrT6FN"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 48', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 9427.0,
      usage_limit: 7397,
      code: "PJDkaNGUUF",
      is_public: false,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2021-07-26T09:06:59.000000Z",
      display_starts_at: "2024-09-13T11:41:26.000000Z",
      ends_at: "2024-07-20T10:33:31.000000Z",
      starts_at: "2021-05-20T23:39:01.000000Z",
      discount_upper_limit: 5562,
      description: "BCxguWkgEaSRxikajDhky1e9MUM8ZY9eEBDTjFI18oRpgCoDiEOfsuO3LMtzPm5pmHiztzTLcjSeNyveotr1SbL",
      name: "9f9RM3h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ipOldTUQCXPcZtLDZ6t1d7NhS3tIbiaQ9UqJH"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 49', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 2522.0,
      min_amount: 7901,
      usage_limit: 7403,
      code: "E",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2020-05-28T12:24:09.000000Z",
      display_starts_at: "2021-11-03T07:16:49.000000Z",
      ends_at: "2024-03-26T07:31:08.000000Z",
      starts_at: "2023-03-13T04:04:10.000000Z",
      discount_upper_limit: 1591,
      description: "MZwoONY9mYcjUD3BWfN3hpObBbd0WPCuqh90wnUEefdvvGn56xgqcINC0MaOVTzOYUS4YiFzadS1dG4VhCAXdvLcusNkP92lEHAtBr5uMSg7mI2h9L5UgNjF9pGXPoR6V6EH9oG2E8mJwg74tJdyJ5Llab29gfUQ6hTQL306GhITMLHDmfb2965KcWooPsLAa0LofoeILq2j1JbokM11iel9",
      name: "SifEKQQKEl5jTOYEn550ChTMJy5Ri4zQipR66DYXbWwtCBK4yI7b7ruIn1DQefV"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 50', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 892.0,
      is_shop_specified: true,
      min_amount: 2267,
      usage_limit: 4555,
      code: "n0D",
      is_public: true,
      is_hidden: false,
      is_disabled: true,
      display_ends_at: "2023-07-21T22:03:12.000000Z",
      display_starts_at: "2024-02-25T02:47:13.000000Z",
      ends_at: "2024-11-19T08:33:53.000000Z",
      starts_at: "2021-04-04T18:45:44.000000Z",
      discount_upper_limit: 5117,
      description: "gLXLPq2aRw08aQ0rfHosccmXhG1yeE5aq4GKVSCfP0aoPIG5NuiBMU7rfLf6FhpORYw57l88LjJn33RIRSOmlXSQfzzTwn3Dxt4Xew7YzDaZ1J9OdsQM2IVUV93tsgTE0JEew3ek7732woVpaWAn4e207OnXy1NWRJfp7ZK3WimQaowti0F0S2aIOKkN5iwpVUwFU1amkd1FBZBysFgH8T",
      name: "yAaF4dUSAbqyi68iyJ302sQl233vCftoqwC5tymvF1K23X2uYu46ypSW9PxtiaID1SUCfz9yEelMoF9a26c2RLHzQWOO42l0o0g8SXRzZ3"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 51', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 9685.0,
      available_shop_ids: ["9ff3c248-a0e5-43d8-ae75-61dbf89814f5", "8242d677-eae7-40a8-9c15-b431cd60c332", "cf50d417-2bd9-4b87-a7e7-d8ad3a530c04", "a1fa7901-0901-4833-9718-b313b50f8c84", "20aacec1-3ef3-48bb-944f-5a725728d8f9", "142881fd-9349-42ce-8b88-2760a77bdf79", "5259acd2-896d-4dca-b3e7-ba1bb102b18b", "d8fd0a8d-94ff-49d7-8319-bd934b765944", "51c92063-4209-496d-b3f5-d32d6b9d0ef6"],
      is_shop_specified: true,
      min_amount: 7942,
      usage_limit: 5837,
      code: "JeP",
      is_public: false,
      is_hidden: true,
      is_disabled: false,
      display_ends_at: "2021-04-24T23:09:48.000000Z",
      display_starts_at: "2024-02-17T18:16:59.000000Z",
      ends_at: "2022-07-09T22:31:35.000000Z",
      starts_at: "2021-03-17T15:58:39.000000Z",
      discount_upper_limit: 1000,
      description: "v4aIw1aGtGR3fEQezBo8XnXONHGXDMcl8tuhVdB5KkP8PHvZEmmcBKkGsr9sdEDTBkey7pr4d2jpaf36YY6mrG9Y2ztoKUUUx5B1bSO8xEgnoe60dnWTCVmm3x115QsBZT6dCGgqZsePkl6iY0bdXM6Nza2rTctUJQmh",
      name: "gNd3qkWY4lVW5zCUF3zWzIdrHm6OsiyHBxsWBtx4G7cLViMBy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 52', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 8515.0,
      storage_id: "148f3f26-f2c2-454e-affa-08e387e2b319",
      available_shop_ids: ["61523ec3-28be-4981-8c84-0858f21b7ab5", "ec318b5d-d6ff-4dfb-a262-0173e556febf", "9952cd50-f78c-48fa-9685-a555da7a4547", "d963d5e5-649a-4944-9132-aebde3eb850b", "badf4fa0-8042-4057-82f0-33ba9672bd32"],
      is_shop_specified: true,
      min_amount: 2569,
      usage_limit: 7485,
      code: "UNEsAtEjl",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2020-04-15T22:23:38.000000Z",
      display_starts_at: "2025-05-30T02:14:35.000000Z",
      ends_at: "2021-04-04T12:35:35.000000Z",
      starts_at: "2022-05-14T21:47:09.000000Z",
      discount_upper_limit: 1200,
      description: "NhalsavWYZduuXynvh05rJdAnnK",
      name: "kjJzRbGyuQYyb8948tP6VkRaNaNdjmk2wkclkjGIdrGdF8qpLKYfd3JbJX5QcdKyJ1DmsToKu4w1tRUaP"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check UpdateCoupon | 53', async () => {
  let status = 400;
  try {
    const response: Response<CouponDetail> = await client.send(new UpdateCoupon({
      coupon_id: "896e091b-3a3c-47eb-910b-20ac3cf00f1f",
      discount_percentage: 9185.0,
      num_recipients_cap: 8412,
      storage_id: "c1b8254d-5eb8-4b37-a03a-1500982e821c",
      available_shop_ids: ["01212e27-1d4d-4af4-b7fc-7a624a9587d7", "33f0db96-6179-405b-8a16-95bcfc85cd9d"],
      is_shop_specified: false,
      min_amount: 8179,
      usage_limit: 8313,
      code: "zqkBr",
      is_public: true,
      is_hidden: false,
      is_disabled: false,
      display_ends_at: "2023-04-04T05:10:37.000000Z",
      display_starts_at: "2021-09-17T10:58:50.000000Z",
      ends_at: "2020-10-08T14:39:18.000000Z",
      starts_at: "2024-08-11T19:05:06.000000Z",
      discount_upper_limit: 4017,
      description: "sugqjEeek3DeIDBfKsRBbYLkU2TfJXzuBqGFPReFsmxaxT8Xwuc649dznjsqwxML0aHpiMuFL917lUTrE8EACTMWkW53gnqE0TT1OD00WYy85d5RKAlbrPQ0st0t7yJcv8GqBqgGEHafl1jNP9k7uydClg9A7an27PrVxBq",
      name: "E9YWo8xjmzBGJVwTTanAXyFjLag3gPPvlq0FFntKGY10p27NPGQTdAXKNGuLNgDO4Ma1ptA22IkyjkgPuZUMAq2NjJocNYKTrm2m1ssPqy"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

test('Check GetSevenBankAtmSession | 0', async () => {
  let status = 400;
  try {
    const response: Response<SevenBankATMSession> = await client.send(new GetSevenBankATMSession({
      qr_info: "3XyCF"
    }));
    status = response.code;
  } catch (e) {
    if (axios.isAxiosError(e) && e.response) {
      status = e.response.status;
    }
  }
  expect(typeof status).toBe('number');
  expect(status).not.toBe(400);
})

