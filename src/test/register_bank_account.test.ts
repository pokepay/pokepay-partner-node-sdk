// DO NOT EDIT: File is generated by code generator.

import {
  Client,
  VERSION,
  Request,
  Method,
  Response,
  ListBanks,
  Banks,
  CreateBank,
  BankRegisteringInfo,
  ActivateUserDevice,
  GetUserDevice,
  CreateUserDevice,
  UserDevice,
  ListBillTransactions,
  PaginatedBillTransaction,
  ListTransactionsV2,
  PaginatedTransactionV2,
  CreatePaymentTransactionWithBill,
  UpdateBill,
  CreateBill,
  Bill,
  CreatePaymentTransaction,
  CreateTopupTransaction,
  TransactionDetail,
  CreateShopV2,
  ShopWithAccounts,
  CreateCustomerAccount,
  AccountWithUser,
  SendEcho,
  Echo,
  ListOrganizations,
  PaginatedOrganizations,
  CreateOrganization,
  Organization,
  UpdateWebhook,
  CreateWebhook,
  OrganizationWorkerTaskWebhook,
  DeleteWebhook,
  ListWebhooks,
  PaginatedOrganizationWorkerTaskWebhook,
} from '../index';

import * as util from './util';

const client = new Client("~/.pokepay/test-config.ini");

test('testRegisterBankAccount', async () => {
  const customer_name: string = "customer-name" + util.randomString(6);
  const account_name: string = "account-name" + util.randomString(6);
  const customer: AccountWithUser = <AccountWithUser>(await client.send(new CreateCustomerAccount({
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",

    "user_name": customer_name,
    "account_name": account_name,}))).object;
  const user_device_metadata: string = "{\"user_agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0\"}";
  const user_device: UserDevice = <UserDevice>(await client.send(new CreateUserDevice({
    user_id: customer.user.id,

    "metadata": user_device_metadata,}))).object;
  const get_user_device_response: UserDevice = <UserDevice>(await client.send(new GetUserDevice({
    user_device_id: user_device.id,
  }))).object;
  expect(get_user_device_response.is_active).toBe(false);
  const user_device_activated: UserDevice = <UserDevice>(await client.send(new ActivateUserDevice({
    user_device_id: get_user_device_response.id,
  }))).object;
  expect(user_device_activated.is_active).toBe(true);
  const create_bank: BankRegisteringInfo = <BankRegisteringInfo>(await client.send(new CreateBank({
    user_device_id: get_user_device_response.id,
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
    callback_url: "dummy",
    kana: "ポケペイタロウ",
  }))).object;
  const bank_accounts_listed: Banks = <Banks>(await client.send(new ListBanks({
    user_device_id: get_user_device_response.id,
  }))).object;
  expect(bank_accounts_listed.count).toBe(0);
})
