// DO NOT EDIT: File is generated by code generator.

import {
  Client,
  VERSION,
  Request,
  Method,
  Response,
  ListBillTransactions,
  PaginatedBillTransaction,
  ListTransactionsV2,
  PaginatedTransactionV2,
  CreatePaymentTransactionWithBill,
  UpdateBill,
  CreateBill,
  Bill,
  CreatePaymentTransaction,
  CreateTopupTransaction,
  TransactionDetail,
  CreateShopV2,
  ShopWithAccounts,
  CreateCustomerAccount,
  AccountWithUser,
  SendEcho,
  Echo,
  ListOrganizations,
  PaginatedOrganizations,
  CreateOrganization,
  Organization,
  UpdateWebhook,
  CreateWebhook,
  OrganizationWorkerTaskWebhook,
  DeleteWebhook,
  ListWebhooks,
  PaginatedOrganizationWorkerTaskWebhook,
} from '../index';

import * as util from './util';

const client = new Client("~/.pokepay/test-config.ini");

test('testCreateNewCustomerWithAccount', async () => {
  const user_name: string = "user-name" + util.randomString(6);
  const account_name: string = "account-name" + util.randomString(6);
  const customer_account: AccountWithUser = <AccountWithUser>(await client.send(new CreateCustomerAccount({
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",

    "user_name": user_name,
    "account_name": account_name,}))).object;
  expect(user_name).toBe(customer_account.user.name);
  expect(account_name).toBe(customer_account.name);
  const shop_name: string = "shop-name" + util.randomString(6);
  const shop: ShopWithAccounts = <ShopWithAccounts>(await client.send(new CreateShopV2({
    name: shop_name,

    "private_money_ids": ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"],
    "can_topup_private_money_ids": ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"],}))).object;
  const topup_transaction: TransactionDetail = <TransactionDetail>(await client.send(new CreateTopupTransaction({
    shop_id: shop.id,
    customer_id: customer_account.user.id,
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",

    "money_amount": 1000,
    "point_amount": 1000,}))).object;
  expect(topup_transaction.type).toBe("topup");
  const payment_transaction: TransactionDetail = <TransactionDetail>(await client.send(new CreatePaymentTransaction({
    shop_id: shop.id,
    customer_id: customer_account.user.id,
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
    amount: 100,
  }))).object;
  const bill: Bill = <Bill>(await client.send(new CreateBill({
    private_money_id: "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
    shop_id: shop.id,
  }))).object;
  const bill_updated: Bill = <Bill>(await client.send(new UpdateBill({
    bill_id: bill.id,

    "amount": 200.0,}))).object;
  const bill_payment: TransactionDetail = <TransactionDetail>(await client.send(new CreatePaymentTransactionWithBill({
    bill_id: bill.id,
    customer_id: customer_account.user.id,
  }))).object;
  expect(payment_transaction.type).toBe("payment");
  expect(bill_payment.type).toBe("payment");
  const transactions: PaginatedTransactionV2 = <PaginatedTransactionV2>(await client.send(new ListTransactionsV2({

    "private_money_id": "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
    "shop_id": shop.id,
    "customer_id": customer_account.user.id,}))).object;
  const bill_transactions: PaginatedBillTransaction = <PaginatedBillTransaction>(await client.send(new ListBillTransactions({

    "private_money_id": "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
    "shop_id": shop.id,
    "customer_id": customer_account.user.id,}))).object;
  expect(transactions.count).toBe(3);
  expect(bill_transactions.count).toBe(1);
})
