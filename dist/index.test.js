"use strict";
// DO NOT EDIT: File is generated by code generator.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const index_1 = require("./index");
const client = new index_1.Client("~/.pokepay/test-config.ini");
jest.setTimeout(30000);
test('Check VERSION', async () => {
    expect(index_1.VERSION).not.toBe(null);
});
test('Check GetPing | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPing());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check SendEcho | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.SendEcho({
            message: "cp6PWCiN"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetUser | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetUser());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListUserAccounts | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListUserAccounts({
            user_id: "637c48af-86f9-48ed-82e1-99558a467bfe"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListUserAccounts | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListUserAccounts({
            user_id: "637c48af-86f9-48ed-82e1-99558a467bfe",
            per_page: 1463
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListUserAccounts | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListUserAccounts({
            user_id: "637c48af-86f9-48ed-82e1-99558a467bfe",
            page: 7917,
            per_page: 1490
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateUserAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateUserAccount({
            user_id: "31dc1298-055d-4297-bbc9-08903a48350d",
            private_money_id: "ccb6120b-f2f9-43d6-8e7f-9bbfa5014386"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateUserAccount | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateUserAccount({
            user_id: "31dc1298-055d-4297-bbc9-08903a48350d",
            private_money_id: "ccb6120b-f2f9-43d6-8e7f-9bbfa5014386",
            external_id: "YRttS"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateUserAccount | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateUserAccount({
            user_id: "31dc1298-055d-4297-bbc9-08903a48350d",
            private_money_id: "ccb6120b-f2f9-43d6-8e7f-9bbfa5014386",
            name: "46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa6h6AAgB9jXehhbgsn",
            external_id: "HZ1n3qwk3r3QhfSXAhy6Q6NsE0G4ETHn0hBw4No1YX"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetAccount({
            account_id: "32b7e32a-417d-4b5b-b95f-0517f39e0dc7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateAccount({
            account_id: "e0c7ebbf-e161-4aa3-8e12-44b92aacbcdb"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateAccount | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateAccount({
            account_id: "e0c7ebbf-e161-4aa3-8e12-44b92aacbcdb",
            can_transfer_topup: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateAccount | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateAccount({
            account_id: "e0c7ebbf-e161-4aa3-8e12-44b92aacbcdb",
            status: "suspended",
            can_transfer_topup: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateAccount | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateAccount({
            account_id: "e0c7ebbf-e161-4aa3-8e12-44b92aacbcdb",
            is_suspended: true,
            status: "active",
            can_transfer_topup: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check DeleteAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.DeleteAccount({
            account_id: "6af14701-52c9-438f-8cd1-4522b37b354f"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check DeleteAccount | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.DeleteAccount({
            account_id: "6af14701-52c9-438f-8cd1-4522b37b354f",
            cashback: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4",
            expires_at_to: "2020-09-19T13:48:01.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4",
            expires_at_from: "2025-02-17T09:00:13.000000+09:00",
            expires_at_to: "2019-10-20T14:27:24.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4",
            per_page: 4788,
            expires_at_from: "2021-10-29T02:13:26.000000+09:00",
            expires_at_to: "2018-02-08T18:23:59.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountBalances | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountBalances({
            account_id: "aa952ed2-dbf3-4123-a50d-e5a6aaa192d4",
            page: 8836,
            per_page: 3111,
            expires_at_from: "2024-12-19T22:16:30.000000+09:00",
            expires_at_to: "2020-04-23T10:19:04.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d",
            direction: "desc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d",
            expires_at_to: "2018-01-07T11:44:13.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d",
            expires_at_from: "2022-01-01T22:46:18.000000+09:00",
            expires_at_to: "2017-11-27T09:29:59.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d",
            per_page: 4557,
            expires_at_from: "2018-07-29T22:37:08.000000+09:00",
            expires_at_to: "2015-11-23T13:01:42.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListAccountExpiredBalances | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListAccountExpiredBalances({
            account_id: "6053602f-6996-4018-baf7-ab487b65cc3d",
            page: 4776,
            per_page: 2832,
            expires_at_from: "2017-05-15T01:24:49.000000+09:00",
            expires_at_to: "2023-10-24T04:34:29.000000+09:00",
            direction: "asc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCustomerAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCustomerAccount({
            account_id: "95859146-454a-4004-8d9c-5a75e130fc96"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCustomerAccount | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCustomerAccount({
            account_id: "95859146-454a-4004-8d9c-5a75e130fc96",
            external_id: "uuYDxHZdnikAchiJb"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCustomerAccount | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCustomerAccount({
            account_id: "95859146-454a-4004-8d9c-5a75e130fc96",
            account_name: "P3ZTnJxIJTqpbj9hQa29LtqbzIUCtrgI5GH6wQi2f3OojTDEk0fitYgKzfXu0N7ZPQ6Ey6Tu3BU56A0DovC2AWlgsj8AO1bqHH9NHpqZwH1tkpyNDcuWxfr4xKRRC5UPfddKJfLPJmxAhDpkltxfpGBgKzLBWMCYifXDXPCbHnT3R8fCd8115VzfSNwUPij0JCeKaErwIngTct5VctC8ahS",
            external_id: "576Yk267"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCustomerAccount | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCustomerAccount({
            account_id: "95859146-454a-4004-8d9c-5a75e130fc96",
            status: "active",
            account_name: "Nuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl5vCAHh7QD95u0YIcm0Sp2RluFOAxJTKKlkJp5",
            external_id: "ENq52OLTcJlns"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            email: "uy1tusdwen@7Z1w.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            tel: "0697-54760",
            email: "LwrBpORQ9L@HlnK.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            external_id: "RmCd4nad",
            tel: "094-8114-9210",
            email: "n3W7S36l34@SSSO.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            status: "active",
            external_id: "W72gqSjd8QPzbjt0rt7UmerReZGbvGgvA",
            tel: "09215911045",
            email: "P1AnQALadF@sAzg.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            is_suspended: true,
            status: "pre-closed",
            external_id: "jbtuXgZDedIJ",
            tel: "000778729",
            email: "wZBj5AvHdO@2Atf.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            created_at_to: "2015-12-30T22:16:08.000000+09:00",
            is_suspended: false,
            status: "pre-closed",
            external_id: "LabY2vDzXzQx3sP8V6IT9VFC5bo0KX",
            tel: "0013145010",
            email: "0hMJ4nPgNJ@OUuV.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            created_at_from: "2019-12-05T13:57:19.000000+09:00",
            created_at_to: "2022-02-22T18:14:24.000000+09:00",
            is_suspended: false,
            status: "suspended",
            external_id: "SOX0vTgyFK1FOp7pl9MWii2exA",
            tel: "017580-734",
            email: "QZQAnUYeKI@bZQu.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            per_page: 4748,
            created_at_from: "2023-12-18T01:39:45.000000+09:00",
            created_at_to: "2020-07-26T04:04:23.000000+09:00",
            is_suspended: false,
            status: "pre-closed",
            external_id: "LvTyMcIYlLoYSz5",
            tel: "0284-00934",
            email: "Pyt1wTnktL@8AYk.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCustomerAccounts | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCustomerAccounts({
            private_money_id: "cd5dcf9b-8d1a-4b61-ab17-a6b7a77ec27a",
            page: 5473,
            per_page: 3523,
            created_at_from: "2022-05-20T14:09:12.000000+09:00",
            created_at_to: "2023-11-02T02:20:46.000000+09:00",
            is_suspended: false,
            status: "active",
            external_id: "7caRgncONv8Kje2pU",
            tel: "01-45-879",
            email: "AkJDB6ZsUU@sk6u.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCustomerAccount | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCustomerAccount({
            private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCustomerAccount | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCustomerAccount({
            private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
            external_id: "ysmBoCy1Ud1e5PrxfXmPZX1VlVfqebv0ckwSJ4e9e0p"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCustomerAccount | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCustomerAccount({
            private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
            account_name: "47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2H",
            external_id: "jQnZoVWhOdLDSpe"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCustomerAccount | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCustomerAccount({
            private_money_id: "ff601d6d-8a40-4fc9-9ee4-9debe4fa872c",
            user_name: "9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS",
            account_name: "m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3Mioe",
            external_id: "O7gkONNAjBCYm4KWE"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
            is_suspended: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
            created_at_to: "2018-07-26T01:51:22.000000+09:00",
            is_suspended: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
            created_at_from: "2018-01-29T16:49:46.000000+09:00",
            created_at_to: "2020-10-29T13:55:31.000000+09:00",
            is_suspended: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
            per_page: 5995,
            created_at_from: "2019-06-15T15:13:17.000000+09:00",
            created_at_to: "2025-07-20T23:08:45.000000+09:00",
            is_suspended: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShopAccounts | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShopAccounts({
            private_money_id: "61241470-ee43-4bc4-85e4-44ebf2f1defe",
            page: 6078,
            per_page: 727,
            created_at_from: "2020-09-08T05:35:06.000000+09:00",
            created_at_to: "2023-01-05T01:29:12.000000+09:00",
            is_suspended: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            upper_limit_amount: 1104,
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            lower_limit_amount: 5938,
            upper_limit_amount: 2114,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            shop_id: "85273399-f1d9-47d3-811f-1e55e8761be6",
            lower_limit_amount: 4711,
            upper_limit_amount: 9822,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            shop_name: "tCT3aJmzxxuQUVBryDZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMU",
            shop_id: "34fb4cd1-274e-4718-aa21-c61886c9f18a",
            lower_limit_amount: 5532,
            upper_limit_amount: 3526,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            created_to: "2023-03-11T08:18:04.000000+09:00",
            shop_name: "AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIeOIKes05558vbabHcGuqU0Zpo5LBba7yo5q8iSiTBSZQPeDSY9S36TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy",
            shop_id: "7ca44a38-471f-4904-8332-b98592954ace",
            lower_limit_amount: 3255,
            upper_limit_amount: 2990,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            created_from: "2021-11-23T07:22:36.000000+09:00",
            created_to: "2019-01-01T10:31:16.000000+09:00",
            shop_name: "DUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAu",
            shop_id: "114060c5-2995-4de1-b70a-8ed63f189c03",
            lower_limit_amount: 9032,
            upper_limit_amount: 9337,
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            description: "1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn",
            created_from: "2017-04-08T06:45:11.000000+09:00",
            created_to: "2015-10-20T02:23:52.000000+09:00",
            shop_name: "m8VyuReCXx5WTYs7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOu",
            shop_id: "c78d25bf-0441-4f0b-a1eb-70a81b51d239",
            lower_limit_amount: 5252,
            upper_limit_amount: 6159,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            organization_code: "-3w-IvvhNr--o6-nbWsiw7-3301--",
            description: "DNNhHR4jcwCrCwplp",
            created_from: "2016-04-25T00:54:21.000000+09:00",
            created_to: "2023-09-16T11:09:07.000000+09:00",
            shop_name: "1muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u",
            shop_id: "cbd78f88-c62f-4afc-b0a9-6ded7735a6dd",
            lower_limit_amount: 7338,
            upper_limit_amount: 5323,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            private_money_id: "c8ffb708-8ef2-4b28-ae97-4c9735b34e53",
            organization_code: "uoMXo82-QI94Y-786-b8BG-P",
            description: "GgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZ",
            created_from: "2016-03-07T05:25:00.000000+09:00",
            created_to: "2018-05-07T00:50:25.000000+09:00",
            shop_name: "kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YW",
            shop_id: "cdc0a53e-fa12-443d-a6d1-a1f4e3238b99",
            lower_limit_amount: 4226,
            upper_limit_amount: 2624,
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            bill_id: "Vhq9RVZQG",
            private_money_id: "8eaabba6-4636-47a9-a289-b5dc6b658323",
            organization_code: "U",
            description: "soXtmv8LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CS",
            created_from: "2016-05-30T21:32:17.000000+09:00",
            created_to: "2023-10-24T08:53:45.000000+09:00",
            shop_name: "reJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovf",
            shop_id: "f5a8f42b-565d-4f96-9058-7e887a00cc51",
            lower_limit_amount: 7248,
            upper_limit_amount: 8776,
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            per_page: 5780,
            bill_id: "jHLVEtSIa",
            private_money_id: "21f309fb-e6f8-40dd-af5a-baa9d6460b00",
            organization_code: "1b22A-0--0Xd1r1",
            description: "OzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0hVSBtTu",
            created_from: "2017-01-19T20:24:08.000000+09:00",
            created_to: "2025-02-19T13:15:58.000000+09:00",
            shop_name: "3fmfJoVUvvyWz4",
            shop_id: "41557e18-4ee1-493a-a596-6e2073cf0994",
            lower_limit_amount: 2244,
            upper_limit_amount: 6668,
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListBills | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListBills({
            page: 6106,
            per_page: 9627,
            bill_id: "59s",
            private_money_id: "21d1a897-68b5-4439-a9f8-1707c1b8f78a",
            organization_code: "zkwPP1QjI",
            description: "UvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1Gs",
            created_from: "2021-01-27T11:46:49.000000+09:00",
            created_to: "2022-01-19T03:44:54.000000+09:00",
            shop_name: "XjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ",
            shop_id: "29980f0e-a527-4ee0-bc39-c8067b4ddf26",
            lower_limit_amount: 3893,
            upper_limit_amount: 724,
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateBill | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateBill({
            private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
            shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateBill | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateBill({
            private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
            shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b",
            description: "G4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateBill | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateBill({
            private_money_id: "2fcf7935-b029-4d60-b5ef-2cfc9be4e5e0",
            shop_id: "1ff394ae-b441-4349-91bc-a134d2c57f8b",
            amount: 1947.0,
            description: "GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateBill | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateBill({
            bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateBill | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateBill({
            bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateBill | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateBill({
            bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
            description: "T5bk20dIuBp2e25agSXyEGickpeze5",
            is_disabled: false
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateBill | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateBill({
            bill_id: "eeab6c34-312c-4f5c-b366-407b617f395a",
            amount: 4023.0,
            description: "yzhltNB5ed",
            is_disabled: true
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 2816.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 6850.0,
            description: "8n6abEccT"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 8661.0,
            is_onetime: false,
            description: "FUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTI"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 4296.0,
            usage_limit: 5837,
            is_onetime: true,
            description: "x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPug"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 4581.0,
            expires_at: "2018-11-09T21:43:48.000000+09:00",
            usage_limit: 3848,
            is_onetime: false,
            description: "JLdESdgB4DMlPhuAgx6J23S5"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 2145.0,
            point_expires_at: "2019-03-24T07:16:36.000000+09:00",
            expires_at: "2020-12-25T04:51:28.000000+09:00",
            usage_limit: 4385,
            is_onetime: true,
            description: "XOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MI"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 6140.0,
            point_expires_in_days: 6303,
            point_expires_at: "2022-04-04T06:20:22.000000+09:00",
            expires_at: "2019-12-08T18:06:25.000000+09:00",
            usage_limit: 3701,
            is_onetime: true,
            description: "0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyA"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 6910.0,
            bear_point_account: "1cfecc92-c98c-4978-bc82-b1e4453b2968",
            point_expires_in_days: 2261,
            point_expires_at: "2019-03-17T05:12:51.000000+09:00",
            expires_at: "2019-04-14T16:51:46.000000+09:00",
            usage_limit: 5345,
            is_onetime: true,
            description: "VM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 6705.0,
            point_amount: 3704.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 4896.0,
            point_amount: 1767.0,
            description: "8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 9393.0,
            point_amount: 1004.0,
            is_onetime: true,
            description: "yARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enF"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 1690.0,
            point_amount: 7929.0,
            usage_limit: 840,
            is_onetime: true,
            description: "bteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 9188.0,
            point_amount: 6210.0,
            expires_at: "2021-10-13T03:24:11.000000+09:00",
            usage_limit: 5133,
            is_onetime: false,
            description: "zD3agMTA"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 7386.0,
            point_amount: 7924.0,
            point_expires_at: "2022-08-04T16:28:11.000000+09:00",
            expires_at: "2016-02-26T14:19:06.000000+09:00",
            usage_limit: 5613,
            is_onetime: true,
            description: "viHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 4329.0,
            point_amount: 9908.0,
            point_expires_in_days: 1544,
            point_expires_at: "2017-06-24T09:15:27.000000+09:00",
            expires_at: "2024-06-02T21:18:13.000000+09:00",
            usage_limit: 760,
            is_onetime: false,
            description: "8N4p4uCNZaugRp11iMcrfILoN8ZP7287J"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 15', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            money_amount: 8362.0,
            point_amount: 9185.0,
            bear_point_account: "d6ff851a-8bef-4e59-9f1f-e49ad55e179d",
            point_expires_in_days: 5825,
            point_expires_at: "2023-06-11T04:54:02.000000+09:00",
            expires_at: "2017-03-08T05:13:35.000000+09:00",
            usage_limit: 8458,
            is_onetime: true,
            description: "1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0ns"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 16', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 4178.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 17', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 7999.0,
            description: "0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2k"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 18', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 4323.0,
            is_onetime: false,
            description: "hNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERB"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 19', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 3566.0,
            usage_limit: 8522,
            is_onetime: false,
            description: "R6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vr"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 20', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 5898.0,
            expires_at: "2022-02-05T14:38:26.000000+09:00",
            usage_limit: 8700,
            is_onetime: false,
            description: "EIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPS"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 21', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 1324.0,
            point_expires_at: "2017-09-19T12:32:25.000000+09:00",
            expires_at: "2022-08-07T04:05:45.000000+09:00",
            usage_limit: 2037,
            is_onetime: false,
            description: "NAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLix"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 22', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 5777.0,
            point_expires_in_days: 5743,
            point_expires_at: "2019-12-31T10:32:39.000000+09:00",
            expires_at: "2022-10-23T16:55:46.000000+09:00",
            usage_limit: 7857,
            is_onetime: false,
            description: "Wqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtg"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCheck | 23', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCheck({
            account_id: "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            point_amount: 5256.0,
            bear_point_account: "1c1e7409-12c4-4775-8287-f6ad37e0a041",
            point_expires_in_days: 1467,
            point_expires_at: "2023-03-23T06:40:54.000000+09:00",
            expires_at: "2016-05-08T05:59:07.000000+09:00",
            usage_limit: 2621,
            is_onetime: true,
            description: "u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCpmToken | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCpmToken({
            cpm_token: "6PUopGrOCijX4VQZjHwhb9"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            description: "V9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyR"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            types: ["cashback", "exchange_outflow", "exchange_inflow", "topup", "payment"],
            description: "72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723x"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            is_modified: false,
            types: [],
            description: "c2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cW"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            private_money_id: "bb9a3d99-d5f0-45c5-928b-b633359f55d5",
            is_modified: true,
            types: ["cashback", "payment"],
            description: "eq1I6SZ"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            organization_code: "dU57GxN0f8c2-v-hF--PuqM-",
            private_money_id: "c8374a26-8755-41a7-a74b-d5ee1e04cea7",
            is_modified: false,
            types: ["exchange_inflow", "cashback", "payment", "exchange_outflow", "topup", "expire"],
            description: "ujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTT"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            transaction_id: "gxHzzgd",
            organization_code: "--GkKuYmTc31",
            private_money_id: "4b92e8c6-9836-4d6f-a7b9-7f4c35ab2f46",
            is_modified: false,
            types: ["topup", "payment"],
            description: "kiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMpt"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            terminal_id: "2b7d3b73-f0f0-4e45-a569-baa40f7fe1a5",
            transaction_id: "BqG",
            organization_code: "aojS7--A81-X--",
            private_money_id: "24797288-b09f-4400-9cc1-cc6982e11b6f",
            is_modified: true,
            types: [],
            description: "7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpi"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            customer_name: "Rc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLS",
            terminal_id: "0d9e2ef8-d68c-42e3-8aa6-5444b0e69c3b",
            transaction_id: "AAH0j",
            organization_code: "3---0MU8Jts85b-BLd-6d",
            private_money_id: "caf3f0c9-bf5f-4922-adf5-49eb19ff3a6a",
            is_modified: true,
            types: [],
            description: "0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtA"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            customer_id: "e5552568-c17b-4421-92eb-fadd84d28634",
            customer_name: "Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQE",
            terminal_id: "619fdd50-ce40-4e82-8826-7a5d0f14b9ec",
            transaction_id: "Mgzo7",
            organization_code: "-6LEf9i1IKk8-70--o",
            private_money_id: "e00563f5-ff8a-450b-83b4-e24b0230f239",
            is_modified: true,
            types: ["payment", "exchange_inflow", "cashback", "exchange_outflow", "topup"],
            description: "FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            shop_id: "44688d2a-c571-4af8-ac8d-4189ece75d7d",
            customer_id: "851b8054-78fd-49a0-9567-ae3d4cb62d08",
            customer_name: "asH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebR",
            terminal_id: "2f4460cf-a0eb-4549-b58b-1889f4093836",
            transaction_id: "yn3vAdg2W",
            organization_code: "A-uzMj52041tG6VVKmrD9A--",
            private_money_id: "a490bad1-0e34-48b5-a17b-2fb0fb07e778",
            is_modified: true,
            types: ["expire", "payment"],
            description: "hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            per_page: 9975,
            shop_id: "66f44fe9-018b-4676-8fa0-d3066203126d",
            customer_id: "2d15d2d0-bb05-4c92-863d-37b0db460c57",
            customer_name: "yAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8S",
            terminal_id: "9b31a3e7-fc60-4e5d-9839-b6718f656803",
            transaction_id: "O6",
            organization_code: "3iJ-9dD---7-YolA58m-Vc-996y5l",
            private_money_id: "1750ab2f-d7c2-480d-842e-9bc53e6fa6aa",
            is_modified: true,
            types: [],
            description: "S5KI84n4B4JwtxMbsrynF"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            page: 145,
            per_page: 2940,
            shop_id: "867d627b-92fa-4b6c-a5a4-2aaa7d2bd1f1",
            customer_id: "3c5db756-69fa-45da-bf76-ad3ee0e5b1d0",
            customer_name: "rwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqE",
            terminal_id: "d725cb40-cd76-4f74-8853-3bedcb351425",
            transaction_id: "6gZqSXb",
            organization_code: "-7--Wn--w1A-43n-n7u38w9",
            private_money_id: "64d19f8c-8ab0-436e-8c42-4c768fc463c3",
            is_modified: true,
            types: ["expire", "cashback", "exchange_outflow", "payment"],
            description: "sdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mh"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            to: "2025-03-17T04:25:50.000000+09:00",
            page: 2712,
            per_page: 6520,
            shop_id: "97080b35-75a6-4efb-a8b6-079e10576f52",
            customer_id: "6314a1cb-4d44-46df-9ce5-c56d90b44b03",
            customer_name: "CYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3",
            terminal_id: "63c948a2-fd94-4223-967f-44359577ead1",
            transaction_id: "ywi2p",
            organization_code: "-Y--H-GGc-4e-M-",
            private_money_id: "c9294359-f03b-4735-bca4-6614975adc1e",
            is_modified: true,
            types: ["exchange_outflow"],
            description: "s73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVk"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactions | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactions({
            from: "2019-10-14T23:18:53.000000+09:00",
            to: "2019-09-15T09:30:35.000000+09:00",
            page: 8020,
            per_page: 9573,
            shop_id: "ad87c623-4f10-4493-8bbf-c86d0235e0e5",
            customer_id: "430728ed-f65a-4efe-ae25-13a668e4d098",
            customer_name: "covbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJco",
            terminal_id: "f5943561-1313-4a83-a667-f692f05126d4",
            transaction_id: "JNb4",
            organization_code: "600",
            private_money_id: "8f1fc81a-116e-4a46-bc82-7822a7e551e1",
            is_modified: true,
            types: ["topup", "cashback", "exchange_outflow", "exchange_inflow", "expire", "payment"],
            description: "wVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVD"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransaction({
            shop_id: "a127058e-cc64-4aef-b424-c7569a784064",
            customer_id: "8162d673-d7ae-45c8-8421-089c42a65923",
            private_money_id: "c1cd5789-3806-4a99-b148-a2612ffedf09"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransaction({
            shop_id: "a127058e-cc64-4aef-b424-c7569a784064",
            customer_id: "8162d673-d7ae-45c8-8421-089c42a65923",
            private_money_id: "c1cd5789-3806-4a99-b148-a2612ffedf09",
            description: "rFGRZ0Q28LywVGUz2s"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransaction({
            shop_id: "a127058e-cc64-4aef-b424-c7569a784064",
            customer_id: "8162d673-d7ae-45c8-8421-089c42a65923",
            private_money_id: "c1cd5789-3806-4a99-b148-a2612ffedf09",
            point_expires_at: "2020-05-01T02:15:27.000000+09:00",
            description: "RxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsj"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransaction({
            shop_id: "a127058e-cc64-4aef-b424-c7569a784064",
            customer_id: "8162d673-d7ae-45c8-8421-089c42a65923",
            private_money_id: "c1cd5789-3806-4a99-b148-a2612ffedf09",
            point_amount: 1955,
            point_expires_at: "2022-10-29T15:55:13.000000+09:00",
            description: "sgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransaction | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransaction({
            shop_id: "a127058e-cc64-4aef-b424-c7569a784064",
            customer_id: "8162d673-d7ae-45c8-8421-089c42a65923",
            private_money_id: "c1cd5789-3806-4a99-b148-a2612ffedf09",
            money_amount: 4239,
            point_amount: 7936,
            point_expires_at: "2024-07-06T01:11:25.000000+09:00",
            description: "ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfID"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            per_page: 651
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            prev_page_cursor_id: "dc731c8c-bb66-46e8-865b-1db016fb67b8",
            per_page: 354
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            next_page_cursor_id: "1c9c6657-819e-41c1-92e7-8ad98ba2914b",
            prev_page_cursor_id: "912678e7-2bcd-40bc-92e7-b1be4e34f2b4",
            per_page: 941
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            to: "2017-03-02T17:36:44.000000+09:00",
            next_page_cursor_id: "0cd62b69-f96a-46f5-997b-2ce999f77fb0",
            prev_page_cursor_id: "81f29e27-5df8-429d-8786-7f34cf06c5aa",
            per_page: 578
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            from: "2020-02-16T07:46:55.000000+09:00",
            to: "2021-10-31T11:30:47.000000+09:00",
            next_page_cursor_id: "f98b4df5-c995-408a-bb6b-47a2f3349e71",
            prev_page_cursor_id: "7bdf35a9-2b58-4e69-a9b0-1b92641220af",
            per_page: 311
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            types: ["payment", "exchange_inflow", "topup", "expire", "cashback"],
            from: "2018-03-15T06:04:28.000000+09:00",
            to: "2024-05-30T08:40:12.000000+09:00",
            next_page_cursor_id: "af0b6ca7-696e-42e1-8624-c9f03676c188",
            prev_page_cursor_id: "5e4c85ab-f6b0-4ee4-9d7b-97b85f1e3897",
            per_page: 463
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            is_modified: true,
            types: ["payment"],
            from: "2025-07-18T14:49:04.000000+09:00",
            to: "2016-06-13T11:27:45.000000+09:00",
            next_page_cursor_id: "5edb11f7-b077-4850-950f-74e6fe240dbb",
            prev_page_cursor_id: "5f5ab50f-dc6d-4fd9-8724-1f95e8d009c5",
            per_page: 855
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            transaction_id: "OM4",
            is_modified: false,
            types: ["cashback", "topup", "payment", "exchange_outflow"],
            from: "2020-09-07T06:52:26.000000+09:00",
            to: "2016-10-10T15:08:49.000000+09:00",
            next_page_cursor_id: "75cb9122-945c-4faa-9f83-ba8444fa9aaa",
            prev_page_cursor_id: "73ba02a4-d72f-4b80-b895-361a1b160e3c",
            per_page: 632
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            description: "k",
            transaction_id: "MFB",
            is_modified: false,
            types: ["payment", "cashback", "expire", "exchange_inflow"],
            from: "2023-02-11T02:38:31.000000+09:00",
            to: "2024-09-10T12:37:26.000000+09:00",
            next_page_cursor_id: "7eaf27c7-d8eb-4220-ad08-edaffa658fc7",
            prev_page_cursor_id: "9f2630a0-5ad6-4a8f-9dee-f5907ad188fa",
            per_page: 952
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            customer_name: "W1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYA",
            description: "KPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqY",
            transaction_id: "n",
            is_modified: true,
            types: ["payment", "expire", "exchange_inflow", "cashback", "exchange_outflow", "topup"],
            from: "2024-05-28T02:32:16.000000+09:00",
            to: "2017-06-30T09:31:56.000000+09:00",
            next_page_cursor_id: "3a0033c9-a840-4c26-b843-6a846caa10a6",
            prev_page_cursor_id: "33f1c941-f956-4c5e-9875-8c9084cc37b8",
            per_page: 376
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            customer_id: "ea6e00bb-e650-431b-86e4-48cdaccbadc9",
            customer_name: "0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIy",
            description: "MGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSx",
            transaction_id: "a5qY",
            is_modified: false,
            types: ["topup", "cashback", "expire", "exchange_inflow", "payment"],
            from: "2016-12-01T17:33:26.000000+09:00",
            to: "2018-04-28T23:26:34.000000+09:00",
            next_page_cursor_id: "9e68cb25-185a-406f-ac92-ad47ce06a0e7",
            prev_page_cursor_id: "9298820f-e0d1-4abe-b8ca-392331ccdc0b",
            per_page: 809
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            terminal_id: "26bb24d4-4037-4a8e-ae97-ef8ad967725e",
            customer_id: "f1ccda1d-0b4d-4432-bf58-a753df9a62fb",
            customer_name: "RS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf",
            description: "3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZx",
            transaction_id: "Dhr8QjY",
            is_modified: true,
            types: ["exchange_inflow", "topup", "exchange_outflow", "expire"],
            from: "2016-04-29T04:26:04.000000+09:00",
            to: "2016-01-20T21:33:01.000000+09:00",
            next_page_cursor_id: "35274747-ec41-4b16-9fa0-e168c224c0bf",
            prev_page_cursor_id: "9b889779-46ec-4170-86ed-7a94067233ac",
            per_page: 990
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            shop_id: "dd31470b-0f1b-4ec6-8fae-5ef7c2207ec3",
            terminal_id: "725424e4-419f-44a4-bf3e-21825c53fc14",
            customer_id: "aa1889cb-fe50-47fd-8160-81fb8cf2e07e",
            customer_name: "BZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJ",
            description: "9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC",
            transaction_id: "hQ61pW",
            is_modified: false,
            types: [],
            from: "2023-12-14T19:22:44.000000+09:00",
            to: "2024-02-19T21:23:19.000000+09:00",
            next_page_cursor_id: "478f9118-cfbb-4351-a906-2576c83b2619",
            prev_page_cursor_id: "951cf6be-329f-490b-9084-f2c3b9831cd2",
            per_page: 892
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            organization_code: "weWi35i8k",
            shop_id: "ec42fea4-2097-4d32-be09-bfe62ee7fea2",
            terminal_id: "b2e608fc-9390-4850-9002-124a1438abbf",
            customer_id: "2bc8087f-a043-4f5f-aac7-71853d45427a",
            customer_name: "VYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL",
            description: "9rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5q",
            transaction_id: "771SYw",
            is_modified: false,
            types: ["cashback", "expire", "exchange_inflow", "payment", "topup", "exchange_outflow"],
            from: "2018-01-17T05:33:52.000000+09:00",
            to: "2021-04-22T21:39:23.000000+09:00",
            next_page_cursor_id: "00f09690-3a12-4af3-bf9d-9db96f9a7c38",
            prev_page_cursor_id: "5288ccdd-8356-4801-b04f-5867195604a3",
            per_page: 444
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransactionsV2 | 15', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransactionsV2({
            private_money_id: "abd215ed-4d88-458f-9963-ab967fc77008",
            organization_code: "-LtRV-11-TW61hV--G-",
            shop_id: "59b1d643-abd4-4449-af0c-aaa29d626ff5",
            terminal_id: "972a7718-71fc-4777-9b04-e0a1018d6670",
            customer_id: "7e512f13-1017-420e-ab7b-7fa61e703e34",
            customer_name: "PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g8",
            description: "rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nn",
            transaction_id: "TS",
            is_modified: false,
            types: ["exchange_inflow", "cashback", "exchange_outflow", "expire", "payment", "topup"],
            from: "2023-02-08T21:05:27.000000+09:00",
            to: "2024-04-24T15:54:49.000000+09:00",
            next_page_cursor_id: "45eefbf2-34c0-49c3-b398-8c98a36ef96b",
            prev_page_cursor_id: "5f3fd5e1-66f4-4421-aa82-7ce74b660454",
            per_page: 9
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            request_id: "da8b09f6-d468-49bc-a0fa-7d91c18f1e1b"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            metadata: "{\"key\":\"value\"}",
            request_id: "05717bf9-52df-427e-818d-dc768396c5c5"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            description: "RwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimX",
            metadata: "{\"key\":\"value\"}",
            request_id: "078b1299-12bc-453b-9178-ab8c6490da10"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            point_expires_at: "2020-12-10T16:53:50.000000+09:00",
            description: "oEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4",
            metadata: "{\"key\":\"value\"}",
            request_id: "d092ed7f-5e91-4b08-95f7-e4c4b7230678"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            point_amount: 1928,
            point_expires_at: "2022-03-08T23:51:24.000000+09:00",
            description: "qXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvH",
            metadata: "{\"key\":\"value\"}",
            request_id: "bc6b75de-2451-43aa-864b-c9c43d6da9c9"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            money_amount: 8461,
            point_amount: 1041,
            point_expires_at: "2023-08-17T05:54:28.000000+09:00",
            description: "0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbG",
            metadata: "{\"key\":\"value\"}",
            request_id: "05c5bba4-2b93-4bdd-b0e8-a43778bf2bf2"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransaction | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransaction({
            shop_id: "42832453-f141-4c6b-b3e1-dc8862945538",
            customer_id: "8e451389-cc1f-44ad-a094-10e0367e4ed4",
            private_money_id: "c11c40e3-3388-49d4-b0a5-92321b7c644a",
            bear_point_shop_id: "4cc69183-1bc4-4972-b5ed-9494c3de1edd",
            money_amount: 9678,
            point_amount: 2036,
            point_expires_at: "2017-11-30T11:46:06.000000+09:00",
            description: "3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSC",
            metadata: "{\"key\":\"value\"}",
            request_id: "8841ac99-ad42-4194-9047-d489d5259aee"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTopupTransactionWithCheck | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTopupTransactionWithCheck({
            check_id: "c68a43e2-fb18-463e-b215-0e22e507a037",
            customer_id: "e525c9cb-cbc0-4fa1-8ac9-fb31a3543416"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreatePaymentTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreatePaymentTransaction({
            shop_id: "274ff0fb-7840-45cb-affe-ea2f38859f6f",
            customer_id: "b33e960b-78a9-4039-928c-3b6f91dc61fb",
            private_money_id: "81b908b9-a726-49bb-bed0-d432bf69ecd5",
            amount: 9645
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreatePaymentTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreatePaymentTransaction({
            shop_id: "274ff0fb-7840-45cb-affe-ea2f38859f6f",
            customer_id: "b33e960b-78a9-4039-928c-3b6f91dc61fb",
            private_money_id: "81b908b9-a726-49bb-bed0-d432bf69ecd5",
            amount: 9645,
            request_id: "55a63327-42db-4527-8f50-56befb678f48"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreatePaymentTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreatePaymentTransaction({
            shop_id: "274ff0fb-7840-45cb-affe-ea2f38859f6f",
            customer_id: "b33e960b-78a9-4039-928c-3b6f91dc61fb",
            private_money_id: "81b908b9-a726-49bb-bed0-d432bf69ecd5",
            amount: 9645,
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "f80e6b3b-49cb-4563-9383-c13e4ac6f6da"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreatePaymentTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreatePaymentTransaction({
            shop_id: "274ff0fb-7840-45cb-affe-ea2f38859f6f",
            customer_id: "b33e960b-78a9-4039-928c-3b6f91dc61fb",
            private_money_id: "81b908b9-a726-49bb-bed0-d432bf69ecd5",
            amount: 9645,
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "ac7bd1b7-381e-4a29-abca-3130f54c7d61"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreatePaymentTransaction | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreatePaymentTransaction({
            shop_id: "274ff0fb-7840-45cb-affe-ea2f38859f6f",
            customer_id: "b33e960b-78a9-4039-928c-3b6f91dc61fb",
            private_money_id: "81b908b9-a726-49bb-bed0-d432bf69ecd5",
            amount: 9645,
            description: "9BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc",
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "2b23a163-4e32-4f9b-aa1f-5e0399367b06"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCpmTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCpmTransaction({
            cpm_token: "7Gpu7iWb08UbIXfazIWogj",
            shop_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
            amount: 6401.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCpmTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCpmTransaction({
            cpm_token: "7Gpu7iWb08UbIXfazIWogj",
            shop_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
            amount: 6401.0,
            request_id: "6100524a-6789-469e-8e45-151e00448d97"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCpmTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCpmTransaction({
            cpm_token: "7Gpu7iWb08UbIXfazIWogj",
            shop_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
            amount: 6401.0,
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "8b1d56a5-0166-4028-8d90-5effc90bb837"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCpmTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCpmTransaction({
            cpm_token: "7Gpu7iWb08UbIXfazIWogj",
            shop_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
            amount: 6401.0,
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "cfc6575f-0b5d-4e13-b068-3a45d44cc0fa"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCpmTransaction | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCpmTransaction({
            cpm_token: "7Gpu7iWb08UbIXfazIWogj",
            shop_id: "3cdf125c-9e64-4da0-a1dc-3d782f481b9b",
            amount: 6401.0,
            description: "62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5",
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "dc85de03-28b1-4c4b-b95a-5ccc91e07a02"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransferTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransferTransaction({
            sender_id: "709475ca-d9fe-4bea-ac25-855152d09cfa",
            receiver_id: "ddd2b872-67e3-40c7-b4e3-7e46024f6100",
            private_money_id: "5df4745f-a378-4b8d-b939-b630b229ff44",
            amount: 2484.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransferTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransferTransaction({
            sender_id: "709475ca-d9fe-4bea-ac25-855152d09cfa",
            receiver_id: "ddd2b872-67e3-40c7-b4e3-7e46024f6100",
            private_money_id: "5df4745f-a378-4b8d-b939-b630b229ff44",
            amount: 2484.0,
            request_id: "a954927e-2664-428d-8401-494235ecf8cc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransferTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransferTransaction({
            sender_id: "709475ca-d9fe-4bea-ac25-855152d09cfa",
            receiver_id: "ddd2b872-67e3-40c7-b4e3-7e46024f6100",
            private_money_id: "5df4745f-a378-4b8d-b939-b630b229ff44",
            amount: 2484.0,
            description: "dUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKI",
            request_id: "b10db97b-a94e-4a9c-8937-4af636e755ea"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateTransferTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateTransferTransaction({
            sender_id: "709475ca-d9fe-4bea-ac25-855152d09cfa",
            receiver_id: "ddd2b872-67e3-40c7-b4e3-7e46024f6100",
            private_money_id: "5df4745f-a378-4b8d-b939-b630b229ff44",
            amount: 2484.0,
            metadata: "{\"key\":\"value\"}",
            description: "8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQu",
            request_id: "29b9dac7-770b-4b3c-bf3b-d10927351587"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExchangeTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExchangeTransaction({
            user_id: "19436b14-7494-4531-ae39-05b8245cd90e",
            sender_private_money_id: "beae6aef-ed0b-4c3e-b4e3-104553ff7438",
            receiver_private_money_id: "067b9e79-5c65-448e-ae38-7805c9df2fbb",
            amount: 8229.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExchangeTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExchangeTransaction({
            user_id: "19436b14-7494-4531-ae39-05b8245cd90e",
            sender_private_money_id: "beae6aef-ed0b-4c3e-b4e3-104553ff7438",
            receiver_private_money_id: "067b9e79-5c65-448e-ae38-7805c9df2fbb",
            amount: 8229.0,
            request_id: "6f90e1e9-9e23-4243-b074-9472a3a15640"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExchangeTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExchangeTransaction({
            user_id: "19436b14-7494-4531-ae39-05b8245cd90e",
            sender_private_money_id: "beae6aef-ed0b-4c3e-b4e3-104553ff7438",
            receiver_private_money_id: "067b9e79-5c65-448e-ae38-7805c9df2fbb",
            amount: 8229.0,
            description: "8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2",
            request_id: "b34b6b1e-ca3e-4e9f-9564-c41b539e882b"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check BulkCreateTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.BulkCreateTransaction({
            name: "eu5ClBnNsqGtwvAjO8SQrjpTlUKU7i",
            content: "6vD3BTnNc",
            request_id: "aIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check BulkCreateTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.BulkCreateTransaction({
            name: "eu5ClBnNsqGtwvAjO8SQrjpTlUKU7i",
            content: "6vD3BTnNc",
            request_id: "aIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4",
            description: "fnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdM"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetTransaction({
            transaction_id: "b839a220-c88e-49a5-812b-222c943e019a"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check RefundTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.RefundTransaction({
            transaction_id: "df1c27d4-7a2b-410f-8a80-d41470205a48"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check RefundTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.RefundTransaction({
            transaction_id: "df1c27d4-7a2b-410f-8a80-d41470205a48",
            description: "P3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTE"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetTransactionByRequestId | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetTransactionByRequestId({
            request_id: "b1944e6b-d314-4f30-ba08-236da19da827"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExternalTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExternalTransaction({
            shop_id: "168a35c4-be7f-4452-87f1-46bf34566564",
            customer_id: "a3e61a38-206a-4b97-9047-04e996067b68",
            private_money_id: "a4142ec6-e632-4329-925c-70faa15dc3ef",
            amount: 2944
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExternalTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExternalTransaction({
            shop_id: "168a35c4-be7f-4452-87f1-46bf34566564",
            customer_id: "a3e61a38-206a-4b97-9047-04e996067b68",
            private_money_id: "a4142ec6-e632-4329-925c-70faa15dc3ef",
            amount: 2944,
            request_id: "93d6acb2-a2c7-45ff-99a3-b6ce67b30b8e"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExternalTransaction | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExternalTransaction({
            shop_id: "168a35c4-be7f-4452-87f1-46bf34566564",
            customer_id: "a3e61a38-206a-4b97-9047-04e996067b68",
            private_money_id: "a4142ec6-e632-4329-925c-70faa15dc3ef",
            amount: 2944,
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "2c68419d-227b-4f87-9123-2cc080b94f59"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExternalTransaction | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExternalTransaction({
            shop_id: "168a35c4-be7f-4452-87f1-46bf34566564",
            customer_id: "a3e61a38-206a-4b97-9047-04e996067b68",
            private_money_id: "a4142ec6-e632-4329-925c-70faa15dc3ef",
            amount: 2944,
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "e13f891f-0eff-497c-9f83-66ad2b4a49c7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateExternalTransaction | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateExternalTransaction({
            shop_id: "168a35c4-be7f-4452-87f1-46bf34566564",
            customer_id: "a3e61a38-206a-4b97-9047-04e996067b68",
            private_money_id: "a4142ec6-e632-4329-925c-70faa15dc3ef",
            amount: 2944,
            description: "CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDj",
            metadata: "{\"key\":\"value\"}",
            products: [{ "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }, { "jan_code": "abc",
                    "name": "name1",
                    "unit_price": 100,
                    "price": 100,
                    "is_discounted": false,
                    "other": "{}" }],
            request_id: "71ca7b90-1872-4df4-a134-a8af3d299b43"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check RefundExternalTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.RefundExternalTransaction({
            event_id: "b371718c-f146-41bc-857c-75debe8b1e16"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check RefundExternalTransaction | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.RefundExternalTransaction({
            event_id: "b371718c-f146-41bc-857c-75debe8b1e16",
            description: "WJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQL"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            description: "KXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            transfer_types: ["expire"],
            description: "sM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60E"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            transaction_types: ["exchange", "cashback", "payment", "topup", "expire", "transfer"],
            transfer_types: ["cashback"],
            description: "SiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            is_modified: true,
            transaction_types: ["exchange", "expire", "cashback", "transfer", "topup"],
            transfer_types: ["cashback", "payment", "transfer", "exchange", "campaign", "coupon", "topup"],
            description: "BAkC"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            private_money_id: "447b7bfd-0ed1-4ba6-acd7-c8f1fa972a02",
            is_modified: true,
            transaction_types: ["cashback", "expire"],
            transfer_types: ["transfer", "expire", "cashback"],
            description: "CSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiu"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            transaction_id: "3829af74-a55a-42fb-b477-53c649410e93",
            private_money_id: "37e6bdea-e79a-4347-ac99-4478d426e9c2",
            is_modified: true,
            transaction_types: ["payment", "exchange"],
            transfer_types: ["topup", "exchange", "payment", "transfer", "expire", "campaign", "coupon", "cashback"],
            description: "he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0M"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            customer_name: "LycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZ",
            transaction_id: "c7f354a7-8af9-4519-8308-cce7b1a70388",
            private_money_id: "8de2041b-d4a9-41ad-91b3-0f63125b3ec5",
            is_modified: false,
            transaction_types: ["exchange", "payment", "topup"],
            transfer_types: ["cashback", "coupon", "topup", "transfer", "payment"],
            description: "DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNN"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            customer_id: "a760567f-96c7-4898-94d0-722a8b12f40d",
            customer_name: "71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3",
            transaction_id: "1963673e-330c-41cb-b72a-00e853d5152a",
            private_money_id: "1972276a-06bb-491d-b1f0-e9cd0845d1f1",
            is_modified: false,
            transaction_types: ["expire", "topup", "transfer"],
            transfer_types: ["cashback", "topup", "expire", "campaign", "coupon", "exchange"],
            description: "QSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfH"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            shop_name: "eeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4",
            customer_id: "417b5ba0-84d5-465d-82d8-ceb484f8f6ac",
            customer_name: "tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN1",
            transaction_id: "fdecfc37-35ba-4d27-a64c-6bf89272f5d0",
            private_money_id: "3546ba8e-ec1a-4319-9517-591165c80131",
            is_modified: false,
            transaction_types: ["exchange", "expire", "cashback", "payment"],
            transfer_types: ["campaign", "transfer", "exchange", "topup", "cashback", "payment", "coupon", "expire"],
            description: "fBgmDSuxOmphkziTG6p"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            shop_id: "7aec80fb-1cb4-4dc8-88ac-8d738644f97e",
            shop_name: "eIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9Yu",
            customer_id: "7ffb4fde-6e16-4a4b-b354-1d24e083f688",
            customer_name: "ECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqe",
            transaction_id: "d8f9c720-accf-411e-8f31-60fec9734f2b",
            private_money_id: "72285a39-fd3f-464b-a899-b446b2a74ef2",
            is_modified: false,
            transaction_types: ["cashback"],
            transfer_types: ["payment"],
            description: "6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJ"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            per_page: 9723,
            shop_id: "b7585721-fba6-4b17-889f-4270b07ac300",
            shop_name: "gkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqM",
            customer_id: "451d0c40-8aba-4aae-a70a-4ef089dc59cc",
            customer_name: "B8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuO",
            transaction_id: "86eac374-b5c2-470f-af3e-d3c300b92e5a",
            private_money_id: "4021d510-b8e7-46e3-b4e7-fca9d6ce5bf7",
            is_modified: true,
            transaction_types: ["exchange", "cashback"],
            transfer_types: ["transfer", "topup", "exchange", "expire", "campaign", "payment", "coupon"],
            description: "sqfAkho5yO5E"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            page: 8971,
            per_page: 6831,
            shop_id: "68e6f847-3a27-4724-b0e2-098d591d498e",
            shop_name: "9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIE",
            customer_id: "3600a58f-a2fc-4567-82bf-e5dbd69d1d5b",
            customer_name: "GEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3",
            transaction_id: "ef92329b-6270-4f35-82f2-daa6d8ebf8f5",
            private_money_id: "9f6e1f8a-6507-445d-868c-6135b6c6f9a3",
            is_modified: true,
            transaction_types: ["payment", "exchange", "transfer", "topup"],
            transfer_types: ["topup", "transfer"],
            description: "w"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            to: "2020-09-01T02:51:12.000000+09:00",
            page: 4072,
            per_page: 1688,
            shop_id: "e43b3fa0-675b-4788-9fc5-63ad61e42d98",
            shop_name: "UQr",
            customer_id: "46b5b8af-342d-48f0-9da3-39db84adb392",
            customer_name: "qVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4P",
            transaction_id: "7e22bd27-81ec-413a-90f6-97a3f91efc79",
            private_money_id: "32d821e9-d395-4bff-af3f-d5641a164869",
            is_modified: true,
            transaction_types: [],
            transfer_types: ["expire", "coupon"],
            description: "d"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListTransfers | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListTransfers({
            from: "2018-07-31T09:52:02.000000+09:00",
            to: "2019-10-26T22:00:01.000000+09:00",
            page: 7767,
            per_page: 1348,
            shop_id: "e109b9ec-1e59-4991-895a-4db621c82911",
            shop_name: "q4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkj",
            customer_id: "d5613f43-6063-4161-a7bc-ce0305a444e7",
            customer_name: "x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHn",
            transaction_id: "9551630a-e375-406f-9c93-2a55f880b7c9",
            private_money_id: "35b13890-f5cc-4b0e-8f92-50e9da47ecfa",
            is_modified: false,
            transaction_types: ["payment"],
            transfer_types: ["coupon", "campaign", "payment", "exchange", "topup", "expire", "cashback", "transfer"],
            description: "0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxG"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            contact_name: "va1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7K"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_account_holder_name: "/",
            contact_name: "y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXb"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_account: "6225330",
            bank_account_holder_name: "ｦ",
            contact_name: "O8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzw"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_account_type: "saving",
            bank_account: "014289",
            bank_account_holder_name: "｣",
            contact_name: "FWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltX"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_branch_code: "",
            bank_account_type: "current",
            bank_account: "369617",
            bank_account_holder_name: "ﾃ",
            contact_name: "C79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_branch_name: "5Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkq",
            bank_branch_code: "",
            bank_account_type: "other",
            bank_account: "56463",
            bank_account_holder_name: " ",
            contact_name: "Om0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkE"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_code: "",
            bank_branch_name: "HBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2S",
            bank_branch_code: "",
            bank_account_type: "other",
            bank_account: "",
            bank_account_holder_name: ",",
            contact_name: "e0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvb"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateOrganization | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateOrganization({
            code: "tQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6L",
            name: "mEP7tafjyhKgvwh227cUJM",
            private_money_ids: ["5b1c8f75-cad1-4c31-bbae-43f417be4bb8", "ea2ac809-953d-4aa9-ae0d-a4809538268c", "bf6edcb3-9127-44a5-bd6f-61a640bd1e98", "4f442901-b3e9-4d9a-b4c2-4c41ac07c86d"],
            issuer_admin_user_email: "KCKeNp7Z6K@eHaf.com",
            member_admin_user_email: "oOKYuUs7zf@9dIs.com",
            bank_name: "OwBRftL3mTfJhTjDs9c8QNUGvnht1",
            bank_code: "5932",
            bank_branch_name: "dhwjqe7Rve16qe5BUa3mrtC",
            bank_branch_code: "",
            bank_account_type: "saving",
            bank_account: "904",
            bank_account_holder_name: "6",
            contact_name: "5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVL"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            per_page: 5248
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            page: 1526,
            per_page: 2800
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            external_id: "XIyA6Ao821XE55hc29pv4sZBooZY5wA",
            page: 5968,
            per_page: 9704
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            email: "2kdAYLVTxS@OsaS.com",
            external_id: "UmdY0CLcfoUMFSIdEJMG98zC6otpSw3",
            page: 3091,
            per_page: 4685
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            tel: "0021312506",
            email: "WO55U7DSfY@3LgW.com",
            external_id: "2IvR52CgIBy3eL",
            page: 5782,
            per_page: 1186
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            address: "ys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErP",
            tel: "0610403774",
            email: "kIJgRMahTj@Y4B8.com",
            external_id: "3KCbssdnciBK2yKUyBpazsFHLyPhoCqWWr",
            page: 7966,
            per_page: 8426
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            postal_code: "280-4274",
            address: "hI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpF",
            tel: "07648354502",
            email: "w12Ii4C82S@zJJG.com",
            external_id: "4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYm",
            page: 4743,
            per_page: 5444
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            name: "WwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNub",
            postal_code: "9485492",
            address: "UrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULS",
            tel: "0916-444558",
            email: "3N0tnRGbdp@bMjO.com",
            external_id: "s6NsjUaiDroY6Q3IK7BQ6Amswd",
            page: 4289,
            per_page: 3790
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            private_money_id: "0157d928-e41c-411f-b3c9-134a5c5372f2",
            name: "wVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6T",
            postal_code: "815-4392",
            address: "JOkD3FvwnaI0WeOGl",
            tel: "07-2085-6319",
            email: "Ghe3TxnuKa@c7CS.com",
            external_id: "DK4Gnrr3oBLGMXHrz9mqfRhRmUp",
            page: 5689,
            per_page: 1044
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListShops | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListShops({
            organization_code: "WN-c0rV15oU-gpd6n-57TK8N",
            private_money_id: "c7b942ba-8553-4ab6-bd29-9e576aafa67f",
            name: "NJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5",
            postal_code: "4803948",
            address: "kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3F",
            tel: "077-8418710",
            email: "8iHovbTWoP@NbCU.com",
            external_id: "3WmvU0lnYW7MWulxJqejEoXie",
            page: 7065,
            per_page: 366
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            organization_code: "-4PG01-sPG3-r-KM-au-ahGO2"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            shop_external_id: "D5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfG",
            organization_code: "-X-KhbuE1LqbTX-Ba9Uc-5YO-Zf7d"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            shop_email: "hFo0glXBEr@IUB1.com",
            shop_external_id: "aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivix",
            organization_code: "K4d8-h-V13l2tE3vhZ5C7-"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            shop_tel: "02-829747",
            shop_email: "FtoNM3mKKW@yblm.com",
            shop_external_id: "mAH",
            organization_code: "9Fe2-7l--9463G3kA-"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            shop_address: "jsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42NN7jWbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6",
            shop_tel: "02-13408752",
            shop_email: "kacVB4dzDq@Q1Lb.com",
            shop_external_id: "yVIgVP7fIz1xemnrDx9P7",
            organization_code: "OoNzS7-s"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShop | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShop({
            shop_name: "Ezy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv3",
            shop_postal_code: "129-9562",
            shop_address: "t2ws7WkJzpgGUX4mtxo",
            shop_tel: "09-0749-7207",
            shop_email: "6LzTWIbd8Z@NVra.com",
            shop_external_id: "fdiivNn4NbNLXIdoiqtrelImUNmL",
            organization_code: "N-o438V83g504a35q"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            can_topup_private_money_ids: ["0b292a35-daf0-4e61-8093-e386877e9da6", "166aeaaf-f4f8-4da9-8b44-6b32b434a458", "d520be3d-8484-461f-a3cf-266632a2f1aa", "5124cf13-3797-4a9b-b94d-98285970b0ef", "5f6132b2-e702-42df-b6fb-4ce98b52f4e0", "c5271d71-eeef-41db-915c-4dec340c2ab8", "c6d5643c-8509-4ab0-9d06-8c6a0068bc2e", "a930d531-b6f4-492d-93b4-c6fd1b7716ee", "80e0d3ae-4333-4086-a9ec-f270947d396e"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            private_money_ids: ["4cf80f9d-5a65-487a-8f98-b5140b70f483", "c45833a4-d578-4c36-994f-7b9be8a5e42c", "0de1551f-191a-4276-b6fc-0be54ae419c7", "02c4cfa7-3977-4f40-9dea-ed0fa8c678d1", "cc8a1fa1-e0ba-49a8-83a2-66973b24e7f1", "1efece0b-b578-4a1e-a4bd-8704c833d4ae", "a75813f4-ee51-416e-84d9-18b4b28d4c9c", "951638d3-7139-4ee0-8e81-67b42aaba388", "34679e83-b63d-4b87-882a-d268011f334a"],
            can_topup_private_money_ids: []
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            organization_code: "-rq3-217-9p-855-5",
            private_money_ids: ["e26a760b-43a1-44ab-8582-7a2c84163707", "9cc0db96-3e9b-4b55-9cec-65aeb90c2c0b", "5f917119-994b-4a74-9226-6b87e4eb92a3", "c85138cd-a743-4d65-9bb1-ab32c668b0dc"],
            can_topup_private_money_ids: ["25570399-5a0c-4aa1-9556-eda09a6298b2", "5efc4664-9f78-4da2-bbf2-3798f3ee8090", "6aa7ddc1-c4ac-42b2-b41b-03325f428f95", "ecc94e2e-8a2e-4bb8-ba45-c2176f7bbcd7", "d96265ee-c4c6-442a-92da-ba2aebf09b1d", "1663b44c-f458-411b-8b1e-63aa0e66fb16", "cbd09ffb-49b8-410a-b71c-0f71475e7c74", "5647a965-d9a3-4be4-a450-b67a1675c856"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            external_id: "diYCurcmVOPZzwM",
            organization_code: "t-EE39-j6uC--52aCX5-c8-",
            private_money_ids: ["cd431c96-d3d0-4056-8aca-f42e828949ab", "c7a058dd-786b-4bc5-ab29-cd0096226839", "ef50334e-b8fa-4004-95e1-eaa864d35387", "1bfe5865-c8a3-402d-a054-8c1b29e96170", "8aed0ef4-63a9-4eda-b529-81c0f0ae0f0b", "7d67283f-db9e-4514-8f6b-47d857b35540", "7b263c39-cc72-444c-b061-8fe7171fe920", "6baac5e4-5ea7-4bd7-9151-c66e6ee57990", "374eba2c-fd13-471d-8605-e9dd1eb77fc5"],
            can_topup_private_money_ids: ["c187255b-6216-4b0a-ae54-5c8a681de4ec", "17148989-1f13-494c-b9fe-2dfc087e6ade", "7d9bc475-c0bf-44dc-8362-79f7a74863e9", "21a7cdaa-7ba0-4562-a340-7335f5adcbf5", "e23d9c16-c8c7-4b39-bb59-2c3467ea2019", "c1a078e3-cdee-4803-ac8c-8fb6dc9cf4a6", "c500fa41-ff8d-41a8-bf14-72a3f0b5b694", "faef1bf0-faa5-4d52-9a1c-852b4ce75635"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            email: "NX6gFb5nuO@Dlmm.com",
            external_id: "pn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW",
            organization_code: "-s--P",
            private_money_ids: ["1c2353a2-3e69-407d-8159-c0cd26e472e3", "933bee4b-259a-4bfc-abd8-f442138eefba", "697af85b-f88e-4bd7-8917-667b37d78588", "5de39281-fe45-489a-aef5-e2085672a299"],
            can_topup_private_money_ids: ["2a615334-61d2-4721-8a24-ab53f426906a", "a63cad97-a778-4ae7-9160-fcac352159c3", "7e88deae-1357-4133-980e-40c07018f86a", "f34f8ac6-8b5d-436c-a7a1-ee9c412e80ef", "781e5162-6f37-47a5-9196-ee1faab08279", "f9e78eef-a9e2-4924-a771-d664b1edc52b", "0a41edc0-8002-438f-bb88-c05c2f4177f1", "d2381fab-0546-426c-9d65-505604f6d996"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            tel: "00724-083",
            email: "jJLFYo72Yj@P5po.com",
            external_id: "QaLCZTmFL",
            organization_code: "4KUMJ7--pfe--nh-1--O53q7A-p--V",
            private_money_ids: ["d06044a5-471b-4b49-a949-74663ff0b211", "dfc9a50d-7a45-4d62-8620-6821d7f4f6ac", "b33df661-51d2-4993-97a6-e083341431ec", "442626f0-4c1a-4e7e-a4aa-dea41f89df28", "98870868-ff20-45bf-945d-6310c238bfd4"],
            can_topup_private_money_ids: ["4e4da28d-c67d-472c-8e0e-917bb8644fd1", "eaaadd70-1583-47d1-a6a7-b26fe4ef8bd3", "1dba2796-4f52-483e-9487-f5b6546bde93", "319a0c01-8a60-4ee2-80b0-4ec9c89f47d9", "e608391a-811e-4db8-8ba3-20206aae4d02", "6aa53e84-3c3a-4429-82b3-396a53f093a1", "8ee414d3-a17f-47ac-b9ad-85a993e04b1b", "54747b1a-7080-4539-8a90-8280fd0bd943"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            address: "Ljq8yjj",
            tel: "0894326-5818",
            email: "P7CI9Yb5tO@Q2qp.com",
            external_id: "BlopujNmJIuV",
            organization_code: "65m0",
            private_money_ids: ["d3440c3e-a879-4645-b96b-2d6403e72a5b", "66e0ae5d-5518-4f37-acd6-85369997865f", "671b1301-fd90-4817-9f51-a00d77d96c5d", "b1d7600d-c64b-477c-9e6b-ecbccfb41b93", "ca21baa6-4c7a-4436-86d2-ce7b7cc1c69f"],
            can_topup_private_money_ids: ["4eb4a1fb-03c5-4387-baef-d980ae731549", "0e3dccb7-c81f-42e3-9a59-333d4b7addfd", "a395863a-e857-4540-b43f-66a95ce9cbe3", "c86e9ba7-838d-4d97-8d9b-e230c6c49499", "f0fed147-38f9-4c0f-8eaf-9b2e60eb3b18"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateShopV2 | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateShopV2({
            name: "DcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvV",
            postal_code: "861-5016",
            address: "X4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGsPPbvQvYkAPBJ7wmgCWNKDP1enxAKZBD2FhNoFZKIbAgSoRCKxxDEWQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObUNQZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9",
            tel: "094241762",
            email: "h4QbdPS2Df@Lew9.com",
            external_id: "cXjFRqAsdyU0E",
            organization_code: "8-lo2anS",
            private_money_ids: ["dbe3a82f-0273-475e-8a38-327e1e741cb3", "f6294826-30a5-4b2d-9fa7-548ac8c250e5", "c1197029-5aef-4b41-b1f6-79678d085486", "0febff67-1e30-4488-b17a-305ac560f915", "f1f54057-d437-4e87-b51e-e3e721399452", "d8d8c3c4-4427-4018-a721-325719f76952", "eff2b518-343f-4fd4-8ef7-24ef166f2894", "46c6e4e2-ba9b-46d2-b3a2-bbc23d0ddf31"],
            can_topup_private_money_ids: ["fa9903e1-d518-4dba-92fc-f0316212a0e1", "d1cb3965-bb50-4982-a4bc-d7be06b3c52e"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetShop | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetShop({
            shop_id: "b58bdc9e-cf00-4263-9e88-03398893fe81"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            can_topup_private_money_ids: ["25511a3f-3e13-4418-87c8-6ecc4abd7d9f", "43cdf22b-cee3-43f7-b93c-6114b0c1e7e5", "4b6a413f-b52b-44a2-a9a6-5f6cf879ece0", "ef216b5b-4ac1-45fb-a79d-d19679035435", "78a72291-3cca-4703-b200-5937c905817a", "68603c92-af00-448b-bfc5-846579cbf64f", "5e55068a-b537-456e-9544-c0843ee377ba", "1d41d571-be9e-4b91-b8a9-58582d3697ea"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            private_money_ids: ["32ce3eb4-7b7e-4199-aabd-88360004ca20", "fc08f02e-4eb4-4596-87b3-018994554824", "4fcff106-3ac1-4ac9-8c4f-6456cfb3dd05", "7d6c7d94-19dc-4861-8a8a-19c006b9a482", "ba3acb6b-c78a-49f9-b138-48079090a091", "b9299022-ce3e-48df-91c8-26571846c299", "ffd4427c-2e4b-45a5-9b94-ed7b4ee5a882"],
            can_topup_private_money_ids: ["d0feeb21-3288-4a13-8e72-688155249be9", "3a8d1763-e210-47a3-b35e-014d0d2f8f14", "98829d42-795e-4d7f-9fd1-afd942de89a8", "9aba5da3-35bb-4657-b34b-bd5bf85d005f", "b8cf7af4-4f8b-4276-ae78-f76f201e3428", "1ffb49fb-8f51-4dca-af1d-d905313401cc", "5f03aee0-193c-480f-90ec-42839e67ef99"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            external_id: "oM94TQVFchkaV",
            private_money_ids: ["c52b80c0-2edb-4658-b101-57217e340f31", "9a4b970a-b28b-41ca-a3a0-4670e085eeda", "cac84123-6de6-4928-9aa4-15216305fd55", "b253dd8e-7748-47b2-9522-53f34b90944b", "38917c9f-bf22-43c3-b816-e26eb363eed2"],
            can_topup_private_money_ids: ["f4209b75-e2d3-4a83-af4c-fece9d8a32c1", "d86d2f06-a48d-47c0-8f80-fa17e64b968c", "c239786c-9712-4ff9-b47c-d0511443c1fd"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            email: "R5kzfucn7L@ZFZw.com",
            external_id: "RIJGw",
            private_money_ids: ["3c2673c6-3fad-40d3-9a1e-9f32fc540395", "ff6e7971-b082-4855-b394-738cd2141f4c"],
            can_topup_private_money_ids: ["b78e762b-648b-4e9b-9b66-8df27a9d9784", "d84350f0-ddf1-4d8d-af6c-54298f6f5572", "43db52c5-e154-4695-ae8d-255ce9ad55e7", "f9b47dfa-9833-43cf-9039-0ef7cba3540b", "00ae89ec-0a79-4d51-b013-e9d4b6d7e457", "4947b266-49d2-4386-a134-e694a4233cbe", "7ede11c7-32f8-4e32-b11d-24db44e9d57a", "2d10321a-084d-4737-9d57-c25b92a2d549", "24ab2d51-1747-4344-b3d0-26730e2263a6"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            tel: "041532823",
            email: "JPjtVj6RA5@8jW2.com",
            external_id: "8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9",
            private_money_ids: ["e70ee64d-e3ee-4adf-9561-4a1c238c49cd", "0ffbe9cb-9313-4deb-9c2a-e3500303db54", "ddd347a1-bb54-464f-8ee8-2b34cb2af84b", "ea5a7507-7107-4eec-8ffc-6c5f016985c6"],
            can_topup_private_money_ids: ["03a3844b-a696-42dc-8404-6e6771c1b992", "07fa8ff4-29e9-46f8-b3f1-8ae056a21f0e", "b0f2c120-dc56-4454-99f2-85f23af3eead", "e81cadc0-cc7d-4583-bb53-cf48b18e06fb", "f878931b-435a-4ab1-81e1-4230a505e6f4", "9618f5bf-3d7a-451c-a634-a0bf067e0bac", "fe0ea1c5-107a-485c-94eb-b0803e2963fc", "988c2625-f713-46a6-b5e8-057b44059489"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            address: "UCHWp85qyAYWUJWst1yIlHOt0XiM6Q",
            tel: "028-29403",
            email: "wcuCesxkTg@eUlI.com",
            external_id: "lQ",
            private_money_ids: ["044f78bb-3f5c-4f4c-b59c-d9bd25a34c74", "d4d77200-4937-41b8-b052-7db82534965e", "cd35634c-b012-4135-96f2-844cd5b35d78", "25b46301-bf9f-40a6-ba7e-b15ec62e6a9a", "1b6b80d2-d789-4283-9112-ae3c239f496c", "3d687756-6c75-478a-a42f-ceb08fda47dc"],
            can_topup_private_money_ids: ["f4e91560-95e4-44eb-adc8-9481ec8c27d7", "d0d0f59b-e927-4764-90dd-b5d5d648ee98", "0c428be9-6d00-408a-ba56-47acec9262bd", "60427415-8ac4-4daa-b1e5-8748ed87ee5e", "bf947585-3450-4006-a3d1-88d6bace351b", "7f990cfc-5274-4799-919d-702360279503", "e535e5ec-c34f-41ea-ba53-c51c3cf57fa9", "a6a340c2-78b3-4731-854d-027fc0cb01f8", "af007490-9f15-4706-b15b-58b82d951fd3", "fe26f421-8dd8-49f0-b8bb-f2536d49f4c8"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            postal_code: "8270952",
            address: "7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtCHCm7yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1F",
            tel: "06553785381",
            email: "eJGFXqwAY7@5stQ.com",
            external_id: "6SAh4",
            private_money_ids: ["d978f180-9631-491c-a63d-81dab892eae9", "d6d5c35f-6040-403a-a916-91e9fc0d0f06", "39fc0438-722d-465d-a002-820d408d3e87", "7a698f34-91df-4276-b99c-b3e20fcaa026", "85f3e311-5301-4787-8a81-bc841da68364", "a8770ab1-bb4a-4173-a6b0-527fbc4099ea", "1931a982-302d-42e0-9285-9612838a8b8a", "f9035960-030d-40b3-b298-66c060aa9082"],
            can_topup_private_money_ids: ["34603e2a-9fe2-4723-bb3e-1ff7f7a68774", "03768797-1b01-491f-9778-06f9e097c16e", "0a83d8b2-1c46-4926-8629-0388136bf4c1", "c8beb20b-b960-4e06-a82a-573110bd6f14", "0ba9d37a-8bae-4781-95e5-c6a6b72c7be4", "e329a4c7-d345-4ff0-a6ae-e99a3a6afa7d", "76a59d4e-16fa-48f4-99df-388351c64472", "0e087e5a-e3c8-413c-b41c-d6413d769b00", "95f952f9-4cf4-45d4-8878-b7560cc72ef6", "5e3ea71d-215b-49a6-a8c8-3d2b956ccf56"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateShop | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateShop({
            shop_id: "9431edff-9699-4885-a610-9882ba1a9aff",
            name: "jPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4AzeoZEOYuu1RyqlWwyCNVezTDDCUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQA",
            postal_code: "398-1709",
            address: "orDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLqhFbA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd8wILW6Ubji6nDVo",
            tel: "0774-20-059",
            email: "96vZBp0zzw@PN5D.com",
            external_id: "Ihcy9tg03Xeu2UN5sKl9",
            private_money_ids: ["88bec65e-920f-4b88-a9e6-d8596416fbca", "9d2677ad-e260-4e16-b8ed-e6e141b54ccf", "d81ac31f-c699-42b8-b4bd-9d57a0f6b903", "9b030e23-0012-4497-9d4b-a82045aa9416", "61e0d203-2ce9-4827-a5f1-1b06fc773d70", "fbd664fa-873f-47f9-a0c6-9efb2db88577", "26e110e3-037e-48b0-9b3b-9b16b210b24f", "c2b1d8fc-4406-4fb5-b191-d85dcaef2044", "5f6bac48-fa96-4f07-b60c-21e369c2353c"],
            can_topup_private_money_ids: ["d12f3564-27f9-4b93-bf56-ee5a298b9285"]
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneys | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneys());
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneys | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneys({
            per_page: 6974
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneys | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneys({
            page: 5052,
            per_page: 4123
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneys | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneys({
            organization_code: "tTuM---aZN9aTZ-MA",
            page: 1155,
            per_page: 6447
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3",
            page: 5793
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3",
            per_page: 5146,
            page: 3933
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3",
            from: "2017-02-13T07:26:46.000000+09:00",
            to: "2021-06-14T09:22:09.000000+09:00"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3",
            from: "2024-10-07T19:38:47.000000+09:00",
            to: "2022-05-13T14:00:57.000000+09:00",
            page: 664
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneyOrganizationSummaries | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneyOrganizationSummaries({
            private_money_id: "f1e4c67b-6a1e-48bd-b8ad-f3fa5edf66e3",
            from: "2017-01-07T03:37:37.000000+09:00",
            to: "2021-03-09T08:14:52.000000+09:00",
            per_page: 1011,
            page: 9063
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneySummary | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneySummary({
            private_money_id: "42a7f23a-a42e-4869-a4e0-dabd55d62134"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneySummary | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneySummary({
            private_money_id: "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            to: "2019-09-22T18:13:39.000000+09:00"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetPrivateMoneySummary | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetPrivateMoneySummary({
            private_money_id: "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            from: "2017-07-11T16:06:28.000000+09:00",
            to: "2025-02-26T20:51:59.000000+09:00"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            per_page: 747
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            page: 4788,
            per_page: 3230
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            to: "2023-05-18T03:40:36.000000+09:00",
            page: 98,
            per_page: 8628
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            from: "2021-12-11T13:55:36.000000+09:00",
            to: "2017-08-04T23:53:04.000000+09:00",
            page: 871,
            per_page: 7447
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            is_modified: false,
            from: "2017-03-20T18:43:40.000000+09:00",
            to: "2022-01-10T18:31:31.000000+09:00",
            page: 2617,
            per_page: 8552
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            type: "topup",
            is_modified: false,
            from: "2021-03-10T07:04:16.000000+09:00",
            to: "2023-03-24T04:08:23.000000+09:00",
            page: 3629,
            per_page: 9468
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            receiver_customer_id: "5c421ddb-2ec2-4151-aa5f-b756286454f3",
            type: "transfer",
            is_modified: true,
            from: "2022-01-21T20:27:48.000000+09:00",
            to: "2019-01-17T11:23:36.000000+09:00",
            page: 1451,
            per_page: 337
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCustomerTransactions | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCustomerTransactions({
            private_money_id: "858b7023-f5ad-4464-be2e-78cf66c776d2",
            sender_customer_id: "52e615af-620f-49e4-b435-1612eae3cae2",
            receiver_customer_id: "e529f655-971c-4e21-829b-e8ff521c8f9c",
            type: "expire",
            is_modified: true,
            from: "2018-02-21T20:35:15.000000+09:00",
            to: "2019-03-19T01:38:33.000000+09:00",
            page: 8624,
            per_page: 3664
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetBulkTransaction | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetBulkTransaction({
            bulk_transaction_id: "5c65e3b7-2dbe-4ec4-b728-3f77919c9012"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCashtray | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCashtray({
            private_money_id: "8738977b-d0a7-40dc-ab0e-d06cd9c1140a",
            shop_id: "632a6f14-61ce-4f5a-a32d-b6bf43239a50",
            amount: 2694.0
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCashtray | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCashtray({
            private_money_id: "8738977b-d0a7-40dc-ab0e-d06cd9c1140a",
            shop_id: "632a6f14-61ce-4f5a-a32d-b6bf43239a50",
            amount: 2694.0,
            expires_in: 1306
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCashtray | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCashtray({
            private_money_id: "8738977b-d0a7-40dc-ab0e-d06cd9c1140a",
            shop_id: "632a6f14-61ce-4f5a-a32d-b6bf43239a50",
            amount: 2694.0,
            description: "6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqwdkkgvqZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgt",
            expires_in: 4756
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCashtray | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCashtray({
            cashtray_id: "6ffc1909-7db0-4204-a1bb-cb8d34fbac58"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CancelCashtray | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CancelCashtray({
            cashtray_id: "0f80fc8d-c1bb-4aed-ac30-e2c9956b5938"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCashtray | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCashtray({
            cashtray_id: "41d733be-7b95-46aa-bd8c-07c1af1d11b7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCashtray | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCashtray({
            cashtray_id: "41d733be-7b95-46aa-bd8c-07c1af1d11b7",
            expires_in: 3444
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCashtray | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCashtray({
            cashtray_id: "41d733be-7b95-46aa-bd8c-07c1af1d11b7",
            description: "Yx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHDiw8sqMTw9CGMrpupnZP3tXLGdI4BQeMKNjNC6v4LdJ9q0ni",
            expires_in: 8586
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCashtray | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCashtray({
            cashtray_id: "41d733be-7b95-46aa-bd8c-07c1af1d11b7",
            amount: 8769.0,
            description: "uGHUnCvc4A5HlCo2a7OllUlOCGYapVIyu0AtoOYT3d8xXDGe31wijgcuuWSuuP7qXIDVYzNjNiLWADYEWxDRpy",
            expires_in: 6948
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            dest_private_money_id: "bcee1bfd-ed22-41dd-b453-0cc82078c876"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            minimum_number_for_combination_purchase: 9505,
            dest_private_money_id: "cc0019dc-31d7-4a5b-88f8-5bfb51056444"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            applicable_shop_ids: ["b0a8d9aa-9de2-4675-b1ba-5a475ad39a1c", "7b0b6b98-8ecf-404b-b86f-fccb86d227a5", "7eea259d-4107-4aa6-80cd-d03fd1b06a3f", "598cbe7d-dfa0-4f3c-bb1f-fa3399677542", "02a0026b-281a-4969-be00-01d117819591", "3c2928b5-d4ca-4c43-9e17-5c5f173ad2ce", "5d0c8acc-f655-4951-9b50-79ff7d7c995c", "88acca8a-1970-4944-8fef-8f47074678ce", "5498d392-c96b-4d3e-8142-7aef8de697db", "547abd03-864b-4c9c-b81e-c7840dc20654"],
            minimum_number_for_combination_purchase: 1,
            dest_private_money_id: "c5ceed8a-5e1e-4bc1-82f7-f71d43b1b47d"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["2ad69cb3-d505-41b3-95a6-7d5709caa7e5", "6dfd75d3-36fa-4a86-addb-704bf78db143", "b5a0feda-ba77-4d76-9a95-1c34a5963650", "e6a6c6f7-569d-461b-9285-3b4ab0784d4f", "26b52019-50be-4e92-b908-4349d77741dc", "aa0e20bd-a563-47d5-8cd7-577a16995380", "5841b09a-cef2-45ce-a527-e7cd70e25541", "e7f06a92-35c3-4b49-b4ed-40bfa72a0a4f"],
            minimum_number_for_combination_purchase: 2522,
            dest_private_money_id: "32222384-d81e-4e86-a70b-88313b5adf10"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            applicable_days_of_week: [],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["37acd32b-97e6-495a-8bfd-4d237d474223", "49ac488b-319d-48d5-9474-2768b53ad86a"],
            minimum_number_for_combination_purchase: 6365,
            dest_private_money_id: "359f84b8-905d-4c04-837d-f654b577fba6"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [5, 4, 0, 5, 3, 4, 3, 2, 3, 2],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["56260dfe-e53b-43c4-9c5d-76d9e43c4e68", "882e18c6-d6f5-41d8-97a3-ed7d52f4771f", "b25dc22b-4ef4-40db-9e61-81784acc2632", "d73f728d-dbbc-43e7-887f-fa5ea4adf837", "0746d0dd-478e-45ed-af23-8923040dae14", "740b5173-4e11-4a83-a354-751f0dbfb859", "dfa085c1-167b-4e96-bf67-c4536a42f89b"],
            minimum_number_for_combination_purchase: 101,
            dest_private_money_id: "e0152705-6921-4e31-9a4c-545d87c59916"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [3],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["b2d61b97-75b4-421a-80c4-7ddc3cefb19b", "27f88b11-757d-466c-ac25-94c50eb88691", "fcd34466-c32d-4424-974c-8f73d7b5f528", "066b3c78-cdb2-410c-a6af-70981e3e22b1", "9df357d0-6805-47ea-9649-80bbc77003eb", "c7f91d23-7835-4dcc-8782-9923b3fd19a1", "325daf5f-9bc6-48c5-8e63-0b28c9652299", "28e75288-18aa-4f5a-991d-4506b4de995a", "dbf040d2-52c0-4bb1-8b9d-b5a50159c23f", "60ff4c85-26b1-46c0-8899-a1d572a3d92b"],
            minimum_number_for_combination_purchase: 1245,
            dest_private_money_id: "68b32f93-e840-4f4c-9b8e-11675cffebc7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            subject: "money",
            amount_based_point_rules: [],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [3, 4, 2, 0, 3],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["52f06997-fd01-4fa8-ae0e-31a41f3259ba", "a5d5c233-f199-4fbe-8912-cab60349e26e", "80ab9cdd-bb5f-4b3d-a439-3e32c0abb7cc"],
            minimum_number_for_combination_purchase: 7499,
            dest_private_money_id: "6f9d35ac-b3ef-4994-826e-395dcbe0c45e"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["3650d330-7cd0-4433-b353-98e8cc74bb89", "8342edb5-c732-4a3f-a46a-8fab11a066c4", "30369978-12b2-4ec5-a9b8-e371e4290132", "b31b2f2a-ce83-4254-aca9-cb30b0c4f00c", "6760cf36-0749-449d-9356-35ba1523511e", "0d1a4759-9415-47f7-b49a-2729c54cdc7a", "e89f8d8d-1fdd-49e2-b719-663c6414d191", "6b8c34cb-ca7f-47af-8b92-494ce3c8d56a"],
            minimum_number_for_combination_purchase: 7489,
            dest_private_money_id: "ab1039b2-e3b6-4e67-bd01-8cb9bfe3ecbc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            point_expires_in_days: 1861,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [0, 1, 6, 4],
            applicable_time_ranges: [],
            applicable_shop_ids: ["6fcd0637-1a03-4db3-a6d4-e932107deb65", "4c6387eb-240a-43e6-ac1d-bf621a82689a", "5827ed3f-8014-414d-9cf9-3ff0ec4873d3", "d0d0be1d-ecad-4995-afa1-3e27c71f6fa0", "2347b45a-c441-4920-873d-06162182d40a", "fa26d772-906d-4fbe-bdfd-d013ac4eb976", "2aa7a54f-024f-4611-ad56-65f1ac5637c0", "59db9979-9bb7-40e0-8c3a-45a34de15ac8", "1dffee8c-2f49-42ad-9b54-be907fbce7f0"],
            minimum_number_for_combination_purchase: 4676,
            dest_private_money_id: "88eec353-0963-404d-bc35-a7f09ca11384"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            point_expires_at: "2015-12-13T06:10:50.000000+09:00",
            point_expires_in_days: 7307,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [2],
            applicable_time_ranges: [],
            applicable_shop_ids: ["add03fba-0492-49c2-8b07-47b5ca11280d", "3bd75df9-4a89-4cbf-88f4-7e6fd983fb00", "a26201fc-d9df-4d47-a6f9-0a2961ae9d5b", "13a31be3-dd0a-4fca-8059-0f61b3f196b2", "d6fb51c7-428e-4e9e-8913-6b4b57791519"],
            minimum_number_for_combination_purchase: 2471,
            dest_private_money_id: "44f828dd-e99b-478e-9143-094779c185c2"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            status: "enabled",
            point_expires_at: "2019-11-23T01:58:37.000000+09:00",
            point_expires_in_days: 1455,
            is_exclusive: false,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [3, 4, 4, 0, 3, 3, 3, 3, 3, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["29ceb9e2-66b0-4173-a955-2444819197e1", "bb23b1ed-ba7d-488c-91e9-1826287c864a", "2c62f046-e726-47e1-9df6-f3663e88d9c9", "6531fdbc-7307-4c6c-b39d-c1515df1e987"],
            minimum_number_for_combination_purchase: 5099,
            dest_private_money_id: "cc1376f3-7bb1-4755-b840-8c76afe408c0"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            description: "8uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BTtK3VwbUSgXIGfDP",
            status: "disabled",
            point_expires_at: "2021-05-05T04:49:17.000000+09:00",
            point_expires_in_days: 73,
            is_exclusive: false,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [],
            applicable_days_of_week: [0, 5, 5, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["77cac10a-0efa-4078-8cd5-912cd1e5462f"],
            minimum_number_for_combination_purchase: 2403,
            dest_private_money_id: "5fee99d5-965c-4224-8d65-71e797c88bb7"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check CreateCampaign | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.CreateCampaign({
            name: "o7rEN4eiDqYJVEg5UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl",
            private_money_id: "fca20cdc-9935-402c-80c3-513ee450bff7",
            starts_at: "2022-04-08T08:43:16.000000+09:00",
            ends_at: "2018-04-12T07:29:19.000000+09:00",
            priority: 1703,
            event: "topup",
            bear_point_shop_id: "cb89aef7-14a1-4b38-885b-d5e39aaf2bc0",
            description: "IU7UKhxLe1FMHoh3041czvU7tiTGNYlDyRk3aGMps1HN2Oi8GzWre6yIHCge3KvTMWtvAOdqc6t46b4EgFIpDVk2sqQhlAUNF0Kr6ekdB7WSGlsT24mzzvf0uixfzg",
            status: "disabled",
            point_expires_at: "2017-01-17T19:11:13.000000+09:00",
            point_expires_in_days: 9110,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [0, 2],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["fc612f19-ce7d-4498-986a-c4817ab4ad81", "1fd2d61c-57f0-42af-afd9-6c4f0a6f1ceb", "a06f8986-ad4c-4959-89e2-865d2bcb784a", "6bc800cd-d834-4e9c-b618-39d926408a47", "42b90eae-1012-45a0-9d4b-09445d51b7ca", "a75f1021-3e25-4517-9a1e-232aa4bffe56", "421ac151-f1c1-499d-8e08-1ef414278d66", "31df5926-9d9b-48d5-a4c8-bfa892def5d6", "7f8aec63-b0f3-4e6f-b5fc-22f842435a96", "999db258-2a33-4986-b849-31b99cf2ba12"],
            minimum_number_for_combination_purchase: 196,
            dest_private_money_id: "a90102a6-c3c8-4813-a45a-f95fbabc1747"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCampaigns | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCampaigns({
            private_money_id: "669526bd-b46b-4f45-97ce-e8096107883f"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCampaigns | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCampaigns({
            private_money_id: "669526bd-b46b-4f45-97ce-e8096107883f",
            per_page: 4115
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCampaigns | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCampaigns({
            private_money_id: "669526bd-b46b-4f45-97ce-e8096107883f",
            page: 6274,
            per_page: 2516
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check ListCampaigns | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.ListCampaigns({
            private_money_id: "669526bd-b46b-4f45-97ce-e8096107883f",
            is_ongoing: false,
            page: 4250,
            per_page: 7009
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check GetCampaign | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.GetCampaign({
            campaign_id: "f974f14b-ae41-4378-aa8c-5424c36d46fc"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 0', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842"
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 1', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            minimum_number_for_combination_purchase: 9363
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 2', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            applicable_shop_ids: ["f2bcd61f-3140-43ee-863f-4c2f8612d090", "d5ffbc7c-1563-4c82-b112-28ed7ae0d045", "6cba6886-bca6-4e98-8e05-b966f21c7ec4", "cf38186f-873b-4595-bff2-793173e7a6fa", "745815ac-72e7-4121-b73f-299f5714979a", "668091c6-9439-4d78-b378-f58238ef7122", "6c78358b-c81a-4a5a-b320-90406427e2d2", "76a15335-40e2-4e4c-8a2b-e2500d755f28", "10854c12-7668-40c8-b3c6-b423dab2bf17", "072efcc5-e191-4fab-9ec8-6e9b4623c193"],
            minimum_number_for_combination_purchase: 5253
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 3', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["7f5b4cfc-b91d-4efa-a22b-c2115474eec0", "d62dc566-a455-423b-bab4-e91abe016263", "a431e811-1cc4-47b6-8ef3-1ded715daac1", "c6dc8ce5-09e0-4ea0-b12b-f6eeeb62af67", "c685e3db-1fe9-4de6-aa4e-3e69166b1398", "8fffe46b-d52c-4271-847e-3fab9f76bb45", "7eaa259f-ef33-4a4f-90ab-d8a1ef2b2df5"],
            minimum_number_for_combination_purchase: 3045
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 4', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            applicable_days_of_week: [0, 0, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["82633b59-d0e8-4e2f-8ef7-7446a7bdf8d7", "c2628355-1841-45cb-8f3c-f0ee2f5845d7", "f670a0ec-b0e8-49ee-8cfc-1ce1a0a044a9", "5c482a30-01ec-4911-9e59-3703918782ce"],
            minimum_number_for_combination_purchase: 5518
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 5', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [5, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["67f5fd7b-dfe0-444d-af56-2593fdd0fe11", "702d78e4-a4e2-42e9-b911-268073c1df0e", "6c85a93a-e947-4c35-9d61-4bc514d4175b", "a433e62a-dd33-4271-b4a4-07e78e1e7754", "c8c6acce-2139-4686-a633-d0235bf6f4e7", "f4db1748-32ca-4ca2-a741-90aa4134197c", "7927a83b-bf31-499a-99c6-122c3ee7d9e6"],
            minimum_number_for_combination_purchase: 9900
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 6', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [3, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["d9a49ed9-a5d2-4656-8da2-2bb165148f46", "9e4226a5-2bc2-4075-b9db-36d63eebc5f1", "139192f7-56ed-4bcb-85b2-acdbf238309e", "3cda7088-ae21-4f51-8557-cffbe6fd3b27", "a51afa27-6a2b-44c5-aaeb-ace1bb9d51c9", "2d0bda7f-4a90-4127-ab1c-8b128a59d0b3"],
            minimum_number_for_combination_purchase: 1231
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 7', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [],
            applicable_days_of_week: [1, 5, 2, 5],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["b2b5347f-3dee-45fe-9987-28591704198b"],
            minimum_number_for_combination_purchase: 8531
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 8', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            is_exclusive: true,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [0, 6, 3, 3, 4, 1],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["c4b26b74-204b-4251-941b-66b05e033f40", "6712c789-397c-4907-8a61-bb013c7daa34", "6dd382a6-f328-41cf-a85f-b52e96af3ddd", "18812301-742e-41df-9011-d791fd666ca8", "dd0d6adf-0bf2-4d29-8108-42bbadf94b74", "31660132-df74-4702-b26f-88a7c1a3f836", "9df0cddf-209f-40b5-92ba-95cddd36ae3c", "00e4c100-1234-4f53-9999-2d79b76ac8d7"],
            minimum_number_for_combination_purchase: 1233
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 9', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            point_expires_in_days: 8018,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [5, 6, 0, 6, 0],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["73418d14-63b0-4d4a-a1ab-f4a572bac82d", "10fbde16-8169-4703-9770-b9690f347df0", "743ec068-fed8-463b-b182-c69e046001a4", "eadd80dc-6b4e-4167-ba66-9f353844c9e0", "7ad4175b-a2a4-4a96-8258-32aab9de6946", "37be2954-b58e-44d9-813d-fbc8bfca02a7"],
            minimum_number_for_combination_purchase: 6367
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 10', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            point_expires_at: "2016-07-16T10:21:54.000000+09:00",
            point_expires_in_days: 6670,
            is_exclusive: false,
            subject: "money",
            amount_based_point_rules: [],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["986fca13-5b49-49e1-9b39-e5ce1048732f", "791bab2f-5b2d-459b-8054-6418f6311583", "70558772-486b-4c99-8d65-765d1ce71041", "498e60ac-7da6-4360-85cb-5b983e1c99ce", "1ed88b18-cf55-41ac-96fb-54dedde26117", "ed84bc07-3425-45b2-bc83-c40ba730935f", "d9ef008f-a98e-4795-917c-fba147f5b620", "a0fc238f-9801-4b71-8e0d-45aff2fb1617", "924a619c-b04d-40f2-9d10-f0f732906334", "2614624a-2fdc-4be1-b909-b6de7cee6e32"],
            minimum_number_for_combination_purchase: 3978
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 11', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            status: "enabled",
            point_expires_at: "2016-01-11T03:33:20.000000+09:00",
            point_expires_in_days: 1511,
            is_exclusive: false,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [2, 1],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["895862cb-9ea3-4a35-947f-cb1fdfc51cb7", "48384398-7c44-4ae3-b86f-c94f3f1de7a9", "0d7840f3-12f4-4cb1-be4d-59bb946245cd", "263ca4dc-bc9a-467f-b9df-45288f11ccd0", "47d9671c-6e28-416d-89ea-6e817d064b52", "f875eac4-e93b-448c-ab91-e53d679aedb7"],
            minimum_number_for_combination_purchase: 7591
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 12', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            description: "J779k3qO5Tt2uQGKACRqDnzgekX1v8dvD0ApeDNVXLZhDHmMPohPl8",
            status: "enabled",
            point_expires_at: "2017-07-22T05:54:26.000000+09:00",
            point_expires_in_days: 3477,
            is_exclusive: false,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [],
            applicable_days_of_week: [2, 5, 3, 5, 6, 6, 6, 1, 2, 2],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["c8ce0eee-cb1f-4898-9ea1-85a193fcad76", "b751f21b-bff4-485e-bd63-d40f222cfdaf", "7e30a252-fb13-4468-af7d-f5c1b10384e6", "ce82faf9-b166-4cd0-9b1a-d705e9f25e76", "8e421271-e7e2-4d67-a21b-d3c08d01636b"],
            minimum_number_for_combination_purchase: 6239
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 13', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            event: "external-transaction",
            description: "VyEBxJxS2dp5fON6g3h5b1QYmVCtk78JxdSgtNZkgpDcQrvPvYu9rBGsdWvnLsp",
            status: "disabled",
            point_expires_at: "2017-08-07T15:50:35.000000+09:00",
            point_expires_in_days: 6833,
            is_exclusive: true,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [2, 5, 6, 5, 5, 5, 5, 3, 2],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["315c1fc9-5a91-4285-b27c-6715d823dc21"],
            minimum_number_for_combination_purchase: 6331
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 14', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            priority: 7691,
            event: "payment",
            description: "lVAxUxxoJ3m2cOYFN3fJYwkLiuasNI3TQ4Ubb8U4Lo",
            status: "disabled",
            point_expires_at: "2024-05-31T11:06:55.000000+09:00",
            point_expires_in_days: 1552,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [],
            applicable_days_of_week: [0, 4, 1, 6, 1, 4, 4, 1, 1, 1],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["1e49acde-42e6-4877-a09b-59ce28a82ec0", "1dbd11b1-7494-4611-872c-1a1420b9df3c", "206da1c2-bd3d-4b87-98f2-e03b57aa3914", "9291ec88-ff62-42d3-ae15-565d3084afc4"],
            minimum_number_for_combination_purchase: 9418
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 15', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            ends_at: "2023-12-01T22:23:29.000000+09:00",
            priority: 7686,
            event: "external-transaction",
            description: "lYLOis5sBRV50E243Lt7Q0CkQGlHLmFUomkHrvNClWFSWTgMn5wd60p6qorRSF9NZATmhqoWmfQbT09Lp665rg0d7eGITtIklkYFTO7OJe9dSEOGALN8S7z1KForIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05T",
            status: "disabled",
            point_expires_at: "2020-11-06T03:15:04.000000+09:00",
            point_expires_in_days: 4896,
            is_exclusive: true,
            subject: "all",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [3, 2, 0, 1, 1, 6, 4],
            applicable_time_ranges: [{
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }, {
                    "from": "12:00",
                    "to": "23:59"
                }],
            applicable_shop_ids: ["7e43749a-5b91-4108-aa9f-bdd074f5661b", "05dec096-345e-43c6-949f-7c4dade97f04", "f85d3647-aa1a-41e5-b6a7-e91382a6c0f7", "14edd5d6-abcd-459f-a5c0-74dac1f0781d"],
            minimum_number_for_combination_purchase: 9696
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 16', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            starts_at: "2020-05-06T12:53:36.000000+09:00",
            ends_at: "2019-11-24T04:36:48.000000+09:00",
            priority: 9823,
            event: "external-transaction",
            description: "vyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvRJLln3CmVmPz2bcH2xVBHTbiOHYbzW7EYCf76ToHcl8dtzcqD6rqwGDVRdojGjigHpZl8InHQBhMIrdZJT9MnQgGfElkSct56tB3QvYjy8mUgDyXQYOSshpG",
            status: "disabled",
            point_expires_at: "2017-09-19T17:34:21.000000+09:00",
            point_expires_in_days: 3506,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [],
            applicable_time_ranges: [],
            applicable_shop_ids: ["d15d3b23-df99-41a0-8b8b-f9a98e80cf6a", "74f519ad-bc22-4f14-82a5-4dc81236f1fc", "1ab9e96e-582c-4dc1-ad64-546c230b35cb", "c071107f-4991-4a69-9c8b-51d59157551d", "b204f66a-ac82-4308-b9ca-23713a6d0569"],
            minimum_number_for_combination_purchase: 3836
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
test('Check UpdateCampaign | 17', async () => {
    let status = 400;
    try {
        const response = await client.send(new index_1.UpdateCampaign({
            campaign_id: "52cf11d1-4c88-4fd7-aa8e-324368ec2842",
            name: "anI8FqIXqzelGZDONUAJfl2",
            starts_at: "2018-03-24T18:41:04.000000+09:00",
            ends_at: "2017-05-01T16:30:12.000000+09:00",
            priority: 3767,
            event: "payment",
            description: "W0Gkt1pOBZosxcU6W1vFMKN952VUdQ3t63Wpysg20fNhPhFK8mUwq4sfxVOVqIgogobrlTBvrKruisPGcjRxKz0hnHtPEmOFzy",
            status: "disabled",
            point_expires_at: "2022-04-15T18:36:40.000000+09:00",
            point_expires_in_days: 5966,
            is_exclusive: true,
            subject: "money",
            amount_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "subject_more_than_or_equal": 1000,
                    "subject_less_than": 5000
                }],
            product_based_point_rules: [{
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }, {
                    "point_amount": 5,
                    "point_amount_unit": "percent",
                    "product_code": "4912345678904",
                    "is_multiply_by_count": true,
                    "required_count": 2
                }],
            applicable_days_of_week: [4],
            applicable_time_ranges: [],
            applicable_shop_ids: ["9aeda297-0da1-408d-a7da-43b4395e855b", "ac3be3a5-040d-4a98-93e3-3266a8aaa72b", "44b608ec-176b-4c2c-86b2-04cabec46e9d", "75872be4-c66a-4a7a-8991-dfee625d876a", "7f3823c0-f082-44cf-beef-a06aa0a0e846"],
            minimum_number_for_combination_purchase: 5784
        }));
        status = response.code;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            status = e.response.status;
        }
    }
    expect(typeof status).toBe('number');
    expect(status).not.toBe(400);
});
